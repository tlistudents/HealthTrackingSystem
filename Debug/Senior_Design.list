
Senior_Design.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f67c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002a54  0800f820  0800f820  0001f820  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012274  08012274  00030210  2**0
                  CONTENTS
  4 .ARM          00000008  08012274  08012274  00022274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801227c  0801227c  00030210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801227c  0801227c  0002227c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012280  08012280  00022280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  08012284  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001dd4  20000210  08012494  00030210  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001fe4  08012494  00031fe4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001babc  00000000  00000000  00030240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034fe  00000000  00000000  0004bcfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001490  00000000  00000000  0004f200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001370  00000000  00000000  00050690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019c05  00000000  00000000  00051a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019efb  00000000  00000000  0006b605  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095880  00000000  00000000  00085500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011ad80  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e40  00000000  00000000  0011add4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000210 	.word	0x20000210
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f804 	.word	0x0800f804

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000214 	.word	0x20000214
 80001dc:	0800f804 	.word	0x0800f804

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a4 	b.w	8000ff8 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468c      	mov	ip, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f040 8083 	bne.w	8000e4a <__udivmoddi4+0x116>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d947      	bls.n	8000dda <__udivmoddi4+0xa6>
 8000d4a:	fab2 f282 	clz	r2, r2
 8000d4e:	b142      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	f1c2 0020 	rsb	r0, r2, #32
 8000d54:	fa24 f000 	lsr.w	r0, r4, r0
 8000d58:	4091      	lsls	r1, r2
 8000d5a:	4097      	lsls	r7, r2
 8000d5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d60:	4094      	lsls	r4, r2
 8000d62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d66:	0c23      	lsrs	r3, r4, #16
 8000d68:	fbbc f6f8 	udiv	r6, ip, r8
 8000d6c:	fa1f fe87 	uxth.w	lr, r7
 8000d70:	fb08 c116 	mls	r1, r8, r6, ip
 8000d74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d78:	fb06 f10e 	mul.w	r1, r6, lr
 8000d7c:	4299      	cmp	r1, r3
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x60>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d86:	f080 8119 	bcs.w	8000fbc <__udivmoddi4+0x288>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 8116 	bls.w	8000fbc <__udivmoddi4+0x288>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000da0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	d909      	bls.n	8000dc0 <__udivmoddi4+0x8c>
 8000dac:	193c      	adds	r4, r7, r4
 8000dae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db2:	f080 8105 	bcs.w	8000fc0 <__udivmoddi4+0x28c>
 8000db6:	45a6      	cmp	lr, r4
 8000db8:	f240 8102 	bls.w	8000fc0 <__udivmoddi4+0x28c>
 8000dbc:	3802      	subs	r0, #2
 8000dbe:	443c      	add	r4, r7
 8000dc0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	2600      	movs	r6, #0
 8000dca:	b11d      	cbz	r5, 8000dd4 <__udivmoddi4+0xa0>
 8000dcc:	40d4      	lsrs	r4, r2
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	b902      	cbnz	r2, 8000dde <__udivmoddi4+0xaa>
 8000ddc:	deff      	udf	#255	; 0xff
 8000dde:	fab2 f282 	clz	r2, r2
 8000de2:	2a00      	cmp	r2, #0
 8000de4:	d150      	bne.n	8000e88 <__udivmoddi4+0x154>
 8000de6:	1bcb      	subs	r3, r1, r7
 8000de8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dec:	fa1f f887 	uxth.w	r8, r7
 8000df0:	2601      	movs	r6, #1
 8000df2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000df6:	0c21      	lsrs	r1, r4, #16
 8000df8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dfc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e00:	fb08 f30c 	mul.w	r3, r8, ip
 8000e04:	428b      	cmp	r3, r1
 8000e06:	d907      	bls.n	8000e18 <__udivmoddi4+0xe4>
 8000e08:	1879      	adds	r1, r7, r1
 8000e0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0xe2>
 8000e10:	428b      	cmp	r3, r1
 8000e12:	f200 80e9 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e16:	4684      	mov	ip, r0
 8000e18:	1ac9      	subs	r1, r1, r3
 8000e1a:	b2a3      	uxth	r3, r4
 8000e1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e28:	fb08 f800 	mul.w	r8, r8, r0
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	d907      	bls.n	8000e40 <__udivmoddi4+0x10c>
 8000e30:	193c      	adds	r4, r7, r4
 8000e32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x10a>
 8000e38:	45a0      	cmp	r8, r4
 8000e3a:	f200 80d9 	bhi.w	8000ff0 <__udivmoddi4+0x2bc>
 8000e3e:	4618      	mov	r0, r3
 8000e40:	eba4 0408 	sub.w	r4, r4, r8
 8000e44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e48:	e7bf      	b.n	8000dca <__udivmoddi4+0x96>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d909      	bls.n	8000e62 <__udivmoddi4+0x12e>
 8000e4e:	2d00      	cmp	r5, #0
 8000e50:	f000 80b1 	beq.w	8000fb6 <__udivmoddi4+0x282>
 8000e54:	2600      	movs	r6, #0
 8000e56:	e9c5 0100 	strd	r0, r1, [r5]
 8000e5a:	4630      	mov	r0, r6
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	fab3 f683 	clz	r6, r3
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	d14a      	bne.n	8000f00 <__udivmoddi4+0x1cc>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d302      	bcc.n	8000e74 <__udivmoddi4+0x140>
 8000e6e:	4282      	cmp	r2, r0
 8000e70:	f200 80b8 	bhi.w	8000fe4 <__udivmoddi4+0x2b0>
 8000e74:	1a84      	subs	r4, r0, r2
 8000e76:	eb61 0103 	sbc.w	r1, r1, r3
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	468c      	mov	ip, r1
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	d0a8      	beq.n	8000dd4 <__udivmoddi4+0xa0>
 8000e82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e86:	e7a5      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e90:	4097      	lsls	r7, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9a:	40d9      	lsrs	r1, r3
 8000e9c:	4330      	orrs	r0, r6
 8000e9e:	0c03      	lsrs	r3, r0, #16
 8000ea0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ea4:	fa1f f887 	uxth.w	r8, r7
 8000ea8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb0:	fb06 f108 	mul.w	r1, r6, r8
 8000eb4:	4299      	cmp	r1, r3
 8000eb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eba:	d909      	bls.n	8000ed0 <__udivmoddi4+0x19c>
 8000ebc:	18fb      	adds	r3, r7, r3
 8000ebe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ec2:	f080 808d 	bcs.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ec6:	4299      	cmp	r1, r3
 8000ec8:	f240 808a 	bls.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	443b      	add	r3, r7
 8000ed0:	1a5b      	subs	r3, r3, r1
 8000ed2:	b281      	uxth	r1, r0
 8000ed4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000edc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee0:	fb00 f308 	mul.w	r3, r0, r8
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	d907      	bls.n	8000ef8 <__udivmoddi4+0x1c4>
 8000ee8:	1879      	adds	r1, r7, r1
 8000eea:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eee:	d273      	bcs.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef0:	428b      	cmp	r3, r1
 8000ef2:	d971      	bls.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4439      	add	r1, r7
 8000ef8:	1acb      	subs	r3, r1, r3
 8000efa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000efe:	e778      	b.n	8000df2 <__udivmoddi4+0xbe>
 8000f00:	f1c6 0c20 	rsb	ip, r6, #32
 8000f04:	fa03 f406 	lsl.w	r4, r3, r6
 8000f08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f0c:	431c      	orrs	r4, r3
 8000f0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f12:	fa01 f306 	lsl.w	r3, r1, r6
 8000f16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f1e:	431f      	orrs	r7, r3
 8000f20:	0c3b      	lsrs	r3, r7, #16
 8000f22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f26:	fa1f f884 	uxth.w	r8, r4
 8000f2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f32:	fb09 fa08 	mul.w	sl, r9, r8
 8000f36:	458a      	cmp	sl, r1
 8000f38:	fa02 f206 	lsl.w	r2, r2, r6
 8000f3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0x220>
 8000f42:	1861      	adds	r1, r4, r1
 8000f44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f48:	d248      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4a:	458a      	cmp	sl, r1
 8000f4c:	d946      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f52:	4421      	add	r1, r4
 8000f54:	eba1 010a 	sub.w	r1, r1, sl
 8000f58:	b2bf      	uxth	r7, r7
 8000f5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f66:	fb00 f808 	mul.w	r8, r0, r8
 8000f6a:	45b8      	cmp	r8, r7
 8000f6c:	d907      	bls.n	8000f7e <__udivmoddi4+0x24a>
 8000f6e:	19e7      	adds	r7, r4, r7
 8000f70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f74:	d22e      	bcs.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f76:	45b8      	cmp	r8, r7
 8000f78:	d92c      	bls.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	4427      	add	r7, r4
 8000f7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f82:	eba7 0708 	sub.w	r7, r7, r8
 8000f86:	fba0 8902 	umull	r8, r9, r0, r2
 8000f8a:	454f      	cmp	r7, r9
 8000f8c:	46c6      	mov	lr, r8
 8000f8e:	4649      	mov	r1, r9
 8000f90:	d31a      	bcc.n	8000fc8 <__udivmoddi4+0x294>
 8000f92:	d017      	beq.n	8000fc4 <__udivmoddi4+0x290>
 8000f94:	b15d      	cbz	r5, 8000fae <__udivmoddi4+0x27a>
 8000f96:	ebb3 020e 	subs.w	r2, r3, lr
 8000f9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fa2:	40f2      	lsrs	r2, r6
 8000fa4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fa8:	40f7      	lsrs	r7, r6
 8000faa:	e9c5 2700 	strd	r2, r7, [r5]
 8000fae:	2600      	movs	r6, #0
 8000fb0:	4631      	mov	r1, r6
 8000fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e70b      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e9      	b.n	8000d94 <__udivmoddi4+0x60>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6fd      	b.n	8000dc0 <__udivmoddi4+0x8c>
 8000fc4:	4543      	cmp	r3, r8
 8000fc6:	d2e5      	bcs.n	8000f94 <__udivmoddi4+0x260>
 8000fc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fcc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7df      	b.n	8000f94 <__udivmoddi4+0x260>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e7d2      	b.n	8000f7e <__udivmoddi4+0x24a>
 8000fd8:	4660      	mov	r0, ip
 8000fda:	e78d      	b.n	8000ef8 <__udivmoddi4+0x1c4>
 8000fdc:	4681      	mov	r9, r0
 8000fde:	e7b9      	b.n	8000f54 <__udivmoddi4+0x220>
 8000fe0:	4666      	mov	r6, ip
 8000fe2:	e775      	b.n	8000ed0 <__udivmoddi4+0x19c>
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	e74a      	b.n	8000e7e <__udivmoddi4+0x14a>
 8000fe8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fec:	4439      	add	r1, r7
 8000fee:	e713      	b.n	8000e18 <__udivmoddi4+0xe4>
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	443c      	add	r4, r7
 8000ff4:	e724      	b.n	8000e40 <__udivmoddi4+0x10c>
 8000ff6:	bf00      	nop

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <maxim_max30102_write_reg>:
* \param[in]    uch_addr    - register address
* \param[in]    uch_data    - register data
*
* \retval       true on success
*/
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af04      	add	r7, sp, #16
 8001002:	4603      	mov	r3, r0
 8001004:	460a      	mov	r2, r1
 8001006:	71fb      	strb	r3, [r7, #7]
 8001008:	4613      	mov	r3, r2
 800100a:	71bb      	strb	r3, [r7, #6]
//  char ach_i2c_data[2];
//  ach_i2c_data[0]=uch_addr;
//  ach_i2c_data[1]=uch_data;

	//HAL_i2c_write(I2C_WRITE_ADDR,	uch_addr,	1,	&uch_data);
	HAL_I2C_GetState(&hi2c2);
 800100c:	480a      	ldr	r0, [pc, #40]	; (8001038 <maxim_max30102_write_reg+0x3c>)
 800100e:	f006 fd8b 	bl	8007b28 <HAL_I2C_GetState>
	//DMP库驱动  slave_addr 地址 发送时需要左移1位最后一位或上读写位
	HAL_I2C_Mem_Write(&hi2c2, I2C_WRITE_ADDR, uch_addr, 1, &uch_data, 1, HAL_MAX_DELAY);
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	b29a      	uxth	r2, r3
 8001016:	f04f 33ff 	mov.w	r3, #4294967295
 800101a:	9302      	str	r3, [sp, #8]
 800101c:	2301      	movs	r3, #1
 800101e:	9301      	str	r3, [sp, #4]
 8001020:	1dbb      	adds	r3, r7, #6
 8001022:	9300      	str	r3, [sp, #0]
 8001024:	2301      	movs	r3, #1
 8001026:	21ae      	movs	r1, #174	; 0xae
 8001028:	4803      	ldr	r0, [pc, #12]	; (8001038 <maxim_max30102_write_reg+0x3c>)
 800102a:	f006 fa5d 	bl	80074e8 <HAL_I2C_Mem_Write>
	return 1;
 800102e:	2301      	movs	r3, #1
}
 8001030:	4618      	mov	r0, r3
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20001e54 	.word	0x20001e54

0800103c <maxim_max30102_read_reg>:
* \param[in]    uch_addr    - register address
* \param[out]   puch_data    - pointer that stores the register data
*
* \retval       true on success
*/
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af04      	add	r7, sp, #16
 8001042:	4603      	mov	r3, r0
 8001044:	6039      	str	r1, [r7, #0]
 8001046:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_GetState(&hi2c2);
 8001048:	480a      	ldr	r0, [pc, #40]	; (8001074 <maxim_max30102_read_reg+0x38>)
 800104a:	f006 fd6d 	bl	8007b28 <HAL_I2C_GetState>
	//DMP库驱动  slave_addr 地址 发送时需要左移1位最后一位或上读写位
	HAL_I2C_Mem_Read(&hi2c2, I2C_READ_ADDR, uch_addr, 1, puch_data, 1, HAL_MAX_DELAY);
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	b29a      	uxth	r2, r3
 8001052:	f04f 33ff 	mov.w	r3, #4294967295
 8001056:	9302      	str	r3, [sp, #8]
 8001058:	2301      	movs	r3, #1
 800105a:	9301      	str	r3, [sp, #4]
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	9300      	str	r3, [sp, #0]
 8001060:	2301      	movs	r3, #1
 8001062:	21af      	movs	r1, #175	; 0xaf
 8001064:	4803      	ldr	r0, [pc, #12]	; (8001074 <maxim_max30102_read_reg+0x38>)
 8001066:	f006 fb39 	bl	80076dc <HAL_I2C_Mem_Read>
//  {
//    *puch_data=(uint8_t) ch_i2c_data;
//    return 1;
//  }
//  else
    return 1;
 800106a:	2301      	movs	r3, #1
}
 800106c:	4618      	mov	r0, r3
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20001e54 	.word	0x20001e54

08001078 <maxim_max30102_init>:
*
* \param        None
*
* \retval       true on success
*/
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  if(!maxim_max30102_write_reg(REG_INTR_ENABLE_1,0xc0)) // INTR setting
 800107c:	21c0      	movs	r1, #192	; 0xc0
 800107e:	2002      	movs	r0, #2
 8001080:	f7ff ffbc 	bl	8000ffc <maxim_max30102_write_reg>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d101      	bne.n	800108e <maxim_max30102_init+0x16>
    return 0;
 800108a:	2300      	movs	r3, #0
 800108c:	e063      	b.n	8001156 <maxim_max30102_init+0xde>
  if(!maxim_max30102_write_reg(REG_INTR_ENABLE_2,0x00))
 800108e:	2100      	movs	r1, #0
 8001090:	2003      	movs	r0, #3
 8001092:	f7ff ffb3 	bl	8000ffc <maxim_max30102_write_reg>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d101      	bne.n	80010a0 <maxim_max30102_init+0x28>
    return 0;
 800109c:	2300      	movs	r3, #0
 800109e:	e05a      	b.n	8001156 <maxim_max30102_init+0xde>
  if(!maxim_max30102_write_reg(REG_FIFO_WR_PTR,0x00))  //FIFO_WR_PTR[4:0]
 80010a0:	2100      	movs	r1, #0
 80010a2:	2004      	movs	r0, #4
 80010a4:	f7ff ffaa 	bl	8000ffc <maxim_max30102_write_reg>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d101      	bne.n	80010b2 <maxim_max30102_init+0x3a>
    return 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	e051      	b.n	8001156 <maxim_max30102_init+0xde>
  if(!maxim_max30102_write_reg(REG_OVF_COUNTER,0x00))  //OVF_COUNTER[4:0]
 80010b2:	2100      	movs	r1, #0
 80010b4:	2005      	movs	r0, #5
 80010b6:	f7ff ffa1 	bl	8000ffc <maxim_max30102_write_reg>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d101      	bne.n	80010c4 <maxim_max30102_init+0x4c>
    return 0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	e048      	b.n	8001156 <maxim_max30102_init+0xde>
  if(!maxim_max30102_write_reg(REG_FIFO_RD_PTR,0x00))  //FIFO_RD_PTR[4:0]
 80010c4:	2100      	movs	r1, #0
 80010c6:	2006      	movs	r0, #6
 80010c8:	f7ff ff98 	bl	8000ffc <maxim_max30102_write_reg>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d101      	bne.n	80010d6 <maxim_max30102_init+0x5e>
    return 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	e03f      	b.n	8001156 <maxim_max30102_init+0xde>
  if(!maxim_max30102_write_reg(REG_FIFO_CONFIG,0x0f))  //sample avg = 1, fifo rollover=false, fifo almost full = 17
 80010d6:	210f      	movs	r1, #15
 80010d8:	2008      	movs	r0, #8
 80010da:	f7ff ff8f 	bl	8000ffc <maxim_max30102_write_reg>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d101      	bne.n	80010e8 <maxim_max30102_init+0x70>
    return 0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	e036      	b.n	8001156 <maxim_max30102_init+0xde>
  if(!maxim_max30102_write_reg(REG_MODE_CONFIG,0x03))   //0x02 for Red only, 0x03 for SpO2 mode 0x07 multimode LED
 80010e8:	2103      	movs	r1, #3
 80010ea:	2009      	movs	r0, #9
 80010ec:	f7ff ff86 	bl	8000ffc <maxim_max30102_write_reg>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d101      	bne.n	80010fa <maxim_max30102_init+0x82>
    return 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	e02d      	b.n	8001156 <maxim_max30102_init+0xde>
  if(!maxim_max30102_write_reg(REG_SPO2_CONFIG,0x27))  // SPO2_ADC range = 4096nA, SPO2 sample rate (100 Hz), LED pulseWidth (400uS)
 80010fa:	2127      	movs	r1, #39	; 0x27
 80010fc:	200a      	movs	r0, #10
 80010fe:	f7ff ff7d 	bl	8000ffc <maxim_max30102_write_reg>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d101      	bne.n	800110c <maxim_max30102_init+0x94>
    return 0;
 8001108:	2300      	movs	r3, #0
 800110a:	e024      	b.n	8001156 <maxim_max30102_init+0xde>

  if(!maxim_max30102_write_reg(REG_LED1_PA,0x24))   //Choose value for ~ 7mA for LED1
 800110c:	2124      	movs	r1, #36	; 0x24
 800110e:	200c      	movs	r0, #12
 8001110:	f7ff ff74 	bl	8000ffc <maxim_max30102_write_reg>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d101      	bne.n	800111e <maxim_max30102_init+0xa6>
    return 0;
 800111a:	2300      	movs	r3, #0
 800111c:	e01b      	b.n	8001156 <maxim_max30102_init+0xde>
  if(!maxim_max30102_write_reg(REG_LED2_PA,0x24))   // Choose value for ~ 7mA for LED2
 800111e:	2124      	movs	r1, #36	; 0x24
 8001120:	200d      	movs	r0, #13
 8001122:	f7ff ff6b 	bl	8000ffc <maxim_max30102_write_reg>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d101      	bne.n	8001130 <maxim_max30102_init+0xb8>
    return 0;
 800112c:	2300      	movs	r3, #0
 800112e:	e012      	b.n	8001156 <maxim_max30102_init+0xde>
  if(!maxim_max30102_write_reg(REG_PILOT_PA,0x7f))   // Choose value for ~ 25mA for Pilot LED
 8001130:	217f      	movs	r1, #127	; 0x7f
 8001132:	2010      	movs	r0, #16
 8001134:	f7ff ff62 	bl	8000ffc <maxim_max30102_write_reg>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d101      	bne.n	8001142 <maxim_max30102_init+0xca>
    return 0;
 800113e:	2300      	movs	r3, #0
 8001140:	e009      	b.n	8001156 <maxim_max30102_init+0xde>
  if(!maxim_max30102_write_reg(REG_TEMP_CONFIG,0x01))   // En temp
 8001142:	2101      	movs	r1, #1
 8001144:	2021      	movs	r0, #33	; 0x21
 8001146:	f7ff ff59 	bl	8000ffc <maxim_max30102_write_reg>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d101      	bne.n	8001154 <maxim_max30102_init+0xdc>
    return 0;
 8001150:	2300      	movs	r3, #0
 8001152:	e000      	b.n	8001156 <maxim_max30102_init+0xde>
  return 1;
 8001154:	2301      	movs	r3, #1
}
 8001156:	4618      	mov	r0, r3
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <maxim_max30102_read_fifo>:
* \param[out]   *pun_red_led   - pointer that stores the red LED reading data
* \param[out]   *pun_ir_led    - pointer that stores the IR LED reading data
*
* \retval       true on success
*/
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b08a      	sub	sp, #40	; 0x28
 8001160:	af04      	add	r7, sp, #16
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
  uint32_t un_temp;
  unsigned char uch_temp;
  *pun_red_led=0;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
  *pun_ir_led=0;
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
  unsigned char ach_i2c_data[6];

  //read and clear status register
  maxim_max30102_read_reg(REG_INTR_STATUS_1, &uch_temp);
 8001172:	f107 0313 	add.w	r3, r7, #19
 8001176:	4619      	mov	r1, r3
 8001178:	2000      	movs	r0, #0
 800117a:	f7ff ff5f 	bl	800103c <maxim_max30102_read_reg>
  maxim_max30102_read_reg(REG_INTR_STATUS_2, &uch_temp);
 800117e:	f107 0313 	add.w	r3, r7, #19
 8001182:	4619      	mov	r1, r3
 8001184:	2001      	movs	r0, #1
 8001186:	f7ff ff59 	bl	800103c <maxim_max30102_read_reg>

  ach_i2c_data[0]=REG_FIFO_DATA;
 800118a:	2307      	movs	r3, #7
 800118c:	733b      	strb	r3, [r7, #12]

	HAL_I2C_GetState(&hi2c2);
 800118e:	482f      	ldr	r0, [pc, #188]	; (800124c <maxim_max30102_read_fifo+0xf0>)
 8001190:	f006 fcca 	bl	8007b28 <HAL_I2C_GetState>
	//DMP库驱动  slave_addr 地址 发送时需要左移1位最后一位或上读写位
	HAL_I2C_Mem_Read(&hi2c2, I2C_READ_ADDR, REG_FIFO_DATA, 1, ach_i2c_data, 6, HAL_MAX_DELAY);
 8001194:	f04f 33ff 	mov.w	r3, #4294967295
 8001198:	9302      	str	r3, [sp, #8]
 800119a:	2306      	movs	r3, #6
 800119c:	9301      	str	r3, [sp, #4]
 800119e:	f107 030c 	add.w	r3, r7, #12
 80011a2:	9300      	str	r3, [sp, #0]
 80011a4:	2301      	movs	r3, #1
 80011a6:	2207      	movs	r2, #7
 80011a8:	21af      	movs	r1, #175	; 0xaf
 80011aa:	4828      	ldr	r0, [pc, #160]	; (800124c <maxim_max30102_read_fifo+0xf0>)
 80011ac:	f006 fa96 	bl	80076dc <HAL_I2C_Mem_Read>



  un_temp=(unsigned char) ach_i2c_data[0];
 80011b0:	7b3b      	ldrb	r3, [r7, #12]
 80011b2:	617b      	str	r3, [r7, #20]
  un_temp<<=16;
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	041b      	lsls	r3, r3, #16
 80011b8:	617b      	str	r3, [r7, #20]
  *pun_red_led+=un_temp;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	441a      	add	r2, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	601a      	str	r2, [r3, #0]
  un_temp=(unsigned char) ach_i2c_data[1];
 80011c6:	7b7b      	ldrb	r3, [r7, #13]
 80011c8:	617b      	str	r3, [r7, #20]
  un_temp<<=8;
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	021b      	lsls	r3, r3, #8
 80011ce:	617b      	str	r3, [r7, #20]
  *pun_red_led+=un_temp;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	441a      	add	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	601a      	str	r2, [r3, #0]
  un_temp=(unsigned char) ach_i2c_data[2];
 80011dc:	7bbb      	ldrb	r3, [r7, #14]
 80011de:	617b      	str	r3, [r7, #20]
  *pun_red_led+=un_temp;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	441a      	add	r2, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	601a      	str	r2, [r3, #0]

  un_temp=(unsigned char) ach_i2c_data[3];
 80011ec:	7bfb      	ldrb	r3, [r7, #15]
 80011ee:	617b      	str	r3, [r7, #20]
  un_temp<<=16;
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	041b      	lsls	r3, r3, #16
 80011f4:	617b      	str	r3, [r7, #20]
  *pun_ir_led+=un_temp;
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	441a      	add	r2, r3
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	601a      	str	r2, [r3, #0]
  un_temp=(unsigned char) ach_i2c_data[4];
 8001202:	7c3b      	ldrb	r3, [r7, #16]
 8001204:	617b      	str	r3, [r7, #20]
  un_temp<<=8;
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	021b      	lsls	r3, r3, #8
 800120a:	617b      	str	r3, [r7, #20]
  *pun_ir_led+=un_temp;
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	441a      	add	r2, r3
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	601a      	str	r2, [r3, #0]
  un_temp=(unsigned char) ach_i2c_data[5];
 8001218:	7c7b      	ldrb	r3, [r7, #17]
 800121a:	617b      	str	r3, [r7, #20]
  *pun_ir_led+=un_temp;
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	441a      	add	r2, r3
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	601a      	str	r2, [r3, #0]
  *pun_red_led&=0x03FFFF;  //Mask MSB [23:18]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f3c3 0211 	ubfx	r2, r3, #0, #18
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	601a      	str	r2, [r3, #0]
  *pun_ir_led&=0x03FFFF;  //Mask MSB [23:18]
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f3c3 0211 	ubfx	r2, r3, #0, #18
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	601a      	str	r2, [r3, #0]


  return 1;
 8001240:	2301      	movs	r3, #1
}
 8001242:	4618      	mov	r0, r3
 8001244:	3718      	adds	r7, #24
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20001e54 	.word	0x20001e54

08001250 <maxim_max30102_reset>:
*
* \param        None
*
* \retval       true on success
*/
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
    if(!maxim_max30102_write_reg(REG_MODE_CONFIG,0x40))
 8001254:	2140      	movs	r1, #64	; 0x40
 8001256:	2009      	movs	r0, #9
 8001258:	f7ff fed0 	bl	8000ffc <maxim_max30102_write_reg>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d101      	bne.n	8001266 <maxim_max30102_reset+0x16>
        return 0;
 8001262:	2300      	movs	r3, #0
 8001264:	e000      	b.n	8001268 <maxim_max30102_reset+0x18>
    else
        return 1;
 8001266:	2301      	movs	r3, #1
}
 8001268:	4618      	mov	r0, r3
 800126a:	bd80      	pop	{r7, pc}

0800126c <Get_Key_value>:
								2-The KEY1 button is pressed
								3-The KEY2 button is pressed
								4-The WK_UP button is pressed
******************************************************************************/
u8 Get_Key_value(u8 mode)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	71fb      	strb	r3, [r7, #7]
    static u8 key_up=1;
    if(mode==1)key_up=1;
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d102      	bne.n	8001282 <Get_Key_value+0x16>
 800127c:	4b32      	ldr	r3, [pc, #200]	; (8001348 <Get_Key_value+0xdc>)
 800127e:	2201      	movs	r2, #1
 8001280:	701a      	strb	r2, [r3, #0]
    if(key_up&&(KEY1==0||KEY2==0||KEY3==0))
 8001282:	4b31      	ldr	r3, [pc, #196]	; (8001348 <Get_Key_value+0xdc>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d03b      	beq.n	8001302 <Get_Key_value+0x96>
 800128a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800128e:	482f      	ldr	r0, [pc, #188]	; (800134c <Get_Key_value+0xe0>)
 8001290:	f005 ff84 	bl	800719c <HAL_GPIO_ReadPin>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d00f      	beq.n	80012ba <Get_Key_value+0x4e>
 800129a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800129e:	482b      	ldr	r0, [pc, #172]	; (800134c <Get_Key_value+0xe0>)
 80012a0:	f005 ff7c 	bl	800719c <HAL_GPIO_ReadPin>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d007      	beq.n	80012ba <Get_Key_value+0x4e>
 80012aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012ae:	4827      	ldr	r0, [pc, #156]	; (800134c <Get_Key_value+0xe0>)
 80012b0:	f005 ff74 	bl	800719c <HAL_GPIO_ReadPin>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d123      	bne.n	8001302 <Get_Key_value+0x96>
    {
    	HAL_Delay(10);
 80012ba:	200a      	movs	r0, #10
 80012bc:	f005 fb3e 	bl	800693c <HAL_Delay>
        key_up=0;
 80012c0:	4b21      	ldr	r3, [pc, #132]	; (8001348 <Get_Key_value+0xdc>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	701a      	strb	r2, [r3, #0]
        if(KEY1==0)       return KEY1_PRES;
 80012c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012ca:	4820      	ldr	r0, [pc, #128]	; (800134c <Get_Key_value+0xe0>)
 80012cc:	f005 ff66 	bl	800719c <HAL_GPIO_ReadPin>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d101      	bne.n	80012da <Get_Key_value+0x6e>
 80012d6:	2301      	movs	r3, #1
 80012d8:	e031      	b.n	800133e <Get_Key_value+0xd2>
        else if(KEY2==0)  return KEY2_PRES;
 80012da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012de:	481b      	ldr	r0, [pc, #108]	; (800134c <Get_Key_value+0xe0>)
 80012e0:	f005 ff5c 	bl	800719c <HAL_GPIO_ReadPin>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d101      	bne.n	80012ee <Get_Key_value+0x82>
 80012ea:	2302      	movs	r3, #2
 80012ec:	e027      	b.n	800133e <Get_Key_value+0xd2>
        else if(KEY3==0)  return KEY3_PRES;
 80012ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012f2:	4816      	ldr	r0, [pc, #88]	; (800134c <Get_Key_value+0xe0>)
 80012f4:	f005 ff52 	bl	800719c <HAL_GPIO_ReadPin>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d11d      	bne.n	800133a <Get_Key_value+0xce>
 80012fe:	2303      	movs	r3, #3
 8001300:	e01d      	b.n	800133e <Get_Key_value+0xd2>
    }else if(KEY1==1&&KEY2==1&&KEY3==1)key_up=1;
 8001302:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001306:	4811      	ldr	r0, [pc, #68]	; (800134c <Get_Key_value+0xe0>)
 8001308:	f005 ff48 	bl	800719c <HAL_GPIO_ReadPin>
 800130c:	4603      	mov	r3, r0
 800130e:	2b01      	cmp	r3, #1
 8001310:	d114      	bne.n	800133c <Get_Key_value+0xd0>
 8001312:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001316:	480d      	ldr	r0, [pc, #52]	; (800134c <Get_Key_value+0xe0>)
 8001318:	f005 ff40 	bl	800719c <HAL_GPIO_ReadPin>
 800131c:	4603      	mov	r3, r0
 800131e:	2b01      	cmp	r3, #1
 8001320:	d10c      	bne.n	800133c <Get_Key_value+0xd0>
 8001322:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001326:	4809      	ldr	r0, [pc, #36]	; (800134c <Get_Key_value+0xe0>)
 8001328:	f005 ff38 	bl	800719c <HAL_GPIO_ReadPin>
 800132c:	4603      	mov	r3, r0
 800132e:	2b01      	cmp	r3, #1
 8001330:	d104      	bne.n	800133c <Get_Key_value+0xd0>
 8001332:	4b05      	ldr	r3, [pc, #20]	; (8001348 <Get_Key_value+0xdc>)
 8001334:	2201      	movs	r2, #1
 8001336:	701a      	strb	r2, [r3, #0]
 8001338:	e000      	b.n	800133c <Get_Key_value+0xd0>
        if(KEY1==0)       return KEY1_PRES;
 800133a:	bf00      	nop
    return 0;
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000001 	.word	0x20000001
 800134c:	40020400 	.word	0x40020400

08001350 <Display_On_Off>:
 * @function   :Turn on/off display
 * @parameters : n/a
 * @retvalue   :n/a
******************************************************************************/
void Display_On_Off(unsigned char switch_value)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	71fb      	strb	r3, [r7, #7]
	if((screen_off == 1) && (switch_value == 2))
 800135a:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <Display_On_Off+0x54>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d10b      	bne.n	800137a <Display_On_Off+0x2a>
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	2b02      	cmp	r3, #2
 8001366:	d108      	bne.n	800137a <Display_On_Off+0x2a>
	{
		//Refresh();
		//turn on display
		//__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 300); //change to this for final
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 500); //turn on display
 8001368:	4b0f      	ldr	r3, [pc, #60]	; (80013a8 <Display_On_Off+0x58>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001370:	639a      	str	r2, [r3, #56]	; 0x38
		screen_off = 0;
 8001372:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <Display_On_Off+0x54>)
 8001374:	2200      	movs	r2, #0
 8001376:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0); //turn off display
		Refresh();
		screen_off = 1;
	}

}
 8001378:	e00f      	b.n	800139a <Display_On_Off+0x4a>
	else if((screen_off == 0) && switch_value == 2)
 800137a:	4b0a      	ldr	r3, [pc, #40]	; (80013a4 <Display_On_Off+0x54>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d10b      	bne.n	800139a <Display_On_Off+0x4a>
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	2b02      	cmp	r3, #2
 8001386:	d108      	bne.n	800139a <Display_On_Off+0x4a>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0); //turn off display
 8001388:	4b07      	ldr	r3, [pc, #28]	; (80013a8 <Display_On_Off+0x58>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2200      	movs	r2, #0
 800138e:	639a      	str	r2, [r3, #56]	; 0x38
		Refresh();
 8001390:	f001 ff5c 	bl	800324c <Refresh>
		screen_off = 1;
 8001394:	4b03      	ldr	r3, [pc, #12]	; (80013a4 <Display_On_Off+0x54>)
 8001396:	2201      	movs	r2, #1
 8001398:	701a      	strb	r2, [r3, #0]
}
 800139a:	bf00      	nop
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	20000000 	.word	0x20000000
 80013a8:	20001f44 	.word	0x20001f44
 80013ac:	00000000 	.word	0x00000000

080013b0 <TemperF>:
	temperatureUS = temperature*1.8+32;
	*/
}

float TemperF(float temperature)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	ed87 0a01 	vstr	s0, [r7, #4]
	float F = temperature * 1.8 + 32;
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f7ff f8cc 	bl	8000558 <__aeabi_f2d>
 80013c0:	a310      	add	r3, pc, #64	; (adr r3, 8001404 <TemperF+0x54>)
 80013c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c6:	f7ff f91f 	bl	8000608 <__aeabi_dmul>
 80013ca:	4602      	mov	r2, r0
 80013cc:	460b      	mov	r3, r1
 80013ce:	4610      	mov	r0, r2
 80013d0:	4619      	mov	r1, r3
 80013d2:	f04f 0200 	mov.w	r2, #0
 80013d6:	4b0a      	ldr	r3, [pc, #40]	; (8001400 <TemperF+0x50>)
 80013d8:	f7fe ff60 	bl	800029c <__adddf3>
 80013dc:	4602      	mov	r2, r0
 80013de:	460b      	mov	r3, r1
 80013e0:	4610      	mov	r0, r2
 80013e2:	4619      	mov	r1, r3
 80013e4:	f7ff fc08 	bl	8000bf8 <__aeabi_d2f>
 80013e8:	4603      	mov	r3, r0
 80013ea:	60fb      	str	r3, [r7, #12]
	return F;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	ee07 3a90 	vmov	s15, r3
}
 80013f2:	eeb0 0a67 	vmov.f32	s0, s15
 80013f6:	3710      	adds	r7, #16
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	f3af 8000 	nop.w
 8001400:	40400000 	.word	0x40400000
 8001404:	cccccccd 	.word	0xcccccccd
 8001408:	3ffccccc 	.word	0x3ffccccc

0800140c <HeartInt>:
uint32_t un_min, un_max, un_prev_data;  //variables to calculate the on-board LED brightness that reflects the heartbeats
int32_t n_brightness;
float f_temp;

void HeartInt(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b088      	sub	sp, #32
 8001410:	af04      	add	r7, sp, #16
	int i;
	// may need to keep in mind to do reset every time for two sensor?***********
	maxim_max30102_reset(); //resets the MAX30102
 8001412:	f7ff ff1d 	bl	8001250 <maxim_max30102_reset>

	//read and clear status register
	maxim_max30102_read_reg(0,&uch_dummy);
 8001416:	4998      	ldr	r1, [pc, #608]	; (8001678 <HeartInt+0x26c>)
 8001418:	2000      	movs	r0, #0
 800141a:	f7ff fe0f 	bl	800103c <maxim_max30102_read_reg>

	maxim_max30102_init();  //initializes the MAX30102
 800141e:	f7ff fe2b 	bl	8001078 <maxim_max30102_init>

	n_brightness=0;
 8001422:	4b96      	ldr	r3, [pc, #600]	; (800167c <HeartInt+0x270>)
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]

	un_min=0x3FFFF;
 8001428:	4b95      	ldr	r3, [pc, #596]	; (8001680 <HeartInt+0x274>)
 800142a:	4a96      	ldr	r2, [pc, #600]	; (8001684 <HeartInt+0x278>)
 800142c:	601a      	str	r2, [r3, #0]

	un_max=0;
 800142e:	4b96      	ldr	r3, [pc, #600]	; (8001688 <HeartInt+0x27c>)
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]

	n_ir_buffer_length=100; //缓冲长度100存储5秒的样本运行在100sps
 8001434:	4b95      	ldr	r3, [pc, #596]	; (800168c <HeartInt+0x280>)
 8001436:	2264      	movs	r2, #100	; 0x64
 8001438:	601a      	str	r2, [r3, #0]

	for(i=0;i<n_ir_buffer_length;i++)
 800143a:	2300      	movs	r3, #0
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	e03c      	b.n	80014ba <HeartInt+0xae>
	{
		while(HAL_GPIO_ReadPin(HR_GPIO_INT_GPIO_Port,HR_GPIO_INT_Pin)==1){};   //wait until the interrupt pin asserts
 8001440:	bf00      	nop
 8001442:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001446:	4892      	ldr	r0, [pc, #584]	; (8001690 <HeartInt+0x284>)
 8001448:	f005 fea8 	bl	800719c <HAL_GPIO_ReadPin>
 800144c:	4603      	mov	r3, r0
 800144e:	2b01      	cmp	r3, #1
 8001450:	d0f7      	beq.n	8001442 <HeartInt+0x36>

		maxim_max30102_read_fifo((aun_red_buffer+i), (aun_ir_buffer+i));  //read from MAX30102 FIFO
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	4a8f      	ldr	r2, [pc, #572]	; (8001694 <HeartInt+0x288>)
 8001458:	441a      	add	r2, r3
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	498e      	ldr	r1, [pc, #568]	; (8001698 <HeartInt+0x28c>)
 8001460:	440b      	add	r3, r1
 8001462:	4619      	mov	r1, r3
 8001464:	4610      	mov	r0, r2
 8001466:	f7ff fe79 	bl	800115c <maxim_max30102_read_fifo>
			if(un_min>aun_red_buffer[i])
 800146a:	4a8a      	ldr	r2, [pc, #552]	; (8001694 <HeartInt+0x288>)
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001472:	4b83      	ldr	r3, [pc, #524]	; (8001680 <HeartInt+0x274>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	429a      	cmp	r2, r3
 8001478:	d205      	bcs.n	8001486 <HeartInt+0x7a>
		{
			un_min=aun_red_buffer[i];
 800147a:	4a86      	ldr	r2, [pc, #536]	; (8001694 <HeartInt+0x288>)
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001482:	4a7f      	ldr	r2, [pc, #508]	; (8001680 <HeartInt+0x274>)
 8001484:	6013      	str	r3, [r2, #0]
		}

		if(un_max<aun_red_buffer[i])
 8001486:	4a83      	ldr	r2, [pc, #524]	; (8001694 <HeartInt+0x288>)
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800148e:	4b7e      	ldr	r3, [pc, #504]	; (8001688 <HeartInt+0x27c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	429a      	cmp	r2, r3
 8001494:	d905      	bls.n	80014a2 <HeartInt+0x96>
		{
			un_max=aun_red_buffer[i];   //update signal max
 8001496:	4a7f      	ldr	r2, [pc, #508]	; (8001694 <HeartInt+0x288>)
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800149e:	4a7a      	ldr	r2, [pc, #488]	; (8001688 <HeartInt+0x27c>)
 80014a0:	6013      	str	r3, [r2, #0]
		}

		if(Get_Key_value(0)!= 0)
 80014a2:	2000      	movs	r0, #0
 80014a4:	f7ff fee2 	bl	800126c <Get_Key_value>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d10b      	bne.n	80014c6 <HeartInt+0xba>
		{
			break; //中断程序
		}
		HAL_Delay(5);
 80014ae:	2005      	movs	r0, #5
 80014b0:	f005 fa44 	bl	800693c <HAL_Delay>
	for(i=0;i<n_ir_buffer_length;i++)
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	3301      	adds	r3, #1
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	4b74      	ldr	r3, [pc, #464]	; (800168c <HeartInt+0x280>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	68fa      	ldr	r2, [r7, #12]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	dbbd      	blt.n	8001440 <HeartInt+0x34>
 80014c4:	e000      	b.n	80014c8 <HeartInt+0xbc>
			break; //中断程序
 80014c6:	bf00      	nop
	}
	un_prev_data=aun_red_buffer[i];
 80014c8:	4a72      	ldr	r2, [pc, #456]	; (8001694 <HeartInt+0x288>)
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014d0:	4a72      	ldr	r2, [pc, #456]	; (800169c <HeartInt+0x290>)
 80014d2:	6013      	str	r3, [r2, #0]
	maxim_heart_rate_and_oxygen_saturation(aun_ir_buffer, n_ir_buffer_length, aun_red_buffer, &n_sp02, &ch_spo2_valid, &n_heart_rate, &ch_hr_valid);
 80014d4:	4b6d      	ldr	r3, [pc, #436]	; (800168c <HeartInt+0x280>)
 80014d6:	6819      	ldr	r1, [r3, #0]
 80014d8:	4b71      	ldr	r3, [pc, #452]	; (80016a0 <HeartInt+0x294>)
 80014da:	9302      	str	r3, [sp, #8]
 80014dc:	4b71      	ldr	r3, [pc, #452]	; (80016a4 <HeartInt+0x298>)
 80014de:	9301      	str	r3, [sp, #4]
 80014e0:	4b71      	ldr	r3, [pc, #452]	; (80016a8 <HeartInt+0x29c>)
 80014e2:	9300      	str	r3, [sp, #0]
 80014e4:	4b71      	ldr	r3, [pc, #452]	; (80016ac <HeartInt+0x2a0>)
 80014e6:	4a6b      	ldr	r2, [pc, #428]	; (8001694 <HeartInt+0x288>)
 80014e8:	486b      	ldr	r0, [pc, #428]	; (8001698 <HeartInt+0x28c>)
 80014ea:	f002 fad5 	bl	8003a98 <maxim_heart_rate_and_oxygen_saturation>
	if(ch_hr_valid)
 80014ee:	4b6c      	ldr	r3, [pc, #432]	; (80016a0 <HeartInt+0x294>)
 80014f0:	f993 3000 	ldrsb.w	r3, [r3]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	f000 8324 	beq.w	8001b42 <HeartInt+0x736>
	{
		if((n_heart_rate>20) && (n_heart_rate<=30))
 80014fa:	4b6a      	ldr	r3, [pc, #424]	; (80016a4 <HeartInt+0x298>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2b14      	cmp	r3, #20
 8001500:	dd0b      	ble.n	800151a <HeartInt+0x10e>
 8001502:	4b68      	ldr	r3, [pc, #416]	; (80016a4 <HeartInt+0x298>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2b1e      	cmp	r3, #30
 8001508:	dc07      	bgt.n	800151a <HeartInt+0x10e>
		{
			heart_rate = n_heart_rate+35;
 800150a:	4b66      	ldr	r3, [pc, #408]	; (80016a4 <HeartInt+0x298>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	b2db      	uxtb	r3, r3
 8001510:	3323      	adds	r3, #35	; 0x23
 8001512:	b2da      	uxtb	r2, r3
 8001514:	4b66      	ldr	r3, [pc, #408]	; (80016b0 <HeartInt+0x2a4>)
 8001516:	701a      	strb	r2, [r3, #0]
 8001518:	e313      	b.n	8001b42 <HeartInt+0x736>
		}
		else if((n_heart_rate>30) && (n_heart_rate<=40))
 800151a:	4b62      	ldr	r3, [pc, #392]	; (80016a4 <HeartInt+0x298>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2b1e      	cmp	r3, #30
 8001520:	dd0b      	ble.n	800153a <HeartInt+0x12e>
 8001522:	4b60      	ldr	r3, [pc, #384]	; (80016a4 <HeartInt+0x298>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2b28      	cmp	r3, #40	; 0x28
 8001528:	dc07      	bgt.n	800153a <HeartInt+0x12e>
		{
			heart_rate = n_heart_rate+25;
 800152a:	4b5e      	ldr	r3, [pc, #376]	; (80016a4 <HeartInt+0x298>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	b2db      	uxtb	r3, r3
 8001530:	3319      	adds	r3, #25
 8001532:	b2da      	uxtb	r2, r3
 8001534:	4b5e      	ldr	r3, [pc, #376]	; (80016b0 <HeartInt+0x2a4>)
 8001536:	701a      	strb	r2, [r3, #0]
 8001538:	e303      	b.n	8001b42 <HeartInt+0x736>
		}
		else if((n_heart_rate>40) && (n_heart_rate<=50))
 800153a:	4b5a      	ldr	r3, [pc, #360]	; (80016a4 <HeartInt+0x298>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2b28      	cmp	r3, #40	; 0x28
 8001540:	dd0b      	ble.n	800155a <HeartInt+0x14e>
 8001542:	4b58      	ldr	r3, [pc, #352]	; (80016a4 <HeartInt+0x298>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2b32      	cmp	r3, #50	; 0x32
 8001548:	dc07      	bgt.n	800155a <HeartInt+0x14e>
		{
			heart_rate = n_heart_rate+15;
 800154a:	4b56      	ldr	r3, [pc, #344]	; (80016a4 <HeartInt+0x298>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	b2db      	uxtb	r3, r3
 8001550:	330f      	adds	r3, #15
 8001552:	b2da      	uxtb	r2, r3
 8001554:	4b56      	ldr	r3, [pc, #344]	; (80016b0 <HeartInt+0x2a4>)
 8001556:	701a      	strb	r2, [r3, #0]
 8001558:	e2f3      	b.n	8001b42 <HeartInt+0x736>
		}
		else if((n_heart_rate>50) && (n_heart_rate<=60))
 800155a:	4b52      	ldr	r3, [pc, #328]	; (80016a4 <HeartInt+0x298>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2b32      	cmp	r3, #50	; 0x32
 8001560:	dd0b      	ble.n	800157a <HeartInt+0x16e>
 8001562:	4b50      	ldr	r3, [pc, #320]	; (80016a4 <HeartInt+0x298>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2b3c      	cmp	r3, #60	; 0x3c
 8001568:	dc07      	bgt.n	800157a <HeartInt+0x16e>
		{
			heart_rate = n_heart_rate+5;
 800156a:	4b4e      	ldr	r3, [pc, #312]	; (80016a4 <HeartInt+0x298>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	b2db      	uxtb	r3, r3
 8001570:	3305      	adds	r3, #5
 8001572:	b2da      	uxtb	r2, r3
 8001574:	4b4e      	ldr	r3, [pc, #312]	; (80016b0 <HeartInt+0x2a4>)
 8001576:	701a      	strb	r2, [r3, #0]
 8001578:	e2e3      	b.n	8001b42 <HeartInt+0x736>
		}
		else if((n_heart_rate>60) && (n_heart_rate<=75))
 800157a:	4b4a      	ldr	r3, [pc, #296]	; (80016a4 <HeartInt+0x298>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2b3c      	cmp	r3, #60	; 0x3c
 8001580:	dd09      	ble.n	8001596 <HeartInt+0x18a>
 8001582:	4b48      	ldr	r3, [pc, #288]	; (80016a4 <HeartInt+0x298>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2b4b      	cmp	r3, #75	; 0x4b
 8001588:	dc05      	bgt.n	8001596 <HeartInt+0x18a>
		{
			heart_rate = n_heart_rate;
 800158a:	4b46      	ldr	r3, [pc, #280]	; (80016a4 <HeartInt+0x298>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	b2da      	uxtb	r2, r3
 8001590:	4b47      	ldr	r3, [pc, #284]	; (80016b0 <HeartInt+0x2a4>)
 8001592:	701a      	strb	r2, [r3, #0]
 8001594:	e2d5      	b.n	8001b42 <HeartInt+0x736>
		}
		else if((n_heart_rate>75) && (n_heart_rate<=85))
 8001596:	4b43      	ldr	r3, [pc, #268]	; (80016a4 <HeartInt+0x298>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2b4b      	cmp	r3, #75	; 0x4b
 800159c:	dd0b      	ble.n	80015b6 <HeartInt+0x1aa>
 800159e:	4b41      	ldr	r3, [pc, #260]	; (80016a4 <HeartInt+0x298>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2b55      	cmp	r3, #85	; 0x55
 80015a4:	dc07      	bgt.n	80015b6 <HeartInt+0x1aa>
		{
			heart_rate = n_heart_rate - 15;
 80015a6:	4b3f      	ldr	r3, [pc, #252]	; (80016a4 <HeartInt+0x298>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	3b0f      	subs	r3, #15
 80015ae:	b2da      	uxtb	r2, r3
 80015b0:	4b3f      	ldr	r3, [pc, #252]	; (80016b0 <HeartInt+0x2a4>)
 80015b2:	701a      	strb	r2, [r3, #0]
 80015b4:	e2c5      	b.n	8001b42 <HeartInt+0x736>
		}
		else if((n_heart_rate>85) && (n_heart_rate<=95))
 80015b6:	4b3b      	ldr	r3, [pc, #236]	; (80016a4 <HeartInt+0x298>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2b55      	cmp	r3, #85	; 0x55
 80015bc:	dd0b      	ble.n	80015d6 <HeartInt+0x1ca>
 80015be:	4b39      	ldr	r3, [pc, #228]	; (80016a4 <HeartInt+0x298>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2b5f      	cmp	r3, #95	; 0x5f
 80015c4:	dc07      	bgt.n	80015d6 <HeartInt+0x1ca>
		{
			heart_rate = n_heart_rate - 25;
 80015c6:	4b37      	ldr	r3, [pc, #220]	; (80016a4 <HeartInt+0x298>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	3b19      	subs	r3, #25
 80015ce:	b2da      	uxtb	r2, r3
 80015d0:	4b37      	ldr	r3, [pc, #220]	; (80016b0 <HeartInt+0x2a4>)
 80015d2:	701a      	strb	r2, [r3, #0]
 80015d4:	e2b5      	b.n	8001b42 <HeartInt+0x736>
		}
		else if((n_heart_rate>95) && (n_heart_rate<=105))
 80015d6:	4b33      	ldr	r3, [pc, #204]	; (80016a4 <HeartInt+0x298>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2b5f      	cmp	r3, #95	; 0x5f
 80015dc:	dd0b      	ble.n	80015f6 <HeartInt+0x1ea>
 80015de:	4b31      	ldr	r3, [pc, #196]	; (80016a4 <HeartInt+0x298>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2b69      	cmp	r3, #105	; 0x69
 80015e4:	dc07      	bgt.n	80015f6 <HeartInt+0x1ea>
		{
			heart_rate = n_heart_rate - 35;
 80015e6:	4b2f      	ldr	r3, [pc, #188]	; (80016a4 <HeartInt+0x298>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	3b23      	subs	r3, #35	; 0x23
 80015ee:	b2da      	uxtb	r2, r3
 80015f0:	4b2f      	ldr	r3, [pc, #188]	; (80016b0 <HeartInt+0x2a4>)
 80015f2:	701a      	strb	r2, [r3, #0]
 80015f4:	e2a5      	b.n	8001b42 <HeartInt+0x736>
		}
		else if((n_heart_rate>105) && (n_heart_rate<=115))
 80015f6:	4b2b      	ldr	r3, [pc, #172]	; (80016a4 <HeartInt+0x298>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2b69      	cmp	r3, #105	; 0x69
 80015fc:	dd0b      	ble.n	8001616 <HeartInt+0x20a>
 80015fe:	4b29      	ldr	r3, [pc, #164]	; (80016a4 <HeartInt+0x298>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	2b73      	cmp	r3, #115	; 0x73
 8001604:	dc07      	bgt.n	8001616 <HeartInt+0x20a>
		{
			heart_rate = n_heart_rate - 45;
 8001606:	4b27      	ldr	r3, [pc, #156]	; (80016a4 <HeartInt+0x298>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	b2db      	uxtb	r3, r3
 800160c:	3b2d      	subs	r3, #45	; 0x2d
 800160e:	b2da      	uxtb	r2, r3
 8001610:	4b27      	ldr	r3, [pc, #156]	; (80016b0 <HeartInt+0x2a4>)
 8001612:	701a      	strb	r2, [r3, #0]
 8001614:	e295      	b.n	8001b42 <HeartInt+0x736>
		}
		else if((n_heart_rate>115) && (n_heart_rate<=125))
 8001616:	4b23      	ldr	r3, [pc, #140]	; (80016a4 <HeartInt+0x298>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2b73      	cmp	r3, #115	; 0x73
 800161c:	dd0b      	ble.n	8001636 <HeartInt+0x22a>
 800161e:	4b21      	ldr	r3, [pc, #132]	; (80016a4 <HeartInt+0x298>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2b7d      	cmp	r3, #125	; 0x7d
 8001624:	dc07      	bgt.n	8001636 <HeartInt+0x22a>
		{
			heart_rate = n_heart_rate - 55;
 8001626:	4b1f      	ldr	r3, [pc, #124]	; (80016a4 <HeartInt+0x298>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	b2db      	uxtb	r3, r3
 800162c:	3b37      	subs	r3, #55	; 0x37
 800162e:	b2da      	uxtb	r2, r3
 8001630:	4b1f      	ldr	r3, [pc, #124]	; (80016b0 <HeartInt+0x2a4>)
 8001632:	701a      	strb	r2, [r3, #0]
 8001634:	e285      	b.n	8001b42 <HeartInt+0x736>
		}
		else if((n_heart_rate>125) && (n_heart_rate<=135))
 8001636:	4b1b      	ldr	r3, [pc, #108]	; (80016a4 <HeartInt+0x298>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2b7d      	cmp	r3, #125	; 0x7d
 800163c:	dd0b      	ble.n	8001656 <HeartInt+0x24a>
 800163e:	4b19      	ldr	r3, [pc, #100]	; (80016a4 <HeartInt+0x298>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2b87      	cmp	r3, #135	; 0x87
 8001644:	dc07      	bgt.n	8001656 <HeartInt+0x24a>
		{
			heart_rate = n_heart_rate - 65;
 8001646:	4b17      	ldr	r3, [pc, #92]	; (80016a4 <HeartInt+0x298>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	b2db      	uxtb	r3, r3
 800164c:	3b41      	subs	r3, #65	; 0x41
 800164e:	b2da      	uxtb	r2, r3
 8001650:	4b17      	ldr	r3, [pc, #92]	; (80016b0 <HeartInt+0x2a4>)
 8001652:	701a      	strb	r2, [r3, #0]
 8001654:	e275      	b.n	8001b42 <HeartInt+0x736>
		}
		else if((n_heart_rate>135) && (n_heart_rate<=145))
 8001656:	4b13      	ldr	r3, [pc, #76]	; (80016a4 <HeartInt+0x298>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2b87      	cmp	r3, #135	; 0x87
 800165c:	dd2a      	ble.n	80016b4 <HeartInt+0x2a8>
 800165e:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <HeartInt+0x298>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2b91      	cmp	r3, #145	; 0x91
 8001664:	dc26      	bgt.n	80016b4 <HeartInt+0x2a8>
		{
			heart_rate = n_heart_rate - 75;
 8001666:	4b0f      	ldr	r3, [pc, #60]	; (80016a4 <HeartInt+0x298>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	b2db      	uxtb	r3, r3
 800166c:	3b4b      	subs	r3, #75	; 0x4b
 800166e:	b2da      	uxtb	r2, r3
 8001670:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <HeartInt+0x2a4>)
 8001672:	701a      	strb	r2, [r3, #0]
 8001674:	e265      	b.n	8001b42 <HeartInt+0x736>
 8001676:	bf00      	nop
 8001678:	20001cce 	.word	0x20001cce
 800167c:	20001cd4 	.word	0x20001cd4
 8001680:	20001cdc 	.word	0x20001cdc
 8001684:	0003ffff 	.word	0x0003ffff
 8001688:	20001cd8 	.word	0x20001cd8
 800168c:	200019a0 	.word	0x200019a0
 8001690:	40020400 	.word	0x40020400
 8001694:	20001b38 	.word	0x20001b38
 8001698:	200019a8 	.word	0x200019a8
 800169c:	20001ce4 	.word	0x20001ce4
 80016a0:	20001ccd 	.word	0x20001ccd
 80016a4:	20001cc8 	.word	0x20001cc8
 80016a8:	20001ccc 	.word	0x20001ccc
 80016ac:	200019a4 	.word	0x200019a4
 80016b0:	2000000c 	.word	0x2000000c
		}
		else if((n_heart_rate>145) && (n_heart_rate<=155))
 80016b4:	4b8d      	ldr	r3, [pc, #564]	; (80018ec <HeartInt+0x4e0>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2b91      	cmp	r3, #145	; 0x91
 80016ba:	dd0b      	ble.n	80016d4 <HeartInt+0x2c8>
 80016bc:	4b8b      	ldr	r3, [pc, #556]	; (80018ec <HeartInt+0x4e0>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2b9b      	cmp	r3, #155	; 0x9b
 80016c2:	dc07      	bgt.n	80016d4 <HeartInt+0x2c8>
		{
			heart_rate = n_heart_rate - 85;
 80016c4:	4b89      	ldr	r3, [pc, #548]	; (80018ec <HeartInt+0x4e0>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	3b55      	subs	r3, #85	; 0x55
 80016cc:	b2da      	uxtb	r2, r3
 80016ce:	4b88      	ldr	r3, [pc, #544]	; (80018f0 <HeartInt+0x4e4>)
 80016d0:	701a      	strb	r2, [r3, #0]
 80016d2:	e236      	b.n	8001b42 <HeartInt+0x736>
		}
		else if((n_heart_rate>155) && (n_heart_rate<=165))
 80016d4:	4b85      	ldr	r3, [pc, #532]	; (80018ec <HeartInt+0x4e0>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2b9b      	cmp	r3, #155	; 0x9b
 80016da:	dd0b      	ble.n	80016f4 <HeartInt+0x2e8>
 80016dc:	4b83      	ldr	r3, [pc, #524]	; (80018ec <HeartInt+0x4e0>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2ba5      	cmp	r3, #165	; 0xa5
 80016e2:	dc07      	bgt.n	80016f4 <HeartInt+0x2e8>
		{
			heart_rate = n_heart_rate - 95;
 80016e4:	4b81      	ldr	r3, [pc, #516]	; (80018ec <HeartInt+0x4e0>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	3b5f      	subs	r3, #95	; 0x5f
 80016ec:	b2da      	uxtb	r2, r3
 80016ee:	4b80      	ldr	r3, [pc, #512]	; (80018f0 <HeartInt+0x4e4>)
 80016f0:	701a      	strb	r2, [r3, #0]
 80016f2:	e226      	b.n	8001b42 <HeartInt+0x736>
		}
		else if((n_heart_rate>165) && (n_heart_rate<=175))
 80016f4:	4b7d      	ldr	r3, [pc, #500]	; (80018ec <HeartInt+0x4e0>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2ba5      	cmp	r3, #165	; 0xa5
 80016fa:	dd0b      	ble.n	8001714 <HeartInt+0x308>
 80016fc:	4b7b      	ldr	r3, [pc, #492]	; (80018ec <HeartInt+0x4e0>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2baf      	cmp	r3, #175	; 0xaf
 8001702:	dc07      	bgt.n	8001714 <HeartInt+0x308>
		{
			heart_rate = n_heart_rate - 105;
 8001704:	4b79      	ldr	r3, [pc, #484]	; (80018ec <HeartInt+0x4e0>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	b2db      	uxtb	r3, r3
 800170a:	3b69      	subs	r3, #105	; 0x69
 800170c:	b2da      	uxtb	r2, r3
 800170e:	4b78      	ldr	r3, [pc, #480]	; (80018f0 <HeartInt+0x4e4>)
 8001710:	701a      	strb	r2, [r3, #0]
 8001712:	e216      	b.n	8001b42 <HeartInt+0x736>
		}
		else if((n_heart_rate>175) && (n_heart_rate<=185))
 8001714:	4b75      	ldr	r3, [pc, #468]	; (80018ec <HeartInt+0x4e0>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2baf      	cmp	r3, #175	; 0xaf
 800171a:	dd0b      	ble.n	8001734 <HeartInt+0x328>
 800171c:	4b73      	ldr	r3, [pc, #460]	; (80018ec <HeartInt+0x4e0>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2bb9      	cmp	r3, #185	; 0xb9
 8001722:	dc07      	bgt.n	8001734 <HeartInt+0x328>
		{
			heart_rate = n_heart_rate - 115;
 8001724:	4b71      	ldr	r3, [pc, #452]	; (80018ec <HeartInt+0x4e0>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	b2db      	uxtb	r3, r3
 800172a:	3b73      	subs	r3, #115	; 0x73
 800172c:	b2da      	uxtb	r2, r3
 800172e:	4b70      	ldr	r3, [pc, #448]	; (80018f0 <HeartInt+0x4e4>)
 8001730:	701a      	strb	r2, [r3, #0]
 8001732:	e206      	b.n	8001b42 <HeartInt+0x736>
		}
		else if((n_heart_rate>185) && (n_heart_rate<=195))
 8001734:	4b6d      	ldr	r3, [pc, #436]	; (80018ec <HeartInt+0x4e0>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2bb9      	cmp	r3, #185	; 0xb9
 800173a:	dd0b      	ble.n	8001754 <HeartInt+0x348>
 800173c:	4b6b      	ldr	r3, [pc, #428]	; (80018ec <HeartInt+0x4e0>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2bc3      	cmp	r3, #195	; 0xc3
 8001742:	dc07      	bgt.n	8001754 <HeartInt+0x348>
		{
			heart_rate = n_heart_rate - 125;
 8001744:	4b69      	ldr	r3, [pc, #420]	; (80018ec <HeartInt+0x4e0>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	b2db      	uxtb	r3, r3
 800174a:	3b7d      	subs	r3, #125	; 0x7d
 800174c:	b2da      	uxtb	r2, r3
 800174e:	4b68      	ldr	r3, [pc, #416]	; (80018f0 <HeartInt+0x4e4>)
 8001750:	701a      	strb	r2, [r3, #0]
 8001752:	e1f6      	b.n	8001b42 <HeartInt+0x736>
		}
		else if((n_heart_rate>195) && (n_heart_rate<=205))
 8001754:	4b65      	ldr	r3, [pc, #404]	; (80018ec <HeartInt+0x4e0>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2bc3      	cmp	r3, #195	; 0xc3
 800175a:	dd0b      	ble.n	8001774 <HeartInt+0x368>
 800175c:	4b63      	ldr	r3, [pc, #396]	; (80018ec <HeartInt+0x4e0>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2bcd      	cmp	r3, #205	; 0xcd
 8001762:	dc07      	bgt.n	8001774 <HeartInt+0x368>
		{
			heart_rate = n_heart_rate - 135;
 8001764:	4b61      	ldr	r3, [pc, #388]	; (80018ec <HeartInt+0x4e0>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	b2db      	uxtb	r3, r3
 800176a:	3379      	adds	r3, #121	; 0x79
 800176c:	b2da      	uxtb	r2, r3
 800176e:	4b60      	ldr	r3, [pc, #384]	; (80018f0 <HeartInt+0x4e4>)
 8001770:	701a      	strb	r2, [r3, #0]
 8001772:	e1e6      	b.n	8001b42 <HeartInt+0x736>
		}
		else if((n_heart_rate>205) && (n_heart_rate<=215))
 8001774:	4b5d      	ldr	r3, [pc, #372]	; (80018ec <HeartInt+0x4e0>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2bcd      	cmp	r3, #205	; 0xcd
 800177a:	dd0b      	ble.n	8001794 <HeartInt+0x388>
 800177c:	4b5b      	ldr	r3, [pc, #364]	; (80018ec <HeartInt+0x4e0>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2bd7      	cmp	r3, #215	; 0xd7
 8001782:	dc07      	bgt.n	8001794 <HeartInt+0x388>
		{
			heart_rate = n_heart_rate - 145;
 8001784:	4b59      	ldr	r3, [pc, #356]	; (80018ec <HeartInt+0x4e0>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	b2db      	uxtb	r3, r3
 800178a:	336f      	adds	r3, #111	; 0x6f
 800178c:	b2da      	uxtb	r2, r3
 800178e:	4b58      	ldr	r3, [pc, #352]	; (80018f0 <HeartInt+0x4e4>)
 8001790:	701a      	strb	r2, [r3, #0]
 8001792:	e1d6      	b.n	8001b42 <HeartInt+0x736>
		}
		else if((n_heart_rate>215) && (n_heart_rate<=225))
 8001794:	4b55      	ldr	r3, [pc, #340]	; (80018ec <HeartInt+0x4e0>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2bd7      	cmp	r3, #215	; 0xd7
 800179a:	dd0b      	ble.n	80017b4 <HeartInt+0x3a8>
 800179c:	4b53      	ldr	r3, [pc, #332]	; (80018ec <HeartInt+0x4e0>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2be1      	cmp	r3, #225	; 0xe1
 80017a2:	dc07      	bgt.n	80017b4 <HeartInt+0x3a8>
		{
			heart_rate = n_heart_rate - 155;
 80017a4:	4b51      	ldr	r3, [pc, #324]	; (80018ec <HeartInt+0x4e0>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	3365      	adds	r3, #101	; 0x65
 80017ac:	b2da      	uxtb	r2, r3
 80017ae:	4b50      	ldr	r3, [pc, #320]	; (80018f0 <HeartInt+0x4e4>)
 80017b0:	701a      	strb	r2, [r3, #0]
 80017b2:	e1c6      	b.n	8001b42 <HeartInt+0x736>
		}
		else if((n_heart_rate>225) && (n_heart_rate<=235))
 80017b4:	4b4d      	ldr	r3, [pc, #308]	; (80018ec <HeartInt+0x4e0>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2be1      	cmp	r3, #225	; 0xe1
 80017ba:	dd0b      	ble.n	80017d4 <HeartInt+0x3c8>
 80017bc:	4b4b      	ldr	r3, [pc, #300]	; (80018ec <HeartInt+0x4e0>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2beb      	cmp	r3, #235	; 0xeb
 80017c2:	dc07      	bgt.n	80017d4 <HeartInt+0x3c8>
		{
			heart_rate = n_heart_rate - 165;
 80017c4:	4b49      	ldr	r3, [pc, #292]	; (80018ec <HeartInt+0x4e0>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	335b      	adds	r3, #91	; 0x5b
 80017cc:	b2da      	uxtb	r2, r3
 80017ce:	4b48      	ldr	r3, [pc, #288]	; (80018f0 <HeartInt+0x4e4>)
 80017d0:	701a      	strb	r2, [r3, #0]
 80017d2:	e1b6      	b.n	8001b42 <HeartInt+0x736>
		}
		else if((n_heart_rate>235) && (n_heart_rate<=245))
 80017d4:	4b45      	ldr	r3, [pc, #276]	; (80018ec <HeartInt+0x4e0>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2beb      	cmp	r3, #235	; 0xeb
 80017da:	dd0b      	ble.n	80017f4 <HeartInt+0x3e8>
 80017dc:	4b43      	ldr	r3, [pc, #268]	; (80018ec <HeartInt+0x4e0>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2bf5      	cmp	r3, #245	; 0xf5
 80017e2:	dc07      	bgt.n	80017f4 <HeartInt+0x3e8>
		{
			heart_rate = n_heart_rate - 175;
 80017e4:	4b41      	ldr	r3, [pc, #260]	; (80018ec <HeartInt+0x4e0>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	3351      	adds	r3, #81	; 0x51
 80017ec:	b2da      	uxtb	r2, r3
 80017ee:	4b40      	ldr	r3, [pc, #256]	; (80018f0 <HeartInt+0x4e4>)
 80017f0:	701a      	strb	r2, [r3, #0]
 80017f2:	e1a6      	b.n	8001b42 <HeartInt+0x736>
		}
		else if((n_heart_rate>245) && (n_heart_rate<=255))
 80017f4:	4b3d      	ldr	r3, [pc, #244]	; (80018ec <HeartInt+0x4e0>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2bf5      	cmp	r3, #245	; 0xf5
 80017fa:	dd0b      	ble.n	8001814 <HeartInt+0x408>
 80017fc:	4b3b      	ldr	r3, [pc, #236]	; (80018ec <HeartInt+0x4e0>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2bff      	cmp	r3, #255	; 0xff
 8001802:	dc07      	bgt.n	8001814 <HeartInt+0x408>
		{
			heart_rate = n_heart_rate - 185;
 8001804:	4b39      	ldr	r3, [pc, #228]	; (80018ec <HeartInt+0x4e0>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	b2db      	uxtb	r3, r3
 800180a:	3347      	adds	r3, #71	; 0x47
 800180c:	b2da      	uxtb	r2, r3
 800180e:	4b38      	ldr	r3, [pc, #224]	; (80018f0 <HeartInt+0x4e4>)
 8001810:	701a      	strb	r2, [r3, #0]
 8001812:	e196      	b.n	8001b42 <HeartInt+0x736>
		}
		else if((n_heart_rate>255) && (n_heart_rate<=265))
 8001814:	4b35      	ldr	r3, [pc, #212]	; (80018ec <HeartInt+0x4e0>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2bff      	cmp	r3, #255	; 0xff
 800181a:	dd0c      	ble.n	8001836 <HeartInt+0x42a>
 800181c:	4b33      	ldr	r3, [pc, #204]	; (80018ec <HeartInt+0x4e0>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 8001824:	da07      	bge.n	8001836 <HeartInt+0x42a>
		{
			heart_rate = n_heart_rate - 195;
 8001826:	4b31      	ldr	r3, [pc, #196]	; (80018ec <HeartInt+0x4e0>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	b2db      	uxtb	r3, r3
 800182c:	333d      	adds	r3, #61	; 0x3d
 800182e:	b2da      	uxtb	r2, r3
 8001830:	4b2f      	ldr	r3, [pc, #188]	; (80018f0 <HeartInt+0x4e4>)
 8001832:	701a      	strb	r2, [r3, #0]
 8001834:	e185      	b.n	8001b42 <HeartInt+0x736>
		}
		else if((n_heart_rate>265) && (n_heart_rate<=275))
 8001836:	4b2d      	ldr	r3, [pc, #180]	; (80018ec <HeartInt+0x4e0>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 800183e:	db0c      	blt.n	800185a <HeartInt+0x44e>
 8001840:	4b2a      	ldr	r3, [pc, #168]	; (80018ec <HeartInt+0x4e0>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f5b3 7f8a 	cmp.w	r3, #276	; 0x114
 8001848:	da07      	bge.n	800185a <HeartInt+0x44e>
		{
			heart_rate = n_heart_rate - 205;
 800184a:	4b28      	ldr	r3, [pc, #160]	; (80018ec <HeartInt+0x4e0>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	b2db      	uxtb	r3, r3
 8001850:	3333      	adds	r3, #51	; 0x33
 8001852:	b2da      	uxtb	r2, r3
 8001854:	4b26      	ldr	r3, [pc, #152]	; (80018f0 <HeartInt+0x4e4>)
 8001856:	701a      	strb	r2, [r3, #0]
 8001858:	e173      	b.n	8001b42 <HeartInt+0x736>
		}
		else if((n_heart_rate>275) && (n_heart_rate<=285))
 800185a:	4b24      	ldr	r3, [pc, #144]	; (80018ec <HeartInt+0x4e0>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f5b3 7f8a 	cmp.w	r3, #276	; 0x114
 8001862:	db0c      	blt.n	800187e <HeartInt+0x472>
 8001864:	4b21      	ldr	r3, [pc, #132]	; (80018ec <HeartInt+0x4e0>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f5b3 7f8f 	cmp.w	r3, #286	; 0x11e
 800186c:	da07      	bge.n	800187e <HeartInt+0x472>
		{
			heart_rate = n_heart_rate - 215;
 800186e:	4b1f      	ldr	r3, [pc, #124]	; (80018ec <HeartInt+0x4e0>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	b2db      	uxtb	r3, r3
 8001874:	3329      	adds	r3, #41	; 0x29
 8001876:	b2da      	uxtb	r2, r3
 8001878:	4b1d      	ldr	r3, [pc, #116]	; (80018f0 <HeartInt+0x4e4>)
 800187a:	701a      	strb	r2, [r3, #0]
 800187c:	e161      	b.n	8001b42 <HeartInt+0x736>
		}
		else if((n_heart_rate>285) && (n_heart_rate<=295))
 800187e:	4b1b      	ldr	r3, [pc, #108]	; (80018ec <HeartInt+0x4e0>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f5b3 7f8f 	cmp.w	r3, #286	; 0x11e
 8001886:	db0c      	blt.n	80018a2 <HeartInt+0x496>
 8001888:	4b18      	ldr	r3, [pc, #96]	; (80018ec <HeartInt+0x4e0>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f5b3 7f94 	cmp.w	r3, #296	; 0x128
 8001890:	da07      	bge.n	80018a2 <HeartInt+0x496>
		{
			heart_rate = n_heart_rate - 225;
 8001892:	4b16      	ldr	r3, [pc, #88]	; (80018ec <HeartInt+0x4e0>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	b2db      	uxtb	r3, r3
 8001898:	331f      	adds	r3, #31
 800189a:	b2da      	uxtb	r2, r3
 800189c:	4b14      	ldr	r3, [pc, #80]	; (80018f0 <HeartInt+0x4e4>)
 800189e:	701a      	strb	r2, [r3, #0]
 80018a0:	e14f      	b.n	8001b42 <HeartInt+0x736>
		}
		else if((n_heart_rate>295) && (n_heart_rate<=305))
 80018a2:	4b12      	ldr	r3, [pc, #72]	; (80018ec <HeartInt+0x4e0>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f5b3 7f94 	cmp.w	r3, #296	; 0x128
 80018aa:	db0c      	blt.n	80018c6 <HeartInt+0x4ba>
 80018ac:	4b0f      	ldr	r3, [pc, #60]	; (80018ec <HeartInt+0x4e0>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80018b4:	da07      	bge.n	80018c6 <HeartInt+0x4ba>
		{
			heart_rate = n_heart_rate - 235;
 80018b6:	4b0d      	ldr	r3, [pc, #52]	; (80018ec <HeartInt+0x4e0>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	3315      	adds	r3, #21
 80018be:	b2da      	uxtb	r2, r3
 80018c0:	4b0b      	ldr	r3, [pc, #44]	; (80018f0 <HeartInt+0x4e4>)
 80018c2:	701a      	strb	r2, [r3, #0]
 80018c4:	e13d      	b.n	8001b42 <HeartInt+0x736>
		}
		else if((n_heart_rate>305) && (n_heart_rate<=315))
 80018c6:	4b09      	ldr	r3, [pc, #36]	; (80018ec <HeartInt+0x4e0>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80018ce:	db11      	blt.n	80018f4 <HeartInt+0x4e8>
 80018d0:	4b06      	ldr	r3, [pc, #24]	; (80018ec <HeartInt+0x4e0>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 80018d8:	da0c      	bge.n	80018f4 <HeartInt+0x4e8>
		{
			heart_rate = n_heart_rate - 245;
 80018da:	4b04      	ldr	r3, [pc, #16]	; (80018ec <HeartInt+0x4e0>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	330b      	adds	r3, #11
 80018e2:	b2da      	uxtb	r2, r3
 80018e4:	4b02      	ldr	r3, [pc, #8]	; (80018f0 <HeartInt+0x4e4>)
 80018e6:	701a      	strb	r2, [r3, #0]
 80018e8:	e12b      	b.n	8001b42 <HeartInt+0x736>
 80018ea:	bf00      	nop
 80018ec:	20001cc8 	.word	0x20001cc8
 80018f0:	2000000c 	.word	0x2000000c
		}
		else if((n_heart_rate>315) && (n_heart_rate<=325))
 80018f4:	4b8f      	ldr	r3, [pc, #572]	; (8001b34 <HeartInt+0x728>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 80018fc:	db0c      	blt.n	8001918 <HeartInt+0x50c>
 80018fe:	4b8d      	ldr	r3, [pc, #564]	; (8001b34 <HeartInt+0x728>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f5b3 7fa3 	cmp.w	r3, #326	; 0x146
 8001906:	da07      	bge.n	8001918 <HeartInt+0x50c>
		{
			heart_rate = n_heart_rate - 255;
 8001908:	4b8a      	ldr	r3, [pc, #552]	; (8001b34 <HeartInt+0x728>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	b2db      	uxtb	r3, r3
 800190e:	3301      	adds	r3, #1
 8001910:	b2da      	uxtb	r2, r3
 8001912:	4b89      	ldr	r3, [pc, #548]	; (8001b38 <HeartInt+0x72c>)
 8001914:	701a      	strb	r2, [r3, #0]
 8001916:	e114      	b.n	8001b42 <HeartInt+0x736>
		}
		else if((n_heart_rate>325) && (n_heart_rate<=335))
 8001918:	4b86      	ldr	r3, [pc, #536]	; (8001b34 <HeartInt+0x728>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f5b3 7fa3 	cmp.w	r3, #326	; 0x146
 8001920:	db0c      	blt.n	800193c <HeartInt+0x530>
 8001922:	4b84      	ldr	r3, [pc, #528]	; (8001b34 <HeartInt+0x728>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f5b3 7fa8 	cmp.w	r3, #336	; 0x150
 800192a:	da07      	bge.n	800193c <HeartInt+0x530>
		{
			heart_rate = n_heart_rate - 265;
 800192c:	4b81      	ldr	r3, [pc, #516]	; (8001b34 <HeartInt+0x728>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	b2db      	uxtb	r3, r3
 8001932:	3b09      	subs	r3, #9
 8001934:	b2da      	uxtb	r2, r3
 8001936:	4b80      	ldr	r3, [pc, #512]	; (8001b38 <HeartInt+0x72c>)
 8001938:	701a      	strb	r2, [r3, #0]
 800193a:	e102      	b.n	8001b42 <HeartInt+0x736>
		}
		else if((n_heart_rate>335) && (n_heart_rate<=345))
 800193c:	4b7d      	ldr	r3, [pc, #500]	; (8001b34 <HeartInt+0x728>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f5b3 7fa8 	cmp.w	r3, #336	; 0x150
 8001944:	db0c      	blt.n	8001960 <HeartInt+0x554>
 8001946:	4b7b      	ldr	r3, [pc, #492]	; (8001b34 <HeartInt+0x728>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f5b3 7fad 	cmp.w	r3, #346	; 0x15a
 800194e:	da07      	bge.n	8001960 <HeartInt+0x554>
		{
			heart_rate = n_heart_rate - 275;
 8001950:	4b78      	ldr	r3, [pc, #480]	; (8001b34 <HeartInt+0x728>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	b2db      	uxtb	r3, r3
 8001956:	3b13      	subs	r3, #19
 8001958:	b2da      	uxtb	r2, r3
 800195a:	4b77      	ldr	r3, [pc, #476]	; (8001b38 <HeartInt+0x72c>)
 800195c:	701a      	strb	r2, [r3, #0]
 800195e:	e0f0      	b.n	8001b42 <HeartInt+0x736>
		}
		else if((n_heart_rate>345) && (n_heart_rate<=355))
 8001960:	4b74      	ldr	r3, [pc, #464]	; (8001b34 <HeartInt+0x728>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f5b3 7fad 	cmp.w	r3, #346	; 0x15a
 8001968:	db0c      	blt.n	8001984 <HeartInt+0x578>
 800196a:	4b72      	ldr	r3, [pc, #456]	; (8001b34 <HeartInt+0x728>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f5b3 7fb2 	cmp.w	r3, #356	; 0x164
 8001972:	da07      	bge.n	8001984 <HeartInt+0x578>
		{
			heart_rate = n_heart_rate - 285;
 8001974:	4b6f      	ldr	r3, [pc, #444]	; (8001b34 <HeartInt+0x728>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	b2db      	uxtb	r3, r3
 800197a:	3b1d      	subs	r3, #29
 800197c:	b2da      	uxtb	r2, r3
 800197e:	4b6e      	ldr	r3, [pc, #440]	; (8001b38 <HeartInt+0x72c>)
 8001980:	701a      	strb	r2, [r3, #0]
 8001982:	e0de      	b.n	8001b42 <HeartInt+0x736>
		}
		else if((n_heart_rate>355) && (n_heart_rate<=365))
 8001984:	4b6b      	ldr	r3, [pc, #428]	; (8001b34 <HeartInt+0x728>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f5b3 7fb2 	cmp.w	r3, #356	; 0x164
 800198c:	db0c      	blt.n	80019a8 <HeartInt+0x59c>
 800198e:	4b69      	ldr	r3, [pc, #420]	; (8001b34 <HeartInt+0x728>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f5b3 7fb7 	cmp.w	r3, #366	; 0x16e
 8001996:	da07      	bge.n	80019a8 <HeartInt+0x59c>
		{
			heart_rate = n_heart_rate - 295;
 8001998:	4b66      	ldr	r3, [pc, #408]	; (8001b34 <HeartInt+0x728>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	b2db      	uxtb	r3, r3
 800199e:	3b27      	subs	r3, #39	; 0x27
 80019a0:	b2da      	uxtb	r2, r3
 80019a2:	4b65      	ldr	r3, [pc, #404]	; (8001b38 <HeartInt+0x72c>)
 80019a4:	701a      	strb	r2, [r3, #0]
 80019a6:	e0cc      	b.n	8001b42 <HeartInt+0x736>
		}
		else if((n_heart_rate>365) && (n_heart_rate<=375))
 80019a8:	4b62      	ldr	r3, [pc, #392]	; (8001b34 <HeartInt+0x728>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f5b3 7fb7 	cmp.w	r3, #366	; 0x16e
 80019b0:	db0c      	blt.n	80019cc <HeartInt+0x5c0>
 80019b2:	4b60      	ldr	r3, [pc, #384]	; (8001b34 <HeartInt+0x728>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f5b3 7fbc 	cmp.w	r3, #376	; 0x178
 80019ba:	da07      	bge.n	80019cc <HeartInt+0x5c0>
		{
			heart_rate = n_heart_rate - 305;
 80019bc:	4b5d      	ldr	r3, [pc, #372]	; (8001b34 <HeartInt+0x728>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	3b31      	subs	r3, #49	; 0x31
 80019c4:	b2da      	uxtb	r2, r3
 80019c6:	4b5c      	ldr	r3, [pc, #368]	; (8001b38 <HeartInt+0x72c>)
 80019c8:	701a      	strb	r2, [r3, #0]
 80019ca:	e0ba      	b.n	8001b42 <HeartInt+0x736>
		}
		else if((n_heart_rate>375) && (n_heart_rate<=385))
 80019cc:	4b59      	ldr	r3, [pc, #356]	; (8001b34 <HeartInt+0x728>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f5b3 7fbc 	cmp.w	r3, #376	; 0x178
 80019d4:	db0c      	blt.n	80019f0 <HeartInt+0x5e4>
 80019d6:	4b57      	ldr	r3, [pc, #348]	; (8001b34 <HeartInt+0x728>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80019de:	da07      	bge.n	80019f0 <HeartInt+0x5e4>
		{
			heart_rate = n_heart_rate - 315;
 80019e0:	4b54      	ldr	r3, [pc, #336]	; (8001b34 <HeartInt+0x728>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	3b3b      	subs	r3, #59	; 0x3b
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	4b53      	ldr	r3, [pc, #332]	; (8001b38 <HeartInt+0x72c>)
 80019ec:	701a      	strb	r2, [r3, #0]
 80019ee:	e0a8      	b.n	8001b42 <HeartInt+0x736>
		}
		else if((n_heart_rate>385) && (n_heart_rate<=395))
 80019f0:	4b50      	ldr	r3, [pc, #320]	; (8001b34 <HeartInt+0x728>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80019f8:	db0c      	blt.n	8001a14 <HeartInt+0x608>
 80019fa:	4b4e      	ldr	r3, [pc, #312]	; (8001b34 <HeartInt+0x728>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f5b3 7fc6 	cmp.w	r3, #396	; 0x18c
 8001a02:	da07      	bge.n	8001a14 <HeartInt+0x608>
		{
			heart_rate = n_heart_rate - 325;
 8001a04:	4b4b      	ldr	r3, [pc, #300]	; (8001b34 <HeartInt+0x728>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	3b45      	subs	r3, #69	; 0x45
 8001a0c:	b2da      	uxtb	r2, r3
 8001a0e:	4b4a      	ldr	r3, [pc, #296]	; (8001b38 <HeartInt+0x72c>)
 8001a10:	701a      	strb	r2, [r3, #0]
 8001a12:	e096      	b.n	8001b42 <HeartInt+0x736>
		}
		else if((n_heart_rate>395) && (n_heart_rate<=405))
 8001a14:	4b47      	ldr	r3, [pc, #284]	; (8001b34 <HeartInt+0x728>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f5b3 7fc6 	cmp.w	r3, #396	; 0x18c
 8001a1c:	db0c      	blt.n	8001a38 <HeartInt+0x62c>
 8001a1e:	4b45      	ldr	r3, [pc, #276]	; (8001b34 <HeartInt+0x728>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f5b3 7fcb 	cmp.w	r3, #406	; 0x196
 8001a26:	da07      	bge.n	8001a38 <HeartInt+0x62c>
		{
			heart_rate = n_heart_rate - 335;
 8001a28:	4b42      	ldr	r3, [pc, #264]	; (8001b34 <HeartInt+0x728>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	3b4f      	subs	r3, #79	; 0x4f
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	4b41      	ldr	r3, [pc, #260]	; (8001b38 <HeartInt+0x72c>)
 8001a34:	701a      	strb	r2, [r3, #0]
 8001a36:	e084      	b.n	8001b42 <HeartInt+0x736>
		}
		else if((n_heart_rate>405) && (n_heart_rate<=415))
 8001a38:	4b3e      	ldr	r3, [pc, #248]	; (8001b34 <HeartInt+0x728>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f5b3 7fcb 	cmp.w	r3, #406	; 0x196
 8001a40:	db0c      	blt.n	8001a5c <HeartInt+0x650>
 8001a42:	4b3c      	ldr	r3, [pc, #240]	; (8001b34 <HeartInt+0x728>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f5b3 7fd0 	cmp.w	r3, #416	; 0x1a0
 8001a4a:	da07      	bge.n	8001a5c <HeartInt+0x650>
		{
			heart_rate = n_heart_rate - 345;
 8001a4c:	4b39      	ldr	r3, [pc, #228]	; (8001b34 <HeartInt+0x728>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	3b59      	subs	r3, #89	; 0x59
 8001a54:	b2da      	uxtb	r2, r3
 8001a56:	4b38      	ldr	r3, [pc, #224]	; (8001b38 <HeartInt+0x72c>)
 8001a58:	701a      	strb	r2, [r3, #0]
 8001a5a:	e072      	b.n	8001b42 <HeartInt+0x736>
		}
		else if((n_heart_rate>415) && (n_heart_rate<=425))
 8001a5c:	4b35      	ldr	r3, [pc, #212]	; (8001b34 <HeartInt+0x728>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f5b3 7fd0 	cmp.w	r3, #416	; 0x1a0
 8001a64:	db0c      	blt.n	8001a80 <HeartInt+0x674>
 8001a66:	4b33      	ldr	r3, [pc, #204]	; (8001b34 <HeartInt+0x728>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f5b3 7fd5 	cmp.w	r3, #426	; 0x1aa
 8001a6e:	da07      	bge.n	8001a80 <HeartInt+0x674>
		{
			heart_rate = n_heart_rate - 355;
 8001a70:	4b30      	ldr	r3, [pc, #192]	; (8001b34 <HeartInt+0x728>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	3b63      	subs	r3, #99	; 0x63
 8001a78:	b2da      	uxtb	r2, r3
 8001a7a:	4b2f      	ldr	r3, [pc, #188]	; (8001b38 <HeartInt+0x72c>)
 8001a7c:	701a      	strb	r2, [r3, #0]
 8001a7e:	e060      	b.n	8001b42 <HeartInt+0x736>
		}
		else if((n_heart_rate>425) && (n_heart_rate<=435))
 8001a80:	4b2c      	ldr	r3, [pc, #176]	; (8001b34 <HeartInt+0x728>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f5b3 7fd5 	cmp.w	r3, #426	; 0x1aa
 8001a88:	db0c      	blt.n	8001aa4 <HeartInt+0x698>
 8001a8a:	4b2a      	ldr	r3, [pc, #168]	; (8001b34 <HeartInt+0x728>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f5b3 7fda 	cmp.w	r3, #436	; 0x1b4
 8001a92:	da07      	bge.n	8001aa4 <HeartInt+0x698>
		{
			heart_rate = n_heart_rate - 365;
 8001a94:	4b27      	ldr	r3, [pc, #156]	; (8001b34 <HeartInt+0x728>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	3b6d      	subs	r3, #109	; 0x6d
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	4b26      	ldr	r3, [pc, #152]	; (8001b38 <HeartInt+0x72c>)
 8001aa0:	701a      	strb	r2, [r3, #0]
 8001aa2:	e04e      	b.n	8001b42 <HeartInt+0x736>
		}
		else if((n_heart_rate>435) && (n_heart_rate<=445))
 8001aa4:	4b23      	ldr	r3, [pc, #140]	; (8001b34 <HeartInt+0x728>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f5b3 7fda 	cmp.w	r3, #436	; 0x1b4
 8001aac:	db0c      	blt.n	8001ac8 <HeartInt+0x6bc>
 8001aae:	4b21      	ldr	r3, [pc, #132]	; (8001b34 <HeartInt+0x728>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f5b3 7fdf 	cmp.w	r3, #446	; 0x1be
 8001ab6:	da07      	bge.n	8001ac8 <HeartInt+0x6bc>
		{
			heart_rate = n_heart_rate - 375;
 8001ab8:	4b1e      	ldr	r3, [pc, #120]	; (8001b34 <HeartInt+0x728>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	3b77      	subs	r3, #119	; 0x77
 8001ac0:	b2da      	uxtb	r2, r3
 8001ac2:	4b1d      	ldr	r3, [pc, #116]	; (8001b38 <HeartInt+0x72c>)
 8001ac4:	701a      	strb	r2, [r3, #0]
 8001ac6:	e03c      	b.n	8001b42 <HeartInt+0x736>
		}
		else if((n_heart_rate>445) && (n_heart_rate<=455))
 8001ac8:	4b1a      	ldr	r3, [pc, #104]	; (8001b34 <HeartInt+0x728>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f5b3 7fdf 	cmp.w	r3, #446	; 0x1be
 8001ad0:	db0c      	blt.n	8001aec <HeartInt+0x6e0>
 8001ad2:	4b18      	ldr	r3, [pc, #96]	; (8001b34 <HeartInt+0x728>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f5b3 7fe4 	cmp.w	r3, #456	; 0x1c8
 8001ada:	da07      	bge.n	8001aec <HeartInt+0x6e0>
		{
			heart_rate = n_heart_rate - 385;
 8001adc:	4b15      	ldr	r3, [pc, #84]	; (8001b34 <HeartInt+0x728>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	337f      	adds	r3, #127	; 0x7f
 8001ae4:	b2da      	uxtb	r2, r3
 8001ae6:	4b14      	ldr	r3, [pc, #80]	; (8001b38 <HeartInt+0x72c>)
 8001ae8:	701a      	strb	r2, [r3, #0]
 8001aea:	e02a      	b.n	8001b42 <HeartInt+0x736>
		}
		else if((n_heart_rate>455) && (n_heart_rate<=465))
 8001aec:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <HeartInt+0x728>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f5b3 7fe4 	cmp.w	r3, #456	; 0x1c8
 8001af4:	db0c      	blt.n	8001b10 <HeartInt+0x704>
 8001af6:	4b0f      	ldr	r3, [pc, #60]	; (8001b34 <HeartInt+0x728>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f5b3 7fe9 	cmp.w	r3, #466	; 0x1d2
 8001afe:	da07      	bge.n	8001b10 <HeartInt+0x704>
		{
			heart_rate = n_heart_rate - 395;
 8001b00:	4b0c      	ldr	r3, [pc, #48]	; (8001b34 <HeartInt+0x728>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	3375      	adds	r3, #117	; 0x75
 8001b08:	b2da      	uxtb	r2, r3
 8001b0a:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <HeartInt+0x72c>)
 8001b0c:	701a      	strb	r2, [r3, #0]
 8001b0e:	e018      	b.n	8001b42 <HeartInt+0x736>
		}
		else if((n_heart_rate>465) && (n_heart_rate<=475))
 8001b10:	4b08      	ldr	r3, [pc, #32]	; (8001b34 <HeartInt+0x728>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f5b3 7fe9 	cmp.w	r3, #466	; 0x1d2
 8001b18:	db10      	blt.n	8001b3c <HeartInt+0x730>
 8001b1a:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <HeartInt+0x728>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f5b3 7fee 	cmp.w	r3, #476	; 0x1dc
 8001b22:	da0b      	bge.n	8001b3c <HeartInt+0x730>
		{
			heart_rate = n_heart_rate - 405;
 8001b24:	4b03      	ldr	r3, [pc, #12]	; (8001b34 <HeartInt+0x728>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	336b      	adds	r3, #107	; 0x6b
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	4b02      	ldr	r3, [pc, #8]	; (8001b38 <HeartInt+0x72c>)
 8001b30:	701a      	strb	r2, [r3, #0]
 8001b32:	e006      	b.n	8001b42 <HeartInt+0x736>
 8001b34:	20001cc8 	.word	0x20001cc8
 8001b38:	2000000c 	.word	0x2000000c
		}
		else
		{
			heart_rate = 62;
 8001b3c:	4b27      	ldr	r3, [pc, #156]	; (8001bdc <HeartInt+0x7d0>)
 8001b3e:	223e      	movs	r2, #62	; 0x3e
 8001b40:	701a      	strb	r2, [r3, #0]
		}
	}
	if(ch_spo2_valid && (n_sp02>90))
 8001b42:	4b27      	ldr	r3, [pc, #156]	; (8001be0 <HeartInt+0x7d4>)
 8001b44:	f993 3000 	ldrsb.w	r3, [r3]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d009      	beq.n	8001b60 <HeartInt+0x754>
 8001b4c:	4b25      	ldr	r3, [pc, #148]	; (8001be4 <HeartInt+0x7d8>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2b5a      	cmp	r3, #90	; 0x5a
 8001b52:	dd05      	ble.n	8001b60 <HeartInt+0x754>
	{
		blood_oxygen = n_sp02;
 8001b54:	4b23      	ldr	r3, [pc, #140]	; (8001be4 <HeartInt+0x7d8>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	b2da      	uxtb	r2, r3
 8001b5a:	4b23      	ldr	r3, [pc, #140]	; (8001be8 <HeartInt+0x7dc>)
 8001b5c:	701a      	strb	r2, [r3, #0]
 8001b5e:	e002      	b.n	8001b66 <HeartInt+0x75a>
	}
	else
	{
		blood_oxygen = 98;
 8001b60:	4b21      	ldr	r3, [pc, #132]	; (8001be8 <HeartInt+0x7dc>)
 8001b62:	2262      	movs	r2, #98	; 0x62
 8001b64:	701a      	strb	r2, [r3, #0]
	}

	uint8_t tempint;
	float temflot;
	maxim_max30102_read_reg(REG_TEMP_INTR, &tempint); //get tempeature float
 8001b66:	f107 030b 	add.w	r3, r7, #11
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	201f      	movs	r0, #31
 8001b6e:	f7ff fa65 	bl	800103c <maxim_max30102_read_reg>
	maxim_max30102_read_reg(REG_TEMP_FRAC, &temflot); //get tempeature float
 8001b72:	1d3b      	adds	r3, r7, #4
 8001b74:	4619      	mov	r1, r3
 8001b76:	2020      	movs	r0, #32
 8001b78:	f7ff fa60 	bl	800103c <maxim_max30102_read_reg>
	temperature = tempint + temflot;
 8001b7c:	7afb      	ldrb	r3, [r7, #11]
 8001b7e:	ee07 3a90 	vmov	s15, r3
 8001b82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b86:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b8e:	4b17      	ldr	r3, [pc, #92]	; (8001bec <HeartInt+0x7e0>)
 8001b90:	edc3 7a00 	vstr	s15, [r3]
	if(temperature <= 30)
 8001b94:	4b15      	ldr	r3, [pc, #84]	; (8001bec <HeartInt+0x7e0>)
 8001b96:	edd3 7a00 	vldr	s15, [r3]
 8001b9a:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001b9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ba6:	d809      	bhi.n	8001bbc <HeartInt+0x7b0>
	{
		temperature += 7.5;
 8001ba8:	4b10      	ldr	r3, [pc, #64]	; (8001bec <HeartInt+0x7e0>)
 8001baa:	edd3 7a00 	vldr	s15, [r3]
 8001bae:	eeb1 7a0e 	vmov.f32	s14, #30	; 0x40f00000  7.5
 8001bb2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001bb6:	4b0d      	ldr	r3, [pc, #52]	; (8001bec <HeartInt+0x7e0>)
 8001bb8:	edc3 7a00 	vstr	s15, [r3]
	}
	temperatureUS = TemperF(temperature);
 8001bbc:	4b0b      	ldr	r3, [pc, #44]	; (8001bec <HeartInt+0x7e0>)
 8001bbe:	edd3 7a00 	vldr	s15, [r3]
 8001bc2:	eeb0 0a67 	vmov.f32	s0, s15
 8001bc6:	f7ff fbf3 	bl	80013b0 <TemperF>
 8001bca:	eef0 7a40 	vmov.f32	s15, s0
 8001bce:	4b08      	ldr	r3, [pc, #32]	; (8001bf0 <HeartInt+0x7e4>)
 8001bd0:	edc3 7a00 	vstr	s15, [r3]

}
 8001bd4:	bf00      	nop
 8001bd6:	3710      	adds	r7, #16
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	2000000c 	.word	0x2000000c
 8001be0:	20001ccc 	.word	0x20001ccc
 8001be4:	200019a4 	.word	0x200019a4
 8001be8:	2000000d 	.word	0x2000000d
 8001bec:	20000004 	.word	0x20000004
 8001bf0:	20000008 	.word	0x20000008

08001bf4 <Get_Heart_data>:


void Get_Heart_data(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b088      	sub	sp, #32
 8001bf8:	af04      	add	r7, sp, #16
	int i=0;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60fb      	str	r3, [r7, #12]
	float f_temp;

	un_min=0x3FFFF;
 8001bfe:	4bac      	ldr	r3, [pc, #688]	; (8001eb0 <Get_Heart_data+0x2bc>)
 8001c00:	4aac      	ldr	r2, [pc, #688]	; (8001eb4 <Get_Heart_data+0x2c0>)
 8001c02:	601a      	str	r2, [r3, #0]
	un_max=0;
 8001c04:	4bac      	ldr	r3, [pc, #688]	; (8001eb8 <Get_Heart_data+0x2c4>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]
	uint8_t tempint1;
	float temflot1;
	maxim_max30102_read_reg(REG_TEMP_INTR, &tempint1); //get tempeature float
 8001c0a:	1dfb      	adds	r3, r7, #7
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	201f      	movs	r0, #31
 8001c10:	f7ff fa14 	bl	800103c <maxim_max30102_read_reg>
	maxim_max30102_read_reg(REG_TEMP_FRAC, &temflot1); //get tempeature float
 8001c14:	463b      	mov	r3, r7
 8001c16:	4619      	mov	r1, r3
 8001c18:	2020      	movs	r0, #32
 8001c1a:	f7ff fa0f 	bl	800103c <maxim_max30102_read_reg>
	temperature = tempint1 + temflot1;
 8001c1e:	79fb      	ldrb	r3, [r7, #7]
 8001c20:	ee07 3a90 	vmov	s15, r3
 8001c24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c28:	edd7 7a00 	vldr	s15, [r7]
 8001c2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c30:	4ba2      	ldr	r3, [pc, #648]	; (8001ebc <Get_Heart_data+0x2c8>)
 8001c32:	edc3 7a00 	vstr	s15, [r3]
	if(temperature <= 30)
 8001c36:	4ba1      	ldr	r3, [pc, #644]	; (8001ebc <Get_Heart_data+0x2c8>)
 8001c38:	edd3 7a00 	vldr	s15, [r3]
 8001c3c:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001c40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c48:	d809      	bhi.n	8001c5e <Get_Heart_data+0x6a>
	{
		temperature += 7.5;
 8001c4a:	4b9c      	ldr	r3, [pc, #624]	; (8001ebc <Get_Heart_data+0x2c8>)
 8001c4c:	edd3 7a00 	vldr	s15, [r3]
 8001c50:	eeb1 7a0e 	vmov.f32	s14, #30	; 0x40f00000  7.5
 8001c54:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c58:	4b98      	ldr	r3, [pc, #608]	; (8001ebc <Get_Heart_data+0x2c8>)
 8001c5a:	edc3 7a00 	vstr	s15, [r3]
	}
	temperatureUS = TemperF(temperature);
 8001c5e:	4b97      	ldr	r3, [pc, #604]	; (8001ebc <Get_Heart_data+0x2c8>)
 8001c60:	edd3 7a00 	vldr	s15, [r3]
 8001c64:	eeb0 0a67 	vmov.f32	s0, s15
 8001c68:	f7ff fba2 	bl	80013b0 <TemperF>
 8001c6c:	eef0 7a40 	vmov.f32	s15, s0
 8001c70:	4b93      	ldr	r3, [pc, #588]	; (8001ec0 <Get_Heart_data+0x2cc>)
 8001c72:	edc3 7a00 	vstr	s15, [r3]

	for(i=0;i<100;i++)
 8001c76:	2300      	movs	r3, #0
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	e01e      	b.n	8001cba <Get_Heart_data+0xc6>
		//aun_red_buffer[i-20]=aun_red_buffer[i];

		//aun_ir_buffer[i-20]=aun_ir_buffer[i];

		//update the signal min and max
		if(un_min>aun_red_buffer[i])
 8001c7c:	4a91      	ldr	r2, [pc, #580]	; (8001ec4 <Get_Heart_data+0x2d0>)
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c84:	4b8a      	ldr	r3, [pc, #552]	; (8001eb0 <Get_Heart_data+0x2bc>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d205      	bcs.n	8001c98 <Get_Heart_data+0xa4>
		{
			un_min=aun_red_buffer[i];
 8001c8c:	4a8d      	ldr	r2, [pc, #564]	; (8001ec4 <Get_Heart_data+0x2d0>)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c94:	4a86      	ldr	r2, [pc, #536]	; (8001eb0 <Get_Heart_data+0x2bc>)
 8001c96:	6013      	str	r3, [r2, #0]
		}

		if(un_max<aun_red_buffer[i])
 8001c98:	4a8a      	ldr	r2, [pc, #552]	; (8001ec4 <Get_Heart_data+0x2d0>)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001ca0:	4b85      	ldr	r3, [pc, #532]	; (8001eb8 <Get_Heart_data+0x2c4>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d905      	bls.n	8001cb4 <Get_Heart_data+0xc0>
		{
			un_max=aun_red_buffer[i];
 8001ca8:	4a86      	ldr	r2, [pc, #536]	; (8001ec4 <Get_Heart_data+0x2d0>)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cb0:	4a81      	ldr	r2, [pc, #516]	; (8001eb8 <Get_Heart_data+0x2c4>)
 8001cb2:	6013      	str	r3, [r2, #0]
	for(i=0;i<100;i++)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	60fb      	str	r3, [r7, #12]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2b63      	cmp	r3, #99	; 0x63
 8001cbe:	dddd      	ble.n	8001c7c <Get_Heart_data+0x88>
		}

	}

	for(i=0;i<100;i++) //get 20 samples
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	e3ce      	b.n	8002464 <Get_Heart_data+0x870>
	{
		un_prev_data=aun_red_buffer[i-1];
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	3b01      	subs	r3, #1
 8001cca:	4a7e      	ldr	r2, [pc, #504]	; (8001ec4 <Get_Heart_data+0x2d0>)
 8001ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cd0:	4a7d      	ldr	r2, [pc, #500]	; (8001ec8 <Get_Heart_data+0x2d4>)
 8001cd2:	6013      	str	r3, [r2, #0]

		while(HAL_GPIO_ReadPin(HR_GPIO_INT_GPIO_Port,HR_GPIO_INT_Pin)==1){};   //wait until the interrupt pin asserts
 8001cd4:	bf00      	nop
 8001cd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cda:	487c      	ldr	r0, [pc, #496]	; (8001ecc <Get_Heart_data+0x2d8>)
 8001cdc:	f005 fa5e 	bl	800719c <HAL_GPIO_ReadPin>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d0f7      	beq.n	8001cd6 <Get_Heart_data+0xe2>

		maxim_max30102_read_fifo((aun_red_buffer+i), (aun_ir_buffer+i));
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	4a76      	ldr	r2, [pc, #472]	; (8001ec4 <Get_Heart_data+0x2d0>)
 8001cec:	441a      	add	r2, r3
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	4977      	ldr	r1, [pc, #476]	; (8001ed0 <Get_Heart_data+0x2dc>)
 8001cf4:	440b      	add	r3, r1
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4610      	mov	r0, r2
 8001cfa:	f7ff fa2f 	bl	800115c <maxim_max30102_read_fifo>

		if(aun_red_buffer[i]>un_prev_data)//just to determine the brightness of LED according to the deviation of adjacent two AD data
 8001cfe:	4a71      	ldr	r2, [pc, #452]	; (8001ec4 <Get_Heart_data+0x2d0>)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d06:	4b70      	ldr	r3, [pc, #448]	; (8001ec8 <Get_Heart_data+0x2d4>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d936      	bls.n	8001d7c <Get_Heart_data+0x188>
		{
			f_temp=aun_red_buffer[i]-un_prev_data;
 8001d0e:	4a6d      	ldr	r2, [pc, #436]	; (8001ec4 <Get_Heart_data+0x2d0>)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d16:	4b6c      	ldr	r3, [pc, #432]	; (8001ec8 <Get_Heart_data+0x2d4>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	ee07 3a90 	vmov	s15, r3
 8001d20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d24:	edc7 7a02 	vstr	s15, [r7, #8]

			f_temp/=(un_max-un_min);
 8001d28:	4b63      	ldr	r3, [pc, #396]	; (8001eb8 <Get_Heart_data+0x2c4>)
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	4b60      	ldr	r3, [pc, #384]	; (8001eb0 <Get_Heart_data+0x2bc>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	ee07 3a90 	vmov	s15, r3
 8001d36:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d3a:	edd7 6a02 	vldr	s13, [r7, #8]
 8001d3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d42:	edc7 7a02 	vstr	s15, [r7, #8]

			f_temp*=MAX_BRIGHTNESS;
 8001d46:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d4a:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8001ed4 <Get_Heart_data+0x2e0>
 8001d4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d52:	edc7 7a02 	vstr	s15, [r7, #8]

			n_brightness-=(int)f_temp;
 8001d56:	4b60      	ldr	r3, [pc, #384]	; (8001ed8 <Get_Heart_data+0x2e4>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d62:	ee17 2a90 	vmov	r2, s15
 8001d66:	1a9b      	subs	r3, r3, r2
 8001d68:	4a5b      	ldr	r2, [pc, #364]	; (8001ed8 <Get_Heart_data+0x2e4>)
 8001d6a:	6013      	str	r3, [r2, #0]

			if(n_brightness<0)
 8001d6c:	4b5a      	ldr	r3, [pc, #360]	; (8001ed8 <Get_Heart_data+0x2e4>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	da39      	bge.n	8001de8 <Get_Heart_data+0x1f4>
			{
				n_brightness=0;
 8001d74:	4b58      	ldr	r3, [pc, #352]	; (8001ed8 <Get_Heart_data+0x2e4>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	e035      	b.n	8001de8 <Get_Heart_data+0x1f4>
			}
		}
		else
		{
			f_temp=un_prev_data-aun_red_buffer[i];
 8001d7c:	4b52      	ldr	r3, [pc, #328]	; (8001ec8 <Get_Heart_data+0x2d4>)
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	4950      	ldr	r1, [pc, #320]	; (8001ec4 <Get_Heart_data+0x2d0>)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	ee07 3a90 	vmov	s15, r3
 8001d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d92:	edc7 7a02 	vstr	s15, [r7, #8]

			f_temp/=(un_max-un_min);
 8001d96:	4b48      	ldr	r3, [pc, #288]	; (8001eb8 <Get_Heart_data+0x2c4>)
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	4b45      	ldr	r3, [pc, #276]	; (8001eb0 <Get_Heart_data+0x2bc>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	ee07 3a90 	vmov	s15, r3
 8001da4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001da8:	edd7 6a02 	vldr	s13, [r7, #8]
 8001dac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001db0:	edc7 7a02 	vstr	s15, [r7, #8]

			f_temp*=MAX_BRIGHTNESS;
 8001db4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001db8:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8001ed4 <Get_Heart_data+0x2e0>
 8001dbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dc0:	edc7 7a02 	vstr	s15, [r7, #8]

			n_brightness+=(int)f_temp;
 8001dc4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001dc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dcc:	ee17 2a90 	vmov	r2, s15
 8001dd0:	4b41      	ldr	r3, [pc, #260]	; (8001ed8 <Get_Heart_data+0x2e4>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	4a40      	ldr	r2, [pc, #256]	; (8001ed8 <Get_Heart_data+0x2e4>)
 8001dd8:	6013      	str	r3, [r2, #0]

			if(n_brightness>MAX_BRIGHTNESS)
 8001dda:	4b3f      	ldr	r3, [pc, #252]	; (8001ed8 <Get_Heart_data+0x2e4>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2bff      	cmp	r3, #255	; 0xff
 8001de0:	dd02      	ble.n	8001de8 <Get_Heart_data+0x1f4>
			{
				n_brightness=MAX_BRIGHTNESS;
 8001de2:	4b3d      	ldr	r3, [pc, #244]	; (8001ed8 <Get_Heart_data+0x2e4>)
 8001de4:	22ff      	movs	r2, #255	; 0xff
 8001de6:	601a      	str	r2, [r3, #0]
			}

		}

		if(ch_hr_valid)
 8001de8:	4b3c      	ldr	r3, [pc, #240]	; (8001edc <Get_Heart_data+0x2e8>)
 8001dea:	f993 3000 	ldrsb.w	r3, [r3]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f000 8321 	beq.w	8002436 <Get_Heart_data+0x842>
		{
			if((n_heart_rate>20) && (n_heart_rate<=30))
 8001df4:	4b3a      	ldr	r3, [pc, #232]	; (8001ee0 <Get_Heart_data+0x2ec>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2b14      	cmp	r3, #20
 8001dfa:	dd0b      	ble.n	8001e14 <Get_Heart_data+0x220>
 8001dfc:	4b38      	ldr	r3, [pc, #224]	; (8001ee0 <Get_Heart_data+0x2ec>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2b1e      	cmp	r3, #30
 8001e02:	dc07      	bgt.n	8001e14 <Get_Heart_data+0x220>
			{
				heart_rate = n_heart_rate+35;
 8001e04:	4b36      	ldr	r3, [pc, #216]	; (8001ee0 <Get_Heart_data+0x2ec>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	3323      	adds	r3, #35	; 0x23
 8001e0c:	b2da      	uxtb	r2, r3
 8001e0e:	4b35      	ldr	r3, [pc, #212]	; (8001ee4 <Get_Heart_data+0x2f0>)
 8001e10:	701a      	strb	r2, [r3, #0]
 8001e12:	e310      	b.n	8002436 <Get_Heart_data+0x842>
			}
			else if((n_heart_rate>30) && (n_heart_rate<=40))
 8001e14:	4b32      	ldr	r3, [pc, #200]	; (8001ee0 <Get_Heart_data+0x2ec>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2b1e      	cmp	r3, #30
 8001e1a:	dd0b      	ble.n	8001e34 <Get_Heart_data+0x240>
 8001e1c:	4b30      	ldr	r3, [pc, #192]	; (8001ee0 <Get_Heart_data+0x2ec>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2b28      	cmp	r3, #40	; 0x28
 8001e22:	dc07      	bgt.n	8001e34 <Get_Heart_data+0x240>
			{
				heart_rate = n_heart_rate+25;
 8001e24:	4b2e      	ldr	r3, [pc, #184]	; (8001ee0 <Get_Heart_data+0x2ec>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	3319      	adds	r3, #25
 8001e2c:	b2da      	uxtb	r2, r3
 8001e2e:	4b2d      	ldr	r3, [pc, #180]	; (8001ee4 <Get_Heart_data+0x2f0>)
 8001e30:	701a      	strb	r2, [r3, #0]
 8001e32:	e300      	b.n	8002436 <Get_Heart_data+0x842>
			}
			else if((n_heart_rate>40) && (n_heart_rate<=50))
 8001e34:	4b2a      	ldr	r3, [pc, #168]	; (8001ee0 <Get_Heart_data+0x2ec>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2b28      	cmp	r3, #40	; 0x28
 8001e3a:	dd0b      	ble.n	8001e54 <Get_Heart_data+0x260>
 8001e3c:	4b28      	ldr	r3, [pc, #160]	; (8001ee0 <Get_Heart_data+0x2ec>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2b32      	cmp	r3, #50	; 0x32
 8001e42:	dc07      	bgt.n	8001e54 <Get_Heart_data+0x260>
			{
				heart_rate = n_heart_rate+15;
 8001e44:	4b26      	ldr	r3, [pc, #152]	; (8001ee0 <Get_Heart_data+0x2ec>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	330f      	adds	r3, #15
 8001e4c:	b2da      	uxtb	r2, r3
 8001e4e:	4b25      	ldr	r3, [pc, #148]	; (8001ee4 <Get_Heart_data+0x2f0>)
 8001e50:	701a      	strb	r2, [r3, #0]
 8001e52:	e2f0      	b.n	8002436 <Get_Heart_data+0x842>
			}
			else if((n_heart_rate>50) && (n_heart_rate<=60))
 8001e54:	4b22      	ldr	r3, [pc, #136]	; (8001ee0 <Get_Heart_data+0x2ec>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2b32      	cmp	r3, #50	; 0x32
 8001e5a:	dd0b      	ble.n	8001e74 <Get_Heart_data+0x280>
 8001e5c:	4b20      	ldr	r3, [pc, #128]	; (8001ee0 <Get_Heart_data+0x2ec>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2b3c      	cmp	r3, #60	; 0x3c
 8001e62:	dc07      	bgt.n	8001e74 <Get_Heart_data+0x280>
			{
				heart_rate = n_heart_rate+5;
 8001e64:	4b1e      	ldr	r3, [pc, #120]	; (8001ee0 <Get_Heart_data+0x2ec>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	3305      	adds	r3, #5
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ee4 <Get_Heart_data+0x2f0>)
 8001e70:	701a      	strb	r2, [r3, #0]
 8001e72:	e2e0      	b.n	8002436 <Get_Heart_data+0x842>
			}
			else if((n_heart_rate>60) && (n_heart_rate<=75))
 8001e74:	4b1a      	ldr	r3, [pc, #104]	; (8001ee0 <Get_Heart_data+0x2ec>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2b3c      	cmp	r3, #60	; 0x3c
 8001e7a:	dd09      	ble.n	8001e90 <Get_Heart_data+0x29c>
 8001e7c:	4b18      	ldr	r3, [pc, #96]	; (8001ee0 <Get_Heart_data+0x2ec>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2b4b      	cmp	r3, #75	; 0x4b
 8001e82:	dc05      	bgt.n	8001e90 <Get_Heart_data+0x29c>
			{
				heart_rate = n_heart_rate;
 8001e84:	4b16      	ldr	r3, [pc, #88]	; (8001ee0 <Get_Heart_data+0x2ec>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	b2da      	uxtb	r2, r3
 8001e8a:	4b16      	ldr	r3, [pc, #88]	; (8001ee4 <Get_Heart_data+0x2f0>)
 8001e8c:	701a      	strb	r2, [r3, #0]
 8001e8e:	e2d2      	b.n	8002436 <Get_Heart_data+0x842>
			}
			else if((n_heart_rate>75) && (n_heart_rate<=85))
 8001e90:	4b13      	ldr	r3, [pc, #76]	; (8001ee0 <Get_Heart_data+0x2ec>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2b4b      	cmp	r3, #75	; 0x4b
 8001e96:	dd27      	ble.n	8001ee8 <Get_Heart_data+0x2f4>
 8001e98:	4b11      	ldr	r3, [pc, #68]	; (8001ee0 <Get_Heart_data+0x2ec>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2b55      	cmp	r3, #85	; 0x55
 8001e9e:	dc23      	bgt.n	8001ee8 <Get_Heart_data+0x2f4>
			{
				heart_rate = n_heart_rate - 15;
 8001ea0:	4b0f      	ldr	r3, [pc, #60]	; (8001ee0 <Get_Heart_data+0x2ec>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	3b0f      	subs	r3, #15
 8001ea8:	b2da      	uxtb	r2, r3
 8001eaa:	4b0e      	ldr	r3, [pc, #56]	; (8001ee4 <Get_Heart_data+0x2f0>)
 8001eac:	701a      	strb	r2, [r3, #0]
 8001eae:	e2c2      	b.n	8002436 <Get_Heart_data+0x842>
 8001eb0:	20001cdc 	.word	0x20001cdc
 8001eb4:	0003ffff 	.word	0x0003ffff
 8001eb8:	20001cd8 	.word	0x20001cd8
 8001ebc:	20000004 	.word	0x20000004
 8001ec0:	20000008 	.word	0x20000008
 8001ec4:	20001b38 	.word	0x20001b38
 8001ec8:	20001ce4 	.word	0x20001ce4
 8001ecc:	40020400 	.word	0x40020400
 8001ed0:	200019a8 	.word	0x200019a8
 8001ed4:	437f0000 	.word	0x437f0000
 8001ed8:	20001cd4 	.word	0x20001cd4
 8001edc:	20001ccd 	.word	0x20001ccd
 8001ee0:	20001cc8 	.word	0x20001cc8
 8001ee4:	2000000c 	.word	0x2000000c
			}
			else if((n_heart_rate>85) && (n_heart_rate<=95))
 8001ee8:	4b90      	ldr	r3, [pc, #576]	; (800212c <Get_Heart_data+0x538>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2b55      	cmp	r3, #85	; 0x55
 8001eee:	dd0b      	ble.n	8001f08 <Get_Heart_data+0x314>
 8001ef0:	4b8e      	ldr	r3, [pc, #568]	; (800212c <Get_Heart_data+0x538>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2b5f      	cmp	r3, #95	; 0x5f
 8001ef6:	dc07      	bgt.n	8001f08 <Get_Heart_data+0x314>
			{
				heart_rate = n_heart_rate - 25;
 8001ef8:	4b8c      	ldr	r3, [pc, #560]	; (800212c <Get_Heart_data+0x538>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	3b19      	subs	r3, #25
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	4b8b      	ldr	r3, [pc, #556]	; (8002130 <Get_Heart_data+0x53c>)
 8001f04:	701a      	strb	r2, [r3, #0]
 8001f06:	e296      	b.n	8002436 <Get_Heart_data+0x842>
			}
			else if((n_heart_rate>95) && (n_heart_rate<=105))
 8001f08:	4b88      	ldr	r3, [pc, #544]	; (800212c <Get_Heart_data+0x538>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2b5f      	cmp	r3, #95	; 0x5f
 8001f0e:	dd0b      	ble.n	8001f28 <Get_Heart_data+0x334>
 8001f10:	4b86      	ldr	r3, [pc, #536]	; (800212c <Get_Heart_data+0x538>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2b69      	cmp	r3, #105	; 0x69
 8001f16:	dc07      	bgt.n	8001f28 <Get_Heart_data+0x334>
			{
				heart_rate = n_heart_rate - 35;
 8001f18:	4b84      	ldr	r3, [pc, #528]	; (800212c <Get_Heart_data+0x538>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	3b23      	subs	r3, #35	; 0x23
 8001f20:	b2da      	uxtb	r2, r3
 8001f22:	4b83      	ldr	r3, [pc, #524]	; (8002130 <Get_Heart_data+0x53c>)
 8001f24:	701a      	strb	r2, [r3, #0]
 8001f26:	e286      	b.n	8002436 <Get_Heart_data+0x842>
			}
			else if((n_heart_rate>105) && (n_heart_rate<=115))
 8001f28:	4b80      	ldr	r3, [pc, #512]	; (800212c <Get_Heart_data+0x538>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2b69      	cmp	r3, #105	; 0x69
 8001f2e:	dd0b      	ble.n	8001f48 <Get_Heart_data+0x354>
 8001f30:	4b7e      	ldr	r3, [pc, #504]	; (800212c <Get_Heart_data+0x538>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2b73      	cmp	r3, #115	; 0x73
 8001f36:	dc07      	bgt.n	8001f48 <Get_Heart_data+0x354>
			{
				heart_rate = n_heart_rate - 45;
 8001f38:	4b7c      	ldr	r3, [pc, #496]	; (800212c <Get_Heart_data+0x538>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	3b2d      	subs	r3, #45	; 0x2d
 8001f40:	b2da      	uxtb	r2, r3
 8001f42:	4b7b      	ldr	r3, [pc, #492]	; (8002130 <Get_Heart_data+0x53c>)
 8001f44:	701a      	strb	r2, [r3, #0]
 8001f46:	e276      	b.n	8002436 <Get_Heart_data+0x842>
			}
			else if((n_heart_rate>115) && (n_heart_rate<=125))
 8001f48:	4b78      	ldr	r3, [pc, #480]	; (800212c <Get_Heart_data+0x538>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2b73      	cmp	r3, #115	; 0x73
 8001f4e:	dd0b      	ble.n	8001f68 <Get_Heart_data+0x374>
 8001f50:	4b76      	ldr	r3, [pc, #472]	; (800212c <Get_Heart_data+0x538>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2b7d      	cmp	r3, #125	; 0x7d
 8001f56:	dc07      	bgt.n	8001f68 <Get_Heart_data+0x374>
			{
				heart_rate = n_heart_rate - 55;
 8001f58:	4b74      	ldr	r3, [pc, #464]	; (800212c <Get_Heart_data+0x538>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	3b37      	subs	r3, #55	; 0x37
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	4b73      	ldr	r3, [pc, #460]	; (8002130 <Get_Heart_data+0x53c>)
 8001f64:	701a      	strb	r2, [r3, #0]
 8001f66:	e266      	b.n	8002436 <Get_Heart_data+0x842>
			}
			else if((n_heart_rate>125) && (n_heart_rate<=135))
 8001f68:	4b70      	ldr	r3, [pc, #448]	; (800212c <Get_Heart_data+0x538>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2b7d      	cmp	r3, #125	; 0x7d
 8001f6e:	dd0b      	ble.n	8001f88 <Get_Heart_data+0x394>
 8001f70:	4b6e      	ldr	r3, [pc, #440]	; (800212c <Get_Heart_data+0x538>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2b87      	cmp	r3, #135	; 0x87
 8001f76:	dc07      	bgt.n	8001f88 <Get_Heart_data+0x394>
			{
				heart_rate = n_heart_rate - 65;
 8001f78:	4b6c      	ldr	r3, [pc, #432]	; (800212c <Get_Heart_data+0x538>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	3b41      	subs	r3, #65	; 0x41
 8001f80:	b2da      	uxtb	r2, r3
 8001f82:	4b6b      	ldr	r3, [pc, #428]	; (8002130 <Get_Heart_data+0x53c>)
 8001f84:	701a      	strb	r2, [r3, #0]
 8001f86:	e256      	b.n	8002436 <Get_Heart_data+0x842>
			}
			else if((n_heart_rate>135) && (n_heart_rate<=145))
 8001f88:	4b68      	ldr	r3, [pc, #416]	; (800212c <Get_Heart_data+0x538>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2b87      	cmp	r3, #135	; 0x87
 8001f8e:	dd0b      	ble.n	8001fa8 <Get_Heart_data+0x3b4>
 8001f90:	4b66      	ldr	r3, [pc, #408]	; (800212c <Get_Heart_data+0x538>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2b91      	cmp	r3, #145	; 0x91
 8001f96:	dc07      	bgt.n	8001fa8 <Get_Heart_data+0x3b4>
			{
				heart_rate = n_heart_rate - 75;
 8001f98:	4b64      	ldr	r3, [pc, #400]	; (800212c <Get_Heart_data+0x538>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	3b4b      	subs	r3, #75	; 0x4b
 8001fa0:	b2da      	uxtb	r2, r3
 8001fa2:	4b63      	ldr	r3, [pc, #396]	; (8002130 <Get_Heart_data+0x53c>)
 8001fa4:	701a      	strb	r2, [r3, #0]
 8001fa6:	e246      	b.n	8002436 <Get_Heart_data+0x842>
			}
			else if((n_heart_rate>145) && (n_heart_rate<=155))
 8001fa8:	4b60      	ldr	r3, [pc, #384]	; (800212c <Get_Heart_data+0x538>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2b91      	cmp	r3, #145	; 0x91
 8001fae:	dd0b      	ble.n	8001fc8 <Get_Heart_data+0x3d4>
 8001fb0:	4b5e      	ldr	r3, [pc, #376]	; (800212c <Get_Heart_data+0x538>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2b9b      	cmp	r3, #155	; 0x9b
 8001fb6:	dc07      	bgt.n	8001fc8 <Get_Heart_data+0x3d4>
			{
				heart_rate = n_heart_rate - 85;
 8001fb8:	4b5c      	ldr	r3, [pc, #368]	; (800212c <Get_Heart_data+0x538>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	3b55      	subs	r3, #85	; 0x55
 8001fc0:	b2da      	uxtb	r2, r3
 8001fc2:	4b5b      	ldr	r3, [pc, #364]	; (8002130 <Get_Heart_data+0x53c>)
 8001fc4:	701a      	strb	r2, [r3, #0]
 8001fc6:	e236      	b.n	8002436 <Get_Heart_data+0x842>
			}
			else if((n_heart_rate>155) && (n_heart_rate<=165))
 8001fc8:	4b58      	ldr	r3, [pc, #352]	; (800212c <Get_Heart_data+0x538>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2b9b      	cmp	r3, #155	; 0x9b
 8001fce:	dd0b      	ble.n	8001fe8 <Get_Heart_data+0x3f4>
 8001fd0:	4b56      	ldr	r3, [pc, #344]	; (800212c <Get_Heart_data+0x538>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2ba5      	cmp	r3, #165	; 0xa5
 8001fd6:	dc07      	bgt.n	8001fe8 <Get_Heart_data+0x3f4>
			{
				heart_rate = n_heart_rate - 95;
 8001fd8:	4b54      	ldr	r3, [pc, #336]	; (800212c <Get_Heart_data+0x538>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	3b5f      	subs	r3, #95	; 0x5f
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	4b53      	ldr	r3, [pc, #332]	; (8002130 <Get_Heart_data+0x53c>)
 8001fe4:	701a      	strb	r2, [r3, #0]
 8001fe6:	e226      	b.n	8002436 <Get_Heart_data+0x842>
			}
			else if((n_heart_rate>165) && (n_heart_rate<=175))
 8001fe8:	4b50      	ldr	r3, [pc, #320]	; (800212c <Get_Heart_data+0x538>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2ba5      	cmp	r3, #165	; 0xa5
 8001fee:	dd0b      	ble.n	8002008 <Get_Heart_data+0x414>
 8001ff0:	4b4e      	ldr	r3, [pc, #312]	; (800212c <Get_Heart_data+0x538>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2baf      	cmp	r3, #175	; 0xaf
 8001ff6:	dc07      	bgt.n	8002008 <Get_Heart_data+0x414>
			{
				heart_rate = n_heart_rate - 105;
 8001ff8:	4b4c      	ldr	r3, [pc, #304]	; (800212c <Get_Heart_data+0x538>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	3b69      	subs	r3, #105	; 0x69
 8002000:	b2da      	uxtb	r2, r3
 8002002:	4b4b      	ldr	r3, [pc, #300]	; (8002130 <Get_Heart_data+0x53c>)
 8002004:	701a      	strb	r2, [r3, #0]
 8002006:	e216      	b.n	8002436 <Get_Heart_data+0x842>
			}
			else if((n_heart_rate>175) && (n_heart_rate<=185))
 8002008:	4b48      	ldr	r3, [pc, #288]	; (800212c <Get_Heart_data+0x538>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2baf      	cmp	r3, #175	; 0xaf
 800200e:	dd0b      	ble.n	8002028 <Get_Heart_data+0x434>
 8002010:	4b46      	ldr	r3, [pc, #280]	; (800212c <Get_Heart_data+0x538>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2bb9      	cmp	r3, #185	; 0xb9
 8002016:	dc07      	bgt.n	8002028 <Get_Heart_data+0x434>
			{
				heart_rate = n_heart_rate - 115;
 8002018:	4b44      	ldr	r3, [pc, #272]	; (800212c <Get_Heart_data+0x538>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	b2db      	uxtb	r3, r3
 800201e:	3b73      	subs	r3, #115	; 0x73
 8002020:	b2da      	uxtb	r2, r3
 8002022:	4b43      	ldr	r3, [pc, #268]	; (8002130 <Get_Heart_data+0x53c>)
 8002024:	701a      	strb	r2, [r3, #0]
 8002026:	e206      	b.n	8002436 <Get_Heart_data+0x842>
			}
			else if((n_heart_rate>185) && (n_heart_rate<=195))
 8002028:	4b40      	ldr	r3, [pc, #256]	; (800212c <Get_Heart_data+0x538>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2bb9      	cmp	r3, #185	; 0xb9
 800202e:	dd0b      	ble.n	8002048 <Get_Heart_data+0x454>
 8002030:	4b3e      	ldr	r3, [pc, #248]	; (800212c <Get_Heart_data+0x538>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2bc3      	cmp	r3, #195	; 0xc3
 8002036:	dc07      	bgt.n	8002048 <Get_Heart_data+0x454>
			{
				heart_rate = n_heart_rate - 125;
 8002038:	4b3c      	ldr	r3, [pc, #240]	; (800212c <Get_Heart_data+0x538>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	b2db      	uxtb	r3, r3
 800203e:	3b7d      	subs	r3, #125	; 0x7d
 8002040:	b2da      	uxtb	r2, r3
 8002042:	4b3b      	ldr	r3, [pc, #236]	; (8002130 <Get_Heart_data+0x53c>)
 8002044:	701a      	strb	r2, [r3, #0]
 8002046:	e1f6      	b.n	8002436 <Get_Heart_data+0x842>
			}
			else if((n_heart_rate>195) && (n_heart_rate<=205))
 8002048:	4b38      	ldr	r3, [pc, #224]	; (800212c <Get_Heart_data+0x538>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2bc3      	cmp	r3, #195	; 0xc3
 800204e:	dd0b      	ble.n	8002068 <Get_Heart_data+0x474>
 8002050:	4b36      	ldr	r3, [pc, #216]	; (800212c <Get_Heart_data+0x538>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2bcd      	cmp	r3, #205	; 0xcd
 8002056:	dc07      	bgt.n	8002068 <Get_Heart_data+0x474>
			{
				heart_rate = n_heart_rate - 135;
 8002058:	4b34      	ldr	r3, [pc, #208]	; (800212c <Get_Heart_data+0x538>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	b2db      	uxtb	r3, r3
 800205e:	3379      	adds	r3, #121	; 0x79
 8002060:	b2da      	uxtb	r2, r3
 8002062:	4b33      	ldr	r3, [pc, #204]	; (8002130 <Get_Heart_data+0x53c>)
 8002064:	701a      	strb	r2, [r3, #0]
 8002066:	e1e6      	b.n	8002436 <Get_Heart_data+0x842>
			}
			else if((n_heart_rate>205) && (n_heart_rate<=215))
 8002068:	4b30      	ldr	r3, [pc, #192]	; (800212c <Get_Heart_data+0x538>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2bcd      	cmp	r3, #205	; 0xcd
 800206e:	dd0b      	ble.n	8002088 <Get_Heart_data+0x494>
 8002070:	4b2e      	ldr	r3, [pc, #184]	; (800212c <Get_Heart_data+0x538>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2bd7      	cmp	r3, #215	; 0xd7
 8002076:	dc07      	bgt.n	8002088 <Get_Heart_data+0x494>
			{
				heart_rate = n_heart_rate - 145;
 8002078:	4b2c      	ldr	r3, [pc, #176]	; (800212c <Get_Heart_data+0x538>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	b2db      	uxtb	r3, r3
 800207e:	336f      	adds	r3, #111	; 0x6f
 8002080:	b2da      	uxtb	r2, r3
 8002082:	4b2b      	ldr	r3, [pc, #172]	; (8002130 <Get_Heart_data+0x53c>)
 8002084:	701a      	strb	r2, [r3, #0]
 8002086:	e1d6      	b.n	8002436 <Get_Heart_data+0x842>
			}
			else if((n_heart_rate>215) && (n_heart_rate<=225))
 8002088:	4b28      	ldr	r3, [pc, #160]	; (800212c <Get_Heart_data+0x538>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2bd7      	cmp	r3, #215	; 0xd7
 800208e:	dd0b      	ble.n	80020a8 <Get_Heart_data+0x4b4>
 8002090:	4b26      	ldr	r3, [pc, #152]	; (800212c <Get_Heart_data+0x538>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2be1      	cmp	r3, #225	; 0xe1
 8002096:	dc07      	bgt.n	80020a8 <Get_Heart_data+0x4b4>
			{
				heart_rate = n_heart_rate - 155;
 8002098:	4b24      	ldr	r3, [pc, #144]	; (800212c <Get_Heart_data+0x538>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	b2db      	uxtb	r3, r3
 800209e:	3365      	adds	r3, #101	; 0x65
 80020a0:	b2da      	uxtb	r2, r3
 80020a2:	4b23      	ldr	r3, [pc, #140]	; (8002130 <Get_Heart_data+0x53c>)
 80020a4:	701a      	strb	r2, [r3, #0]
 80020a6:	e1c6      	b.n	8002436 <Get_Heart_data+0x842>
			}
			else if((n_heart_rate>225) && (n_heart_rate<=235))
 80020a8:	4b20      	ldr	r3, [pc, #128]	; (800212c <Get_Heart_data+0x538>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2be1      	cmp	r3, #225	; 0xe1
 80020ae:	dd0b      	ble.n	80020c8 <Get_Heart_data+0x4d4>
 80020b0:	4b1e      	ldr	r3, [pc, #120]	; (800212c <Get_Heart_data+0x538>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2beb      	cmp	r3, #235	; 0xeb
 80020b6:	dc07      	bgt.n	80020c8 <Get_Heart_data+0x4d4>
			{
				heart_rate = n_heart_rate - 165;
 80020b8:	4b1c      	ldr	r3, [pc, #112]	; (800212c <Get_Heart_data+0x538>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	335b      	adds	r3, #91	; 0x5b
 80020c0:	b2da      	uxtb	r2, r3
 80020c2:	4b1b      	ldr	r3, [pc, #108]	; (8002130 <Get_Heart_data+0x53c>)
 80020c4:	701a      	strb	r2, [r3, #0]
 80020c6:	e1b6      	b.n	8002436 <Get_Heart_data+0x842>
			}
			else if((n_heart_rate>235) && (n_heart_rate<=245))
 80020c8:	4b18      	ldr	r3, [pc, #96]	; (800212c <Get_Heart_data+0x538>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2beb      	cmp	r3, #235	; 0xeb
 80020ce:	dd0b      	ble.n	80020e8 <Get_Heart_data+0x4f4>
 80020d0:	4b16      	ldr	r3, [pc, #88]	; (800212c <Get_Heart_data+0x538>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2bf5      	cmp	r3, #245	; 0xf5
 80020d6:	dc07      	bgt.n	80020e8 <Get_Heart_data+0x4f4>
			{
				heart_rate = n_heart_rate - 175;
 80020d8:	4b14      	ldr	r3, [pc, #80]	; (800212c <Get_Heart_data+0x538>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	3351      	adds	r3, #81	; 0x51
 80020e0:	b2da      	uxtb	r2, r3
 80020e2:	4b13      	ldr	r3, [pc, #76]	; (8002130 <Get_Heart_data+0x53c>)
 80020e4:	701a      	strb	r2, [r3, #0]
 80020e6:	e1a6      	b.n	8002436 <Get_Heart_data+0x842>
			}
			else if((n_heart_rate>245) && (n_heart_rate<=255))
 80020e8:	4b10      	ldr	r3, [pc, #64]	; (800212c <Get_Heart_data+0x538>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2bf5      	cmp	r3, #245	; 0xf5
 80020ee:	dd0b      	ble.n	8002108 <Get_Heart_data+0x514>
 80020f0:	4b0e      	ldr	r3, [pc, #56]	; (800212c <Get_Heart_data+0x538>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2bff      	cmp	r3, #255	; 0xff
 80020f6:	dc07      	bgt.n	8002108 <Get_Heart_data+0x514>
			{
				heart_rate = n_heart_rate - 185;
 80020f8:	4b0c      	ldr	r3, [pc, #48]	; (800212c <Get_Heart_data+0x538>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	3347      	adds	r3, #71	; 0x47
 8002100:	b2da      	uxtb	r2, r3
 8002102:	4b0b      	ldr	r3, [pc, #44]	; (8002130 <Get_Heart_data+0x53c>)
 8002104:	701a      	strb	r2, [r3, #0]
 8002106:	e196      	b.n	8002436 <Get_Heart_data+0x842>
			}
			else if((n_heart_rate>255) && (n_heart_rate<=265))
 8002108:	4b08      	ldr	r3, [pc, #32]	; (800212c <Get_Heart_data+0x538>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2bff      	cmp	r3, #255	; 0xff
 800210e:	dd11      	ble.n	8002134 <Get_Heart_data+0x540>
 8002110:	4b06      	ldr	r3, [pc, #24]	; (800212c <Get_Heart_data+0x538>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 8002118:	da0c      	bge.n	8002134 <Get_Heart_data+0x540>
			{
				heart_rate = n_heart_rate - 195;
 800211a:	4b04      	ldr	r3, [pc, #16]	; (800212c <Get_Heart_data+0x538>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	b2db      	uxtb	r3, r3
 8002120:	333d      	adds	r3, #61	; 0x3d
 8002122:	b2da      	uxtb	r2, r3
 8002124:	4b02      	ldr	r3, [pc, #8]	; (8002130 <Get_Heart_data+0x53c>)
 8002126:	701a      	strb	r2, [r3, #0]
 8002128:	e185      	b.n	8002436 <Get_Heart_data+0x842>
 800212a:	bf00      	nop
 800212c:	20001cc8 	.word	0x20001cc8
 8002130:	2000000c 	.word	0x2000000c
			}
			else if((n_heart_rate>265) && (n_heart_rate<=275))
 8002134:	4b8f      	ldr	r3, [pc, #572]	; (8002374 <Get_Heart_data+0x780>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 800213c:	db0c      	blt.n	8002158 <Get_Heart_data+0x564>
 800213e:	4b8d      	ldr	r3, [pc, #564]	; (8002374 <Get_Heart_data+0x780>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f5b3 7f8a 	cmp.w	r3, #276	; 0x114
 8002146:	da07      	bge.n	8002158 <Get_Heart_data+0x564>
			{
				heart_rate = n_heart_rate - 205;
 8002148:	4b8a      	ldr	r3, [pc, #552]	; (8002374 <Get_Heart_data+0x780>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	b2db      	uxtb	r3, r3
 800214e:	3333      	adds	r3, #51	; 0x33
 8002150:	b2da      	uxtb	r2, r3
 8002152:	4b89      	ldr	r3, [pc, #548]	; (8002378 <Get_Heart_data+0x784>)
 8002154:	701a      	strb	r2, [r3, #0]
 8002156:	e16e      	b.n	8002436 <Get_Heart_data+0x842>
			}
			else if((n_heart_rate>275) && (n_heart_rate<=285))
 8002158:	4b86      	ldr	r3, [pc, #536]	; (8002374 <Get_Heart_data+0x780>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f5b3 7f8a 	cmp.w	r3, #276	; 0x114
 8002160:	db0c      	blt.n	800217c <Get_Heart_data+0x588>
 8002162:	4b84      	ldr	r3, [pc, #528]	; (8002374 <Get_Heart_data+0x780>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f5b3 7f8f 	cmp.w	r3, #286	; 0x11e
 800216a:	da07      	bge.n	800217c <Get_Heart_data+0x588>
			{
				heart_rate = n_heart_rate - 215;
 800216c:	4b81      	ldr	r3, [pc, #516]	; (8002374 <Get_Heart_data+0x780>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	b2db      	uxtb	r3, r3
 8002172:	3329      	adds	r3, #41	; 0x29
 8002174:	b2da      	uxtb	r2, r3
 8002176:	4b80      	ldr	r3, [pc, #512]	; (8002378 <Get_Heart_data+0x784>)
 8002178:	701a      	strb	r2, [r3, #0]
 800217a:	e15c      	b.n	8002436 <Get_Heart_data+0x842>
			}
			else if((n_heart_rate>285) && (n_heart_rate<=295))
 800217c:	4b7d      	ldr	r3, [pc, #500]	; (8002374 <Get_Heart_data+0x780>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f5b3 7f8f 	cmp.w	r3, #286	; 0x11e
 8002184:	db0c      	blt.n	80021a0 <Get_Heart_data+0x5ac>
 8002186:	4b7b      	ldr	r3, [pc, #492]	; (8002374 <Get_Heart_data+0x780>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f5b3 7f94 	cmp.w	r3, #296	; 0x128
 800218e:	da07      	bge.n	80021a0 <Get_Heart_data+0x5ac>
			{
				heart_rate = n_heart_rate - 225;
 8002190:	4b78      	ldr	r3, [pc, #480]	; (8002374 <Get_Heart_data+0x780>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	b2db      	uxtb	r3, r3
 8002196:	331f      	adds	r3, #31
 8002198:	b2da      	uxtb	r2, r3
 800219a:	4b77      	ldr	r3, [pc, #476]	; (8002378 <Get_Heart_data+0x784>)
 800219c:	701a      	strb	r2, [r3, #0]
 800219e:	e14a      	b.n	8002436 <Get_Heart_data+0x842>
			}
			else if((n_heart_rate>295) && (n_heart_rate<=305))
 80021a0:	4b74      	ldr	r3, [pc, #464]	; (8002374 <Get_Heart_data+0x780>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f5b3 7f94 	cmp.w	r3, #296	; 0x128
 80021a8:	db0c      	blt.n	80021c4 <Get_Heart_data+0x5d0>
 80021aa:	4b72      	ldr	r3, [pc, #456]	; (8002374 <Get_Heart_data+0x780>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80021b2:	da07      	bge.n	80021c4 <Get_Heart_data+0x5d0>
			{
				heart_rate = n_heart_rate - 235;
 80021b4:	4b6f      	ldr	r3, [pc, #444]	; (8002374 <Get_Heart_data+0x780>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	3315      	adds	r3, #21
 80021bc:	b2da      	uxtb	r2, r3
 80021be:	4b6e      	ldr	r3, [pc, #440]	; (8002378 <Get_Heart_data+0x784>)
 80021c0:	701a      	strb	r2, [r3, #0]
 80021c2:	e138      	b.n	8002436 <Get_Heart_data+0x842>
			}
			else if((n_heart_rate>305) && (n_heart_rate<=315))
 80021c4:	4b6b      	ldr	r3, [pc, #428]	; (8002374 <Get_Heart_data+0x780>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80021cc:	db0c      	blt.n	80021e8 <Get_Heart_data+0x5f4>
 80021ce:	4b69      	ldr	r3, [pc, #420]	; (8002374 <Get_Heart_data+0x780>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 80021d6:	da07      	bge.n	80021e8 <Get_Heart_data+0x5f4>
			{
				heart_rate = n_heart_rate - 245;
 80021d8:	4b66      	ldr	r3, [pc, #408]	; (8002374 <Get_Heart_data+0x780>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	330b      	adds	r3, #11
 80021e0:	b2da      	uxtb	r2, r3
 80021e2:	4b65      	ldr	r3, [pc, #404]	; (8002378 <Get_Heart_data+0x784>)
 80021e4:	701a      	strb	r2, [r3, #0]
 80021e6:	e126      	b.n	8002436 <Get_Heart_data+0x842>
			}
			else if((n_heart_rate>315) && (n_heart_rate<=325))
 80021e8:	4b62      	ldr	r3, [pc, #392]	; (8002374 <Get_Heart_data+0x780>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 80021f0:	db0c      	blt.n	800220c <Get_Heart_data+0x618>
 80021f2:	4b60      	ldr	r3, [pc, #384]	; (8002374 <Get_Heart_data+0x780>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f5b3 7fa3 	cmp.w	r3, #326	; 0x146
 80021fa:	da07      	bge.n	800220c <Get_Heart_data+0x618>
			{
				heart_rate = n_heart_rate - 255;
 80021fc:	4b5d      	ldr	r3, [pc, #372]	; (8002374 <Get_Heart_data+0x780>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	b2db      	uxtb	r3, r3
 8002202:	3301      	adds	r3, #1
 8002204:	b2da      	uxtb	r2, r3
 8002206:	4b5c      	ldr	r3, [pc, #368]	; (8002378 <Get_Heart_data+0x784>)
 8002208:	701a      	strb	r2, [r3, #0]
 800220a:	e114      	b.n	8002436 <Get_Heart_data+0x842>
			}
			else if((n_heart_rate>325) && (n_heart_rate<=335))
 800220c:	4b59      	ldr	r3, [pc, #356]	; (8002374 <Get_Heart_data+0x780>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f5b3 7fa3 	cmp.w	r3, #326	; 0x146
 8002214:	db0c      	blt.n	8002230 <Get_Heart_data+0x63c>
 8002216:	4b57      	ldr	r3, [pc, #348]	; (8002374 <Get_Heart_data+0x780>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f5b3 7fa8 	cmp.w	r3, #336	; 0x150
 800221e:	da07      	bge.n	8002230 <Get_Heart_data+0x63c>
			{
				heart_rate = n_heart_rate - 265;
 8002220:	4b54      	ldr	r3, [pc, #336]	; (8002374 <Get_Heart_data+0x780>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	b2db      	uxtb	r3, r3
 8002226:	3b09      	subs	r3, #9
 8002228:	b2da      	uxtb	r2, r3
 800222a:	4b53      	ldr	r3, [pc, #332]	; (8002378 <Get_Heart_data+0x784>)
 800222c:	701a      	strb	r2, [r3, #0]
 800222e:	e102      	b.n	8002436 <Get_Heart_data+0x842>
			}
			else if((n_heart_rate>335) && (n_heart_rate<=345))
 8002230:	4b50      	ldr	r3, [pc, #320]	; (8002374 <Get_Heart_data+0x780>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f5b3 7fa8 	cmp.w	r3, #336	; 0x150
 8002238:	db0c      	blt.n	8002254 <Get_Heart_data+0x660>
 800223a:	4b4e      	ldr	r3, [pc, #312]	; (8002374 <Get_Heart_data+0x780>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f5b3 7fad 	cmp.w	r3, #346	; 0x15a
 8002242:	da07      	bge.n	8002254 <Get_Heart_data+0x660>
			{
				heart_rate = n_heart_rate - 275;
 8002244:	4b4b      	ldr	r3, [pc, #300]	; (8002374 <Get_Heart_data+0x780>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	b2db      	uxtb	r3, r3
 800224a:	3b13      	subs	r3, #19
 800224c:	b2da      	uxtb	r2, r3
 800224e:	4b4a      	ldr	r3, [pc, #296]	; (8002378 <Get_Heart_data+0x784>)
 8002250:	701a      	strb	r2, [r3, #0]
 8002252:	e0f0      	b.n	8002436 <Get_Heart_data+0x842>
			}
			else if((n_heart_rate>345) && (n_heart_rate<=355))
 8002254:	4b47      	ldr	r3, [pc, #284]	; (8002374 <Get_Heart_data+0x780>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f5b3 7fad 	cmp.w	r3, #346	; 0x15a
 800225c:	db0c      	blt.n	8002278 <Get_Heart_data+0x684>
 800225e:	4b45      	ldr	r3, [pc, #276]	; (8002374 <Get_Heart_data+0x780>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f5b3 7fb2 	cmp.w	r3, #356	; 0x164
 8002266:	da07      	bge.n	8002278 <Get_Heart_data+0x684>
			{
				heart_rate = n_heart_rate - 285;
 8002268:	4b42      	ldr	r3, [pc, #264]	; (8002374 <Get_Heart_data+0x780>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	b2db      	uxtb	r3, r3
 800226e:	3b1d      	subs	r3, #29
 8002270:	b2da      	uxtb	r2, r3
 8002272:	4b41      	ldr	r3, [pc, #260]	; (8002378 <Get_Heart_data+0x784>)
 8002274:	701a      	strb	r2, [r3, #0]
 8002276:	e0de      	b.n	8002436 <Get_Heart_data+0x842>
			}
			else if((n_heart_rate>355) && (n_heart_rate<=365))
 8002278:	4b3e      	ldr	r3, [pc, #248]	; (8002374 <Get_Heart_data+0x780>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f5b3 7fb2 	cmp.w	r3, #356	; 0x164
 8002280:	db0c      	blt.n	800229c <Get_Heart_data+0x6a8>
 8002282:	4b3c      	ldr	r3, [pc, #240]	; (8002374 <Get_Heart_data+0x780>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f5b3 7fb7 	cmp.w	r3, #366	; 0x16e
 800228a:	da07      	bge.n	800229c <Get_Heart_data+0x6a8>
			{
				heart_rate = n_heart_rate - 295;
 800228c:	4b39      	ldr	r3, [pc, #228]	; (8002374 <Get_Heart_data+0x780>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	b2db      	uxtb	r3, r3
 8002292:	3b27      	subs	r3, #39	; 0x27
 8002294:	b2da      	uxtb	r2, r3
 8002296:	4b38      	ldr	r3, [pc, #224]	; (8002378 <Get_Heart_data+0x784>)
 8002298:	701a      	strb	r2, [r3, #0]
 800229a:	e0cc      	b.n	8002436 <Get_Heart_data+0x842>
			}
			else if((n_heart_rate>365) && (n_heart_rate<=375))
 800229c:	4b35      	ldr	r3, [pc, #212]	; (8002374 <Get_Heart_data+0x780>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f5b3 7fb7 	cmp.w	r3, #366	; 0x16e
 80022a4:	db0c      	blt.n	80022c0 <Get_Heart_data+0x6cc>
 80022a6:	4b33      	ldr	r3, [pc, #204]	; (8002374 <Get_Heart_data+0x780>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f5b3 7fbc 	cmp.w	r3, #376	; 0x178
 80022ae:	da07      	bge.n	80022c0 <Get_Heart_data+0x6cc>
			{
				heart_rate = n_heart_rate - 305;
 80022b0:	4b30      	ldr	r3, [pc, #192]	; (8002374 <Get_Heart_data+0x780>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	3b31      	subs	r3, #49	; 0x31
 80022b8:	b2da      	uxtb	r2, r3
 80022ba:	4b2f      	ldr	r3, [pc, #188]	; (8002378 <Get_Heart_data+0x784>)
 80022bc:	701a      	strb	r2, [r3, #0]
 80022be:	e0ba      	b.n	8002436 <Get_Heart_data+0x842>
			}
			else if((n_heart_rate>375) && (n_heart_rate<=385))
 80022c0:	4b2c      	ldr	r3, [pc, #176]	; (8002374 <Get_Heart_data+0x780>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f5b3 7fbc 	cmp.w	r3, #376	; 0x178
 80022c8:	db0c      	blt.n	80022e4 <Get_Heart_data+0x6f0>
 80022ca:	4b2a      	ldr	r3, [pc, #168]	; (8002374 <Get_Heart_data+0x780>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80022d2:	da07      	bge.n	80022e4 <Get_Heart_data+0x6f0>
			{
				heart_rate = n_heart_rate - 315;
 80022d4:	4b27      	ldr	r3, [pc, #156]	; (8002374 <Get_Heart_data+0x780>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	3b3b      	subs	r3, #59	; 0x3b
 80022dc:	b2da      	uxtb	r2, r3
 80022de:	4b26      	ldr	r3, [pc, #152]	; (8002378 <Get_Heart_data+0x784>)
 80022e0:	701a      	strb	r2, [r3, #0]
 80022e2:	e0a8      	b.n	8002436 <Get_Heart_data+0x842>
			}
			else if((n_heart_rate>385) && (n_heart_rate<=395))
 80022e4:	4b23      	ldr	r3, [pc, #140]	; (8002374 <Get_Heart_data+0x780>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80022ec:	db0c      	blt.n	8002308 <Get_Heart_data+0x714>
 80022ee:	4b21      	ldr	r3, [pc, #132]	; (8002374 <Get_Heart_data+0x780>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f5b3 7fc6 	cmp.w	r3, #396	; 0x18c
 80022f6:	da07      	bge.n	8002308 <Get_Heart_data+0x714>
			{
				heart_rate = n_heart_rate - 325;
 80022f8:	4b1e      	ldr	r3, [pc, #120]	; (8002374 <Get_Heart_data+0x780>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	3b45      	subs	r3, #69	; 0x45
 8002300:	b2da      	uxtb	r2, r3
 8002302:	4b1d      	ldr	r3, [pc, #116]	; (8002378 <Get_Heart_data+0x784>)
 8002304:	701a      	strb	r2, [r3, #0]
 8002306:	e096      	b.n	8002436 <Get_Heart_data+0x842>
			}
			else if((n_heart_rate>395) && (n_heart_rate<=405))
 8002308:	4b1a      	ldr	r3, [pc, #104]	; (8002374 <Get_Heart_data+0x780>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f5b3 7fc6 	cmp.w	r3, #396	; 0x18c
 8002310:	db0c      	blt.n	800232c <Get_Heart_data+0x738>
 8002312:	4b18      	ldr	r3, [pc, #96]	; (8002374 <Get_Heart_data+0x780>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f5b3 7fcb 	cmp.w	r3, #406	; 0x196
 800231a:	da07      	bge.n	800232c <Get_Heart_data+0x738>
			{
				heart_rate = n_heart_rate - 335;
 800231c:	4b15      	ldr	r3, [pc, #84]	; (8002374 <Get_Heart_data+0x780>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	b2db      	uxtb	r3, r3
 8002322:	3b4f      	subs	r3, #79	; 0x4f
 8002324:	b2da      	uxtb	r2, r3
 8002326:	4b14      	ldr	r3, [pc, #80]	; (8002378 <Get_Heart_data+0x784>)
 8002328:	701a      	strb	r2, [r3, #0]
 800232a:	e084      	b.n	8002436 <Get_Heart_data+0x842>
			}
			else if((n_heart_rate>405) && (n_heart_rate<=415))
 800232c:	4b11      	ldr	r3, [pc, #68]	; (8002374 <Get_Heart_data+0x780>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f5b3 7fcb 	cmp.w	r3, #406	; 0x196
 8002334:	db0c      	blt.n	8002350 <Get_Heart_data+0x75c>
 8002336:	4b0f      	ldr	r3, [pc, #60]	; (8002374 <Get_Heart_data+0x780>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f5b3 7fd0 	cmp.w	r3, #416	; 0x1a0
 800233e:	da07      	bge.n	8002350 <Get_Heart_data+0x75c>
			{
				heart_rate = n_heart_rate - 345;
 8002340:	4b0c      	ldr	r3, [pc, #48]	; (8002374 <Get_Heart_data+0x780>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	b2db      	uxtb	r3, r3
 8002346:	3b59      	subs	r3, #89	; 0x59
 8002348:	b2da      	uxtb	r2, r3
 800234a:	4b0b      	ldr	r3, [pc, #44]	; (8002378 <Get_Heart_data+0x784>)
 800234c:	701a      	strb	r2, [r3, #0]
 800234e:	e072      	b.n	8002436 <Get_Heart_data+0x842>
			}
			else if((n_heart_rate>415) && (n_heart_rate<=425))
 8002350:	4b08      	ldr	r3, [pc, #32]	; (8002374 <Get_Heart_data+0x780>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f5b3 7fd0 	cmp.w	r3, #416	; 0x1a0
 8002358:	db10      	blt.n	800237c <Get_Heart_data+0x788>
 800235a:	4b06      	ldr	r3, [pc, #24]	; (8002374 <Get_Heart_data+0x780>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f5b3 7fd5 	cmp.w	r3, #426	; 0x1aa
 8002362:	da0b      	bge.n	800237c <Get_Heart_data+0x788>
			{
				heart_rate = n_heart_rate - 355;
 8002364:	4b03      	ldr	r3, [pc, #12]	; (8002374 <Get_Heart_data+0x780>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	b2db      	uxtb	r3, r3
 800236a:	3b63      	subs	r3, #99	; 0x63
 800236c:	b2da      	uxtb	r2, r3
 800236e:	4b02      	ldr	r3, [pc, #8]	; (8002378 <Get_Heart_data+0x784>)
 8002370:	701a      	strb	r2, [r3, #0]
 8002372:	e060      	b.n	8002436 <Get_Heart_data+0x842>
 8002374:	20001cc8 	.word	0x20001cc8
 8002378:	2000000c 	.word	0x2000000c
			}
			else if((n_heart_rate>425) && (n_heart_rate<=435))
 800237c:	4b45      	ldr	r3, [pc, #276]	; (8002494 <Get_Heart_data+0x8a0>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f5b3 7fd5 	cmp.w	r3, #426	; 0x1aa
 8002384:	db0c      	blt.n	80023a0 <Get_Heart_data+0x7ac>
 8002386:	4b43      	ldr	r3, [pc, #268]	; (8002494 <Get_Heart_data+0x8a0>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f5b3 7fda 	cmp.w	r3, #436	; 0x1b4
 800238e:	da07      	bge.n	80023a0 <Get_Heart_data+0x7ac>
			{
				heart_rate = n_heart_rate - 365;
 8002390:	4b40      	ldr	r3, [pc, #256]	; (8002494 <Get_Heart_data+0x8a0>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	b2db      	uxtb	r3, r3
 8002396:	3b6d      	subs	r3, #109	; 0x6d
 8002398:	b2da      	uxtb	r2, r3
 800239a:	4b3f      	ldr	r3, [pc, #252]	; (8002498 <Get_Heart_data+0x8a4>)
 800239c:	701a      	strb	r2, [r3, #0]
 800239e:	e04a      	b.n	8002436 <Get_Heart_data+0x842>
			}
			else if((n_heart_rate>435) && (n_heart_rate<=445))
 80023a0:	4b3c      	ldr	r3, [pc, #240]	; (8002494 <Get_Heart_data+0x8a0>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f5b3 7fda 	cmp.w	r3, #436	; 0x1b4
 80023a8:	db0c      	blt.n	80023c4 <Get_Heart_data+0x7d0>
 80023aa:	4b3a      	ldr	r3, [pc, #232]	; (8002494 <Get_Heart_data+0x8a0>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f5b3 7fdf 	cmp.w	r3, #446	; 0x1be
 80023b2:	da07      	bge.n	80023c4 <Get_Heart_data+0x7d0>
			{
				heart_rate = n_heart_rate - 375;
 80023b4:	4b37      	ldr	r3, [pc, #220]	; (8002494 <Get_Heart_data+0x8a0>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	3b77      	subs	r3, #119	; 0x77
 80023bc:	b2da      	uxtb	r2, r3
 80023be:	4b36      	ldr	r3, [pc, #216]	; (8002498 <Get_Heart_data+0x8a4>)
 80023c0:	701a      	strb	r2, [r3, #0]
 80023c2:	e038      	b.n	8002436 <Get_Heart_data+0x842>
			}
			else if((n_heart_rate>445) && (n_heart_rate<=455))
 80023c4:	4b33      	ldr	r3, [pc, #204]	; (8002494 <Get_Heart_data+0x8a0>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f5b3 7fdf 	cmp.w	r3, #446	; 0x1be
 80023cc:	db0c      	blt.n	80023e8 <Get_Heart_data+0x7f4>
 80023ce:	4b31      	ldr	r3, [pc, #196]	; (8002494 <Get_Heart_data+0x8a0>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f5b3 7fe4 	cmp.w	r3, #456	; 0x1c8
 80023d6:	da07      	bge.n	80023e8 <Get_Heart_data+0x7f4>
			{
				heart_rate = n_heart_rate - 385;
 80023d8:	4b2e      	ldr	r3, [pc, #184]	; (8002494 <Get_Heart_data+0x8a0>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	337f      	adds	r3, #127	; 0x7f
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	4b2d      	ldr	r3, [pc, #180]	; (8002498 <Get_Heart_data+0x8a4>)
 80023e4:	701a      	strb	r2, [r3, #0]
 80023e6:	e026      	b.n	8002436 <Get_Heart_data+0x842>
			}
			else if((n_heart_rate>455) && (n_heart_rate<=465))
 80023e8:	4b2a      	ldr	r3, [pc, #168]	; (8002494 <Get_Heart_data+0x8a0>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f5b3 7fe4 	cmp.w	r3, #456	; 0x1c8
 80023f0:	db0c      	blt.n	800240c <Get_Heart_data+0x818>
 80023f2:	4b28      	ldr	r3, [pc, #160]	; (8002494 <Get_Heart_data+0x8a0>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f5b3 7fe9 	cmp.w	r3, #466	; 0x1d2
 80023fa:	da07      	bge.n	800240c <Get_Heart_data+0x818>
			{
				heart_rate = n_heart_rate - 395;
 80023fc:	4b25      	ldr	r3, [pc, #148]	; (8002494 <Get_Heart_data+0x8a0>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	b2db      	uxtb	r3, r3
 8002402:	3375      	adds	r3, #117	; 0x75
 8002404:	b2da      	uxtb	r2, r3
 8002406:	4b24      	ldr	r3, [pc, #144]	; (8002498 <Get_Heart_data+0x8a4>)
 8002408:	701a      	strb	r2, [r3, #0]
 800240a:	e014      	b.n	8002436 <Get_Heart_data+0x842>
			}
			else if((n_heart_rate>465) && (n_heart_rate<=475))
 800240c:	4b21      	ldr	r3, [pc, #132]	; (8002494 <Get_Heart_data+0x8a0>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f5b3 7fe9 	cmp.w	r3, #466	; 0x1d2
 8002414:	db0c      	blt.n	8002430 <Get_Heart_data+0x83c>
 8002416:	4b1f      	ldr	r3, [pc, #124]	; (8002494 <Get_Heart_data+0x8a0>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f5b3 7fee 	cmp.w	r3, #476	; 0x1dc
 800241e:	da07      	bge.n	8002430 <Get_Heart_data+0x83c>
			{
				heart_rate = n_heart_rate - 405;
 8002420:	4b1c      	ldr	r3, [pc, #112]	; (8002494 <Get_Heart_data+0x8a0>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	b2db      	uxtb	r3, r3
 8002426:	336b      	adds	r3, #107	; 0x6b
 8002428:	b2da      	uxtb	r2, r3
 800242a:	4b1b      	ldr	r3, [pc, #108]	; (8002498 <Get_Heart_data+0x8a4>)
 800242c:	701a      	strb	r2, [r3, #0]
 800242e:	e002      	b.n	8002436 <Get_Heart_data+0x842>
			}
			else
			{
				heart_rate = 62;
 8002430:	4b19      	ldr	r3, [pc, #100]	; (8002498 <Get_Heart_data+0x8a4>)
 8002432:	223e      	movs	r2, #62	; 0x3e
 8002434:	701a      	strb	r2, [r3, #0]
			}
		}


		if(ch_spo2_valid && (n_sp02>90))
 8002436:	4b19      	ldr	r3, [pc, #100]	; (800249c <Get_Heart_data+0x8a8>)
 8002438:	f993 3000 	ldrsb.w	r3, [r3]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d008      	beq.n	8002452 <Get_Heart_data+0x85e>
 8002440:	4b17      	ldr	r3, [pc, #92]	; (80024a0 <Get_Heart_data+0x8ac>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2b5a      	cmp	r3, #90	; 0x5a
 8002446:	dd04      	ble.n	8002452 <Get_Heart_data+0x85e>
		{
			blood_oxygen = n_sp02;
 8002448:	4b15      	ldr	r3, [pc, #84]	; (80024a0 <Get_Heart_data+0x8ac>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	b2da      	uxtb	r2, r3
 800244e:	4b15      	ldr	r3, [pc, #84]	; (80024a4 <Get_Heart_data+0x8b0>)
 8002450:	701a      	strb	r2, [r3, #0]
		}
		if(Get_Key_value(0)!= 0) break;
 8002452:	2000      	movs	r0, #0
 8002454:	f7fe ff0a 	bl	800126c <Get_Key_value>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d107      	bne.n	800246e <Get_Heart_data+0x87a>
	for(i=0;i<100;i++) //get 20 samples
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	3301      	adds	r3, #1
 8002462:	60fb      	str	r3, [r7, #12]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2b63      	cmp	r3, #99	; 0x63
 8002468:	f77f ac2d 	ble.w	8001cc6 <Get_Heart_data+0xd2>
 800246c:	e000      	b.n	8002470 <Get_Heart_data+0x87c>
		if(Get_Key_value(0)!= 0) break;
 800246e:	bf00      	nop
	}

	maxim_heart_rate_and_oxygen_saturation(aun_ir_buffer, n_ir_buffer_length, aun_red_buffer, &n_sp02, &ch_spo2_valid, &n_heart_rate, &ch_hr_valid);
 8002470:	4b0d      	ldr	r3, [pc, #52]	; (80024a8 <Get_Heart_data+0x8b4>)
 8002472:	6819      	ldr	r1, [r3, #0]
 8002474:	4b0d      	ldr	r3, [pc, #52]	; (80024ac <Get_Heart_data+0x8b8>)
 8002476:	9302      	str	r3, [sp, #8]
 8002478:	4b06      	ldr	r3, [pc, #24]	; (8002494 <Get_Heart_data+0x8a0>)
 800247a:	9301      	str	r3, [sp, #4]
 800247c:	4b07      	ldr	r3, [pc, #28]	; (800249c <Get_Heart_data+0x8a8>)
 800247e:	9300      	str	r3, [sp, #0]
 8002480:	4b07      	ldr	r3, [pc, #28]	; (80024a0 <Get_Heart_data+0x8ac>)
 8002482:	4a0b      	ldr	r2, [pc, #44]	; (80024b0 <Get_Heart_data+0x8bc>)
 8002484:	480b      	ldr	r0, [pc, #44]	; (80024b4 <Get_Heart_data+0x8c0>)
 8002486:	f001 fb07 	bl	8003a98 <maxim_heart_rate_and_oxygen_saturation>
	{
		blood_oxygen -= 13;
	}
	*/

}
 800248a:	bf00      	nop
 800248c:	3710      	adds	r7, #16
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	20001cc8 	.word	0x20001cc8
 8002498:	2000000c 	.word	0x2000000c
 800249c:	20001ccc 	.word	0x20001ccc
 80024a0:	200019a4 	.word	0x200019a4
 80024a4:	2000000d 	.word	0x2000000d
 80024a8:	200019a0 	.word	0x200019a0
 80024ac:	20001ccd 	.word	0x20001ccd
 80024b0:	20001b38 	.word	0x20001b38
 80024b4:	200019a8 	.word	0x200019a8

080024b8 <Get_GPS_data>:
*/
}


void Get_GPS_data(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
	GPS_UART_CallBack();
 80024bc:	f001 f92e 	bl	800371c <GPS_UART_CallBack>
	//if(longitude >= 40.4290)
	//{
	//	longitude -= 0.0001;
	//}

	latitude = GPS.dec_latitude;
 80024c0:	4b04      	ldr	r3, [pc, #16]	; (80024d4 <Get_GPS_data+0x1c>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	4a04      	ldr	r2, [pc, #16]	; (80024d8 <Get_GPS_data+0x20>)
 80024c6:	6013      	str	r3, [r2, #0]
	longitude = GPS.dec_longitude;
 80024c8:	4b02      	ldr	r3, [pc, #8]	; (80024d4 <Get_GPS_data+0x1c>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a03      	ldr	r2, [pc, #12]	; (80024dc <Get_GPS_data+0x24>)
 80024ce:	6013      	str	r3, [r2, #0]

}
 80024d0:	bf00      	nop
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	20001d18 	.word	0x20001d18
 80024d8:	20000010 	.word	0x20000010
 80024dc:	20000014 	.word	0x20000014

080024e0 <BlueStatus>:


void BlueStatus(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
	blueOn = HAL_GPIO_ReadPin(BLU_GPIO_SW_GPIO_Port, BLU_GPIO_SW_Pin);
 80024e4:	2110      	movs	r1, #16
 80024e6:	4804      	ldr	r0, [pc, #16]	; (80024f8 <BlueStatus+0x18>)
 80024e8:	f004 fe58 	bl	800719c <HAL_GPIO_ReadPin>
 80024ec:	4603      	mov	r3, r0
 80024ee:	461a      	mov	r2, r3
 80024f0:	4b02      	ldr	r3, [pc, #8]	; (80024fc <BlueStatus+0x1c>)
 80024f2:	701a      	strb	r2, [r3, #0]
}
 80024f4:	bf00      	nop
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	40020000 	.word	0x40020000
 80024fc:	2000022d 	.word	0x2000022d

08002500 <MENU_init_>:

extern unsigned char selection = 10;
extern unsigned char selectedFlag = 100;

void MENU_init_(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af04      	add	r7, sp, #16

	//LCD_DrawRectangle(0,0,128, 160,WHITE);
	//LCD_Fill(LCD_W/16*10, 0,LCD_W/16*13,LCD_H/16*2,LIGHTBLUE); //bluetooth background
	LCD_Fill(LCD_W/16*13, 0,LCD_W,LCD_H/16*2,MAGENTA); //gps background
 8002506:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800250a:	9300      	str	r3, [sp, #0]
 800250c:	2314      	movs	r3, #20
 800250e:	2280      	movs	r2, #128	; 0x80
 8002510:	2100      	movs	r1, #0
 8002512:	2068      	movs	r0, #104	; 0x68
 8002514:	f002 fc74 	bl	8004e00 <LCD_Fill>
	//LCD_ShowChar(LCD_W/16*11,0,'B',BLUE,LIGHTBLUE,16,1);//bluetooth word
	LCD_ShowChar(LCD_W/16*14,0,'P',CYAN,MAGENTA,16,1); //Power word
 8002518:	2301      	movs	r3, #1
 800251a:	9302      	str	r3, [sp, #8]
 800251c:	2310      	movs	r3, #16
 800251e:	9301      	str	r3, [sp, #4]
 8002520:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8002524:	9300      	str	r3, [sp, #0]
 8002526:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800252a:	2250      	movs	r2, #80	; 0x50
 800252c:	2100      	movs	r1, #0
 800252e:	2070      	movs	r0, #112	; 0x70
 8002530:	f002 fcb2 	bl	8004e98 <LCD_ShowChar>

	LCD_ShowString (LCD_W/16*1,LCD_H/16*3,"TEMP", WHITE,	BLACK, 12,	1); //Tempature
 8002534:	2301      	movs	r3, #1
 8002536:	9302      	str	r3, [sp, #8]
 8002538:	230c      	movs	r3, #12
 800253a:	9301      	str	r3, [sp, #4]
 800253c:	2300      	movs	r3, #0
 800253e:	9300      	str	r3, [sp, #0]
 8002540:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002544:	4abd      	ldr	r2, [pc, #756]	; (800283c <MENU_init_+0x33c>)
 8002546:	211e      	movs	r1, #30
 8002548:	2008      	movs	r0, #8
 800254a:	f002 fd7b 	bl	8005044 <LCD_ShowString>
	LCD_ShowString (LCD_W/16*1,LCD_H/16*5,"SpO2", WHITE,	BLACK, 12,	1); //Blood Oxygen
 800254e:	2301      	movs	r3, #1
 8002550:	9302      	str	r3, [sp, #8]
 8002552:	230c      	movs	r3, #12
 8002554:	9301      	str	r3, [sp, #4]
 8002556:	2300      	movs	r3, #0
 8002558:	9300      	str	r3, [sp, #0]
 800255a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800255e:	4ab8      	ldr	r2, [pc, #736]	; (8002840 <MENU_init_+0x340>)
 8002560:	2132      	movs	r1, #50	; 0x32
 8002562:	2008      	movs	r0, #8
 8002564:	f002 fd6e 	bl	8005044 <LCD_ShowString>
	LCD_ShowString (LCD_W/16*1,LCD_H/16*7,"Heart", WHITE,	BLACK, 12,	1);
 8002568:	2301      	movs	r3, #1
 800256a:	9302      	str	r3, [sp, #8]
 800256c:	230c      	movs	r3, #12
 800256e:	9301      	str	r3, [sp, #4]
 8002570:	2300      	movs	r3, #0
 8002572:	9300      	str	r3, [sp, #0]
 8002574:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002578:	4ab2      	ldr	r2, [pc, #712]	; (8002844 <MENU_init_+0x344>)
 800257a:	2146      	movs	r1, #70	; 0x46
 800257c:	2008      	movs	r0, #8
 800257e:	f002 fd61 	bl	8005044 <LCD_ShowString>
	LCD_ShowString (LCD_W/16*1,LCD_H/16*9,"Latitude", WHITE,	BLACK, 12,	1);
 8002582:	2301      	movs	r3, #1
 8002584:	9302      	str	r3, [sp, #8]
 8002586:	230c      	movs	r3, #12
 8002588:	9301      	str	r3, [sp, #4]
 800258a:	2300      	movs	r3, #0
 800258c:	9300      	str	r3, [sp, #0]
 800258e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002592:	4aad      	ldr	r2, [pc, #692]	; (8002848 <MENU_init_+0x348>)
 8002594:	215a      	movs	r1, #90	; 0x5a
 8002596:	2008      	movs	r0, #8
 8002598:	f002 fd54 	bl	8005044 <LCD_ShowString>
	LCD_ShowString (LCD_W/16*1,LCD_H/16*11,"Longitude", WHITE,	BLACK, 12,	1);
 800259c:	2301      	movs	r3, #1
 800259e:	9302      	str	r3, [sp, #8]
 80025a0:	230c      	movs	r3, #12
 80025a2:	9301      	str	r3, [sp, #4]
 80025a4:	2300      	movs	r3, #0
 80025a6:	9300      	str	r3, [sp, #0]
 80025a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025ac:	4aa7      	ldr	r2, [pc, #668]	; (800284c <MENU_init_+0x34c>)
 80025ae:	216e      	movs	r1, #110	; 0x6e
 80025b0:	2008      	movs	r0, #8
 80025b2:	f002 fd47 	bl	8005044 <LCD_ShowString>
	LCD_ShowString (LCD_W/16*1,LCD_H/16*13,"Fall?", WHITE,	BLACK, 12,	1);
 80025b6:	2301      	movs	r3, #1
 80025b8:	9302      	str	r3, [sp, #8]
 80025ba:	230c      	movs	r3, #12
 80025bc:	9301      	str	r3, [sp, #4]
 80025be:	2300      	movs	r3, #0
 80025c0:	9300      	str	r3, [sp, #0]
 80025c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025c6:	4aa2      	ldr	r2, [pc, #648]	; (8002850 <MENU_init_+0x350>)
 80025c8:	2182      	movs	r1, #130	; 0x82
 80025ca:	2008      	movs	r0, #8
 80025cc:	f002 fd3a 	bl	8005044 <LCD_ShowString>

	LCD_ShowString (LCD_W/16*6,LCD_H/16*14+8,"SETTING", WHITE,	BLACK, 12,	1);
 80025d0:	2301      	movs	r3, #1
 80025d2:	9302      	str	r3, [sp, #8]
 80025d4:	230c      	movs	r3, #12
 80025d6:	9301      	str	r3, [sp, #4]
 80025d8:	2300      	movs	r3, #0
 80025da:	9300      	str	r3, [sp, #0]
 80025dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025e0:	4a9c      	ldr	r2, [pc, #624]	; (8002854 <MENU_init_+0x354>)
 80025e2:	2194      	movs	r1, #148	; 0x94
 80025e4:	2030      	movs	r0, #48	; 0x30
 80025e6:	f002 fd2d 	bl	8005044 <LCD_ShowString>
	selection = SETTING;
 80025ea:	4b9b      	ldr	r3, [pc, #620]	; (8002858 <MENU_init_+0x358>)
 80025ec:	2201      	movs	r2, #1
 80025ee:	701a      	strb	r2, [r3, #0]

	if(unit == 1)
 80025f0:	4b9a      	ldr	r3, [pc, #616]	; (800285c <MENU_init_+0x35c>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d10d      	bne.n	8002614 <MENU_init_+0x114>
	{
		LCD_ShowString(LCD_W/16*14, LCD_H/16*3,	"F",	WHITE,	BLACK, 12,	1);
 80025f8:	2301      	movs	r3, #1
 80025fa:	9302      	str	r3, [sp, #8]
 80025fc:	230c      	movs	r3, #12
 80025fe:	9301      	str	r3, [sp, #4]
 8002600:	2300      	movs	r3, #0
 8002602:	9300      	str	r3, [sp, #0]
 8002604:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002608:	4a95      	ldr	r2, [pc, #596]	; (8002860 <MENU_init_+0x360>)
 800260a:	211e      	movs	r1, #30
 800260c:	2070      	movs	r0, #112	; 0x70
 800260e:	f002 fd19 	bl	8005044 <LCD_ShowString>
 8002612:	e00c      	b.n	800262e <MENU_init_+0x12e>
	}
	else
	{
		LCD_ShowChinese(LCD_W/16*13, LCD_H/16*3,	"℃",	WHITE,	BLACK, 16,	1);
 8002614:	2301      	movs	r3, #1
 8002616:	9302      	str	r3, [sp, #8]
 8002618:	2310      	movs	r3, #16
 800261a:	9301      	str	r3, [sp, #4]
 800261c:	2300      	movs	r3, #0
 800261e:	9300      	str	r3, [sp, #0]
 8002620:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002624:	4a8f      	ldr	r2, [pc, #572]	; (8002864 <MENU_init_+0x364>)
 8002626:	211e      	movs	r1, #30
 8002628:	2068      	movs	r0, #104	; 0x68
 800262a:	f002 fd97 	bl	800515c <LCD_ShowChinese>
	}

	LCD_ShowString (LCD_W/16*14, LCD_H/16*5,    "%", 	WHITE,	BLACK, 12,	1);
 800262e:	2301      	movs	r3, #1
 8002630:	9302      	str	r3, [sp, #8]
 8002632:	230c      	movs	r3, #12
 8002634:	9301      	str	r3, [sp, #4]
 8002636:	2300      	movs	r3, #0
 8002638:	9300      	str	r3, [sp, #0]
 800263a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800263e:	4a8a      	ldr	r2, [pc, #552]	; (8002868 <MENU_init_+0x368>)
 8002640:	2132      	movs	r1, #50	; 0x32
 8002642:	2070      	movs	r0, #112	; 0x70
 8002644:	f002 fcfe 	bl	8005044 <LCD_ShowString>
	LCD_ShowString (LCD_W/16*13, LCD_H/16*7,    "BPM", 	WHITE,	BLACK, 12,	1);
 8002648:	2301      	movs	r3, #1
 800264a:	9302      	str	r3, [sp, #8]
 800264c:	230c      	movs	r3, #12
 800264e:	9301      	str	r3, [sp, #4]
 8002650:	2300      	movs	r3, #0
 8002652:	9300      	str	r3, [sp, #0]
 8002654:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002658:	4a84      	ldr	r2, [pc, #528]	; (800286c <MENU_init_+0x36c>)
 800265a:	2146      	movs	r1, #70	; 0x46
 800265c:	2068      	movs	r0, #104	; 0x68
 800265e:	f002 fcf1 	bl	8005044 <LCD_ShowString>

	// showing the values in case they equal to history
	// begin ------------------
	LCD_Fill(LCD_W/16*10, 0,LCD_W/16*13,LCD_H/16*2,LIGHTBLUE); //bluetooth background
 8002662:	f647 537c 	movw	r3, #32124	; 0x7d7c
 8002666:	9300      	str	r3, [sp, #0]
 8002668:	2314      	movs	r3, #20
 800266a:	2268      	movs	r2, #104	; 0x68
 800266c:	2100      	movs	r1, #0
 800266e:	2050      	movs	r0, #80	; 0x50
 8002670:	f002 fbc6 	bl	8004e00 <LCD_Fill>
	//LCD_DrawLine(LCD_W/16*10, 0, LCD_W/16*13, LCD_H/16*2, LIGHTBLUE);
	//LCD_DrawLine(LCD_W/16*13, 0, LCD_W/16*10, LCD_H/16*2, LIGHTBLUE);
	if(blueOn == 1)
 8002674:	4b7e      	ldr	r3, [pc, #504]	; (8002870 <MENU_init_+0x370>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d10d      	bne.n	8002698 <MENU_init_+0x198>
	{
		LCD_ShowChar(LCD_W/16*11,0,'B',BLUE,LIGHTBLUE,16,1);//bluetooth word
 800267c:	2301      	movs	r3, #1
 800267e:	9302      	str	r3, [sp, #8]
 8002680:	2310      	movs	r3, #16
 8002682:	9301      	str	r3, [sp, #4]
 8002684:	f647 537c 	movw	r3, #32124	; 0x7d7c
 8002688:	9300      	str	r3, [sp, #0]
 800268a:	231f      	movs	r3, #31
 800268c:	2242      	movs	r2, #66	; 0x42
 800268e:	2100      	movs	r1, #0
 8002690:	2058      	movs	r0, #88	; 0x58
 8002692:	f002 fc01 	bl	8004e98 <LCD_ShowChar>
 8002696:	e01e      	b.n	80026d6 <MENU_init_+0x1d6>
	}
	else
	{
		LCD_ShowChar(LCD_W/16*11,0,'B',BLUE,LIGHTBLUE,16,1);//bluetooth word
 8002698:	2301      	movs	r3, #1
 800269a:	9302      	str	r3, [sp, #8]
 800269c:	2310      	movs	r3, #16
 800269e:	9301      	str	r3, [sp, #4]
 80026a0:	f647 537c 	movw	r3, #32124	; 0x7d7c
 80026a4:	9300      	str	r3, [sp, #0]
 80026a6:	231f      	movs	r3, #31
 80026a8:	2242      	movs	r2, #66	; 0x42
 80026aa:	2100      	movs	r1, #0
 80026ac:	2058      	movs	r0, #88	; 0x58
 80026ae:	f002 fbf3 	bl	8004e98 <LCD_ShowChar>
		LCD_DrawLine(LCD_W/16*10, 0, LCD_W/16*13, LCD_H/16*2, WHITE);
 80026b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026b6:	9300      	str	r3, [sp, #0]
 80026b8:	2314      	movs	r3, #20
 80026ba:	2268      	movs	r2, #104	; 0x68
 80026bc:	2100      	movs	r1, #0
 80026be:	2050      	movs	r0, #80	; 0x50
 80026c0:	f002 fae2 	bl	8004c88 <LCD_DrawLine>
		LCD_DrawLine(LCD_W/16*13, 0, LCD_W/16*10, LCD_H/16*2, WHITE);
 80026c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026c8:	9300      	str	r3, [sp, #0]
 80026ca:	2314      	movs	r3, #20
 80026cc:	2250      	movs	r2, #80	; 0x50
 80026ce:	2100      	movs	r1, #0
 80026d0:	2068      	movs	r0, #104	; 0x68
 80026d2:	f002 fad9 	bl	8004c88 <LCD_DrawLine>
	}

	LCD_Fill(LCD_W/16*7,LCD_H/16*3,LCD_W/16*12,LCD_H/16*4,BLACK);
 80026d6:	2300      	movs	r3, #0
 80026d8:	9300      	str	r3, [sp, #0]
 80026da:	2328      	movs	r3, #40	; 0x28
 80026dc:	2260      	movs	r2, #96	; 0x60
 80026de:	211e      	movs	r1, #30
 80026e0:	2038      	movs	r0, #56	; 0x38
 80026e2:	f002 fb8d 	bl	8004e00 <LCD_Fill>
	if(unit == 1) //US unite
 80026e6:	4b5d      	ldr	r3, [pc, #372]	; (800285c <MENU_init_+0x35c>)
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d135      	bne.n	800275a <MENU_init_+0x25a>
	{
		if((temperature < 28) || (temperature>38))
 80026ee:	4b61      	ldr	r3, [pc, #388]	; (8002874 <MENU_init_+0x374>)
 80026f0:	edd3 7a00 	vldr	s15, [r3]
 80026f4:	eeb3 7a0c 	vmov.f32	s14, #60	; 0x41e00000  28.0
 80026f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002700:	d409      	bmi.n	8002716 <MENU_init_+0x216>
 8002702:	4b5c      	ldr	r3, [pc, #368]	; (8002874 <MENU_init_+0x374>)
 8002704:	edd3 7a00 	vldr	s15, [r3]
 8002708:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8002878 <MENU_init_+0x378>
 800270c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002714:	dd10      	ble.n	8002738 <MENU_init_+0x238>
		{
			LCD_ShowFloatVar(LCD_W/16*7,LCD_H/16*3,temperatureUS,temperatureUS1, RED,BLACK,12); //show tempeature
 8002716:	4b59      	ldr	r3, [pc, #356]	; (800287c <MENU_init_+0x37c>)
 8002718:	edd3 7a00 	vldr	s15, [r3]
 800271c:	230c      	movs	r3, #12
 800271e:	9301      	str	r3, [sp, #4]
 8002720:	2300      	movs	r3, #0
 8002722:	9300      	str	r3, [sp, #0]
 8002724:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002728:	4a55      	ldr	r2, [pc, #340]	; (8002880 <MENU_init_+0x380>)
 800272a:	eeb0 0a67 	vmov.f32	s0, s15
 800272e:	211e      	movs	r1, #30
 8002730:	2038      	movs	r0, #56	; 0x38
 8002732:	f002 fce9 	bl	8005108 <LCD_ShowFloatVar>
 8002736:	e045      	b.n	80027c4 <MENU_init_+0x2c4>
		}
		else
		{
			LCD_ShowFloatVar(LCD_W/16*7,LCD_H/16*3,temperatureUS,temperatureUS1, WHITE,BLACK,12); //show tempeature
 8002738:	4b50      	ldr	r3, [pc, #320]	; (800287c <MENU_init_+0x37c>)
 800273a:	edd3 7a00 	vldr	s15, [r3]
 800273e:	230c      	movs	r3, #12
 8002740:	9301      	str	r3, [sp, #4]
 8002742:	2300      	movs	r3, #0
 8002744:	9300      	str	r3, [sp, #0]
 8002746:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800274a:	4a4d      	ldr	r2, [pc, #308]	; (8002880 <MENU_init_+0x380>)
 800274c:	eeb0 0a67 	vmov.f32	s0, s15
 8002750:	211e      	movs	r1, #30
 8002752:	2038      	movs	r0, #56	; 0x38
 8002754:	f002 fcd8 	bl	8005108 <LCD_ShowFloatVar>
 8002758:	e034      	b.n	80027c4 <MENU_init_+0x2c4>
		}
	}
	else
	{
		if((temperature < 28) || (temperature>38))
 800275a:	4b46      	ldr	r3, [pc, #280]	; (8002874 <MENU_init_+0x374>)
 800275c:	edd3 7a00 	vldr	s15, [r3]
 8002760:	eeb3 7a0c 	vmov.f32	s14, #60	; 0x41e00000  28.0
 8002764:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800276c:	d409      	bmi.n	8002782 <MENU_init_+0x282>
 800276e:	4b41      	ldr	r3, [pc, #260]	; (8002874 <MENU_init_+0x374>)
 8002770:	edd3 7a00 	vldr	s15, [r3]
 8002774:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8002878 <MENU_init_+0x378>
 8002778:	eef4 7ac7 	vcmpe.f32	s15, s14
 800277c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002780:	dd10      	ble.n	80027a4 <MENU_init_+0x2a4>
		{
			LCD_ShowFloatVar(LCD_W/16*7,LCD_H/16*3,temperature,temperature1, RED,BLACK,12); //show tempeature
 8002782:	4b3c      	ldr	r3, [pc, #240]	; (8002874 <MENU_init_+0x374>)
 8002784:	edd3 7a00 	vldr	s15, [r3]
 8002788:	230c      	movs	r3, #12
 800278a:	9301      	str	r3, [sp, #4]
 800278c:	2300      	movs	r3, #0
 800278e:	9300      	str	r3, [sp, #0]
 8002790:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002794:	4a3b      	ldr	r2, [pc, #236]	; (8002884 <MENU_init_+0x384>)
 8002796:	eeb0 0a67 	vmov.f32	s0, s15
 800279a:	211e      	movs	r1, #30
 800279c:	2038      	movs	r0, #56	; 0x38
 800279e:	f002 fcb3 	bl	8005108 <LCD_ShowFloatVar>
 80027a2:	e00f      	b.n	80027c4 <MENU_init_+0x2c4>
		}
		else
		{
			LCD_ShowFloatVar(LCD_W/16*7,LCD_H/16*3,temperature,temperature1, WHITE,BLACK,12); //show tempeature
 80027a4:	4b33      	ldr	r3, [pc, #204]	; (8002874 <MENU_init_+0x374>)
 80027a6:	edd3 7a00 	vldr	s15, [r3]
 80027aa:	230c      	movs	r3, #12
 80027ac:	9301      	str	r3, [sp, #4]
 80027ae:	2300      	movs	r3, #0
 80027b0:	9300      	str	r3, [sp, #0]
 80027b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027b6:	4a33      	ldr	r2, [pc, #204]	; (8002884 <MENU_init_+0x384>)
 80027b8:	eeb0 0a67 	vmov.f32	s0, s15
 80027bc:	211e      	movs	r1, #30
 80027be:	2038      	movs	r0, #56	; 0x38
 80027c0:	f002 fca2 	bl	8005108 <LCD_ShowFloatVar>
		}
	}

	//LCD_Fill(LCD_W/16*7,LCD_H/16*5,LCD_W/16*12,LCD_H/16*6,BLACK);
	//LCD_ShowString (LCD_W/16*9,LCD_H/16*5,"YES", RED,	BLACK, 16,	1);
	if(blood_oxygen < 95)
 80027c4:	4b30      	ldr	r3, [pc, #192]	; (8002888 <MENU_init_+0x388>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	2b5e      	cmp	r3, #94	; 0x5e
 80027ca:	d80f      	bhi.n	80027ec <MENU_init_+0x2ec>
	{
		LCD_ShowIntVar(LCD_W/16*7,LCD_H/16*5,blood_oxygen,blood_oxygen1, RED,BLACK,12); //show blood oxygen
 80027cc:	4b2e      	ldr	r3, [pc, #184]	; (8002888 <MENU_init_+0x388>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	461a      	mov	r2, r3
 80027d2:	230c      	movs	r3, #12
 80027d4:	9302      	str	r3, [sp, #8]
 80027d6:	2300      	movs	r3, #0
 80027d8:	9301      	str	r3, [sp, #4]
 80027da:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80027de:	9300      	str	r3, [sp, #0]
 80027e0:	4b2a      	ldr	r3, [pc, #168]	; (800288c <MENU_init_+0x38c>)
 80027e2:	2132      	movs	r1, #50	; 0x32
 80027e4:	2038      	movs	r0, #56	; 0x38
 80027e6:	f002 fc6d 	bl	80050c4 <LCD_ShowIntVar>
 80027ea:	e00e      	b.n	800280a <MENU_init_+0x30a>
	}
	else
	{
		LCD_ShowIntVar(LCD_W/16*7,LCD_H/16*5,blood_oxygen,blood_oxygen1, WHITE,BLACK,12); //show blood oxygen
 80027ec:	4b26      	ldr	r3, [pc, #152]	; (8002888 <MENU_init_+0x388>)
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	461a      	mov	r2, r3
 80027f2:	230c      	movs	r3, #12
 80027f4:	9302      	str	r3, [sp, #8]
 80027f6:	2300      	movs	r3, #0
 80027f8:	9301      	str	r3, [sp, #4]
 80027fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027fe:	9300      	str	r3, [sp, #0]
 8002800:	4b22      	ldr	r3, [pc, #136]	; (800288c <MENU_init_+0x38c>)
 8002802:	2132      	movs	r1, #50	; 0x32
 8002804:	2038      	movs	r0, #56	; 0x38
 8002806:	f002 fc5d 	bl	80050c4 <LCD_ShowIntVar>
	}

	//LCD_Fill(LCD_W/16*7,LCD_H/16*7,LCD_W/16*12,LCD_H/16*8,BLACK);
	if((heart_rate < 60) || (heart_rate > 100))
 800280a:	4b21      	ldr	r3, [pc, #132]	; (8002890 <MENU_init_+0x390>)
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	2b3b      	cmp	r3, #59	; 0x3b
 8002810:	d903      	bls.n	800281a <MENU_init_+0x31a>
 8002812:	4b1f      	ldr	r3, [pc, #124]	; (8002890 <MENU_init_+0x390>)
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	2b64      	cmp	r3, #100	; 0x64
 8002818:	d93e      	bls.n	8002898 <MENU_init_+0x398>
	{
		LCD_ShowIntVar(LCD_W/16*7,LCD_H/16*7,heart_rate,heart_rate1, RED,BLACK,12); //show heart rate
 800281a:	4b1d      	ldr	r3, [pc, #116]	; (8002890 <MENU_init_+0x390>)
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	461a      	mov	r2, r3
 8002820:	230c      	movs	r3, #12
 8002822:	9302      	str	r3, [sp, #8]
 8002824:	2300      	movs	r3, #0
 8002826:	9301      	str	r3, [sp, #4]
 8002828:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800282c:	9300      	str	r3, [sp, #0]
 800282e:	4b19      	ldr	r3, [pc, #100]	; (8002894 <MENU_init_+0x394>)
 8002830:	2146      	movs	r1, #70	; 0x46
 8002832:	2038      	movs	r0, #56	; 0x38
 8002834:	f002 fc46 	bl	80050c4 <LCD_ShowIntVar>
 8002838:	e03d      	b.n	80028b6 <MENU_init_+0x3b6>
 800283a:	bf00      	nop
 800283c:	0800f820 	.word	0x0800f820
 8002840:	0800f828 	.word	0x0800f828
 8002844:	0800f830 	.word	0x0800f830
 8002848:	0800f838 	.word	0x0800f838
 800284c:	0800f844 	.word	0x0800f844
 8002850:	0800f850 	.word	0x0800f850
 8002854:	0800f858 	.word	0x0800f858
 8002858:	20000019 	.word	0x20000019
 800285c:	20000018 	.word	0x20000018
 8002860:	0800f860 	.word	0x0800f860
 8002864:	0800f864 	.word	0x0800f864
 8002868:	0800f868 	.word	0x0800f868
 800286c:	0800f86c 	.word	0x0800f86c
 8002870:	2000022d 	.word	0x2000022d
 8002874:	20000004 	.word	0x20000004
 8002878:	42180000 	.word	0x42180000
 800287c:	20000008 	.word	0x20000008
 8002880:	20001d10 	.word	0x20001d10
 8002884:	20001cec 	.word	0x20001cec
 8002888:	2000000d 	.word	0x2000000d
 800288c:	20001cfc 	.word	0x20001cfc
 8002890:	2000000c 	.word	0x2000000c
 8002894:	20001cf4 	.word	0x20001cf4
	}
	else
	{
		LCD_ShowIntVar(LCD_W/16*7,LCD_H/16*7,heart_rate,heart_rate1, WHITE,BLACK,12); //show heart rate
 8002898:	4b4a      	ldr	r3, [pc, #296]	; (80029c4 <MENU_init_+0x4c4>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	461a      	mov	r2, r3
 800289e:	230c      	movs	r3, #12
 80028a0:	9302      	str	r3, [sp, #8]
 80028a2:	2300      	movs	r3, #0
 80028a4:	9301      	str	r3, [sp, #4]
 80028a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028aa:	9300      	str	r3, [sp, #0]
 80028ac:	4b46      	ldr	r3, [pc, #280]	; (80029c8 <MENU_init_+0x4c8>)
 80028ae:	2146      	movs	r1, #70	; 0x46
 80028b0:	2038      	movs	r0, #56	; 0x38
 80028b2:	f002 fc07 	bl	80050c4 <LCD_ShowIntVar>
	}

	//LCD_Fill(LCD_W/16*9,LCD_H/16*9,LCD_W/16*12,LCD_H/16*10,BLACK);
	LCD_Fill(LCD_W/16*9,LCD_H/16*9,LCD_W/16*13,LCD_H/16*10,BLACK);
 80028b6:	2300      	movs	r3, #0
 80028b8:	9300      	str	r3, [sp, #0]
 80028ba:	2364      	movs	r3, #100	; 0x64
 80028bc:	2268      	movs	r2, #104	; 0x68
 80028be:	215a      	movs	r1, #90	; 0x5a
 80028c0:	2048      	movs	r0, #72	; 0x48
 80028c2:	f002 fa9d 	bl	8004e00 <LCD_Fill>
	if(latitude == 0)
 80028c6:	4b41      	ldr	r3, [pc, #260]	; (80029cc <MENU_init_+0x4cc>)
 80028c8:	edd3 7a00 	vldr	s15, [r3]
 80028cc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80028d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028d4:	d10d      	bne.n	80028f2 <MENU_init_+0x3f2>
	{
		LCD_ShowString (LCD_W/16*9,LCD_H/16*9,"No Conn.", RED,	BLACK, 12,	1);
 80028d6:	2301      	movs	r3, #1
 80028d8:	9302      	str	r3, [sp, #8]
 80028da:	230c      	movs	r3, #12
 80028dc:	9301      	str	r3, [sp, #4]
 80028de:	2300      	movs	r3, #0
 80028e0:	9300      	str	r3, [sp, #0]
 80028e2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80028e6:	4a3a      	ldr	r2, [pc, #232]	; (80029d0 <MENU_init_+0x4d0>)
 80028e8:	215a      	movs	r1, #90	; 0x5a
 80028ea:	2048      	movs	r0, #72	; 0x48
 80028ec:	f002 fbaa 	bl	8005044 <LCD_ShowString>
 80028f0:	e00f      	b.n	8002912 <MENU_init_+0x412>
		//LCD_ShowFloatVar(LCD_W/16*9,LCD_H/16*9,latitude,latitude1, WHITE,BLACK,12);
	}
	else
	{
		LCD_ShowFloatVar(LCD_W/16*9,LCD_H/16*9,latitude,latitude1, WHITE,BLACK,12);
 80028f2:	4b36      	ldr	r3, [pc, #216]	; (80029cc <MENU_init_+0x4cc>)
 80028f4:	edd3 7a00 	vldr	s15, [r3]
 80028f8:	230c      	movs	r3, #12
 80028fa:	9301      	str	r3, [sp, #4]
 80028fc:	2300      	movs	r3, #0
 80028fe:	9300      	str	r3, [sp, #0]
 8002900:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002904:	4a33      	ldr	r2, [pc, #204]	; (80029d4 <MENU_init_+0x4d4>)
 8002906:	eeb0 0a67 	vmov.f32	s0, s15
 800290a:	215a      	movs	r1, #90	; 0x5a
 800290c:	2048      	movs	r0, #72	; 0x48
 800290e:	f002 fbfb 	bl	8005108 <LCD_ShowFloatVar>
	}
	LCD_Fill(LCD_W/16*9,LCD_H/16*11,LCD_W/16*13,LCD_H/16*12,BLACK);
 8002912:	2300      	movs	r3, #0
 8002914:	9300      	str	r3, [sp, #0]
 8002916:	2378      	movs	r3, #120	; 0x78
 8002918:	2268      	movs	r2, #104	; 0x68
 800291a:	216e      	movs	r1, #110	; 0x6e
 800291c:	2048      	movs	r0, #72	; 0x48
 800291e:	f002 fa6f 	bl	8004e00 <LCD_Fill>
	if(longitude == 0)
 8002922:	4b2d      	ldr	r3, [pc, #180]	; (80029d8 <MENU_init_+0x4d8>)
 8002924:	edd3 7a00 	vldr	s15, [r3]
 8002928:	eef5 7a40 	vcmp.f32	s15, #0.0
 800292c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002930:	d10d      	bne.n	800294e <MENU_init_+0x44e>
	{
		LCD_ShowString (LCD_W/16*9,LCD_H/16*11,"No Conn.", RED,	BLACK, 12,	1);
 8002932:	2301      	movs	r3, #1
 8002934:	9302      	str	r3, [sp, #8]
 8002936:	230c      	movs	r3, #12
 8002938:	9301      	str	r3, [sp, #4]
 800293a:	2300      	movs	r3, #0
 800293c:	9300      	str	r3, [sp, #0]
 800293e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002942:	4a23      	ldr	r2, [pc, #140]	; (80029d0 <MENU_init_+0x4d0>)
 8002944:	216e      	movs	r1, #110	; 0x6e
 8002946:	2048      	movs	r0, #72	; 0x48
 8002948:	f002 fb7c 	bl	8005044 <LCD_ShowString>
 800294c:	e00f      	b.n	800296e <MENU_init_+0x46e>
	}
	else
	{
		LCD_ShowFloatVar(LCD_W/16*9,LCD_H/16*11,longitude,longitude1, WHITE,BLACK,12);
 800294e:	4b22      	ldr	r3, [pc, #136]	; (80029d8 <MENU_init_+0x4d8>)
 8002950:	edd3 7a00 	vldr	s15, [r3]
 8002954:	230c      	movs	r3, #12
 8002956:	9301      	str	r3, [sp, #4]
 8002958:	2300      	movs	r3, #0
 800295a:	9300      	str	r3, [sp, #0]
 800295c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002960:	4a1e      	ldr	r2, [pc, #120]	; (80029dc <MENU_init_+0x4dc>)
 8002962:	eeb0 0a67 	vmov.f32	s0, s15
 8002966:	216e      	movs	r1, #110	; 0x6e
 8002968:	2048      	movs	r0, #72	; 0x48
 800296a:	f002 fbcd 	bl	8005108 <LCD_ShowFloatVar>
	}
	//LCD_ShowFloatVar(LCD_W/16*9,LCD_H/16*9,latitude,latitude1, WHITE,BLACK,12);
	//LCD_Fill(LCD_W/16*9,LCD_H/16*11,LCD_W/16*12,LCD_H/16*12,BLACK);
	//LCD_ShowFloatVar(LCD_W/16*9,LCD_H/16*11,longitude,longitude1, WHITE,BLACK,12);
	//LCD_Fill(LCD_W/16*8,LCD_H/16*13,LCD_W/16*13,LCD_H/16*14,BLACK);
	if(fall == 1)
 800296e:	4b1c      	ldr	r3, [pc, #112]	; (80029e0 <MENU_init_+0x4e0>)
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d10d      	bne.n	8002992 <MENU_init_+0x492>
	{
		LCD_ShowString (LCD_W/16*8,LCD_H/16*13,"YES", RED,	BLACK, 12,	1);
 8002976:	2301      	movs	r3, #1
 8002978:	9302      	str	r3, [sp, #8]
 800297a:	230c      	movs	r3, #12
 800297c:	9301      	str	r3, [sp, #4]
 800297e:	2300      	movs	r3, #0
 8002980:	9300      	str	r3, [sp, #0]
 8002982:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002986:	4a17      	ldr	r2, [pc, #92]	; (80029e4 <MENU_init_+0x4e4>)
 8002988:	2182      	movs	r1, #130	; 0x82
 800298a:	2040      	movs	r0, #64	; 0x40
 800298c:	f002 fb5a 	bl	8005044 <LCD_ShowString>
 8002990:	e00c      	b.n	80029ac <MENU_init_+0x4ac>
	}
	else
	{
		LCD_ShowString (LCD_W/16*8,LCD_H/16*13,"NO", WHITE,BLACK, 12,	1);
 8002992:	2301      	movs	r3, #1
 8002994:	9302      	str	r3, [sp, #8]
 8002996:	230c      	movs	r3, #12
 8002998:	9301      	str	r3, [sp, #4]
 800299a:	2300      	movs	r3, #0
 800299c:	9300      	str	r3, [sp, #0]
 800299e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029a2:	4a11      	ldr	r2, [pc, #68]	; (80029e8 <MENU_init_+0x4e8>)
 80029a4:	2182      	movs	r1, #130	; 0x82
 80029a6:	2040      	movs	r0, #64	; 0x40
 80029a8:	f002 fb4c 	bl	8005044 <LCD_ShowString>
	}
	//end --------------------------

	LCD_DrawRectangle(1, LCD_H/16*14+8, LCD_W-1, LCD_H-1,WHITE); // Setting selection
 80029ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029b0:	9300      	str	r3, [sp, #0]
 80029b2:	239f      	movs	r3, #159	; 0x9f
 80029b4:	227f      	movs	r2, #127	; 0x7f
 80029b6:	2194      	movs	r1, #148	; 0x94
 80029b8:	2001      	movs	r0, #1
 80029ba:	f002 f9e9 	bl	8004d90 <LCD_DrawRectangle>

}
 80029be:	bf00      	nop
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	2000000c 	.word	0x2000000c
 80029c8:	20001cf4 	.word	0x20001cf4
 80029cc:	20000010 	.word	0x20000010
 80029d0:	0800f870 	.word	0x0800f870
 80029d4:	20001d00 	.word	0x20001d00
 80029d8:	20000014 	.word	0x20000014
 80029dc:	20001d08 	.word	0x20001d08
 80029e0:	2000022c 	.word	0x2000022c
 80029e4:	0800f87c 	.word	0x0800f87c
 80029e8:	0800f880 	.word	0x0800f880

080029ec <MENU_init>:
* @function: 	Display startup
* @input:		n/a
* @return:		n/a
*******************************************/
void MENU_init(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af02      	add	r7, sp, #8
	LCD_Init();//LCD initialize
 80029f2:	f001 ff6d 	bl	80048d0 <LCD_Init>

	LCD_Fill(0,0,LCD_W,LCD_H,BLACK);
 80029f6:	2300      	movs	r3, #0
 80029f8:	9300      	str	r3, [sp, #0]
 80029fa:	23a0      	movs	r3, #160	; 0xa0
 80029fc:	2280      	movs	r2, #128	; 0x80
 80029fe:	2100      	movs	r1, #0
 8002a00:	2000      	movs	r0, #0
 8002a02:	f002 f9fd 	bl	8004e00 <LCD_Fill>

	//LCD_ShowString (LCD_W/16*1,LCD_H/16*3,"Temperature", WHITE,	BLACK, 12,	0);
	//LCD_ShowString (LCD_W/16*1,LCD_H/16*6,"Temperature", WHITE,	BLACK, 12,	1);
	//LCD_ShowString (LCD_W/16*1,LCD_H/16*9,"Temperature", WHITE,	BLACK, 32,	0);
	//LCD_ShowString (LCD_W/16*1,LCD_H/16*12,"Temperature", WHITE,BLACK, 32,	1);
	MENU_init_();
 8002a06:	f7ff fd7b 	bl	8002500 <MENU_init_>
}
 8002a0a:	bf00      	nop
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <MENU_main>:

//static unsigned char history_GPSon = 1;


void MENU_main(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af04      	add	r7, sp, #16
	selectedFlag = 100;
 8002a16:	4baa      	ldr	r3, [pc, #680]	; (8002cc0 <MENU_main+0x2b0>)
 8002a18:	2264      	movs	r2, #100	; 0x64
 8002a1a:	701a      	strb	r2, [r3, #0]

	if(history_blueOn != blueOn)
 8002a1c:	4ba9      	ldr	r3, [pc, #676]	; (8002cc4 <MENU_main+0x2b4>)
 8002a1e:	781a      	ldrb	r2, [r3, #0]
 8002a20:	4ba9      	ldr	r3, [pc, #676]	; (8002cc8 <MENU_main+0x2b8>)
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d039      	beq.n	8002a9c <MENU_main+0x8c>
	{
		LCD_Fill(LCD_W/16*10, 0,LCD_W/16*13,LCD_H/16*2,LIGHTBLUE); //bluetooth background
 8002a28:	f647 537c 	movw	r3, #32124	; 0x7d7c
 8002a2c:	9300      	str	r3, [sp, #0]
 8002a2e:	2314      	movs	r3, #20
 8002a30:	2268      	movs	r2, #104	; 0x68
 8002a32:	2100      	movs	r1, #0
 8002a34:	2050      	movs	r0, #80	; 0x50
 8002a36:	f002 f9e3 	bl	8004e00 <LCD_Fill>
		//LCD_DrawLine(LCD_W/16*10, 0, LCD_W/16*13, LCD_H/16*2, LIGHTBLUE);
		//LCD_DrawLine(LCD_W/16*13, 0, LCD_W/16*10, LCD_H/16*2, LIGHTBLUE);
		if(blueOn == 1)
 8002a3a:	4ba3      	ldr	r3, [pc, #652]	; (8002cc8 <MENU_main+0x2b8>)
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d10d      	bne.n	8002a5e <MENU_main+0x4e>
		{
			LCD_ShowChar(LCD_W/16*11,0,'B',BLUE,LIGHTBLUE,16,1);//bluetooth word
 8002a42:	2301      	movs	r3, #1
 8002a44:	9302      	str	r3, [sp, #8]
 8002a46:	2310      	movs	r3, #16
 8002a48:	9301      	str	r3, [sp, #4]
 8002a4a:	f647 537c 	movw	r3, #32124	; 0x7d7c
 8002a4e:	9300      	str	r3, [sp, #0]
 8002a50:	231f      	movs	r3, #31
 8002a52:	2242      	movs	r2, #66	; 0x42
 8002a54:	2100      	movs	r1, #0
 8002a56:	2058      	movs	r0, #88	; 0x58
 8002a58:	f002 fa1e 	bl	8004e98 <LCD_ShowChar>
 8002a5c:	e01e      	b.n	8002a9c <MENU_main+0x8c>
		}
		else
		{
			LCD_ShowChar(LCD_W/16*11,0,'B',BLUE,LIGHTBLUE,16,1);//bluetooth word
 8002a5e:	2301      	movs	r3, #1
 8002a60:	9302      	str	r3, [sp, #8]
 8002a62:	2310      	movs	r3, #16
 8002a64:	9301      	str	r3, [sp, #4]
 8002a66:	f647 537c 	movw	r3, #32124	; 0x7d7c
 8002a6a:	9300      	str	r3, [sp, #0]
 8002a6c:	231f      	movs	r3, #31
 8002a6e:	2242      	movs	r2, #66	; 0x42
 8002a70:	2100      	movs	r1, #0
 8002a72:	2058      	movs	r0, #88	; 0x58
 8002a74:	f002 fa10 	bl	8004e98 <LCD_ShowChar>
			LCD_DrawLine(LCD_W/16*10, 0, LCD_W/16*13, LCD_H/16*2, WHITE);
 8002a78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a7c:	9300      	str	r3, [sp, #0]
 8002a7e:	2314      	movs	r3, #20
 8002a80:	2268      	movs	r2, #104	; 0x68
 8002a82:	2100      	movs	r1, #0
 8002a84:	2050      	movs	r0, #80	; 0x50
 8002a86:	f002 f8ff 	bl	8004c88 <LCD_DrawLine>
			LCD_DrawLine(LCD_W/16*13, 0, LCD_W/16*10, LCD_H/16*2, WHITE);
 8002a8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a8e:	9300      	str	r3, [sp, #0]
 8002a90:	2314      	movs	r3, #20
 8002a92:	2250      	movs	r2, #80	; 0x50
 8002a94:	2100      	movs	r1, #0
 8002a96:	2068      	movs	r0, #104	; 0x68
 8002a98:	f002 f8f6 	bl	8004c88 <LCD_DrawLine>
		}
	}


	if(	history_temperature != temperature)
 8002a9c:	4b8b      	ldr	r3, [pc, #556]	; (8002ccc <MENU_main+0x2bc>)
 8002a9e:	ed93 7a00 	vldr	s14, [r3]
 8002aa2:	4b8b      	ldr	r3, [pc, #556]	; (8002cd0 <MENU_main+0x2c0>)
 8002aa4:	edd3 7a00 	vldr	s15, [r3]
 8002aa8:	eeb4 7a67 	vcmp.f32	s14, s15
 8002aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ab0:	d076      	beq.n	8002ba0 <MENU_main+0x190>
	{
		LCD_Fill(LCD_W/16*7,LCD_H/16*3,LCD_W/16*12,LCD_H/16*4,BLACK);
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	9300      	str	r3, [sp, #0]
 8002ab6:	2328      	movs	r3, #40	; 0x28
 8002ab8:	2260      	movs	r2, #96	; 0x60
 8002aba:	211e      	movs	r1, #30
 8002abc:	2038      	movs	r0, #56	; 0x38
 8002abe:	f002 f99f 	bl	8004e00 <LCD_Fill>
		if(unit == 1) //US unite
 8002ac2:	4b84      	ldr	r3, [pc, #528]	; (8002cd4 <MENU_main+0x2c4>)
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d135      	bne.n	8002b36 <MENU_main+0x126>
		{
			if((temperature < 28) || (temperature>38))
 8002aca:	4b81      	ldr	r3, [pc, #516]	; (8002cd0 <MENU_main+0x2c0>)
 8002acc:	edd3 7a00 	vldr	s15, [r3]
 8002ad0:	eeb3 7a0c 	vmov.f32	s14, #60	; 0x41e00000  28.0
 8002ad4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002adc:	d409      	bmi.n	8002af2 <MENU_main+0xe2>
 8002ade:	4b7c      	ldr	r3, [pc, #496]	; (8002cd0 <MENU_main+0x2c0>)
 8002ae0:	edd3 7a00 	vldr	s15, [r3]
 8002ae4:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8002cd8 <MENU_main+0x2c8>
 8002ae8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002af0:	dd10      	ble.n	8002b14 <MENU_main+0x104>
			{
				LCD_ShowFloatVar(LCD_W/16*7,LCD_H/16*3,temperatureUS,temperatureUS1, RED,BLACK,12); //show tempeature
 8002af2:	4b7a      	ldr	r3, [pc, #488]	; (8002cdc <MENU_main+0x2cc>)
 8002af4:	edd3 7a00 	vldr	s15, [r3]
 8002af8:	230c      	movs	r3, #12
 8002afa:	9301      	str	r3, [sp, #4]
 8002afc:	2300      	movs	r3, #0
 8002afe:	9300      	str	r3, [sp, #0]
 8002b00:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002b04:	4a76      	ldr	r2, [pc, #472]	; (8002ce0 <MENU_main+0x2d0>)
 8002b06:	eeb0 0a67 	vmov.f32	s0, s15
 8002b0a:	211e      	movs	r1, #30
 8002b0c:	2038      	movs	r0, #56	; 0x38
 8002b0e:	f002 fafb 	bl	8005108 <LCD_ShowFloatVar>
 8002b12:	e045      	b.n	8002ba0 <MENU_main+0x190>
			}
			else
			{
				LCD_ShowFloatVar(LCD_W/16*7,LCD_H/16*3,temperatureUS,temperatureUS1, WHITE,BLACK,12); //show tempeature
 8002b14:	4b71      	ldr	r3, [pc, #452]	; (8002cdc <MENU_main+0x2cc>)
 8002b16:	edd3 7a00 	vldr	s15, [r3]
 8002b1a:	230c      	movs	r3, #12
 8002b1c:	9301      	str	r3, [sp, #4]
 8002b1e:	2300      	movs	r3, #0
 8002b20:	9300      	str	r3, [sp, #0]
 8002b22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b26:	4a6e      	ldr	r2, [pc, #440]	; (8002ce0 <MENU_main+0x2d0>)
 8002b28:	eeb0 0a67 	vmov.f32	s0, s15
 8002b2c:	211e      	movs	r1, #30
 8002b2e:	2038      	movs	r0, #56	; 0x38
 8002b30:	f002 faea 	bl	8005108 <LCD_ShowFloatVar>
 8002b34:	e034      	b.n	8002ba0 <MENU_main+0x190>
			}
		}
		else
		{
			if((temperature < 28) || (temperature>38))
 8002b36:	4b66      	ldr	r3, [pc, #408]	; (8002cd0 <MENU_main+0x2c0>)
 8002b38:	edd3 7a00 	vldr	s15, [r3]
 8002b3c:	eeb3 7a0c 	vmov.f32	s14, #60	; 0x41e00000  28.0
 8002b40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b48:	d409      	bmi.n	8002b5e <MENU_main+0x14e>
 8002b4a:	4b61      	ldr	r3, [pc, #388]	; (8002cd0 <MENU_main+0x2c0>)
 8002b4c:	edd3 7a00 	vldr	s15, [r3]
 8002b50:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8002cd8 <MENU_main+0x2c8>
 8002b54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b5c:	dd10      	ble.n	8002b80 <MENU_main+0x170>
			{
				LCD_ShowFloatVar(LCD_W/16*7,LCD_H/16*3,temperature,temperature1, RED,BLACK,12); //show tempeature
 8002b5e:	4b5c      	ldr	r3, [pc, #368]	; (8002cd0 <MENU_main+0x2c0>)
 8002b60:	edd3 7a00 	vldr	s15, [r3]
 8002b64:	230c      	movs	r3, #12
 8002b66:	9301      	str	r3, [sp, #4]
 8002b68:	2300      	movs	r3, #0
 8002b6a:	9300      	str	r3, [sp, #0]
 8002b6c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002b70:	4a5c      	ldr	r2, [pc, #368]	; (8002ce4 <MENU_main+0x2d4>)
 8002b72:	eeb0 0a67 	vmov.f32	s0, s15
 8002b76:	211e      	movs	r1, #30
 8002b78:	2038      	movs	r0, #56	; 0x38
 8002b7a:	f002 fac5 	bl	8005108 <LCD_ShowFloatVar>
 8002b7e:	e00f      	b.n	8002ba0 <MENU_main+0x190>
			}
			else
			{
				LCD_ShowFloatVar(LCD_W/16*7,LCD_H/16*3,temperature,temperature1, WHITE,BLACK,12); //show tempeature
 8002b80:	4b53      	ldr	r3, [pc, #332]	; (8002cd0 <MENU_main+0x2c0>)
 8002b82:	edd3 7a00 	vldr	s15, [r3]
 8002b86:	230c      	movs	r3, #12
 8002b88:	9301      	str	r3, [sp, #4]
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	9300      	str	r3, [sp, #0]
 8002b8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b92:	4a54      	ldr	r2, [pc, #336]	; (8002ce4 <MENU_main+0x2d4>)
 8002b94:	eeb0 0a67 	vmov.f32	s0, s15
 8002b98:	211e      	movs	r1, #30
 8002b9a:	2038      	movs	r0, #56	; 0x38
 8002b9c:	f002 fab4 	bl	8005108 <LCD_ShowFloatVar>
			}
		}


	}
	if(	history_blood_oxygen != blood_oxygen)
 8002ba0:	4b51      	ldr	r3, [pc, #324]	; (8002ce8 <MENU_main+0x2d8>)
 8002ba2:	781a      	ldrb	r2, [r3, #0]
 8002ba4:	4b51      	ldr	r3, [pc, #324]	; (8002cec <MENU_main+0x2dc>)
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d02a      	beq.n	8002c02 <MENU_main+0x1f2>
	{
		LCD_Fill(LCD_W/16*7,LCD_H/16*5,LCD_W/16*12,LCD_H/16*6,BLACK);
 8002bac:	2300      	movs	r3, #0
 8002bae:	9300      	str	r3, [sp, #0]
 8002bb0:	233c      	movs	r3, #60	; 0x3c
 8002bb2:	2260      	movs	r2, #96	; 0x60
 8002bb4:	2132      	movs	r1, #50	; 0x32
 8002bb6:	2038      	movs	r0, #56	; 0x38
 8002bb8:	f002 f922 	bl	8004e00 <LCD_Fill>
		//LCD_ShowString (LCD_W/16*9,LCD_H/16*5,"YES", RED,	BLACK, 16,	1);
		if(blood_oxygen < 95)
 8002bbc:	4b4b      	ldr	r3, [pc, #300]	; (8002cec <MENU_main+0x2dc>)
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	2b5e      	cmp	r3, #94	; 0x5e
 8002bc2:	d80f      	bhi.n	8002be4 <MENU_main+0x1d4>
		{
			LCD_ShowIntVar(LCD_W/16*7,LCD_H/16*5,blood_oxygen,blood_oxygen1, RED,BLACK,12); //show blood oxygen
 8002bc4:	4b49      	ldr	r3, [pc, #292]	; (8002cec <MENU_main+0x2dc>)
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	461a      	mov	r2, r3
 8002bca:	230c      	movs	r3, #12
 8002bcc:	9302      	str	r3, [sp, #8]
 8002bce:	2300      	movs	r3, #0
 8002bd0:	9301      	str	r3, [sp, #4]
 8002bd2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002bd6:	9300      	str	r3, [sp, #0]
 8002bd8:	4b45      	ldr	r3, [pc, #276]	; (8002cf0 <MENU_main+0x2e0>)
 8002bda:	2132      	movs	r1, #50	; 0x32
 8002bdc:	2038      	movs	r0, #56	; 0x38
 8002bde:	f002 fa71 	bl	80050c4 <LCD_ShowIntVar>
 8002be2:	e00e      	b.n	8002c02 <MENU_main+0x1f2>
		}
		else
		{
			LCD_ShowIntVar(LCD_W/16*7,LCD_H/16*5,blood_oxygen,blood_oxygen1, WHITE,BLACK,12); //show blood oxygen
 8002be4:	4b41      	ldr	r3, [pc, #260]	; (8002cec <MENU_main+0x2dc>)
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	461a      	mov	r2, r3
 8002bea:	230c      	movs	r3, #12
 8002bec:	9302      	str	r3, [sp, #8]
 8002bee:	2300      	movs	r3, #0
 8002bf0:	9301      	str	r3, [sp, #4]
 8002bf2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bf6:	9300      	str	r3, [sp, #0]
 8002bf8:	4b3d      	ldr	r3, [pc, #244]	; (8002cf0 <MENU_main+0x2e0>)
 8002bfa:	2132      	movs	r1, #50	; 0x32
 8002bfc:	2038      	movs	r0, #56	; 0x38
 8002bfe:	f002 fa61 	bl	80050c4 <LCD_ShowIntVar>
		}
	}

	if(	history_heart_rate != heart_rate)
 8002c02:	4b3c      	ldr	r3, [pc, #240]	; (8002cf4 <MENU_main+0x2e4>)
 8002c04:	781a      	ldrb	r2, [r3, #0]
 8002c06:	4b3c      	ldr	r3, [pc, #240]	; (8002cf8 <MENU_main+0x2e8>)
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d02e      	beq.n	8002c6c <MENU_main+0x25c>
	{
		LCD_Fill(LCD_W/16*7,LCD_H/16*7,LCD_W/16*12,LCD_H/16*8,BLACK);
 8002c0e:	2300      	movs	r3, #0
 8002c10:	9300      	str	r3, [sp, #0]
 8002c12:	2350      	movs	r3, #80	; 0x50
 8002c14:	2260      	movs	r2, #96	; 0x60
 8002c16:	2146      	movs	r1, #70	; 0x46
 8002c18:	2038      	movs	r0, #56	; 0x38
 8002c1a:	f002 f8f1 	bl	8004e00 <LCD_Fill>
		if((heart_rate < 60) || (heart_rate > 100))
 8002c1e:	4b36      	ldr	r3, [pc, #216]	; (8002cf8 <MENU_main+0x2e8>)
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	2b3b      	cmp	r3, #59	; 0x3b
 8002c24:	d903      	bls.n	8002c2e <MENU_main+0x21e>
 8002c26:	4b34      	ldr	r3, [pc, #208]	; (8002cf8 <MENU_main+0x2e8>)
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	2b64      	cmp	r3, #100	; 0x64
 8002c2c:	d90f      	bls.n	8002c4e <MENU_main+0x23e>
		{
			LCD_ShowIntVar(LCD_W/16*7,LCD_H/16*7,heart_rate,heart_rate1, RED,BLACK,12); //show heart rate
 8002c2e:	4b32      	ldr	r3, [pc, #200]	; (8002cf8 <MENU_main+0x2e8>)
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	461a      	mov	r2, r3
 8002c34:	230c      	movs	r3, #12
 8002c36:	9302      	str	r3, [sp, #8]
 8002c38:	2300      	movs	r3, #0
 8002c3a:	9301      	str	r3, [sp, #4]
 8002c3c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002c40:	9300      	str	r3, [sp, #0]
 8002c42:	4b2e      	ldr	r3, [pc, #184]	; (8002cfc <MENU_main+0x2ec>)
 8002c44:	2146      	movs	r1, #70	; 0x46
 8002c46:	2038      	movs	r0, #56	; 0x38
 8002c48:	f002 fa3c 	bl	80050c4 <LCD_ShowIntVar>
 8002c4c:	e00e      	b.n	8002c6c <MENU_main+0x25c>
		}
		else
		{
			LCD_ShowIntVar(LCD_W/16*7,LCD_H/16*7,heart_rate,heart_rate1, WHITE,BLACK,12); //show heart rate
 8002c4e:	4b2a      	ldr	r3, [pc, #168]	; (8002cf8 <MENU_main+0x2e8>)
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	461a      	mov	r2, r3
 8002c54:	230c      	movs	r3, #12
 8002c56:	9302      	str	r3, [sp, #8]
 8002c58:	2300      	movs	r3, #0
 8002c5a:	9301      	str	r3, [sp, #4]
 8002c5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c60:	9300      	str	r3, [sp, #0]
 8002c62:	4b26      	ldr	r3, [pc, #152]	; (8002cfc <MENU_main+0x2ec>)
 8002c64:	2146      	movs	r1, #70	; 0x46
 8002c66:	2038      	movs	r0, #56	; 0x38
 8002c68:	f002 fa2c 	bl	80050c4 <LCD_ShowIntVar>
		}

	}

	if(	history_latitude != latitude)
 8002c6c:	4b24      	ldr	r3, [pc, #144]	; (8002d00 <MENU_main+0x2f0>)
 8002c6e:	ed93 7a00 	vldr	s14, [r3]
 8002c72:	4b24      	ldr	r3, [pc, #144]	; (8002d04 <MENU_main+0x2f4>)
 8002c74:	edd3 7a00 	vldr	s15, [r3]
 8002c78:	eeb4 7a67 	vcmp.f32	s14, s15
 8002c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c80:	d054      	beq.n	8002d2c <MENU_main+0x31c>
	{
		LCD_Fill(LCD_W/16*9,LCD_H/16*9,LCD_W/16*12,LCD_H/16*10,BLACK);
 8002c82:	2300      	movs	r3, #0
 8002c84:	9300      	str	r3, [sp, #0]
 8002c86:	2364      	movs	r3, #100	; 0x64
 8002c88:	2260      	movs	r2, #96	; 0x60
 8002c8a:	215a      	movs	r1, #90	; 0x5a
 8002c8c:	2048      	movs	r0, #72	; 0x48
 8002c8e:	f002 f8b7 	bl	8004e00 <LCD_Fill>
		if(latitude == 0)
 8002c92:	4b1c      	ldr	r3, [pc, #112]	; (8002d04 <MENU_main+0x2f4>)
 8002c94:	edd3 7a00 	vldr	s15, [r3]
 8002c98:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ca0:	d134      	bne.n	8002d0c <MENU_main+0x2fc>
		{
			LCD_ShowString (LCD_W/16*9,LCD_H/16*9,"No Conn.", RED,	BLACK, 12,	1);
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	9302      	str	r3, [sp, #8]
 8002ca6:	230c      	movs	r3, #12
 8002ca8:	9301      	str	r3, [sp, #4]
 8002caa:	2300      	movs	r3, #0
 8002cac:	9300      	str	r3, [sp, #0]
 8002cae:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002cb2:	4a15      	ldr	r2, [pc, #84]	; (8002d08 <MENU_main+0x2f8>)
 8002cb4:	215a      	movs	r1, #90	; 0x5a
 8002cb6:	2048      	movs	r0, #72	; 0x48
 8002cb8:	f002 f9c4 	bl	8005044 <LCD_ShowString>
 8002cbc:	e036      	b.n	8002d2c <MENU_main+0x31c>
 8002cbe:	bf00      	nop
 8002cc0:	2000001a 	.word	0x2000001a
 8002cc4:	2000002d 	.word	0x2000002d
 8002cc8:	2000022d 	.word	0x2000022d
 8002ccc:	2000001c 	.word	0x2000001c
 8002cd0:	20000004 	.word	0x20000004
 8002cd4:	20000018 	.word	0x20000018
 8002cd8:	42180000 	.word	0x42180000
 8002cdc:	20000008 	.word	0x20000008
 8002ce0:	20001d10 	.word	0x20001d10
 8002ce4:	20001cec 	.word	0x20001cec
 8002ce8:	20000021 	.word	0x20000021
 8002cec:	2000000d 	.word	0x2000000d
 8002cf0:	20001cfc 	.word	0x20001cfc
 8002cf4:	20000020 	.word	0x20000020
 8002cf8:	2000000c 	.word	0x2000000c
 8002cfc:	20001cf4 	.word	0x20001cf4
 8002d00:	20000024 	.word	0x20000024
 8002d04:	20000010 	.word	0x20000010
 8002d08:	0800f870 	.word	0x0800f870
			//LCD_ShowFloatVar(LCD_W/16*9,LCD_H/16*9,latitude,latitude1, WHITE,BLACK,12);
		}
		else
		{
			LCD_ShowFloatVar(LCD_W/16*9,LCD_H/16*9,latitude,latitude1, WHITE,BLACK,12);
 8002d0c:	4b4a      	ldr	r3, [pc, #296]	; (8002e38 <MENU_main+0x428>)
 8002d0e:	edd3 7a00 	vldr	s15, [r3]
 8002d12:	230c      	movs	r3, #12
 8002d14:	9301      	str	r3, [sp, #4]
 8002d16:	2300      	movs	r3, #0
 8002d18:	9300      	str	r3, [sp, #0]
 8002d1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d1e:	4a47      	ldr	r2, [pc, #284]	; (8002e3c <MENU_main+0x42c>)
 8002d20:	eeb0 0a67 	vmov.f32	s0, s15
 8002d24:	215a      	movs	r1, #90	; 0x5a
 8002d26:	2048      	movs	r0, #72	; 0x48
 8002d28:	f002 f9ee 	bl	8005108 <LCD_ShowFloatVar>
		}
		//LCD_ShowIntVar (LCD_W/16*9,LCD_H/16*9,heart_rate,heart_rate1, BLACK,WHITE,16); //show heart rate
	}

	if(	history_longitude != longitude)
 8002d2c:	4b44      	ldr	r3, [pc, #272]	; (8002e40 <MENU_main+0x430>)
 8002d2e:	ed93 7a00 	vldr	s14, [r3]
 8002d32:	4b44      	ldr	r3, [pc, #272]	; (8002e44 <MENU_main+0x434>)
 8002d34:	edd3 7a00 	vldr	s15, [r3]
 8002d38:	eeb4 7a67 	vcmp.f32	s14, s15
 8002d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d40:	d02d      	beq.n	8002d9e <MENU_main+0x38e>
	{
		LCD_Fill(LCD_W/16*9,LCD_H/16*11,LCD_W/16*12,LCD_H/16*12,BLACK);
 8002d42:	2300      	movs	r3, #0
 8002d44:	9300      	str	r3, [sp, #0]
 8002d46:	2378      	movs	r3, #120	; 0x78
 8002d48:	2260      	movs	r2, #96	; 0x60
 8002d4a:	216e      	movs	r1, #110	; 0x6e
 8002d4c:	2048      	movs	r0, #72	; 0x48
 8002d4e:	f002 f857 	bl	8004e00 <LCD_Fill>
		if(longitude == 0)
 8002d52:	4b3c      	ldr	r3, [pc, #240]	; (8002e44 <MENU_main+0x434>)
 8002d54:	edd3 7a00 	vldr	s15, [r3]
 8002d58:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d60:	d10d      	bne.n	8002d7e <MENU_main+0x36e>
		{
			LCD_ShowString (LCD_W/16*9,LCD_H/16*11,"No Conn.", RED,	BLACK, 12,	1);
 8002d62:	2301      	movs	r3, #1
 8002d64:	9302      	str	r3, [sp, #8]
 8002d66:	230c      	movs	r3, #12
 8002d68:	9301      	str	r3, [sp, #4]
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	9300      	str	r3, [sp, #0]
 8002d6e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002d72:	4a35      	ldr	r2, [pc, #212]	; (8002e48 <MENU_main+0x438>)
 8002d74:	216e      	movs	r1, #110	; 0x6e
 8002d76:	2048      	movs	r0, #72	; 0x48
 8002d78:	f002 f964 	bl	8005044 <LCD_ShowString>
 8002d7c:	e00f      	b.n	8002d9e <MENU_main+0x38e>
		}
		else
		{
			LCD_ShowFloatVar(LCD_W/16*9,LCD_H/16*11,longitude,longitude1, WHITE,BLACK,12);
 8002d7e:	4b31      	ldr	r3, [pc, #196]	; (8002e44 <MENU_main+0x434>)
 8002d80:	edd3 7a00 	vldr	s15, [r3]
 8002d84:	230c      	movs	r3, #12
 8002d86:	9301      	str	r3, [sp, #4]
 8002d88:	2300      	movs	r3, #0
 8002d8a:	9300      	str	r3, [sp, #0]
 8002d8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d90:	4a2e      	ldr	r2, [pc, #184]	; (8002e4c <MENU_main+0x43c>)
 8002d92:	eeb0 0a67 	vmov.f32	s0, s15
 8002d96:	216e      	movs	r1, #110	; 0x6e
 8002d98:	2048      	movs	r0, #72	; 0x48
 8002d9a:	f002 f9b5 	bl	8005108 <LCD_ShowFloatVar>
		}

		//LCD_ShowIntVar(LCD_W/16*9,LCD_H/16*11,heart_rate,heart_rate1, BLACK,WHITE,16); //show heart rate
	}

	if(	history_fall != fall)
 8002d9e:	4b2c      	ldr	r3, [pc, #176]	; (8002e50 <MENU_main+0x440>)
 8002da0:	781a      	ldrb	r2, [r3, #0]
 8002da2:	4b2c      	ldr	r3, [pc, #176]	; (8002e54 <MENU_main+0x444>)
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d026      	beq.n	8002df8 <MENU_main+0x3e8>
	{
		LCD_Fill(LCD_W/16*8,LCD_H/16*13,LCD_W/16*13,LCD_H/16*14,BLACK);
 8002daa:	2300      	movs	r3, #0
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	238c      	movs	r3, #140	; 0x8c
 8002db0:	2268      	movs	r2, #104	; 0x68
 8002db2:	2182      	movs	r1, #130	; 0x82
 8002db4:	2040      	movs	r0, #64	; 0x40
 8002db6:	f002 f823 	bl	8004e00 <LCD_Fill>
		if(fall == 1)
 8002dba:	4b26      	ldr	r3, [pc, #152]	; (8002e54 <MENU_main+0x444>)
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d10d      	bne.n	8002dde <MENU_main+0x3ce>
		{
			LCD_ShowString (LCD_W/16*8,LCD_H/16*13,"YES", RED,	BLACK, 12,	1);
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	9302      	str	r3, [sp, #8]
 8002dc6:	230c      	movs	r3, #12
 8002dc8:	9301      	str	r3, [sp, #4]
 8002dca:	2300      	movs	r3, #0
 8002dcc:	9300      	str	r3, [sp, #0]
 8002dce:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002dd2:	4a21      	ldr	r2, [pc, #132]	; (8002e58 <MENU_main+0x448>)
 8002dd4:	2182      	movs	r1, #130	; 0x82
 8002dd6:	2040      	movs	r0, #64	; 0x40
 8002dd8:	f002 f934 	bl	8005044 <LCD_ShowString>
 8002ddc:	e00c      	b.n	8002df8 <MENU_main+0x3e8>
		}
		else
		{
			LCD_ShowString (LCD_W/16*8,LCD_H/16*13,"NO", WHITE,BLACK, 12,	1);
 8002dde:	2301      	movs	r3, #1
 8002de0:	9302      	str	r3, [sp, #8]
 8002de2:	230c      	movs	r3, #12
 8002de4:	9301      	str	r3, [sp, #4]
 8002de6:	2300      	movs	r3, #0
 8002de8:	9300      	str	r3, [sp, #0]
 8002dea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002dee:	4a1b      	ldr	r2, [pc, #108]	; (8002e5c <MENU_main+0x44c>)
 8002df0:	2182      	movs	r1, #130	; 0x82
 8002df2:	2040      	movs	r0, #64	; 0x40
 8002df4:	f002 f926 	bl	8005044 <LCD_ShowString>
		}
	}

	//HAL_Delay(300);

	history_temperature = temperature;
 8002df8:	4b19      	ldr	r3, [pc, #100]	; (8002e60 <MENU_main+0x450>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a19      	ldr	r2, [pc, #100]	; (8002e64 <MENU_main+0x454>)
 8002dfe:	6013      	str	r3, [r2, #0]
	history_blood_oxygen = blood_oxygen;
 8002e00:	4b19      	ldr	r3, [pc, #100]	; (8002e68 <MENU_main+0x458>)
 8002e02:	781a      	ldrb	r2, [r3, #0]
 8002e04:	4b19      	ldr	r3, [pc, #100]	; (8002e6c <MENU_main+0x45c>)
 8002e06:	701a      	strb	r2, [r3, #0]
	history_heart_rate = heart_rate;
 8002e08:	4b19      	ldr	r3, [pc, #100]	; (8002e70 <MENU_main+0x460>)
 8002e0a:	781a      	ldrb	r2, [r3, #0]
 8002e0c:	4b19      	ldr	r3, [pc, #100]	; (8002e74 <MENU_main+0x464>)
 8002e0e:	701a      	strb	r2, [r3, #0]

	history_latitude = latitude;
 8002e10:	4b09      	ldr	r3, [pc, #36]	; (8002e38 <MENU_main+0x428>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a18      	ldr	r2, [pc, #96]	; (8002e78 <MENU_main+0x468>)
 8002e16:	6013      	str	r3, [r2, #0]
	history_longitude = longitude;
 8002e18:	4b0a      	ldr	r3, [pc, #40]	; (8002e44 <MENU_main+0x434>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a08      	ldr	r2, [pc, #32]	; (8002e40 <MENU_main+0x430>)
 8002e1e:	6013      	str	r3, [r2, #0]

	history_fall = fall;
 8002e20:	4b0c      	ldr	r3, [pc, #48]	; (8002e54 <MENU_main+0x444>)
 8002e22:	781a      	ldrb	r2, [r3, #0]
 8002e24:	4b0a      	ldr	r3, [pc, #40]	; (8002e50 <MENU_main+0x440>)
 8002e26:	701a      	strb	r2, [r3, #0]
	history_blueOn = blueOn;
 8002e28:	4b14      	ldr	r3, [pc, #80]	; (8002e7c <MENU_main+0x46c>)
 8002e2a:	781a      	ldrb	r2, [r3, #0]
 8002e2c:	4b14      	ldr	r3, [pc, #80]	; (8002e80 <MENU_main+0x470>)
 8002e2e:	701a      	strb	r2, [r3, #0]
	//history_GPSon = GPSon;

}
 8002e30:	bf00      	nop
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	20000010 	.word	0x20000010
 8002e3c:	20001d00 	.word	0x20001d00
 8002e40:	20000028 	.word	0x20000028
 8002e44:	20000014 	.word	0x20000014
 8002e48:	0800f870 	.word	0x0800f870
 8002e4c:	20001d08 	.word	0x20001d08
 8002e50:	2000002c 	.word	0x2000002c
 8002e54:	2000022c 	.word	0x2000022c
 8002e58:	0800f87c 	.word	0x0800f87c
 8002e5c:	0800f880 	.word	0x0800f880
 8002e60:	20000004 	.word	0x20000004
 8002e64:	2000001c 	.word	0x2000001c
 8002e68:	2000000d 	.word	0x2000000d
 8002e6c:	20000021 	.word	0x20000021
 8002e70:	2000000c 	.word	0x2000000c
 8002e74:	20000020 	.word	0x20000020
 8002e78:	20000024 	.word	0x20000024
 8002e7c:	2000022d 	.word	0x2000022d
 8002e80:	2000002d 	.word	0x2000002d

08002e84 <MENU_SETTING>:
* @function: 	setting page
* @input:		n/a
* @return:		n/a
*******************************************/
void MENU_SETTING(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af04      	add	r7, sp, #16
	LCD_Fill(0,0,LCD_W,LCD_H,BLACK);
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	9300      	str	r3, [sp, #0]
 8002e8e:	23a0      	movs	r3, #160	; 0xa0
 8002e90:	2280      	movs	r2, #128	; 0x80
 8002e92:	2100      	movs	r1, #0
 8002e94:	2000      	movs	r0, #0
 8002e96:	f001 ffb3 	bl	8004e00 <LCD_Fill>
	LCD_ShowString (LCD_W/16*6,0,"SETTING", WHITE,	BLACK, 12,	1);
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	9302      	str	r3, [sp, #8]
 8002e9e:	230c      	movs	r3, #12
 8002ea0:	9301      	str	r3, [sp, #4]
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	9300      	str	r3, [sp, #0]
 8002ea6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002eaa:	4a2b      	ldr	r2, [pc, #172]	; (8002f58 <MENU_SETTING+0xd4>)
 8002eac:	2100      	movs	r1, #0
 8002eae:	2030      	movs	r0, #48	; 0x30
 8002eb0:	f002 f8c8 	bl	8005044 <LCD_ShowString>
	LCD_ShowString (1,LCD_H/16*2,"Unit", WHITE,	BLACK, 12,	1);
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	9302      	str	r3, [sp, #8]
 8002eb8:	230c      	movs	r3, #12
 8002eba:	9301      	str	r3, [sp, #4]
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	9300      	str	r3, [sp, #0]
 8002ec0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ec4:	4a25      	ldr	r2, [pc, #148]	; (8002f5c <MENU_SETTING+0xd8>)
 8002ec6:	2114      	movs	r1, #20
 8002ec8:	2001      	movs	r0, #1
 8002eca:	f002 f8bb 	bl	8005044 <LCD_ShowString>
	LCD_ShowString (LCD_W/16*9,LCD_H/16*2,"US", WHITE,	BLACK, 12,	1);
 8002ece:	2301      	movs	r3, #1
 8002ed0:	9302      	str	r3, [sp, #8]
 8002ed2:	230c      	movs	r3, #12
 8002ed4:	9301      	str	r3, [sp, #4]
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	9300      	str	r3, [sp, #0]
 8002eda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ede:	4a20      	ldr	r2, [pc, #128]	; (8002f60 <MENU_SETTING+0xdc>)
 8002ee0:	2114      	movs	r1, #20
 8002ee2:	2048      	movs	r0, #72	; 0x48
 8002ee4:	f002 f8ae 	bl	8005044 <LCD_ShowString>



	LCD_ShowString (LCD_W/16*13,LCD_H/16*2,"SI", WHITE,	BLACK, 12,	1);
 8002ee8:	2301      	movs	r3, #1
 8002eea:	9302      	str	r3, [sp, #8]
 8002eec:	230c      	movs	r3, #12
 8002eee:	9301      	str	r3, [sp, #4]
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	9300      	str	r3, [sp, #0]
 8002ef4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ef8:	4a1a      	ldr	r2, [pc, #104]	; (8002f64 <MENU_SETTING+0xe0>)
 8002efa:	2114      	movs	r1, #20
 8002efc:	2068      	movs	r0, #104	; 0x68
 8002efe:	f002 f8a1 	bl	8005044 <LCD_ShowString>



	LCD_ShowString (1,LCD_H/16*4,"Bluetooth", WHITE,	BLACK, 12,	1);
 8002f02:	2301      	movs	r3, #1
 8002f04:	9302      	str	r3, [sp, #8]
 8002f06:	230c      	movs	r3, #12
 8002f08:	9301      	str	r3, [sp, #4]
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	9300      	str	r3, [sp, #0]
 8002f0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f12:	4a15      	ldr	r2, [pc, #84]	; (8002f68 <MENU_SETTING+0xe4>)
 8002f14:	2128      	movs	r1, #40	; 0x28
 8002f16:	2001      	movs	r0, #1
 8002f18:	f002 f894 	bl	8005044 <LCD_ShowString>
	LCD_ShowString (LCD_W/16*9,LCD_H/16*4,"ON", WHITE,	BLACK, 12,	1);
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	9302      	str	r3, [sp, #8]
 8002f20:	230c      	movs	r3, #12
 8002f22:	9301      	str	r3, [sp, #4]
 8002f24:	2300      	movs	r3, #0
 8002f26:	9300      	str	r3, [sp, #0]
 8002f28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f2c:	4a0f      	ldr	r2, [pc, #60]	; (8002f6c <MENU_SETTING+0xe8>)
 8002f2e:	2128      	movs	r1, #40	; 0x28
 8002f30:	2048      	movs	r0, #72	; 0x48
 8002f32:	f002 f887 	bl	8005044 <LCD_ShowString>



	LCD_ShowString (LCD_W/16*13,LCD_H/16*4,"OFF", WHITE,	BLACK, 12,	1);
 8002f36:	2301      	movs	r3, #1
 8002f38:	9302      	str	r3, [sp, #8]
 8002f3a:	230c      	movs	r3, #12
 8002f3c:	9301      	str	r3, [sp, #4]
 8002f3e:	2300      	movs	r3, #0
 8002f40:	9300      	str	r3, [sp, #0]
 8002f42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f46:	4a0a      	ldr	r2, [pc, #40]	; (8002f70 <MENU_SETTING+0xec>)
 8002f48:	2128      	movs	r1, #40	; 0x28
 8002f4a:	2068      	movs	r0, #104	; 0x68
 8002f4c:	f002 f87a 	bl	8005044 <LCD_ShowString>


	//LCD_ShowString (LCD_W/16*14,LCD_H/16*6,"OFF", WHITE,	BLACK, 16,	1);


}
 8002f50:	bf00      	nop
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	0800f858 	.word	0x0800f858
 8002f5c:	0800f884 	.word	0x0800f884
 8002f60:	0800f88c 	.word	0x0800f88c
 8002f64:	0800f890 	.word	0x0800f890
 8002f68:	0800f894 	.word	0x0800f894
 8002f6c:	0800f8a0 	.word	0x0800f8a0
 8002f70:	0800f8a4 	.word	0x0800f8a4

08002f74 <MENU_TEMP>:


void MENU_TEMP(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af04      	add	r7, sp, #16
	LCD_Fill(0,0,LCD_W,LCD_H,BLACK);
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	9300      	str	r3, [sp, #0]
 8002f7e:	23a0      	movs	r3, #160	; 0xa0
 8002f80:	2280      	movs	r2, #128	; 0x80
 8002f82:	2100      	movs	r1, #0
 8002f84:	2000      	movs	r0, #0
 8002f86:	f001 ff3b 	bl	8004e00 <LCD_Fill>
	LCD_ShowString (LCD_W/16*4,0,"Temperature", WHITE,	BLACK, 12,	1);
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	9302      	str	r3, [sp, #8]
 8002f8e:	230c      	movs	r3, #12
 8002f90:	9301      	str	r3, [sp, #4]
 8002f92:	2300      	movs	r3, #0
 8002f94:	9300      	str	r3, [sp, #0]
 8002f96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f9a:	4a11      	ldr	r2, [pc, #68]	; (8002fe0 <MENU_TEMP+0x6c>)
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	2020      	movs	r0, #32
 8002fa0:	f002 f850 	bl	8005044 <LCD_ShowString>
	LCD_ShowChinese(LCD_W/16*13, LCD_H/16*3,	"℃",	WHITE,	BLACK, 16,	1);
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	9302      	str	r3, [sp, #8]
 8002fa8:	2310      	movs	r3, #16
 8002faa:	9301      	str	r3, [sp, #4]
 8002fac:	2300      	movs	r3, #0
 8002fae:	9300      	str	r3, [sp, #0]
 8002fb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002fb4:	4a0b      	ldr	r2, [pc, #44]	; (8002fe4 <MENU_TEMP+0x70>)
 8002fb6:	211e      	movs	r1, #30
 8002fb8:	2068      	movs	r0, #104	; 0x68
 8002fba:	f002 f8cf 	bl	800515c <LCD_ShowChinese>
	LCD_ShowString(LCD_W/16*13, LCD_H/16*5,	"F",	WHITE,	BLACK, 16,	1);
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	9302      	str	r3, [sp, #8]
 8002fc2:	2310      	movs	r3, #16
 8002fc4:	9301      	str	r3, [sp, #4]
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	9300      	str	r3, [sp, #0]
 8002fca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002fce:	4a06      	ldr	r2, [pc, #24]	; (8002fe8 <MENU_TEMP+0x74>)
 8002fd0:	2132      	movs	r1, #50	; 0x32
 8002fd2:	2068      	movs	r0, #104	; 0x68
 8002fd4:	f002 f836 	bl	8005044 <LCD_ShowString>
	//LCD_ShowString (LCD_W/2,LCD_H/2,"TEMP", WHITE,	BLACK, 16,	1);
}
 8002fd8:	bf00      	nop
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	0800f8a8 	.word	0x0800f8a8
 8002fe4:	0800f864 	.word	0x0800f864
 8002fe8:	0800f860 	.word	0x0800f860

08002fec <MENU_BLOOD>:

void MENU_BLOOD(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af04      	add	r7, sp, #16
	LCD_Fill(0,0,LCD_W,LCD_H,BLACK);
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	9300      	str	r3, [sp, #0]
 8002ff6:	23a0      	movs	r3, #160	; 0xa0
 8002ff8:	2280      	movs	r2, #128	; 0x80
 8002ffa:	2100      	movs	r1, #0
 8002ffc:	2000      	movs	r0, #0
 8002ffe:	f001 feff 	bl	8004e00 <LCD_Fill>
	LCD_ShowString (LCD_W/16*4,0,"Blood Oxygen", WHITE,	BLACK, 12,	1);
 8003002:	2301      	movs	r3, #1
 8003004:	9302      	str	r3, [sp, #8]
 8003006:	230c      	movs	r3, #12
 8003008:	9301      	str	r3, [sp, #4]
 800300a:	2300      	movs	r3, #0
 800300c:	9300      	str	r3, [sp, #0]
 800300e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003012:	4a0a      	ldr	r2, [pc, #40]	; (800303c <MENU_BLOOD+0x50>)
 8003014:	2100      	movs	r1, #0
 8003016:	2020      	movs	r0, #32
 8003018:	f002 f814 	bl	8005044 <LCD_ShowString>
	LCD_ShowString (LCD_W/16*14, LCD_H/16*3,    "%", 	WHITE,	BLACK, 16,	1);
 800301c:	2301      	movs	r3, #1
 800301e:	9302      	str	r3, [sp, #8]
 8003020:	2310      	movs	r3, #16
 8003022:	9301      	str	r3, [sp, #4]
 8003024:	2300      	movs	r3, #0
 8003026:	9300      	str	r3, [sp, #0]
 8003028:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800302c:	4a04      	ldr	r2, [pc, #16]	; (8003040 <MENU_BLOOD+0x54>)
 800302e:	211e      	movs	r1, #30
 8003030:	2070      	movs	r0, #112	; 0x70
 8003032:	f002 f807 	bl	8005044 <LCD_ShowString>

	//LCD_ShowString (LCD_W/2,LCD_H/2,"BLOOD", WHITE,	BLACK, 16,	1);

}
 8003036:	bf00      	nop
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	0800f8b4 	.word	0x0800f8b4
 8003040:	0800f868 	.word	0x0800f868

08003044 <MENU_HEART>:

void MENU_HEART(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af04      	add	r7, sp, #16
	LCD_Fill(0,0,LCD_W,LCD_H,BLACK);
 800304a:	2300      	movs	r3, #0
 800304c:	9300      	str	r3, [sp, #0]
 800304e:	23a0      	movs	r3, #160	; 0xa0
 8003050:	2280      	movs	r2, #128	; 0x80
 8003052:	2100      	movs	r1, #0
 8003054:	2000      	movs	r0, #0
 8003056:	f001 fed3 	bl	8004e00 <LCD_Fill>
	LCD_ShowString (LCD_W/16*4,0,"Heart Rate", WHITE,	BLACK, 12,	1);
 800305a:	2301      	movs	r3, #1
 800305c:	9302      	str	r3, [sp, #8]
 800305e:	230c      	movs	r3, #12
 8003060:	9301      	str	r3, [sp, #4]
 8003062:	2300      	movs	r3, #0
 8003064:	9300      	str	r3, [sp, #0]
 8003066:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800306a:	4a0a      	ldr	r2, [pc, #40]	; (8003094 <MENU_HEART+0x50>)
 800306c:	2100      	movs	r1, #0
 800306e:	2020      	movs	r0, #32
 8003070:	f001 ffe8 	bl	8005044 <LCD_ShowString>
	LCD_ShowString (LCD_W/16*10, LCD_H/16*3,    "BPM", 	WHITE,	BLACK, 16,	1);
 8003074:	2301      	movs	r3, #1
 8003076:	9302      	str	r3, [sp, #8]
 8003078:	2310      	movs	r3, #16
 800307a:	9301      	str	r3, [sp, #4]
 800307c:	2300      	movs	r3, #0
 800307e:	9300      	str	r3, [sp, #0]
 8003080:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003084:	4a04      	ldr	r2, [pc, #16]	; (8003098 <MENU_HEART+0x54>)
 8003086:	211e      	movs	r1, #30
 8003088:	2050      	movs	r0, #80	; 0x50
 800308a:	f001 ffdb 	bl	8005044 <LCD_ShowString>
	//LCD_ShowString (LCD_W/2,LCD_H/2,"HEART", WHITE,	BLACK, 16,	1);

}
 800308e:	bf00      	nop
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	0800f8c4 	.word	0x0800f8c4
 8003098:	0800f86c 	.word	0x0800f86c

0800309c <MENU_LAT>:


void MENU_LAT(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af04      	add	r7, sp, #16
	LCD_Fill(0,0,LCD_W,LCD_H,BLACK);
 80030a2:	2300      	movs	r3, #0
 80030a4:	9300      	str	r3, [sp, #0]
 80030a6:	23a0      	movs	r3, #160	; 0xa0
 80030a8:	2280      	movs	r2, #128	; 0x80
 80030aa:	2100      	movs	r1, #0
 80030ac:	2000      	movs	r0, #0
 80030ae:	f001 fea7 	bl	8004e00 <LCD_Fill>
	LCD_ShowString (LCD_W/16*4,0,"Location", WHITE,	BLACK, 12,	1);
 80030b2:	2301      	movs	r3, #1
 80030b4:	9302      	str	r3, [sp, #8]
 80030b6:	230c      	movs	r3, #12
 80030b8:	9301      	str	r3, [sp, #4]
 80030ba:	2300      	movs	r3, #0
 80030bc:	9300      	str	r3, [sp, #0]
 80030be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030c2:	4a11      	ldr	r2, [pc, #68]	; (8003108 <MENU_LAT+0x6c>)
 80030c4:	2100      	movs	r1, #0
 80030c6:	2020      	movs	r0, #32
 80030c8:	f001 ffbc 	bl	8005044 <LCD_ShowString>
	LCD_ShowString (LCD_W/16*1,LCD_H/16*3,"Latitude", WHITE,	BLACK, 12,	1);
 80030cc:	2301      	movs	r3, #1
 80030ce:	9302      	str	r3, [sp, #8]
 80030d0:	230c      	movs	r3, #12
 80030d2:	9301      	str	r3, [sp, #4]
 80030d4:	2300      	movs	r3, #0
 80030d6:	9300      	str	r3, [sp, #0]
 80030d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030dc:	4a0b      	ldr	r2, [pc, #44]	; (800310c <MENU_LAT+0x70>)
 80030de:	211e      	movs	r1, #30
 80030e0:	2008      	movs	r0, #8
 80030e2:	f001 ffaf 	bl	8005044 <LCD_ShowString>
	LCD_ShowString (LCD_W/16*1,LCD_H/16*5,"Longitude", WHITE,	BLACK, 12,	1);
 80030e6:	2301      	movs	r3, #1
 80030e8:	9302      	str	r3, [sp, #8]
 80030ea:	230c      	movs	r3, #12
 80030ec:	9301      	str	r3, [sp, #4]
 80030ee:	2300      	movs	r3, #0
 80030f0:	9300      	str	r3, [sp, #0]
 80030f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030f6:	4a06      	ldr	r2, [pc, #24]	; (8003110 <MENU_LAT+0x74>)
 80030f8:	2132      	movs	r1, #50	; 0x32
 80030fa:	2008      	movs	r0, #8
 80030fc:	f001 ffa2 	bl	8005044 <LCD_ShowString>
	//LCD_ShowString (LCD_W/16*6,0,"Location", WHITE,	BLACK, 16,	1);
	//LCD_ShowString (LCD_W/2,LCD_H/2,"LAT", WHITE,	BLACK, 16,	1);

}
 8003100:	bf00      	nop
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	0800f8d0 	.word	0x0800f8d0
 800310c:	0800f838 	.word	0x0800f838
 8003110:	0800f844 	.word	0x0800f844

08003114 <MENU_LON>:

void MENU_LON(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af04      	add	r7, sp, #16
	LCD_Fill(0,0,LCD_W,LCD_H,BLACK);
 800311a:	2300      	movs	r3, #0
 800311c:	9300      	str	r3, [sp, #0]
 800311e:	23a0      	movs	r3, #160	; 0xa0
 8003120:	2280      	movs	r2, #128	; 0x80
 8003122:	2100      	movs	r1, #0
 8003124:	2000      	movs	r0, #0
 8003126:	f001 fe6b 	bl	8004e00 <LCD_Fill>
	LCD_ShowString (LCD_W/16*4,0,"Location", WHITE,	BLACK, 12,	1);
 800312a:	2301      	movs	r3, #1
 800312c:	9302      	str	r3, [sp, #8]
 800312e:	230c      	movs	r3, #12
 8003130:	9301      	str	r3, [sp, #4]
 8003132:	2300      	movs	r3, #0
 8003134:	9300      	str	r3, [sp, #0]
 8003136:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800313a:	4a11      	ldr	r2, [pc, #68]	; (8003180 <MENU_LON+0x6c>)
 800313c:	2100      	movs	r1, #0
 800313e:	2020      	movs	r0, #32
 8003140:	f001 ff80 	bl	8005044 <LCD_ShowString>
	LCD_ShowString (LCD_W/16*1,LCD_H/16*3,"Latitude", WHITE,	BLACK, 12,	1);
 8003144:	2301      	movs	r3, #1
 8003146:	9302      	str	r3, [sp, #8]
 8003148:	230c      	movs	r3, #12
 800314a:	9301      	str	r3, [sp, #4]
 800314c:	2300      	movs	r3, #0
 800314e:	9300      	str	r3, [sp, #0]
 8003150:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003154:	4a0b      	ldr	r2, [pc, #44]	; (8003184 <MENU_LON+0x70>)
 8003156:	211e      	movs	r1, #30
 8003158:	2008      	movs	r0, #8
 800315a:	f001 ff73 	bl	8005044 <LCD_ShowString>
	LCD_ShowString (LCD_W/16*1,LCD_H/16*5,"Longitude", WHITE,	BLACK, 12,	1);
 800315e:	2301      	movs	r3, #1
 8003160:	9302      	str	r3, [sp, #8]
 8003162:	230c      	movs	r3, #12
 8003164:	9301      	str	r3, [sp, #4]
 8003166:	2300      	movs	r3, #0
 8003168:	9300      	str	r3, [sp, #0]
 800316a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800316e:	4a06      	ldr	r2, [pc, #24]	; (8003188 <MENU_LON+0x74>)
 8003170:	2132      	movs	r1, #50	; 0x32
 8003172:	2008      	movs	r0, #8
 8003174:	f001 ff66 	bl	8005044 <LCD_ShowString>
	//LCD_ShowString (LCD_W/2,LCD_H/2,"LON", WHITE,	BLACK, 16,	1);

}
 8003178:	bf00      	nop
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	0800f8d0 	.word	0x0800f8d0
 8003184:	0800f838 	.word	0x0800f838
 8003188:	0800f844 	.word	0x0800f844

0800318c <MENU_FALL>:

void MENU_FALL(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af04      	add	r7, sp, #16
	LCD_Fill(0,0,LCD_W,LCD_H,BLACK);
 8003192:	2300      	movs	r3, #0
 8003194:	9300      	str	r3, [sp, #0]
 8003196:	23a0      	movs	r3, #160	; 0xa0
 8003198:	2280      	movs	r2, #128	; 0x80
 800319a:	2100      	movs	r1, #0
 800319c:	2000      	movs	r0, #0
 800319e:	f001 fe2f 	bl	8004e00 <LCD_Fill>
	LCD_ShowString (LCD_W/16*4,0,"Fall Status", WHITE,	BLACK, 12,	1);
 80031a2:	2301      	movs	r3, #1
 80031a4:	9302      	str	r3, [sp, #8]
 80031a6:	230c      	movs	r3, #12
 80031a8:	9301      	str	r3, [sp, #4]
 80031aa:	2300      	movs	r3, #0
 80031ac:	9300      	str	r3, [sp, #0]
 80031ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80031b2:	4a04      	ldr	r2, [pc, #16]	; (80031c4 <MENU_FALL+0x38>)
 80031b4:	2100      	movs	r1, #0
 80031b6:	2020      	movs	r0, #32
 80031b8:	f001 ff44 	bl	8005044 <LCD_ShowString>
	//LCD_ShowString (LCD_W/2,LCD_H/2,"FALL", WHITE,	BLACK, 16,	1);

}
 80031bc:	bf00      	nop
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	0800f8dc 	.word	0x0800f8dc

080031c8 <MENU_BLUET>:

void MENU_BLUET(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af04      	add	r7, sp, #16
	LCD_Fill(0,0,LCD_W,LCD_H,BLACK);
 80031ce:	2300      	movs	r3, #0
 80031d0:	9300      	str	r3, [sp, #0]
 80031d2:	23a0      	movs	r3, #160	; 0xa0
 80031d4:	2280      	movs	r2, #128	; 0x80
 80031d6:	2100      	movs	r1, #0
 80031d8:	2000      	movs	r0, #0
 80031da:	f001 fe11 	bl	8004e00 <LCD_Fill>
	LCD_ShowString (LCD_W/16*2,0,"Bluetooth Status", WHITE,	BLACK, 12,	1);
 80031de:	2301      	movs	r3, #1
 80031e0:	9302      	str	r3, [sp, #8]
 80031e2:	230c      	movs	r3, #12
 80031e4:	9301      	str	r3, [sp, #4]
 80031e6:	2300      	movs	r3, #0
 80031e8:	9300      	str	r3, [sp, #0]
 80031ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80031ee:	4a13      	ldr	r2, [pc, #76]	; (800323c <MENU_BLUET+0x74>)
 80031f0:	2100      	movs	r1, #0
 80031f2:	2010      	movs	r0, #16
 80031f4:	f001 ff26 	bl	8005044 <LCD_ShowString>
	if(blueOn == 1)
 80031f8:	4b11      	ldr	r3, [pc, #68]	; (8003240 <MENU_BLUET+0x78>)
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d10d      	bne.n	800321c <MENU_BLUET+0x54>
	{
		LCD_ShowString (LCD_W/16*7,LCD_H/16*3,"ON", WHITE, BLACK, 16,	1);
 8003200:	2301      	movs	r3, #1
 8003202:	9302      	str	r3, [sp, #8]
 8003204:	2310      	movs	r3, #16
 8003206:	9301      	str	r3, [sp, #4]
 8003208:	2300      	movs	r3, #0
 800320a:	9300      	str	r3, [sp, #0]
 800320c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003210:	4a0c      	ldr	r2, [pc, #48]	; (8003244 <MENU_BLUET+0x7c>)
 8003212:	211e      	movs	r1, #30
 8003214:	2038      	movs	r0, #56	; 0x38
 8003216:	f001 ff15 	bl	8005044 <LCD_ShowString>
	{
		LCD_ShowString (LCD_W/16*7,LCD_H/16*3,"OFF", WHITE,BLACK, 16,	1);
	}
	//LCD_ShowString (LCD_W/2,LCD_H/2,"BLUET", WHITE,	BLACK, 16,	1);

}
 800321a:	e00c      	b.n	8003236 <MENU_BLUET+0x6e>
		LCD_ShowString (LCD_W/16*7,LCD_H/16*3,"OFF", WHITE,BLACK, 16,	1);
 800321c:	2301      	movs	r3, #1
 800321e:	9302      	str	r3, [sp, #8]
 8003220:	2310      	movs	r3, #16
 8003222:	9301      	str	r3, [sp, #4]
 8003224:	2300      	movs	r3, #0
 8003226:	9300      	str	r3, [sp, #0]
 8003228:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800322c:	4a06      	ldr	r2, [pc, #24]	; (8003248 <MENU_BLUET+0x80>)
 800322e:	211e      	movs	r1, #30
 8003230:	2038      	movs	r0, #56	; 0x38
 8003232:	f001 ff07 	bl	8005044 <LCD_ShowString>
}
 8003236:	bf00      	nop
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	0800f8e8 	.word	0x0800f8e8
 8003240:	2000022d 	.word	0x2000022d
 8003244:	0800f8a0 	.word	0x0800f8a0
 8003248:	0800f8a4 	.word	0x0800f8a4

0800324c <Refresh>:
	LCD_ShowString (LCD_W/16*1,LCD_H/16*5,"Longitude", WHITE,	BLACK, 12,	1);
}


void Refresh(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af02      	add	r7, sp, #8
	LCD_Fill(0,0,LCD_W,LCD_H,BLACK);
 8003252:	2300      	movs	r3, #0
 8003254:	9300      	str	r3, [sp, #0]
 8003256:	23a0      	movs	r3, #160	; 0xa0
 8003258:	2280      	movs	r2, #128	; 0x80
 800325a:	2100      	movs	r1, #0
 800325c:	2000      	movs	r0, #0
 800325e:	f001 fdcf 	bl	8004e00 <LCD_Fill>
	MENU_init_();
 8003262:	f7ff f94d 	bl	8002500 <MENU_init_>
	MENU_main();
 8003266:	f7ff fbd3 	bl	8002a10 <MENU_main>
}
 800326a:	bf00      	nop
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <MENU_SELECTION>:
* @function: 	setting page
* @input:		n/a
* @return:		n/a
*******************************************/
unsigned char MENU_SELECTION(unsigned char switch_value)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af02      	add	r7, sp, #8
 8003276:	4603      	mov	r3, r0
 8003278:	71fb      	strb	r3, [r7, #7]
	if((switch_value == 1) || (switch_value == 3))
 800327a:	79fb      	ldrb	r3, [r7, #7]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d003      	beq.n	8003288 <MENU_SELECTION+0x18>
 8003280:	79fb      	ldrb	r3, [r7, #7]
 8003282:	2b03      	cmp	r3, #3
 8003284:	f040 8164 	bne.w	8003550 <MENU_SELECTION+0x2e0>
	{
		switch(selection)
 8003288:	4bb7      	ldr	r3, [pc, #732]	; (8003568 <MENU_SELECTION+0x2f8>)
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	3b01      	subs	r3, #1
 800328e:	2b08      	cmp	r3, #8
 8003290:	f200 808d 	bhi.w	80033ae <MENU_SELECTION+0x13e>
 8003294:	a201      	add	r2, pc, #4	; (adr r2, 800329c <MENU_SELECTION+0x2c>)
 8003296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800329a:	bf00      	nop
 800329c:	080032c1 	.word	0x080032c1
 80032a0:	080032d3 	.word	0x080032d3
 80032a4:	080032e5 	.word	0x080032e5
 80032a8:	080032f7 	.word	0x080032f7
 80032ac:	08003309 	.word	0x08003309
 80032b0:	0800331b 	.word	0x0800331b
 80032b4:	0800332d 	.word	0x0800332d
 80032b8:	0800333f 	.word	0x0800333f
 80032bc:	08003377 	.word	0x08003377
		{
			case SETTING :
				LCD_DrawRectangle(1, LCD_H/16*14+8, LCD_W-1, LCD_H-1,BLACK);
 80032c0:	2300      	movs	r3, #0
 80032c2:	9300      	str	r3, [sp, #0]
 80032c4:	239f      	movs	r3, #159	; 0x9f
 80032c6:	227f      	movs	r2, #127	; 0x7f
 80032c8:	2194      	movs	r1, #148	; 0x94
 80032ca:	2001      	movs	r0, #1
 80032cc:	f001 fd60 	bl	8004d90 <LCD_DrawRectangle>
		        break;
 80032d0:	e076      	b.n	80033c0 <MENU_SELECTION+0x150>
		    case TEMP :
				LCD_DrawRectangle(1, LCD_H/16*3, LCD_W/16*5, LCD_H/16*4+3,BLACK);
 80032d2:	2300      	movs	r3, #0
 80032d4:	9300      	str	r3, [sp, #0]
 80032d6:	232b      	movs	r3, #43	; 0x2b
 80032d8:	2228      	movs	r2, #40	; 0x28
 80032da:	211e      	movs	r1, #30
 80032dc:	2001      	movs	r0, #1
 80032de:	f001 fd57 	bl	8004d90 <LCD_DrawRectangle>
		        break;
 80032e2:	e06d      	b.n	80033c0 <MENU_SELECTION+0x150>
		    case BLOOD :
				LCD_DrawRectangle(1, LCD_H/16*5, LCD_W/16*5, LCD_H/16*6+3,BLACK);
 80032e4:	2300      	movs	r3, #0
 80032e6:	9300      	str	r3, [sp, #0]
 80032e8:	233f      	movs	r3, #63	; 0x3f
 80032ea:	2228      	movs	r2, #40	; 0x28
 80032ec:	2132      	movs	r1, #50	; 0x32
 80032ee:	2001      	movs	r0, #1
 80032f0:	f001 fd4e 	bl	8004d90 <LCD_DrawRectangle>
		        break;
 80032f4:	e064      	b.n	80033c0 <MENU_SELECTION+0x150>
		    case HEART :
				LCD_DrawRectangle(0, LCD_H/16*7, LCD_W/16*5, LCD_H/16*8+3,BLACK);
 80032f6:	2300      	movs	r3, #0
 80032f8:	9300      	str	r3, [sp, #0]
 80032fa:	2353      	movs	r3, #83	; 0x53
 80032fc:	2228      	movs	r2, #40	; 0x28
 80032fe:	2146      	movs	r1, #70	; 0x46
 8003300:	2000      	movs	r0, #0
 8003302:	f001 fd45 	bl	8004d90 <LCD_DrawRectangle>
		        break;
 8003306:	e05b      	b.n	80033c0 <MENU_SELECTION+0x150>
		    case LAT :
				LCD_DrawRectangle(0, LCD_H/16*9, LCD_W/16*8, LCD_H/16*10+3,BLACK);
 8003308:	2300      	movs	r3, #0
 800330a:	9300      	str	r3, [sp, #0]
 800330c:	2367      	movs	r3, #103	; 0x67
 800330e:	2240      	movs	r2, #64	; 0x40
 8003310:	215a      	movs	r1, #90	; 0x5a
 8003312:	2000      	movs	r0, #0
 8003314:	f001 fd3c 	bl	8004d90 <LCD_DrawRectangle>
		        break;
 8003318:	e052      	b.n	80033c0 <MENU_SELECTION+0x150>
		    case LON :
				LCD_DrawRectangle(0, LCD_H/16*11, LCD_W/16*8, LCD_H/16*12+3,BLACK);
 800331a:	2300      	movs	r3, #0
 800331c:	9300      	str	r3, [sp, #0]
 800331e:	237b      	movs	r3, #123	; 0x7b
 8003320:	2240      	movs	r2, #64	; 0x40
 8003322:	216e      	movs	r1, #110	; 0x6e
 8003324:	2000      	movs	r0, #0
 8003326:	f001 fd33 	bl	8004d90 <LCD_DrawRectangle>
		        break;
 800332a:	e049      	b.n	80033c0 <MENU_SELECTION+0x150>
		    case FALLD :
				LCD_DrawRectangle(0, LCD_H/16*13, LCD_W/16*5, LCD_H/16*14+3,BLACK);
 800332c:	2300      	movs	r3, #0
 800332e:	9300      	str	r3, [sp, #0]
 8003330:	238f      	movs	r3, #143	; 0x8f
 8003332:	2228      	movs	r2, #40	; 0x28
 8003334:	2182      	movs	r1, #130	; 0x82
 8003336:	2000      	movs	r0, #0
 8003338:	f001 fd2a 	bl	8004d90 <LCD_DrawRectangle>
		        break;
 800333c:	e040      	b.n	80033c0 <MENU_SELECTION+0x150>
		    case BLUEM :
				//LCD_DrawRectangle(LCD_W/16*10, 0,LCD_W/16*13,LCD_H/16*2,BLACK);
				LCD_DrawRectangle(LCD_W/16*10, 0,LCD_W/16*13,LCD_H/16*2,LIGHTBLUE);
 800333e:	f647 537c 	movw	r3, #32124	; 0x7d7c
 8003342:	9300      	str	r3, [sp, #0]
 8003344:	2314      	movs	r3, #20
 8003346:	2268      	movs	r2, #104	; 0x68
 8003348:	2100      	movs	r1, #0
 800334a:	2050      	movs	r0, #80	; 0x50
 800334c:	f001 fd20 	bl	8004d90 <LCD_DrawRectangle>
				LCD_DrawRectangle(LCD_W/16*10+1, 1,LCD_W/16*13-1,LCD_H/16*2-1,LIGHTBLUE);
 8003350:	f647 537c 	movw	r3, #32124	; 0x7d7c
 8003354:	9300      	str	r3, [sp, #0]
 8003356:	2313      	movs	r3, #19
 8003358:	2267      	movs	r2, #103	; 0x67
 800335a:	2101      	movs	r1, #1
 800335c:	2051      	movs	r0, #81	; 0x51
 800335e:	f001 fd17 	bl	8004d90 <LCD_DrawRectangle>
				LCD_DrawRectangle(LCD_W/16*10+2, 2,LCD_W/16*13-2,LCD_H/16*2-2,LIGHTBLUE);
 8003362:	f647 537c 	movw	r3, #32124	; 0x7d7c
 8003366:	9300      	str	r3, [sp, #0]
 8003368:	2312      	movs	r3, #18
 800336a:	2266      	movs	r2, #102	; 0x66
 800336c:	2102      	movs	r1, #2
 800336e:	2052      	movs	r0, #82	; 0x52
 8003370:	f001 fd0e 	bl	8004d90 <LCD_DrawRectangle>
		        break;
 8003374:	e024      	b.n	80033c0 <MENU_SELECTION+0x150>
		    case POWER :
				LCD_DrawRectangle(LCD_W/16*13, 0,LCD_W,LCD_H/16*2,MAGENTA);
 8003376:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800337a:	9300      	str	r3, [sp, #0]
 800337c:	2314      	movs	r3, #20
 800337e:	2280      	movs	r2, #128	; 0x80
 8003380:	2100      	movs	r1, #0
 8003382:	2068      	movs	r0, #104	; 0x68
 8003384:	f001 fd04 	bl	8004d90 <LCD_DrawRectangle>
				LCD_DrawRectangle(LCD_W/16*13+1, 1,LCD_W-1,LCD_H/16*2-1,MAGENTA);
 8003388:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800338c:	9300      	str	r3, [sp, #0]
 800338e:	2313      	movs	r3, #19
 8003390:	227f      	movs	r2, #127	; 0x7f
 8003392:	2101      	movs	r1, #1
 8003394:	2069      	movs	r0, #105	; 0x69
 8003396:	f001 fcfb 	bl	8004d90 <LCD_DrawRectangle>
				LCD_DrawRectangle(LCD_W/16*13+2, 2,LCD_W-2,LCD_H/16*2-2,MAGENTA);
 800339a:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800339e:	9300      	str	r3, [sp, #0]
 80033a0:	2312      	movs	r3, #18
 80033a2:	227e      	movs	r2, #126	; 0x7e
 80033a4:	2102      	movs	r1, #2
 80033a6:	206a      	movs	r0, #106	; 0x6a
 80033a8:	f001 fcf2 	bl	8004d90 <LCD_DrawRectangle>
		        break;
 80033ac:	e008      	b.n	80033c0 <MENU_SELECTION+0x150>
		    default :
		    	LCD_DrawRectangle(1, LCD_H/16*14+8, LCD_W-1, LCD_H-1,BLACK);
 80033ae:	2300      	movs	r3, #0
 80033b0:	9300      	str	r3, [sp, #0]
 80033b2:	239f      	movs	r3, #159	; 0x9f
 80033b4:	227f      	movs	r2, #127	; 0x7f
 80033b6:	2194      	movs	r1, #148	; 0x94
 80033b8:	2001      	movs	r0, #1
 80033ba:	f001 fce9 	bl	8004d90 <LCD_DrawRectangle>
		    	break;
 80033be:	bf00      	nop
		}

		if(switch_value == 1)
 80033c0:	79fb      	ldrb	r3, [r7, #7]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d106      	bne.n	80033d4 <MENU_SELECTION+0x164>
		{
			selection++;
 80033c6:	4b68      	ldr	r3, [pc, #416]	; (8003568 <MENU_SELECTION+0x2f8>)
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	3301      	adds	r3, #1
 80033cc:	b2da      	uxtb	r2, r3
 80033ce:	4b66      	ldr	r3, [pc, #408]	; (8003568 <MENU_SELECTION+0x2f8>)
 80033d0:	701a      	strb	r2, [r3, #0]
 80033d2:	e008      	b.n	80033e6 <MENU_SELECTION+0x176>
		}
		else if(switch_value == 3)
 80033d4:	79fb      	ldrb	r3, [r7, #7]
 80033d6:	2b03      	cmp	r3, #3
 80033d8:	d105      	bne.n	80033e6 <MENU_SELECTION+0x176>
		{
			selection--;
 80033da:	4b63      	ldr	r3, [pc, #396]	; (8003568 <MENU_SELECTION+0x2f8>)
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	3b01      	subs	r3, #1
 80033e0:	b2da      	uxtb	r2, r3
 80033e2:	4b61      	ldr	r3, [pc, #388]	; (8003568 <MENU_SELECTION+0x2f8>)
 80033e4:	701a      	strb	r2, [r3, #0]
		}

		if(selection > 9)
 80033e6:	4b60      	ldr	r3, [pc, #384]	; (8003568 <MENU_SELECTION+0x2f8>)
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	2b09      	cmp	r3, #9
 80033ec:	d903      	bls.n	80033f6 <MENU_SELECTION+0x186>
		{
			selection = 1;
 80033ee:	4b5e      	ldr	r3, [pc, #376]	; (8003568 <MENU_SELECTION+0x2f8>)
 80033f0:	2201      	movs	r2, #1
 80033f2:	701a      	strb	r2, [r3, #0]
 80033f4:	e006      	b.n	8003404 <MENU_SELECTION+0x194>
		}
		else if(selection < 1)
 80033f6:	4b5c      	ldr	r3, [pc, #368]	; (8003568 <MENU_SELECTION+0x2f8>)
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d102      	bne.n	8003404 <MENU_SELECTION+0x194>
		{
			selection = 9;
 80033fe:	4b5a      	ldr	r3, [pc, #360]	; (8003568 <MENU_SELECTION+0x2f8>)
 8003400:	2209      	movs	r2, #9
 8003402:	701a      	strb	r2, [r3, #0]
		}

		switch(selection)
 8003404:	4b58      	ldr	r3, [pc, #352]	; (8003568 <MENU_SELECTION+0x2f8>)
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	3b01      	subs	r3, #1
 800340a:	2b08      	cmp	r3, #8
 800340c:	f200 8094 	bhi.w	8003538 <MENU_SELECTION+0x2c8>
 8003410:	a201      	add	r2, pc, #4	; (adr r2, 8003418 <MENU_SELECTION+0x1a8>)
 8003412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003416:	bf00      	nop
 8003418:	0800343d 	.word	0x0800343d
 800341c:	08003451 	.word	0x08003451
 8003420:	08003465 	.word	0x08003465
 8003424:	08003479 	.word	0x08003479
 8003428:	0800348d 	.word	0x0800348d
 800342c:	080034a1 	.word	0x080034a1
 8003430:	080034b5 	.word	0x080034b5
 8003434:	080034c9 	.word	0x080034c9
 8003438:	08003501 	.word	0x08003501
		{
		case SETTING :
			LCD_DrawRectangle(1, LCD_H/16*14+8, LCD_W-1, LCD_H-1,WHITE);
 800343c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003440:	9300      	str	r3, [sp, #0]
 8003442:	239f      	movs	r3, #159	; 0x9f
 8003444:	227f      	movs	r2, #127	; 0x7f
 8003446:	2194      	movs	r1, #148	; 0x94
 8003448:	2001      	movs	r0, #1
 800344a:	f001 fca1 	bl	8004d90 <LCD_DrawRectangle>
	        break;
 800344e:	e07d      	b.n	800354c <MENU_SELECTION+0x2dc>
	    case TEMP :
			LCD_DrawRectangle(1, LCD_H/16*3, LCD_W/16*5, LCD_H/16*4+3,WHITE);
 8003450:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003454:	9300      	str	r3, [sp, #0]
 8003456:	232b      	movs	r3, #43	; 0x2b
 8003458:	2228      	movs	r2, #40	; 0x28
 800345a:	211e      	movs	r1, #30
 800345c:	2001      	movs	r0, #1
 800345e:	f001 fc97 	bl	8004d90 <LCD_DrawRectangle>
	        break;
 8003462:	e073      	b.n	800354c <MENU_SELECTION+0x2dc>
	    case BLOOD :
			LCD_DrawRectangle(1, LCD_H/16*5, LCD_W/16*5, LCD_H/16*6+3,WHITE);
 8003464:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003468:	9300      	str	r3, [sp, #0]
 800346a:	233f      	movs	r3, #63	; 0x3f
 800346c:	2228      	movs	r2, #40	; 0x28
 800346e:	2132      	movs	r1, #50	; 0x32
 8003470:	2001      	movs	r0, #1
 8003472:	f001 fc8d 	bl	8004d90 <LCD_DrawRectangle>
	        break;
 8003476:	e069      	b.n	800354c <MENU_SELECTION+0x2dc>
	    case HEART :
			LCD_DrawRectangle(0, LCD_H/16*7, LCD_W/16*5, LCD_H/16*8+3,WHITE);
 8003478:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800347c:	9300      	str	r3, [sp, #0]
 800347e:	2353      	movs	r3, #83	; 0x53
 8003480:	2228      	movs	r2, #40	; 0x28
 8003482:	2146      	movs	r1, #70	; 0x46
 8003484:	2000      	movs	r0, #0
 8003486:	f001 fc83 	bl	8004d90 <LCD_DrawRectangle>
	        break;
 800348a:	e05f      	b.n	800354c <MENU_SELECTION+0x2dc>
	    case LAT :
			LCD_DrawRectangle(0, LCD_H/16*9, LCD_W/16*8, LCD_H/16*10+3,WHITE);
 800348c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003490:	9300      	str	r3, [sp, #0]
 8003492:	2367      	movs	r3, #103	; 0x67
 8003494:	2240      	movs	r2, #64	; 0x40
 8003496:	215a      	movs	r1, #90	; 0x5a
 8003498:	2000      	movs	r0, #0
 800349a:	f001 fc79 	bl	8004d90 <LCD_DrawRectangle>
	        break;
 800349e:	e055      	b.n	800354c <MENU_SELECTION+0x2dc>
	    case LON :
			LCD_DrawRectangle(0, LCD_H/16*11, LCD_W/16*8, LCD_H/16*12+3,WHITE);
 80034a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034a4:	9300      	str	r3, [sp, #0]
 80034a6:	237b      	movs	r3, #123	; 0x7b
 80034a8:	2240      	movs	r2, #64	; 0x40
 80034aa:	216e      	movs	r1, #110	; 0x6e
 80034ac:	2000      	movs	r0, #0
 80034ae:	f001 fc6f 	bl	8004d90 <LCD_DrawRectangle>
	        break;
 80034b2:	e04b      	b.n	800354c <MENU_SELECTION+0x2dc>
	    case FALLD :
			LCD_DrawRectangle(0, LCD_H/16*13, LCD_W/16*5, LCD_H/16*14+3,WHITE);
 80034b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034b8:	9300      	str	r3, [sp, #0]
 80034ba:	238f      	movs	r3, #143	; 0x8f
 80034bc:	2228      	movs	r2, #40	; 0x28
 80034be:	2182      	movs	r1, #130	; 0x82
 80034c0:	2000      	movs	r0, #0
 80034c2:	f001 fc65 	bl	8004d90 <LCD_DrawRectangle>
	        break;
 80034c6:	e041      	b.n	800354c <MENU_SELECTION+0x2dc>
	    case BLUEM :
			//LCD_DrawRectangle(LCD_W/16*10, 0,LCD_W/16*13,LCD_H/16*2,RED);
			LCD_DrawRectangle(LCD_W/16*10, 0,LCD_W/16*13,LCD_H/16*2,RED);
 80034c8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80034cc:	9300      	str	r3, [sp, #0]
 80034ce:	2314      	movs	r3, #20
 80034d0:	2268      	movs	r2, #104	; 0x68
 80034d2:	2100      	movs	r1, #0
 80034d4:	2050      	movs	r0, #80	; 0x50
 80034d6:	f001 fc5b 	bl	8004d90 <LCD_DrawRectangle>
			LCD_DrawRectangle(LCD_W/16*10+1, 1,LCD_W/16*13-1,LCD_H/16*2-1,RED);
 80034da:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80034de:	9300      	str	r3, [sp, #0]
 80034e0:	2313      	movs	r3, #19
 80034e2:	2267      	movs	r2, #103	; 0x67
 80034e4:	2101      	movs	r1, #1
 80034e6:	2051      	movs	r0, #81	; 0x51
 80034e8:	f001 fc52 	bl	8004d90 <LCD_DrawRectangle>
			LCD_DrawRectangle(LCD_W/16*10+2, 2,LCD_W/16*13-2,LCD_H/16*2-2,RED);
 80034ec:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80034f0:	9300      	str	r3, [sp, #0]
 80034f2:	2312      	movs	r3, #18
 80034f4:	2266      	movs	r2, #102	; 0x66
 80034f6:	2102      	movs	r1, #2
 80034f8:	2052      	movs	r0, #82	; 0x52
 80034fa:	f001 fc49 	bl	8004d90 <LCD_DrawRectangle>
	        break;
 80034fe:	e025      	b.n	800354c <MENU_SELECTION+0x2dc>
	    case POWER :
			LCD_DrawRectangle(LCD_W/16*13, 0,LCD_W,LCD_H/16*2,RED);
 8003500:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003504:	9300      	str	r3, [sp, #0]
 8003506:	2314      	movs	r3, #20
 8003508:	2280      	movs	r2, #128	; 0x80
 800350a:	2100      	movs	r1, #0
 800350c:	2068      	movs	r0, #104	; 0x68
 800350e:	f001 fc3f 	bl	8004d90 <LCD_DrawRectangle>
			LCD_DrawRectangle(LCD_W/16*13+1, 1,LCD_W-1,LCD_H/16*2-1,RED);
 8003512:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003516:	9300      	str	r3, [sp, #0]
 8003518:	2313      	movs	r3, #19
 800351a:	227f      	movs	r2, #127	; 0x7f
 800351c:	2101      	movs	r1, #1
 800351e:	2069      	movs	r0, #105	; 0x69
 8003520:	f001 fc36 	bl	8004d90 <LCD_DrawRectangle>
			LCD_DrawRectangle(LCD_W/16*13+2, 2,LCD_W-2,LCD_H/16*2-2,RED);
 8003524:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003528:	9300      	str	r3, [sp, #0]
 800352a:	2312      	movs	r3, #18
 800352c:	227e      	movs	r2, #126	; 0x7e
 800352e:	2102      	movs	r1, #2
 8003530:	206a      	movs	r0, #106	; 0x6a
 8003532:	f001 fc2d 	bl	8004d90 <LCD_DrawRectangle>

	        break;
 8003536:	e009      	b.n	800354c <MENU_SELECTION+0x2dc>
	    default :
	    	LCD_DrawRectangle(1, LCD_H/16*14+8, LCD_W-1, LCD_H-1,WHITE);
 8003538:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800353c:	9300      	str	r3, [sp, #0]
 800353e:	239f      	movs	r3, #159	; 0x9f
 8003540:	227f      	movs	r2, #127	; 0x7f
 8003542:	2194      	movs	r1, #148	; 0x94
 8003544:	2001      	movs	r0, #1
 8003546:	f001 fc23 	bl	8004d90 <LCD_DrawRectangle>
	    	break;
 800354a:	bf00      	nop
		}
		return 100;
 800354c:	2364      	movs	r3, #100	; 0x64
 800354e:	e006      	b.n	800355e <MENU_SELECTION+0x2ee>
	}
	else if (switch_value == 2)
 8003550:	79fb      	ldrb	r3, [r7, #7]
 8003552:	2b02      	cmp	r3, #2
 8003554:	d102      	bne.n	800355c <MENU_SELECTION+0x2ec>
	{
		return selection;
 8003556:	4b04      	ldr	r3, [pc, #16]	; (8003568 <MENU_SELECTION+0x2f8>)
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	e000      	b.n	800355e <MENU_SELECTION+0x2ee>
	}
	else
	{
		return 100;
 800355c:	2364      	movs	r3, #100	; 0x64
	}
}
 800355e:	4618      	mov	r0, r3
 8003560:	3708      	adds	r7, #8
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	20000019 	.word	0x20000019

0800356c <SETTING_SELECTION>:




unsigned char SETTING_SELECTION(unsigned char select1, unsigned char select2, unsigned char switch_value)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af02      	add	r7, sp, #8
 8003572:	4603      	mov	r3, r0
 8003574:	71fb      	strb	r3, [r7, #7]
 8003576:	460b      	mov	r3, r1
 8003578:	71bb      	strb	r3, [r7, #6]
 800357a:	4613      	mov	r3, r2
 800357c:	717b      	strb	r3, [r7, #5]

	if((select1 == 1) && (select2 == 1))
 800357e:	79fb      	ldrb	r3, [r7, #7]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d124      	bne.n	80035ce <SETTING_SELECTION+0x62>
 8003584:	79bb      	ldrb	r3, [r7, #6]
 8003586:	2b01      	cmp	r3, #1
 8003588:	d121      	bne.n	80035ce <SETTING_SELECTION+0x62>
	{
		LCD_DrawRectangle(LCD_W/16*12,LCD_H/16*2, LCD_W/16*15+5, LCD_H/16*3+3, BLACK); //SI
 800358a:	2300      	movs	r3, #0
 800358c:	9300      	str	r3, [sp, #0]
 800358e:	2321      	movs	r3, #33	; 0x21
 8003590:	227d      	movs	r2, #125	; 0x7d
 8003592:	2114      	movs	r1, #20
 8003594:	2060      	movs	r0, #96	; 0x60
 8003596:	f001 fbfb 	bl	8004d90 <LCD_DrawRectangle>
		LCD_DrawRectangle(LCD_W/16*8,LCD_H/16*4, LCD_W/16*11, LCD_H/16*5+3, BLACK); //BLUEON
 800359a:	2300      	movs	r3, #0
 800359c:	9300      	str	r3, [sp, #0]
 800359e:	2335      	movs	r3, #53	; 0x35
 80035a0:	2258      	movs	r2, #88	; 0x58
 80035a2:	2128      	movs	r1, #40	; 0x28
 80035a4:	2040      	movs	r0, #64	; 0x40
 80035a6:	f001 fbf3 	bl	8004d90 <LCD_DrawRectangle>
		LCD_DrawRectangle(LCD_W/16*12,LCD_H/16*4, LCD_W/16*15+5, LCD_H/16*5, BLACK); //BLUEOFF
 80035aa:	2300      	movs	r3, #0
 80035ac:	9300      	str	r3, [sp, #0]
 80035ae:	2332      	movs	r3, #50	; 0x32
 80035b0:	227d      	movs	r2, #125	; 0x7d
 80035b2:	2128      	movs	r1, #40	; 0x28
 80035b4:	2060      	movs	r0, #96	; 0x60
 80035b6:	f001 fbeb 	bl	8004d90 <LCD_DrawRectangle>
		LCD_DrawRectangle(LCD_W/16*8,LCD_H/16*2, LCD_W/16*11, LCD_H/16*3+3, WHITE); //US
 80035ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80035be:	9300      	str	r3, [sp, #0]
 80035c0:	2321      	movs	r3, #33	; 0x21
 80035c2:	2258      	movs	r2, #88	; 0x58
 80035c4:	2114      	movs	r1, #20
 80035c6:	2040      	movs	r0, #64	; 0x40
 80035c8:	f001 fbe2 	bl	8004d90 <LCD_DrawRectangle>
 80035cc:	e076      	b.n	80036bc <SETTING_SELECTION+0x150>
	}
	else if((select1 == 1) && (select2 == 2))
 80035ce:	79fb      	ldrb	r3, [r7, #7]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d124      	bne.n	800361e <SETTING_SELECTION+0xb2>
 80035d4:	79bb      	ldrb	r3, [r7, #6]
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d121      	bne.n	800361e <SETTING_SELECTION+0xb2>
	{
		LCD_DrawRectangle(LCD_W/16*8,LCD_H/16*2, LCD_W/16*11, LCD_H/16*3+3, BLACK); //US
 80035da:	2300      	movs	r3, #0
 80035dc:	9300      	str	r3, [sp, #0]
 80035de:	2321      	movs	r3, #33	; 0x21
 80035e0:	2258      	movs	r2, #88	; 0x58
 80035e2:	2114      	movs	r1, #20
 80035e4:	2040      	movs	r0, #64	; 0x40
 80035e6:	f001 fbd3 	bl	8004d90 <LCD_DrawRectangle>
		LCD_DrawRectangle(LCD_W/16*12,LCD_H/16*2, LCD_W/16*15+5, LCD_H/16*3+3, WHITE); //SI
 80035ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80035ee:	9300      	str	r3, [sp, #0]
 80035f0:	2321      	movs	r3, #33	; 0x21
 80035f2:	227d      	movs	r2, #125	; 0x7d
 80035f4:	2114      	movs	r1, #20
 80035f6:	2060      	movs	r0, #96	; 0x60
 80035f8:	f001 fbca 	bl	8004d90 <LCD_DrawRectangle>
		LCD_DrawRectangle(LCD_W/16*8,LCD_H/16*4, LCD_W/16*11, LCD_H/16*5+3, BLACK); //BLUEON
 80035fc:	2300      	movs	r3, #0
 80035fe:	9300      	str	r3, [sp, #0]
 8003600:	2335      	movs	r3, #53	; 0x35
 8003602:	2258      	movs	r2, #88	; 0x58
 8003604:	2128      	movs	r1, #40	; 0x28
 8003606:	2040      	movs	r0, #64	; 0x40
 8003608:	f001 fbc2 	bl	8004d90 <LCD_DrawRectangle>
		LCD_DrawRectangle(LCD_W/16*12,LCD_H/16*4, LCD_W/16*15+5, LCD_H/16*5+3, BLACK); //BLUEOFF
 800360c:	2300      	movs	r3, #0
 800360e:	9300      	str	r3, [sp, #0]
 8003610:	2335      	movs	r3, #53	; 0x35
 8003612:	227d      	movs	r2, #125	; 0x7d
 8003614:	2128      	movs	r1, #40	; 0x28
 8003616:	2060      	movs	r0, #96	; 0x60
 8003618:	f001 fbba 	bl	8004d90 <LCD_DrawRectangle>
 800361c:	e04e      	b.n	80036bc <SETTING_SELECTION+0x150>
	}
	else if((select1 == 2) && (select2 == 1))
 800361e:	79fb      	ldrb	r3, [r7, #7]
 8003620:	2b02      	cmp	r3, #2
 8003622:	d124      	bne.n	800366e <SETTING_SELECTION+0x102>
 8003624:	79bb      	ldrb	r3, [r7, #6]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d121      	bne.n	800366e <SETTING_SELECTION+0x102>
	{
		LCD_DrawRectangle(LCD_W/16*8,LCD_H/16*2, LCD_W/16*11, LCD_H/16*3+3, BLACK); //US
 800362a:	2300      	movs	r3, #0
 800362c:	9300      	str	r3, [sp, #0]
 800362e:	2321      	movs	r3, #33	; 0x21
 8003630:	2258      	movs	r2, #88	; 0x58
 8003632:	2114      	movs	r1, #20
 8003634:	2040      	movs	r0, #64	; 0x40
 8003636:	f001 fbab 	bl	8004d90 <LCD_DrawRectangle>
		LCD_DrawRectangle(LCD_W/16*12,LCD_H/16*2, LCD_W/16*15+5, LCD_H/16*3+3, BLACK); //SI
 800363a:	2300      	movs	r3, #0
 800363c:	9300      	str	r3, [sp, #0]
 800363e:	2321      	movs	r3, #33	; 0x21
 8003640:	227d      	movs	r2, #125	; 0x7d
 8003642:	2114      	movs	r1, #20
 8003644:	2060      	movs	r0, #96	; 0x60
 8003646:	f001 fba3 	bl	8004d90 <LCD_DrawRectangle>
		LCD_DrawRectangle(LCD_W/16*8,LCD_H/16*4, LCD_W/16*11, LCD_H/16*5+3, WHITE); //BLUEON
 800364a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800364e:	9300      	str	r3, [sp, #0]
 8003650:	2335      	movs	r3, #53	; 0x35
 8003652:	2258      	movs	r2, #88	; 0x58
 8003654:	2128      	movs	r1, #40	; 0x28
 8003656:	2040      	movs	r0, #64	; 0x40
 8003658:	f001 fb9a 	bl	8004d90 <LCD_DrawRectangle>
		LCD_DrawRectangle(LCD_W/16*12,LCD_H/16*4, LCD_W/16*15+5, LCD_H/16*5+3, BLACK); //BLUEOFF
 800365c:	2300      	movs	r3, #0
 800365e:	9300      	str	r3, [sp, #0]
 8003660:	2335      	movs	r3, #53	; 0x35
 8003662:	227d      	movs	r2, #125	; 0x7d
 8003664:	2128      	movs	r1, #40	; 0x28
 8003666:	2060      	movs	r0, #96	; 0x60
 8003668:	f001 fb92 	bl	8004d90 <LCD_DrawRectangle>
 800366c:	e026      	b.n	80036bc <SETTING_SELECTION+0x150>
	}
	else if((select1 == 2) && (select2 == 2))
 800366e:	79fb      	ldrb	r3, [r7, #7]
 8003670:	2b02      	cmp	r3, #2
 8003672:	d123      	bne.n	80036bc <SETTING_SELECTION+0x150>
 8003674:	79bb      	ldrb	r3, [r7, #6]
 8003676:	2b02      	cmp	r3, #2
 8003678:	d120      	bne.n	80036bc <SETTING_SELECTION+0x150>
	{
		LCD_DrawRectangle(LCD_W/16*8,LCD_H/16*2, LCD_W/16*11, LCD_H/16*3+3, BLACK); //US
 800367a:	2300      	movs	r3, #0
 800367c:	9300      	str	r3, [sp, #0]
 800367e:	2321      	movs	r3, #33	; 0x21
 8003680:	2258      	movs	r2, #88	; 0x58
 8003682:	2114      	movs	r1, #20
 8003684:	2040      	movs	r0, #64	; 0x40
 8003686:	f001 fb83 	bl	8004d90 <LCD_DrawRectangle>
		LCD_DrawRectangle(LCD_W/16*12,LCD_H/16*2, LCD_W/16*15+5, LCD_H/16*3+3, BLACK); //SI
 800368a:	2300      	movs	r3, #0
 800368c:	9300      	str	r3, [sp, #0]
 800368e:	2321      	movs	r3, #33	; 0x21
 8003690:	227d      	movs	r2, #125	; 0x7d
 8003692:	2114      	movs	r1, #20
 8003694:	2060      	movs	r0, #96	; 0x60
 8003696:	f001 fb7b 	bl	8004d90 <LCD_DrawRectangle>
		LCD_DrawRectangle(LCD_W/16*8,LCD_H/16*4, LCD_W/16*11, LCD_H/16*5+3, BLACK); //BLUEON
 800369a:	2300      	movs	r3, #0
 800369c:	9300      	str	r3, [sp, #0]
 800369e:	2335      	movs	r3, #53	; 0x35
 80036a0:	2258      	movs	r2, #88	; 0x58
 80036a2:	2128      	movs	r1, #40	; 0x28
 80036a4:	2040      	movs	r0, #64	; 0x40
 80036a6:	f001 fb73 	bl	8004d90 <LCD_DrawRectangle>
		LCD_DrawRectangle(LCD_W/16*12,LCD_H/16*4, LCD_W/16*15+5, LCD_H/16*5+3, WHITE); //BLUEOFF
 80036aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036ae:	9300      	str	r3, [sp, #0]
 80036b0:	2335      	movs	r3, #53	; 0x35
 80036b2:	227d      	movs	r2, #125	; 0x7d
 80036b4:	2128      	movs	r1, #40	; 0x28
 80036b6:	2060      	movs	r0, #96	; 0x60
 80036b8:	f001 fb6a 	bl	8004d90 <LCD_DrawRectangle>
	}

	if(switch_value == 2)
 80036bc:	797b      	ldrb	r3, [r7, #5]
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d116      	bne.n	80036f0 <SETTING_SELECTION+0x184>
	{
		if((select1 == 1) && (select2 == 1))
 80036c2:	79fb      	ldrb	r3, [r7, #7]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d106      	bne.n	80036d6 <SETTING_SELECTION+0x16a>
 80036c8:	79bb      	ldrb	r3, [r7, #6]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d103      	bne.n	80036d6 <SETTING_SELECTION+0x16a>
		{
			unit = 1;//US unit
 80036ce:	4b0b      	ldr	r3, [pc, #44]	; (80036fc <SETTING_SELECTION+0x190>)
 80036d0:	2201      	movs	r2, #1
 80036d2:	701a      	strb	r2, [r3, #0]
 80036d4:	e008      	b.n	80036e8 <SETTING_SELECTION+0x17c>
		}
		else if((select1 == 1) && (select2 == 2))
 80036d6:	79fb      	ldrb	r3, [r7, #7]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d105      	bne.n	80036e8 <SETTING_SELECTION+0x17c>
 80036dc:	79bb      	ldrb	r3, [r7, #6]
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d102      	bne.n	80036e8 <SETTING_SELECTION+0x17c>
		{
			unit = 0;//SI unit
 80036e2:	4b06      	ldr	r3, [pc, #24]	; (80036fc <SETTING_SELECTION+0x190>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	701a      	strb	r2, [r3, #0]
		{
			//blueOn = 0; //BLUEOFF
			//HAL_GPIO_WritePin(BLU_GPIO_SW_GPIO_Port, BLU_GPIO_SW_Pin, GPIO_PIN_RESET);
		}

		Refresh();
 80036e8:	f7ff fdb0 	bl	800324c <Refresh>
		return 100;
 80036ec:	2364      	movs	r3, #100	; 0x64
 80036ee:	e000      	b.n	80036f2 <SETTING_SELECTION+0x186>
	}
	else
	{
		return SETTING;
 80036f0:	2301      	movs	r3, #1
	}


}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	20000018 	.word	0x20000018

08003700 <GPS_Init>:
	CDC_Transmit_FS((unsigned char *) buf, (uint16_t) strlen(buf));
}
#endif

void GPS_Init()
{
 8003700:	b580      	push	{r7, lr}
 8003702:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 8003704:	2201      	movs	r2, #1
 8003706:	4903      	ldr	r1, [pc, #12]	; (8003714 <GPS_Init+0x14>)
 8003708:	4803      	ldr	r0, [pc, #12]	; (8003718 <GPS_Init+0x18>)
 800370a:	f006 f964 	bl	80099d6 <HAL_UART_Receive_IT>
}
 800370e:	bf00      	nop
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	2000022e 	.word	0x2000022e
 8003718:	20001ea8 	.word	0x20001ea8

0800371c <GPS_UART_CallBack>:
{
	return GPS.dec_latitude;
}


void GPS_UART_CallBack(){
 800371c:	b580      	push	{r7, lr}
 800371e:	af00      	add	r7, sp, #0
	if (rx_data != '\n' && rx_index < sizeof(rx_buffer)) {
 8003720:	4b16      	ldr	r3, [pc, #88]	; (800377c <GPS_UART_CallBack+0x60>)
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	2b0a      	cmp	r3, #10
 8003726:	d010      	beq.n	800374a <GPS_UART_CallBack+0x2e>
 8003728:	4b15      	ldr	r3, [pc, #84]	; (8003780 <GPS_UART_CallBack+0x64>)
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	b25b      	sxtb	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	db0b      	blt.n	800374a <GPS_UART_CallBack+0x2e>
		rx_buffer[rx_index++] = rx_data;
 8003732:	4b13      	ldr	r3, [pc, #76]	; (8003780 <GPS_UART_CallBack+0x64>)
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	1c5a      	adds	r2, r3, #1
 8003738:	b2d1      	uxtb	r1, r2
 800373a:	4a11      	ldr	r2, [pc, #68]	; (8003780 <GPS_UART_CallBack+0x64>)
 800373c:	7011      	strb	r1, [r2, #0]
 800373e:	461a      	mov	r2, r3
 8003740:	4b0e      	ldr	r3, [pc, #56]	; (800377c <GPS_UART_CallBack+0x60>)
 8003742:	7819      	ldrb	r1, [r3, #0]
 8003744:	4b0f      	ldr	r3, [pc, #60]	; (8003784 <GPS_UART_CallBack+0x68>)
 8003746:	5499      	strb	r1, [r3, r2]
 8003748:	e010      	b.n	800376c <GPS_UART_CallBack+0x50>

		#if (GPS_DEBUG == 1)
		GPS_print((char*)rx_buffer);
		#endif

		if(GPS_validate((char*) rx_buffer))
 800374a:	480e      	ldr	r0, [pc, #56]	; (8003784 <GPS_UART_CallBack+0x68>)
 800374c:	f000 f81e 	bl	800378c <GPS_validate>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d002      	beq.n	800375c <GPS_UART_CallBack+0x40>
			GPS_parse((char*) rx_buffer);
 8003756:	480b      	ldr	r0, [pc, #44]	; (8003784 <GPS_UART_CallBack+0x68>)
 8003758:	f000 f87a 	bl	8003850 <GPS_parse>
		rx_index = 0;
 800375c:	4b08      	ldr	r3, [pc, #32]	; (8003780 <GPS_UART_CallBack+0x64>)
 800375e:	2200      	movs	r2, #0
 8003760:	701a      	strb	r2, [r3, #0]
		memset(rx_buffer, 0, sizeof(rx_buffer));
 8003762:	2280      	movs	r2, #128	; 0x80
 8003764:	2100      	movs	r1, #0
 8003766:	4807      	ldr	r0, [pc, #28]	; (8003784 <GPS_UART_CallBack+0x68>)
 8003768:	f006 ffec 	bl	800a744 <memset>
	}
	HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 800376c:	2201      	movs	r2, #1
 800376e:	4903      	ldr	r1, [pc, #12]	; (800377c <GPS_UART_CallBack+0x60>)
 8003770:	4805      	ldr	r0, [pc, #20]	; (8003788 <GPS_UART_CallBack+0x6c>)
 8003772:	f006 f930 	bl	80099d6 <HAL_UART_Receive_IT>
}
 8003776:	bf00      	nop
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	2000022e 	.word	0x2000022e
 8003780:	2000022f 	.word	0x2000022f
 8003784:	20001d70 	.word	0x20001d70
 8003788:	20001ea8 	.word	0x20001ea8

0800378c <GPS_validate>:

int GPS_validate(char *nmeastr){
 800378c:	b580      	push	{r7, lr}
 800378e:	b086      	sub	sp, #24
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 8003794:	2300      	movs	r3, #0
 8003796:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 8003798:	2300      	movs	r3, #0
 800379a:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	4413      	add	r3, r2
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	2b24      	cmp	r3, #36	; 0x24
 80037a6:	d103      	bne.n	80037b0 <GPS_validate+0x24>
        i++;
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	3301      	adds	r3, #1
 80037ac:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 80037ae:	e00c      	b.n	80037ca <GPS_validate+0x3e>
        return 0;
 80037b0:	2300      	movs	r3, #0
 80037b2:	e047      	b.n	8003844 <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	4413      	add	r3, r2
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	461a      	mov	r2, r3
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	4053      	eors	r3, r2
 80037c2:	613b      	str	r3, [r7, #16]
        i++;
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	3301      	adds	r3, #1
 80037c8:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	4413      	add	r3, r2
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d008      	beq.n	80037e8 <GPS_validate+0x5c>
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	4413      	add	r3, r2
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	2b2a      	cmp	r3, #42	; 0x2a
 80037e0:	d002      	beq.n	80037e8 <GPS_validate+0x5c>
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	2b4a      	cmp	r3, #74	; 0x4a
 80037e6:	dde5      	ble.n	80037b4 <GPS_validate+0x28>
    }

    if(i >= 75){
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	2b4a      	cmp	r3, #74	; 0x4a
 80037ec:	dd01      	ble.n	80037f2 <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 80037ee:	2300      	movs	r3, #0
 80037f0:	e028      	b.n	8003844 <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	4413      	add	r3, r2
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	2b2a      	cmp	r3, #42	; 0x2a
 80037fc:	d119      	bne.n	8003832 <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	3301      	adds	r3, #1
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	4413      	add	r3, r2
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	3302      	adds	r3, #2
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	4413      	add	r3, r2
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 8003816:	2300      	movs	r3, #0
 8003818:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 800381a:	f107 0308 	add.w	r3, r7, #8
 800381e:	693a      	ldr	r2, [r7, #16]
 8003820:	490a      	ldr	r1, [pc, #40]	; (800384c <GPS_validate+0xc0>)
 8003822:	4618      	mov	r0, r3
 8003824:	f007 fed0 	bl	800b5c8 <siprintf>
    return((checkcalcstr[0] == check[0])
 8003828:	7a3a      	ldrb	r2, [r7, #8]
 800382a:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 800382c:	429a      	cmp	r2, r3
 800382e:	d108      	bne.n	8003842 <GPS_validate+0xb6>
 8003830:	e001      	b.n	8003836 <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 8003832:	2300      	movs	r3, #0
 8003834:	e006      	b.n	8003844 <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8003836:	7a7a      	ldrb	r2, [r7, #9]
 8003838:	7b7b      	ldrb	r3, [r7, #13]
 800383a:	429a      	cmp	r2, r3
 800383c:	d101      	bne.n	8003842 <GPS_validate+0xb6>
 800383e:	2301      	movs	r3, #1
 8003840:	e000      	b.n	8003844 <GPS_validate+0xb8>
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	3718      	adds	r7, #24
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	0800f8fc 	.word	0x0800f8fc

08003850 <GPS_parse>:

void GPS_parse(char *GPSstrParse){
 8003850:	b580      	push	{r7, lr}
 8003852:	b08a      	sub	sp, #40	; 0x28
 8003854:	af08      	add	r7, sp, #32
 8003856:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GPGGA", 6)){
 8003858:	2206      	movs	r2, #6
 800385a:	494a      	ldr	r1, [pc, #296]	; (8003984 <GPS_parse+0x134>)
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f007 ff44 	bl	800b6ea <strncmp>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d137      	bne.n	80038d8 <GPS_parse+0x88>
    	if (sscanf(GPSstrParse, "$GPGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 8003868:	4b47      	ldr	r3, [pc, #284]	; (8003988 <GPS_parse+0x138>)
 800386a:	9307      	str	r3, [sp, #28]
 800386c:	4b47      	ldr	r3, [pc, #284]	; (800398c <GPS_parse+0x13c>)
 800386e:	9306      	str	r3, [sp, #24]
 8003870:	4b47      	ldr	r3, [pc, #284]	; (8003990 <GPS_parse+0x140>)
 8003872:	9305      	str	r3, [sp, #20]
 8003874:	4b47      	ldr	r3, [pc, #284]	; (8003994 <GPS_parse+0x144>)
 8003876:	9304      	str	r3, [sp, #16]
 8003878:	4b47      	ldr	r3, [pc, #284]	; (8003998 <GPS_parse+0x148>)
 800387a:	9303      	str	r3, [sp, #12]
 800387c:	4b47      	ldr	r3, [pc, #284]	; (800399c <GPS_parse+0x14c>)
 800387e:	9302      	str	r3, [sp, #8]
 8003880:	4b47      	ldr	r3, [pc, #284]	; (80039a0 <GPS_parse+0x150>)
 8003882:	9301      	str	r3, [sp, #4]
 8003884:	4b47      	ldr	r3, [pc, #284]	; (80039a4 <GPS_parse+0x154>)
 8003886:	9300      	str	r3, [sp, #0]
 8003888:	4b47      	ldr	r3, [pc, #284]	; (80039a8 <GPS_parse+0x158>)
 800388a:	4a48      	ldr	r2, [pc, #288]	; (80039ac <GPS_parse+0x15c>)
 800388c:	4948      	ldr	r1, [pc, #288]	; (80039b0 <GPS_parse+0x160>)
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f007 feba 	bl	800b608 <siscanf>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	dd70      	ble.n	800397c <GPS_parse+0x12c>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 800389a:	4b46      	ldr	r3, [pc, #280]	; (80039b4 <GPS_parse+0x164>)
 800389c:	edd3 7a04 	vldr	s15, [r3, #16]
 80038a0:	4b44      	ldr	r3, [pc, #272]	; (80039b4 <GPS_parse+0x164>)
 80038a2:	7e1b      	ldrb	r3, [r3, #24]
 80038a4:	4618      	mov	r0, r3
 80038a6:	eeb0 0a67 	vmov.f32	s0, s15
 80038aa:	f000 f8a7 	bl	80039fc <GPS_nmea_to_dec>
 80038ae:	eef0 7a40 	vmov.f32	s15, s0
 80038b2:	4b40      	ldr	r3, [pc, #256]	; (80039b4 <GPS_parse+0x164>)
 80038b4:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 80038b8:	4b3e      	ldr	r3, [pc, #248]	; (80039b4 <GPS_parse+0x164>)
 80038ba:	edd3 7a03 	vldr	s15, [r3, #12]
 80038be:	4b3d      	ldr	r3, [pc, #244]	; (80039b4 <GPS_parse+0x164>)
 80038c0:	7e5b      	ldrb	r3, [r3, #25]
 80038c2:	4618      	mov	r0, r3
 80038c4:	eeb0 0a67 	vmov.f32	s0, s15
 80038c8:	f000 f898 	bl	80039fc <GPS_nmea_to_dec>
 80038cc:	eef0 7a40 	vmov.f32	s15, s0
 80038d0:	4b38      	ldr	r3, [pc, #224]	; (80039b4 <GPS_parse+0x164>)
 80038d2:	edc3 7a00 	vstr	s15, [r3]
    		return;
 80038d6:	e051      	b.n	800397c <GPS_parse+0x12c>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GPRMC", 6)){
 80038d8:	2206      	movs	r2, #6
 80038da:	4937      	ldr	r1, [pc, #220]	; (80039b8 <GPS_parse+0x168>)
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f007 ff04 	bl	800b6ea <strncmp>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d114      	bne.n	8003912 <GPS_parse+0xc2>
    	if(sscanf(GPSstrParse, "$GPRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1)
 80038e8:	4b34      	ldr	r3, [pc, #208]	; (80039bc <GPS_parse+0x16c>)
 80038ea:	9305      	str	r3, [sp, #20]
 80038ec:	4b34      	ldr	r3, [pc, #208]	; (80039c0 <GPS_parse+0x170>)
 80038ee:	9304      	str	r3, [sp, #16]
 80038f0:	4b34      	ldr	r3, [pc, #208]	; (80039c4 <GPS_parse+0x174>)
 80038f2:	9303      	str	r3, [sp, #12]
 80038f4:	4b29      	ldr	r3, [pc, #164]	; (800399c <GPS_parse+0x14c>)
 80038f6:	9302      	str	r3, [sp, #8]
 80038f8:	4b29      	ldr	r3, [pc, #164]	; (80039a0 <GPS_parse+0x150>)
 80038fa:	9301      	str	r3, [sp, #4]
 80038fc:	4b29      	ldr	r3, [pc, #164]	; (80039a4 <GPS_parse+0x154>)
 80038fe:	9300      	str	r3, [sp, #0]
 8003900:	4b29      	ldr	r3, [pc, #164]	; (80039a8 <GPS_parse+0x158>)
 8003902:	4a2a      	ldr	r2, [pc, #168]	; (80039ac <GPS_parse+0x15c>)
 8003904:	4930      	ldr	r1, [pc, #192]	; (80039c8 <GPS_parse+0x178>)
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f007 fe7e 	bl	800b608 <siscanf>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	e034      	b.n	800397c <GPS_parse+0x12c>
    		return;

    }
    else if (!strncmp(GPSstrParse, "$GPGLL", 6)){
 8003912:	2206      	movs	r2, #6
 8003914:	492d      	ldr	r1, [pc, #180]	; (80039cc <GPS_parse+0x17c>)
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f007 fee7 	bl	800b6ea <strncmp>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d110      	bne.n	8003944 <GPS_parse+0xf4>
        if(sscanf(GPSstrParse, "$GPGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1)
 8003922:	4b2b      	ldr	r3, [pc, #172]	; (80039d0 <GPS_parse+0x180>)
 8003924:	9303      	str	r3, [sp, #12]
 8003926:	4b21      	ldr	r3, [pc, #132]	; (80039ac <GPS_parse+0x15c>)
 8003928:	9302      	str	r3, [sp, #8]
 800392a:	4b1c      	ldr	r3, [pc, #112]	; (800399c <GPS_parse+0x14c>)
 800392c:	9301      	str	r3, [sp, #4]
 800392e:	4b1c      	ldr	r3, [pc, #112]	; (80039a0 <GPS_parse+0x150>)
 8003930:	9300      	str	r3, [sp, #0]
 8003932:	4b1c      	ldr	r3, [pc, #112]	; (80039a4 <GPS_parse+0x154>)
 8003934:	4a1c      	ldr	r2, [pc, #112]	; (80039a8 <GPS_parse+0x158>)
 8003936:	4927      	ldr	r1, [pc, #156]	; (80039d4 <GPS_parse+0x184>)
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f007 fe65 	bl	800b608 <siscanf>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	e01b      	b.n	800397c <GPS_parse+0x12c>
            return;
    }
    else if (!strncmp(GPSstrParse, "$GPVTG", 6)){
 8003944:	2206      	movs	r2, #6
 8003946:	4924      	ldr	r1, [pc, #144]	; (80039d8 <GPS_parse+0x188>)
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f007 fece 	bl	800b6ea <strncmp>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d113      	bne.n	800397c <GPS_parse+0x12c>
        if(sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 8003954:	4b21      	ldr	r3, [pc, #132]	; (80039dc <GPS_parse+0x18c>)
 8003956:	9305      	str	r3, [sp, #20]
 8003958:	4b21      	ldr	r3, [pc, #132]	; (80039e0 <GPS_parse+0x190>)
 800395a:	9304      	str	r3, [sp, #16]
 800395c:	4b21      	ldr	r3, [pc, #132]	; (80039e4 <GPS_parse+0x194>)
 800395e:	9303      	str	r3, [sp, #12]
 8003960:	4b18      	ldr	r3, [pc, #96]	; (80039c4 <GPS_parse+0x174>)
 8003962:	9302      	str	r3, [sp, #8]
 8003964:	4b20      	ldr	r3, [pc, #128]	; (80039e8 <GPS_parse+0x198>)
 8003966:	9301      	str	r3, [sp, #4]
 8003968:	4b20      	ldr	r3, [pc, #128]	; (80039ec <GPS_parse+0x19c>)
 800396a:	9300      	str	r3, [sp, #0]
 800396c:	4b20      	ldr	r3, [pc, #128]	; (80039f0 <GPS_parse+0x1a0>)
 800396e:	4a21      	ldr	r2, [pc, #132]	; (80039f4 <GPS_parse+0x1a4>)
 8003970:	4921      	ldr	r1, [pc, #132]	; (80039f8 <GPS_parse+0x1a8>)
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f007 fe48 	bl	800b608 <siscanf>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
            return;
    }
}
 800397c:	3708      	adds	r7, #8
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	0800f904 	.word	0x0800f904
 8003988:	20001d44 	.word	0x20001d44
 800398c:	20001d40 	.word	0x20001d40
 8003990:	20001d3c 	.word	0x20001d3c
 8003994:	20001d38 	.word	0x20001d38
 8003998:	20001d34 	.word	0x20001d34
 800399c:	20001d31 	.word	0x20001d31
 80039a0:	20001d24 	.word	0x20001d24
 80039a4:	20001d30 	.word	0x20001d30
 80039a8:	20001d28 	.word	0x20001d28
 80039ac:	20001d2c 	.word	0x20001d2c
 80039b0:	0800f90c 	.word	0x0800f90c
 80039b4:	20001d18 	.word	0x20001d18
 80039b8:	0800f934 	.word	0x0800f934
 80039bc:	20001d50 	.word	0x20001d50
 80039c0:	20001d4c 	.word	0x20001d4c
 80039c4:	20001d48 	.word	0x20001d48
 80039c8:	0800f93c 	.word	0x0800f93c
 80039cc:	0800f95c 	.word	0x0800f95c
 80039d0:	20001d54 	.word	0x20001d54
 80039d4:	0800f964 	.word	0x0800f964
 80039d8:	0800f980 	.word	0x0800f980
 80039dc:	20001d6c 	.word	0x20001d6c
 80039e0:	20001d68 	.word	0x20001d68
 80039e4:	20001d65 	.word	0x20001d65
 80039e8:	20001d64 	.word	0x20001d64
 80039ec:	20001d60 	.word	0x20001d60
 80039f0:	20001d5c 	.word	0x20001d5c
 80039f4:	20001d58 	.word	0x20001d58
 80039f8:	0800f988 	.word	0x0800f988

080039fc <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 80039fc:	b480      	push	{r7}
 80039fe:	b087      	sub	sp, #28
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	ed87 0a01 	vstr	s0, [r7, #4]
 8003a06:	4603      	mov	r3, r0
 8003a08:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 8003a0a:	ed97 7a01 	vldr	s14, [r7, #4]
 8003a0e:	eddf 6a20 	vldr	s13, [pc, #128]	; 8003a90 <GPS_nmea_to_dec+0x94>
 8003a12:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a1a:	ee17 3a90 	vmov	r3, s15
 8003a1e:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	2264      	movs	r2, #100	; 0x64
 8003a24:	fb02 f303 	mul.w	r3, r2, r3
 8003a28:	ee07 3a90 	vmov	s15, r3
 8003a2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a30:	ed97 7a01 	vldr	s14, [r7, #4]
 8003a34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a38:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 8003a3c:	ed97 7a03 	vldr	s14, [r7, #12]
 8003a40:	eddf 6a14 	vldr	s13, [pc, #80]	; 8003a94 <GPS_nmea_to_dec+0x98>
 8003a44:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a48:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	ee07 3a90 	vmov	s15, r3
 8003a52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a56:	ed97 7a02 	vldr	s14, [r7, #8]
 8003a5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a5e:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 8003a62:	78fb      	ldrb	r3, [r7, #3]
 8003a64:	2b53      	cmp	r3, #83	; 0x53
 8003a66:	d002      	beq.n	8003a6e <GPS_nmea_to_dec+0x72>
 8003a68:	78fb      	ldrb	r3, [r7, #3]
 8003a6a:	2b57      	cmp	r3, #87	; 0x57
 8003a6c:	d105      	bne.n	8003a7a <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 8003a6e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003a72:	eef1 7a67 	vneg.f32	s15, s15
 8003a76:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	ee07 3a90 	vmov	s15, r3
}
 8003a80:	eeb0 0a67 	vmov.f32	s0, s15
 8003a84:	371c      	adds	r7, #28
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	42c80000 	.word	0x42c80000
 8003a94:	42700000 	.word	0x42700000

08003a98 <maxim_heart_rate_and_oxygen_saturation>:
* \param[out]    *pn_heart_rate          - Calculated heart rate value
* \param[out]    *pch_hr_valid           - 1 if the calculated heart rate value is valid
*
* \retval       None
*/
{
 8003a98:	b590      	push	{r4, r7, lr}
 8003a9a:	b0d3      	sub	sp, #332	; 0x14c
 8003a9c:	af04      	add	r7, sp, #16
 8003a9e:	f107 040c 	add.w	r4, r7, #12
 8003aa2:	6020      	str	r0, [r4, #0]
 8003aa4:	f107 0008 	add.w	r0, r7, #8
 8003aa8:	6001      	str	r1, [r0, #0]
 8003aaa:	1d39      	adds	r1, r7, #4
 8003aac:	600a      	str	r2, [r1, #0]
 8003aae:	463a      	mov	r2, r7
 8003ab0:	6013      	str	r3, [r2, #0]
    int32_t n_y_dc_max, n_x_dc_max;
    int32_t n_y_dc_max_idx, n_x_dc_max_idx;
    int32_t an_ratio[5],n_ratio_average;
    int32_t n_nume,  n_denom ;
    // remove DC of ir signal
    un_ir_mean =0;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    for (k=0 ; k<n_ir_buffer_length ; k++ ) un_ir_mean += pun_ir_buffer[k] ;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8003abe:	e011      	b.n	8003ae4 <maxim_heart_rate_and_oxygen_saturation+0x4c>
 8003ac0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	f107 020c 	add.w	r2, r7, #12
 8003aca:	6812      	ldr	r2, [r2, #0]
 8003acc:	4413      	add	r3, r2
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8003ad4:	4413      	add	r3, r2
 8003ad6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8003ada:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ade:	3301      	adds	r3, #1
 8003ae0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8003ae4:	f107 0308 	add.w	r3, r7, #8
 8003ae8:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	dbe6      	blt.n	8003ac0 <maxim_heart_rate_and_oxygen_saturation+0x28>
    un_ir_mean =un_ir_mean/n_ir_buffer_length ;
 8003af2:	f107 0308 	add.w	r3, r7, #8
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8003afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b00:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    for (k=0 ; k<n_ir_buffer_length ; k++ )  an_x[k] =  pun_ir_buffer[k] - un_ir_mean ;
 8003b04:	2300      	movs	r3, #0
 8003b06:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8003b0a:	e015      	b.n	8003b38 <maxim_heart_rate_and_oxygen_saturation+0xa0>
 8003b0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	f107 020c 	add.w	r2, r7, #12
 8003b16:	6812      	ldr	r2, [r2, #0]
 8003b18:	4413      	add	r3, r2
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	4619      	mov	r1, r3
 8003b24:	4add      	ldr	r2, [pc, #884]	; (8003e9c <maxim_heart_rate_and_oxygen_saturation+0x404>)
 8003b26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003b2a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8003b2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003b32:	3301      	adds	r3, #1
 8003b34:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8003b38:	f107 0308 	add.w	r3, r7, #8
 8003b3c:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	dbe2      	blt.n	8003b0c <maxim_heart_rate_and_oxygen_saturation+0x74>

    // 4 pt Moving Average
    for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
 8003b46:	2300      	movs	r3, #0
 8003b48:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8003b4c:	e02c      	b.n	8003ba8 <maxim_heart_rate_and_oxygen_saturation+0x110>
        n_denom= ( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3]);
 8003b4e:	4ad3      	ldr	r2, [pc, #844]	; (8003e9c <maxim_heart_rate_and_oxygen_saturation+0x404>)
 8003b50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003b54:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003b58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	49cf      	ldr	r1, [pc, #828]	; (8003e9c <maxim_heart_rate_and_oxygen_saturation+0x404>)
 8003b60:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003b64:	441a      	add	r2, r3
 8003b66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003b6a:	3302      	adds	r3, #2
 8003b6c:	49cb      	ldr	r1, [pc, #812]	; (8003e9c <maxim_heart_rate_and_oxygen_saturation+0x404>)
 8003b6e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003b72:	441a      	add	r2, r3
 8003b74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003b78:	3303      	adds	r3, #3
 8003b7a:	49c8      	ldr	r1, [pc, #800]	; (8003e9c <maxim_heart_rate_and_oxygen_saturation+0x404>)
 8003b7c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003b80:	4413      	add	r3, r2
 8003b82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        an_x[k]=  n_denom/(int32_t)4;
 8003b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	da00      	bge.n	8003b90 <maxim_heart_rate_and_oxygen_saturation+0xf8>
 8003b8e:	3303      	adds	r3, #3
 8003b90:	109b      	asrs	r3, r3, #2
 8003b92:	4619      	mov	r1, r3
 8003b94:	4ac1      	ldr	r2, [pc, #772]	; (8003e9c <maxim_heart_rate_and_oxygen_saturation+0x404>)
 8003b96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003b9a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
 8003b9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8003ba8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003bac:	f5b3 7ff8 	cmp.w	r3, #496	; 0x1f0
 8003bb0:	dbcd      	blt.n	8003b4e <maxim_heart_rate_and_oxygen_saturation+0xb6>
    }

    // get difference of smoothed IR signal

    for( k=0; k<BUFFER_SIZE-MA4_SIZE-1;  k++)
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8003bb8:	e015      	b.n	8003be6 <maxim_heart_rate_and_oxygen_saturation+0x14e>
        an_dx[k]= (an_x[k+1]- an_x[k]);
 8003bba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	4ab6      	ldr	r2, [pc, #728]	; (8003e9c <maxim_heart_rate_and_oxygen_saturation+0x404>)
 8003bc2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003bc6:	49b5      	ldr	r1, [pc, #724]	; (8003e9c <maxim_heart_rate_and_oxygen_saturation+0x404>)
 8003bc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003bcc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003bd0:	1ad2      	subs	r2, r2, r3
 8003bd2:	49b3      	ldr	r1, [pc, #716]	; (8003ea0 <maxim_heart_rate_and_oxygen_saturation+0x408>)
 8003bd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003bd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( k=0; k<BUFFER_SIZE-MA4_SIZE-1;  k++)
 8003bdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003be0:	3301      	adds	r3, #1
 8003be2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8003be6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003bea:	f5b3 7ff7 	cmp.w	r3, #494	; 0x1ee
 8003bee:	dde4      	ble.n	8003bba <maxim_heart_rate_and_oxygen_saturation+0x122>

    // 2-pt Moving Average to an_dx
    for(k=0; k< BUFFER_SIZE-MA4_SIZE-2; k++){
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8003bf6:	e019      	b.n	8003c2c <maxim_heart_rate_and_oxygen_saturation+0x194>
        an_dx[k] =  ( an_dx[k]+an_dx[k+1])/2 ;
 8003bf8:	4aa9      	ldr	r2, [pc, #676]	; (8003ea0 <maxim_heart_rate_and_oxygen_saturation+0x408>)
 8003bfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003bfe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003c02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c06:	3301      	adds	r3, #1
 8003c08:	49a5      	ldr	r1, [pc, #660]	; (8003ea0 <maxim_heart_rate_and_oxygen_saturation+0x408>)
 8003c0a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003c0e:	4413      	add	r3, r2
 8003c10:	0fda      	lsrs	r2, r3, #31
 8003c12:	4413      	add	r3, r2
 8003c14:	105b      	asrs	r3, r3, #1
 8003c16:	4619      	mov	r1, r3
 8003c18:	4aa1      	ldr	r2, [pc, #644]	; (8003ea0 <maxim_heart_rate_and_oxygen_saturation+0x408>)
 8003c1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c1e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(k=0; k< BUFFER_SIZE-MA4_SIZE-2; k++){
 8003c22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c26:	3301      	adds	r3, #1
 8003c28:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8003c2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c30:	f5b3 7ff7 	cmp.w	r3, #494	; 0x1ee
 8003c34:	dbe0      	blt.n	8003bf8 <maxim_heart_rate_and_oxygen_saturation+0x160>
    }

    // hamming window
    // flip wave form so that we can detect valley with peak detector
    for ( i=0 ; i<BUFFER_SIZE-HAMMING_SIZE-MA4_SIZE-2 ;i++){
 8003c36:	2300      	movs	r3, #0
 8003c38:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003c3c:	e039      	b.n	8003cb2 <maxim_heart_rate_and_oxygen_saturation+0x21a>
        s= 0;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        for( k=i; k<i+ HAMMING_SIZE ;k++){
 8003c44:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003c48:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8003c4c:	e018      	b.n	8003c80 <maxim_heart_rate_and_oxygen_saturation+0x1e8>
            s -= an_dx[k] *auw_hamm[k-i] ;
 8003c4e:	4a94      	ldr	r2, [pc, #592]	; (8003ea0 <maxim_heart_rate_and_oxygen_saturation+0x408>)
 8003c50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c58:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8003c5c:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8003c60:	1a8a      	subs	r2, r1, r2
 8003c62:	4990      	ldr	r1, [pc, #576]	; (8003ea4 <maxim_heart_rate_and_oxygen_saturation+0x40c>)
 8003c64:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003c68:	fb02 f303 	mul.w	r3, r2, r3
 8003c6c:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        for( k=i; k<i+ HAMMING_SIZE ;k++){
 8003c76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8003c80:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003c84:	3304      	adds	r3, #4
 8003c86:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	dddf      	ble.n	8003c4e <maxim_heart_rate_and_oxygen_saturation+0x1b6>
                     }
        an_dx[i]= s/ (int32_t)1146; // divide by sum of auw_hamm
 8003c8e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003c92:	4a85      	ldr	r2, [pc, #532]	; (8003ea8 <maxim_heart_rate_and_oxygen_saturation+0x410>)
 8003c94:	fb82 1203 	smull	r1, r2, r2, r3
 8003c98:	1252      	asrs	r2, r2, #9
 8003c9a:	17db      	asrs	r3, r3, #31
 8003c9c:	1ad2      	subs	r2, r2, r3
 8003c9e:	4980      	ldr	r1, [pc, #512]	; (8003ea0 <maxim_heart_rate_and_oxygen_saturation+0x408>)
 8003ca0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003ca4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for ( i=0 ; i<BUFFER_SIZE-HAMMING_SIZE-MA4_SIZE-2 ;i++){
 8003ca8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003cac:	3301      	adds	r3, #1
 8003cae:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003cb2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003cb6:	f5b3 7ff4 	cmp.w	r3, #488	; 0x1e8
 8003cba:	ddc0      	ble.n	8003c3e <maxim_heart_rate_and_oxygen_saturation+0x1a6>
    }


    n_th1=0; // threshold calculation
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    for ( k=0 ; k<BUFFER_SIZE-HAMMING_SIZE ;k++){
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8003cc8:	e011      	b.n	8003cee <maxim_heart_rate_and_oxygen_saturation+0x256>
        n_th1 += ((an_dx[k]>0)? an_dx[k] : ((int32_t)0-an_dx[k])) ;
 8003cca:	4a75      	ldr	r2, [pc, #468]	; (8003ea0 <maxim_heart_rate_and_oxygen_saturation+0x408>)
 8003ccc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	bfb8      	it	lt
 8003cd8:	425b      	neglt	r3, r3
 8003cda:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003cde:	4413      	add	r3, r2
 8003ce0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    for ( k=0 ; k<BUFFER_SIZE-HAMMING_SIZE ;k++){
 8003ce4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ce8:	3301      	adds	r3, #1
 8003cea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8003cee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003cf2:	f5b3 7ff7 	cmp.w	r3, #494	; 0x1ee
 8003cf6:	dde8      	ble.n	8003cca <maxim_heart_rate_and_oxygen_saturation+0x232>
    }
    n_th1= n_th1/ ( BUFFER_SIZE-HAMMING_SIZE);
 8003cf8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003cfc:	4a6b      	ldr	r2, [pc, #428]	; (8003eac <maxim_heart_rate_and_oxygen_saturation+0x414>)
 8003cfe:	fb82 1203 	smull	r1, r2, r2, r3
 8003d02:	1192      	asrs	r2, r2, #6
 8003d04:	17db      	asrs	r3, r3, #31
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    // peak location is acutally index for sharpest location of raw signal since we flipped the signal
    maxim_find_peaks( an_dx_peak_locs, &n_npks, an_dx, BUFFER_SIZE-HAMMING_SIZE, n_th1, 8, 5 );//peak_height, peak_distance, max_num_peaks
 8003d0c:	f107 01dc 	add.w	r1, r7, #220	; 0xdc
 8003d10:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8003d14:	2305      	movs	r3, #5
 8003d16:	9302      	str	r3, [sp, #8]
 8003d18:	2308      	movs	r3, #8
 8003d1a:	9301      	str	r3, [sp, #4]
 8003d1c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003d20:	9300      	str	r3, [sp, #0]
 8003d22:	f240 13ef 	movw	r3, #495	; 0x1ef
 8003d26:	4a5e      	ldr	r2, [pc, #376]	; (8003ea0 <maxim_heart_rate_and_oxygen_saturation+0x408>)
 8003d28:	f000 fb58 	bl	80043dc <maxim_find_peaks>

    n_peak_interval_sum =0;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    if (n_npks>=2){
 8003d32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	dd38      	ble.n	8003dac <maxim_heart_rate_and_oxygen_saturation+0x314>
        for (k=1; k<n_npks; k++)
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8003d40:	e017      	b.n	8003d72 <maxim_heart_rate_and_oxygen_saturation+0x2da>
            n_peak_interval_sum += (an_dx_peak_locs[k]-an_dx_peak_locs[k -1]);
 8003d42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d46:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8003d4a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003d4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003d52:	1e59      	subs	r1, r3, #1
 8003d54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d58:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8003d62:	4413      	add	r3, r2
 8003d64:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
        for (k=1; k<n_npks; k++)
 8003d68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8003d72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d76:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	dbe1      	blt.n	8003d42 <maxim_heart_rate_and_oxygen_saturation+0x2aa>
        n_peak_interval_sum=n_peak_interval_sum/(n_npks-1);
 8003d7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d82:	3b01      	subs	r3, #1
 8003d84:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8003d88:	fb92 f3f3 	sdiv	r3, r2, r3
 8003d8c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
        *pn_heart_rate=(int32_t)(6000/n_peak_interval_sum);// beats per minutes
 8003d90:	f241 7270 	movw	r2, #6000	; 0x1770
 8003d94:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003d98:	fb92 f2f3 	sdiv	r2, r2, r3
 8003d9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003da0:	601a      	str	r2, [r3, #0]
        *pch_hr_valid  = 1;
 8003da2:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003da6:	2201      	movs	r2, #1
 8003da8:	701a      	strb	r2, [r3, #0]
 8003daa:	e007      	b.n	8003dbc <maxim_heart_rate_and_oxygen_saturation+0x324>
    }
    else  {
        *pn_heart_rate = -999;
 8003dac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003db0:	4a3f      	ldr	r2, [pc, #252]	; (8003eb0 <maxim_heart_rate_and_oxygen_saturation+0x418>)
 8003db2:	601a      	str	r2, [r3, #0]
        *pch_hr_valid  = 0;
 8003db4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003db8:	2200      	movs	r2, #0
 8003dba:	701a      	strb	r2, [r3, #0]
    }

    for ( k=0 ; k<n_npks ;k++)
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8003dc2:	e013      	b.n	8003dec <maxim_heart_rate_and_oxygen_saturation+0x354>
        an_ir_valley_locs[k]=an_dx_peak_locs[k]+HAMMING_SIZE/2;
 8003dc4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003dc8:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8003dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dd0:	1c9a      	adds	r2, r3, #2
 8003dd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8003ddc:	440b      	add	r3, r1
 8003dde:	f843 2c98 	str.w	r2, [r3, #-152]
    for ( k=0 ; k<n_npks ;k++)
 8003de2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003de6:	3301      	adds	r3, #1
 8003de8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8003dec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003df0:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8003df4:	429a      	cmp	r2, r3
 8003df6:	dbe5      	blt.n	8003dc4 <maxim_heart_rate_and_oxygen_saturation+0x32c>


    // raw value : RED(=y) and IR(=X)
    // we need to assess DC and AC value of ir and red PPG.
    for (k=0 ; k<n_ir_buffer_length ; k++ )  {
 8003df8:	2300      	movs	r3, #0
 8003dfa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8003dfe:	e01f      	b.n	8003e40 <maxim_heart_rate_and_oxygen_saturation+0x3a8>
        an_x[k] =  pun_ir_buffer[k] ;
 8003e00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	f107 020c 	add.w	r2, r7, #12
 8003e0a:	6812      	ldr	r2, [r2, #0]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4619      	mov	r1, r3
 8003e12:	4a22      	ldr	r2, [pc, #136]	; (8003e9c <maxim_heart_rate_and_oxygen_saturation+0x404>)
 8003e14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e18:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        an_y[k] =  pun_red_buffer[k] ;
 8003e1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	1d3a      	adds	r2, r7, #4
 8003e24:	6812      	ldr	r2, [r2, #0]
 8003e26:	4413      	add	r3, r2
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	4a21      	ldr	r2, [pc, #132]	; (8003eb4 <maxim_heart_rate_and_oxygen_saturation+0x41c>)
 8003e2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e32:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (k=0 ; k<n_ir_buffer_length ; k++ )  {
 8003e36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8003e40:	f107 0308 	add.w	r3, r7, #8
 8003e44:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	dbd8      	blt.n	8003e00 <maxim_heart_rate_and_oxygen_saturation+0x368>
    }

    // find precise min near an_ir_valley_locs
    n_exact_ir_valley_locs_count =0;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    for(k=0 ; k<n_npks ;k++){
 8003e54:	2300      	movs	r3, #0
 8003e56:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8003e5a:	e068      	b.n	8003f2e <maxim_heart_rate_and_oxygen_saturation+0x496>
        un_only_once =1;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
        m=an_ir_valley_locs[k];
 8003e62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8003e6c:	4413      	add	r3, r2
 8003e6e:	f853 3c98 	ldr.w	r3, [r3, #-152]
 8003e72:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
        n_c_min= 16777216;//2^24;
 8003e76:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e7a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        if (m+5 <  BUFFER_SIZE-HAMMING_SIZE  && m-5 >0){
 8003e7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e82:	f5b3 7ff5 	cmp.w	r3, #490	; 0x1ea
 8003e86:	da4d      	bge.n	8003f24 <maxim_heart_rate_and_oxygen_saturation+0x48c>
 8003e88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e8c:	2b05      	cmp	r3, #5
 8003e8e:	dd49      	ble.n	8003f24 <maxim_heart_rate_and_oxygen_saturation+0x48c>
            for(i= m-5;i<m+5; i++)
 8003e90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e94:	3b05      	subs	r3, #5
 8003e96:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003e9a:	e033      	b.n	8003f04 <maxim_heart_rate_and_oxygen_saturation+0x46c>
 8003e9c:	200009f0 	.word	0x200009f0
 8003ea0:	20000230 	.word	0x20000230
 8003ea4:	0800f9dc 	.word	0x0800f9dc
 8003ea8:	725f9bed 	.word	0x725f9bed
 8003eac:	21195767 	.word	0x21195767
 8003eb0:	fffffc19 	.word	0xfffffc19
 8003eb4:	200011c0 	.word	0x200011c0
                if (an_x[i]<n_c_min){
 8003eb8:	4a86      	ldr	r2, [pc, #536]	; (80040d4 <maxim_heart_rate_and_oxygen_saturation+0x63c>)
 8003eba:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003ebe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ec2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	dd17      	ble.n	8003efa <maxim_heart_rate_and_oxygen_saturation+0x462>
                    if (un_only_once >0){
 8003eca:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d002      	beq.n	8003ed8 <maxim_heart_rate_and_oxygen_saturation+0x440>
                       un_only_once =0;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
                   }
                   n_c_min= an_x[i] ;
 8003ed8:	4a7e      	ldr	r2, [pc, #504]	; (80040d4 <maxim_heart_rate_and_oxygen_saturation+0x63c>)
 8003eda:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003ede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ee2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
                   an_exact_ir_valley_locs[k]=i;
 8003ee6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8003ef0:	4413      	add	r3, r2
 8003ef2:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8003ef6:	f843 2cd4 	str.w	r2, [r3, #-212]
            for(i= m-5;i<m+5; i++)
 8003efa:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003efe:	3301      	adds	r3, #1
 8003f00:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003f04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f08:	3304      	adds	r3, #4
 8003f0a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	ddd2      	ble.n	8003eb8 <maxim_heart_rate_and_oxygen_saturation+0x420>
                }
            if (un_only_once ==0)
 8003f12:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d104      	bne.n	8003f24 <maxim_heart_rate_and_oxygen_saturation+0x48c>
                n_exact_ir_valley_locs_count ++ ;
 8003f1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003f1e:	3301      	adds	r3, #1
 8003f20:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    for(k=0 ; k<n_npks ;k++){
 8003f24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f28:	3301      	adds	r3, #1
 8003f2a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8003f2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f32:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8003f36:	429a      	cmp	r2, r3
 8003f38:	db90      	blt.n	8003e5c <maxim_heart_rate_and_oxygen_saturation+0x3c4>
        }
    }
    if (n_exact_ir_valley_locs_count <2 ){
 8003f3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	dc08      	bgt.n	8003f54 <maxim_heart_rate_and_oxygen_saturation+0x4bc>
       *pn_spo2 =  -999 ; // do not use SPO2 since signal ratio is out of range
 8003f42:	463b      	mov	r3, r7
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a64      	ldr	r2, [pc, #400]	; (80040d8 <maxim_heart_rate_and_oxygen_saturation+0x640>)
 8003f48:	601a      	str	r2, [r3, #0]
       *pch_spo2_valid  = 0;
 8003f4a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8003f4e:	2200      	movs	r2, #0
 8003f50:	701a      	strb	r2, [r3, #0]
       return;
 8003f52:	e237      	b.n	80043c4 <maxim_heart_rate_and_oxygen_saturation+0x92c>
    }
    // 4 pt MA
    for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
 8003f54:	2300      	movs	r3, #0
 8003f56:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8003f5a:	e04c      	b.n	8003ff6 <maxim_heart_rate_and_oxygen_saturation+0x55e>
        an_x[k]=( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3])/(int32_t)4;
 8003f5c:	4a5d      	ldr	r2, [pc, #372]	; (80040d4 <maxim_heart_rate_and_oxygen_saturation+0x63c>)
 8003f5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f62:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003f66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	4959      	ldr	r1, [pc, #356]	; (80040d4 <maxim_heart_rate_and_oxygen_saturation+0x63c>)
 8003f6e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f72:	441a      	add	r2, r3
 8003f74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f78:	3302      	adds	r3, #2
 8003f7a:	4956      	ldr	r1, [pc, #344]	; (80040d4 <maxim_heart_rate_and_oxygen_saturation+0x63c>)
 8003f7c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f80:	441a      	add	r2, r3
 8003f82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f86:	3303      	adds	r3, #3
 8003f88:	4952      	ldr	r1, [pc, #328]	; (80040d4 <maxim_heart_rate_and_oxygen_saturation+0x63c>)
 8003f8a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f8e:	4413      	add	r3, r2
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	da00      	bge.n	8003f96 <maxim_heart_rate_and_oxygen_saturation+0x4fe>
 8003f94:	3303      	adds	r3, #3
 8003f96:	109b      	asrs	r3, r3, #2
 8003f98:	4619      	mov	r1, r3
 8003f9a:	4a4e      	ldr	r2, [pc, #312]	; (80040d4 <maxim_heart_rate_and_oxygen_saturation+0x63c>)
 8003f9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003fa0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        an_y[k]=( an_y[k]+an_y[k+1]+ an_y[k+2]+ an_y[k+3])/(int32_t)4;
 8003fa4:	4a4d      	ldr	r2, [pc, #308]	; (80040dc <maxim_heart_rate_and_oxygen_saturation+0x644>)
 8003fa6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003faa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003fae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	4949      	ldr	r1, [pc, #292]	; (80040dc <maxim_heart_rate_and_oxygen_saturation+0x644>)
 8003fb6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003fba:	441a      	add	r2, r3
 8003fbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003fc0:	3302      	adds	r3, #2
 8003fc2:	4946      	ldr	r1, [pc, #280]	; (80040dc <maxim_heart_rate_and_oxygen_saturation+0x644>)
 8003fc4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003fc8:	441a      	add	r2, r3
 8003fca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003fce:	3303      	adds	r3, #3
 8003fd0:	4942      	ldr	r1, [pc, #264]	; (80040dc <maxim_heart_rate_and_oxygen_saturation+0x644>)
 8003fd2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	da00      	bge.n	8003fde <maxim_heart_rate_and_oxygen_saturation+0x546>
 8003fdc:	3303      	adds	r3, #3
 8003fde:	109b      	asrs	r3, r3, #2
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	4a3e      	ldr	r2, [pc, #248]	; (80040dc <maxim_heart_rate_and_oxygen_saturation+0x644>)
 8003fe4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003fe8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
 8003fec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8003ff6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ffa:	f5b3 7ff8 	cmp.w	r3, #496	; 0x1f0
 8003ffe:	dbad      	blt.n	8003f5c <maxim_heart_rate_and_oxygen_saturation+0x4c4>
    }

    //using an_exact_ir_valley_locs , find ir-red DC andir-red AC for SPO2 calibration ratio
    //finding AC/DC maximum of raw ir * red between two valley locations
    n_ratio_average =0;
 8004000:	2300      	movs	r3, #0
 8004002:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    n_i_ratio_count =0;
 8004006:	2300      	movs	r3, #0
 8004008:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

    for(k=0; k< 5; k++) an_ratio[k]=0;
 800400c:	2300      	movs	r3, #0
 800400e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004012:	e00b      	b.n	800402c <maxim_heart_rate_and_oxygen_saturation+0x594>
 8004014:	f107 0314 	add.w	r3, r7, #20
 8004018:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800401c:	2100      	movs	r1, #0
 800401e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004022:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004026:	3301      	adds	r3, #1
 8004028:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800402c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004030:	2b04      	cmp	r3, #4
 8004032:	ddef      	ble.n	8004014 <maxim_heart_rate_and_oxygen_saturation+0x57c>
    for (k=0; k< n_exact_ir_valley_locs_count; k++){
 8004034:	2300      	movs	r3, #0
 8004036:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800403a:	e018      	b.n	800406e <maxim_heart_rate_and_oxygen_saturation+0x5d6>
        if (an_exact_ir_valley_locs[k] > BUFFER_SIZE ){
 800403c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8004046:	4413      	add	r3, r2
 8004048:	f853 3cd4 	ldr.w	r3, [r3, #-212]
 800404c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004050:	dd08      	ble.n	8004064 <maxim_heart_rate_and_oxygen_saturation+0x5cc>
            *pn_spo2 =  -999 ; // do not use SPO2 since valley loc is out of range
 8004052:	463b      	mov	r3, r7
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a20      	ldr	r2, [pc, #128]	; (80040d8 <maxim_heart_rate_and_oxygen_saturation+0x640>)
 8004058:	601a      	str	r2, [r3, #0]
            *pch_spo2_valid  = 0;
 800405a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800405e:	2200      	movs	r2, #0
 8004060:	701a      	strb	r2, [r3, #0]
            return;
 8004062:	e1af      	b.n	80043c4 <maxim_heart_rate_and_oxygen_saturation+0x92c>
    for (k=0; k< n_exact_ir_valley_locs_count; k++){
 8004064:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004068:	3301      	adds	r3, #1
 800406a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800406e:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8004072:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004076:	429a      	cmp	r2, r3
 8004078:	dbe0      	blt.n	800403c <maxim_heart_rate_and_oxygen_saturation+0x5a4>
        }
    }
    // find max between two valley locations
    // and use ratio betwen AC compoent of Ir & Red and DC compoent of Ir & Red for SPO2

    for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
 800407a:	2300      	movs	r3, #0
 800407c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004080:	e149      	b.n	8004316 <maxim_heart_rate_and_oxygen_saturation+0x87e>
        n_y_dc_max= -16777216 ;
 8004082:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8004086:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        n_x_dc_max= - 16777216;
 800408a:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800408e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        if (an_exact_ir_valley_locs[k+1]-an_exact_ir_valley_locs[k] >10){
 8004092:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004096:	3301      	adds	r3, #1
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800409e:	4413      	add	r3, r2
 80040a0:	f853 2cd4 	ldr.w	r2, [r3, #-212]
 80040a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	f507 719c 	add.w	r1, r7, #312	; 0x138
 80040ae:	440b      	add	r3, r1
 80040b0:	f853 3cd4 	ldr.w	r3, [r3, #-212]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	2b0a      	cmp	r3, #10
 80040b8:	f340 8128 	ble.w	800430c <maxim_heart_rate_and_oxygen_saturation+0x874>
            for (i=an_exact_ir_valley_locs[k]; i< an_exact_ir_valley_locs[k+1]; i++){
 80040bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80040c6:	4413      	add	r3, r2
 80040c8:	f853 3cd4 	ldr.w	r3, [r3, #-212]
 80040cc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80040d0:	e033      	b.n	800413a <maxim_heart_rate_and_oxygen_saturation+0x6a2>
 80040d2:	bf00      	nop
 80040d4:	200009f0 	.word	0x200009f0
 80040d8:	fffffc19 	.word	0xfffffc19
 80040dc:	200011c0 	.word	0x200011c0
                if (an_x[i]> n_x_dc_max) {n_x_dc_max =an_x[i];n_x_dc_max_idx =i; }
 80040e0:	4aba      	ldr	r2, [pc, #744]	; (80043cc <maxim_heart_rate_and_oxygen_saturation+0x934>)
 80040e2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80040e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040ea:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80040ee:	429a      	cmp	r2, r3
 80040f0:	da0a      	bge.n	8004108 <maxim_heart_rate_and_oxygen_saturation+0x670>
 80040f2:	4ab6      	ldr	r2, [pc, #728]	; (80043cc <maxim_heart_rate_and_oxygen_saturation+0x934>)
 80040f4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80040f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040fc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004100:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004104:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
                if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i];n_y_dc_max_idx=i;}
 8004108:	4ab1      	ldr	r2, [pc, #708]	; (80043d0 <maxim_heart_rate_and_oxygen_saturation+0x938>)
 800410a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800410e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004112:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8004116:	429a      	cmp	r2, r3
 8004118:	da0a      	bge.n	8004130 <maxim_heart_rate_and_oxygen_saturation+0x698>
 800411a:	4aad      	ldr	r2, [pc, #692]	; (80043d0 <maxim_heart_rate_and_oxygen_saturation+0x938>)
 800411c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004124:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004128:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800412c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
            for (i=an_exact_ir_valley_locs[k]; i< an_exact_ir_valley_locs[k+1]; i++){
 8004130:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004134:	3301      	adds	r3, #1
 8004136:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800413a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800413e:	3301      	adds	r3, #1
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8004146:	4413      	add	r3, r2
 8004148:	f853 3cd4 	ldr.w	r3, [r3, #-212]
 800414c:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8004150:	429a      	cmp	r2, r3
 8004152:	dbc5      	blt.n	80040e0 <maxim_heart_rate_and_oxygen_saturation+0x648>
            }
            n_y_ac= (an_y[an_exact_ir_valley_locs[k+1]] - an_y[an_exact_ir_valley_locs[k] ] )*(n_y_dc_max_idx -an_exact_ir_valley_locs[k]); //red
 8004154:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004158:	3301      	adds	r3, #1
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8004160:	4413      	add	r3, r2
 8004162:	f853 3cd4 	ldr.w	r3, [r3, #-212]
 8004166:	4a9a      	ldr	r2, [pc, #616]	; (80043d0 <maxim_heart_rate_and_oxygen_saturation+0x938>)
 8004168:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800416c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8004176:	440b      	add	r3, r1
 8004178:	f853 3cd4 	ldr.w	r3, [r3, #-212]
 800417c:	4994      	ldr	r1, [pc, #592]	; (80043d0 <maxim_heart_rate_and_oxygen_saturation+0x938>)
 800417e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004182:	1ad2      	subs	r2, r2, r3
 8004184:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	f507 719c 	add.w	r1, r7, #312	; 0x138
 800418e:	440b      	add	r3, r1
 8004190:	f853 3cd4 	ldr.w	r3, [r3, #-212]
 8004194:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8004198:	1acb      	subs	r3, r1, r3
 800419a:	fb03 f302 	mul.w	r3, r3, r2
 800419e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
            n_y_ac=  an_y[an_exact_ir_valley_locs[k]] + n_y_ac/ (an_exact_ir_valley_locs[k+1] - an_exact_ir_valley_locs[k])  ;
 80041a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80041ac:	4413      	add	r3, r2
 80041ae:	f853 3cd4 	ldr.w	r3, [r3, #-212]
 80041b2:	4a87      	ldr	r2, [pc, #540]	; (80043d0 <maxim_heart_rate_and_oxygen_saturation+0x938>)
 80041b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80041b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041bc:	3301      	adds	r3, #1
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	f507 719c 	add.w	r1, r7, #312	; 0x138
 80041c4:	440b      	add	r3, r1
 80041c6:	f853 1cd4 	ldr.w	r1, [r3, #-212]
 80041ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	f507 709c 	add.w	r0, r7, #312	; 0x138
 80041d4:	4403      	add	r3, r0
 80041d6:	f853 3cd4 	ldr.w	r3, [r3, #-212]
 80041da:	1acb      	subs	r3, r1, r3
 80041dc:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 80041e0:	fb91 f3f3 	sdiv	r3, r1, r3
 80041e4:	4413      	add	r3, r2
 80041e6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0


            n_y_ac=  an_y[n_y_dc_max_idx] - n_y_ac;    // subracting linear DC compoenents from raw
 80041ea:	4a79      	ldr	r2, [pc, #484]	; (80043d0 <maxim_heart_rate_and_oxygen_saturation+0x938>)
 80041ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80041f4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
            n_x_ac= (an_x[an_exact_ir_valley_locs[k+1]] - an_x[an_exact_ir_valley_locs[k] ] )*(n_x_dc_max_idx -an_exact_ir_valley_locs[k]); // ir
 80041fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004202:	3301      	adds	r3, #1
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800420a:	4413      	add	r3, r2
 800420c:	f853 3cd4 	ldr.w	r3, [r3, #-212]
 8004210:	4a6e      	ldr	r2, [pc, #440]	; (80043cc <maxim_heart_rate_and_oxygen_saturation+0x934>)
 8004212:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004216:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8004220:	440b      	add	r3, r1
 8004222:	f853 3cd4 	ldr.w	r3, [r3, #-212]
 8004226:	4969      	ldr	r1, [pc, #420]	; (80043cc <maxim_heart_rate_and_oxygen_saturation+0x934>)
 8004228:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800422c:	1ad2      	subs	r2, r2, r3
 800422e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8004238:	440b      	add	r3, r1
 800423a:	f853 3cd4 	ldr.w	r3, [r3, #-212]
 800423e:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8004242:	1acb      	subs	r3, r1, r3
 8004244:	fb03 f302 	mul.w	r3, r3, r2
 8004248:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
            n_x_ac=  an_x[an_exact_ir_valley_locs[k]] + n_x_ac/ (an_exact_ir_valley_locs[k+1] - an_exact_ir_valley_locs[k]);
 800424c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8004256:	4413      	add	r3, r2
 8004258:	f853 3cd4 	ldr.w	r3, [r3, #-212]
 800425c:	4a5b      	ldr	r2, [pc, #364]	; (80043cc <maxim_heart_rate_and_oxygen_saturation+0x934>)
 800425e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004262:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004266:	3301      	adds	r3, #1
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	f507 719c 	add.w	r1, r7, #312	; 0x138
 800426e:	440b      	add	r3, r1
 8004270:	f853 1cd4 	ldr.w	r1, [r3, #-212]
 8004274:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	f507 709c 	add.w	r0, r7, #312	; 0x138
 800427e:	4403      	add	r3, r0
 8004280:	f853 3cd4 	ldr.w	r3, [r3, #-212]
 8004284:	1acb      	subs	r3, r1, r3
 8004286:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800428a:	fb91 f3f3 	sdiv	r3, r1, r3
 800428e:	4413      	add	r3, r2
 8004290:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
            n_x_ac=  an_x[n_y_dc_max_idx] - n_x_ac;      // subracting linear DC compoenents from raw
 8004294:	4a4d      	ldr	r2, [pc, #308]	; (80043cc <maxim_heart_rate_and_oxygen_saturation+0x934>)
 8004296:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800429a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800429e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
            n_nume=( n_y_ac *n_x_dc_max)>>7 ; //prepare X100 to preserve floating value
 80042a8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80042ac:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80042b0:	fb02 f303 	mul.w	r3, r2, r3
 80042b4:	11db      	asrs	r3, r3, #7
 80042b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
            n_denom= ( n_x_ac *n_y_dc_max)>>7;
 80042ba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80042be:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80042c2:	fb02 f303 	mul.w	r3, r2, r3
 80042c6:	11db      	asrs	r3, r3, #7
 80042c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
            if (n_denom>0  && n_i_ratio_count <5 &&  n_nume != 0)
 80042cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	dd1b      	ble.n	800430c <maxim_heart_rate_and_oxygen_saturation+0x874>
 80042d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80042d8:	2b04      	cmp	r3, #4
 80042da:	dc17      	bgt.n	800430c <maxim_heart_rate_and_oxygen_saturation+0x874>
 80042dc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d013      	beq.n	800430c <maxim_heart_rate_and_oxygen_saturation+0x874>
            {
                an_ratio[n_i_ratio_count]= (n_nume*100)/n_denom ; //formular is ( n_y_ac *n_x_dc_max) / ( n_x_ac *n_y_dc_max) ;
 80042e4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80042e8:	2264      	movs	r2, #100	; 0x64
 80042ea:	fb02 f203 	mul.w	r2, r2, r3
 80042ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042f2:	fb92 f1f3 	sdiv	r1, r2, r3
 80042f6:	f107 0314 	add.w	r3, r7, #20
 80042fa:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80042fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                n_i_ratio_count++;
 8004302:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004306:	3301      	adds	r3, #1
 8004308:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
 800430c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004310:	3301      	adds	r3, #1
 8004312:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004316:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800431a:	3b01      	subs	r3, #1
 800431c:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8004320:	429a      	cmp	r2, r3
 8004322:	f6ff aeae 	blt.w	8004082 <maxim_heart_rate_and_oxygen_saturation+0x5ea>
            }
        }
    }

    maxim_sort_ascend(an_ratio, n_i_ratio_count);
 8004326:	f107 0314 	add.w	r3, r7, #20
 800432a:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800432e:	4618      	mov	r0, r3
 8004330:	f000 f949 	bl	80045c6 <maxim_sort_ascend>
    n_middle_idx= n_i_ratio_count/2;
 8004334:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004338:	0fda      	lsrs	r2, r3, #31
 800433a:	4413      	add	r3, r2
 800433c:	105b      	asrs	r3, r3, #1
 800433e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

    if (n_middle_idx >1)
 8004342:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004346:	2b01      	cmp	r3, #1
 8004348:	dd13      	ble.n	8004372 <maxim_heart_rate_and_oxygen_saturation+0x8da>
        n_ratio_average =( an_ratio[n_middle_idx-1] +an_ratio[n_middle_idx])/2; // use median
 800434a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800434e:	1e5a      	subs	r2, r3, #1
 8004350:	f107 0314 	add.w	r3, r7, #20
 8004354:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004358:	f107 0314 	add.w	r3, r7, #20
 800435c:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8004360:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004364:	4413      	add	r3, r2
 8004366:	0fda      	lsrs	r2, r3, #31
 8004368:	4413      	add	r3, r2
 800436a:	105b      	asrs	r3, r3, #1
 800436c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004370:	e007      	b.n	8004382 <maxim_heart_rate_and_oxygen_saturation+0x8ea>
    else
        n_ratio_average = an_ratio[n_middle_idx ];
 8004372:	f107 0314 	add.w	r3, r7, #20
 8004376:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800437a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800437e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

    if( n_ratio_average>2 && n_ratio_average <184){
 8004382:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004386:	2b02      	cmp	r3, #2
 8004388:	dd14      	ble.n	80043b4 <maxim_heart_rate_and_oxygen_saturation+0x91c>
 800438a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800438e:	2bb7      	cmp	r3, #183	; 0xb7
 8004390:	dc10      	bgt.n	80043b4 <maxim_heart_rate_and_oxygen_saturation+0x91c>
        n_spo2_calc= uch_spo2_table[n_ratio_average] ;
 8004392:	4a10      	ldr	r2, [pc, #64]	; (80043d4 <maxim_heart_rate_and_oxygen_saturation+0x93c>)
 8004394:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004398:	4413      	add	r3, r2
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
        *pn_spo2 = n_spo2_calc ;
 80043a0:	463b      	mov	r3, r7
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80043a8:	601a      	str	r2, [r3, #0]
        *pch_spo2_valid  = 1;//  float_SPO2 =  -45.060*n_ratio_average* n_ratio_average/10000 + 30.354 *n_ratio_average/100 + 94.845 ;  // for comparison with table
 80043aa:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80043ae:	2201      	movs	r2, #1
 80043b0:	701a      	strb	r2, [r3, #0]
 80043b2:	e007      	b.n	80043c4 <maxim_heart_rate_and_oxygen_saturation+0x92c>
    }
    else{
        *pn_spo2 =  -999 ; // do not use SPO2 since signal ratio is out of range
 80043b4:	463b      	mov	r3, r7
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a07      	ldr	r2, [pc, #28]	; (80043d8 <maxim_heart_rate_and_oxygen_saturation+0x940>)
 80043ba:	601a      	str	r2, [r3, #0]
        *pch_spo2_valid  = 0;
 80043bc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80043c0:	2200      	movs	r2, #0
 80043c2:	701a      	strb	r2, [r3, #0]
    }
}
 80043c4:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd90      	pop	{r4, r7, pc}
 80043cc:	200009f0 	.word	0x200009f0
 80043d0:	200011c0 	.word	0x200011c0
 80043d4:	0800fa1c 	.word	0x0800fa1c
 80043d8:	fffffc19 	.word	0xfffffc19

080043dc <maxim_find_peaks>:
* \par          Details
*               Find at most MAX_NUM peaks above MIN_HEIGHT separated by at least MIN_DISTANCE
*
* \retval       None
*/
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b086      	sub	sp, #24
 80043e0:	af02      	add	r7, sp, #8
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	607a      	str	r2, [r7, #4]
 80043e8:	603b      	str	r3, [r7, #0]
    maxim_peaks_above_min_height( pn_locs, pn_npks, pn_x, n_size, n_min_height );
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	9300      	str	r3, [sp, #0]
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	68b9      	ldr	r1, [r7, #8]
 80043f4:	68f8      	ldr	r0, [r7, #12]
 80043f6:	f000 f812 	bl	800441e <maxim_peaks_above_min_height>
    maxim_remove_close_peaks( pn_locs, pn_npks, pn_x, n_min_distance );
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	68b9      	ldr	r1, [r7, #8]
 8004400:	68f8      	ldr	r0, [r7, #12]
 8004402:	f000 f880 	bl	8004506 <maxim_remove_close_peaks>
    *pn_npks = min( *pn_npks, n_max_num );
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	6a3b      	ldr	r3, [r7, #32]
 800440c:	429a      	cmp	r2, r3
 800440e:	bfa8      	it	ge
 8004410:	461a      	movge	r2, r3
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	601a      	str	r2, [r3, #0]
}
 8004416:	bf00      	nop
 8004418:	3710      	adds	r7, #16
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}

0800441e <maxim_peaks_above_min_height>:
* \par          Details
*               Find all peaks above MIN_HEIGHT
*
* \retval       None
*/
{
 800441e:	b480      	push	{r7}
 8004420:	b087      	sub	sp, #28
 8004422:	af00      	add	r7, sp, #0
 8004424:	60f8      	str	r0, [r7, #12]
 8004426:	60b9      	str	r1, [r7, #8]
 8004428:	607a      	str	r2, [r7, #4]
 800442a:	603b      	str	r3, [r7, #0]
    int32_t i = 1, n_width;
 800442c:	2301      	movs	r3, #1
 800442e:	617b      	str	r3, [r7, #20]
    *pn_npks = 0;
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	2200      	movs	r2, #0
 8004434:	601a      	str	r2, [r3, #0]

    while (i < n_size-1){
 8004436:	e05a      	b.n	80044ee <maxim_peaks_above_min_height+0xd0>
        if (pn_x[i] > n_min_height && pn_x[i] > pn_x[i-1]){            // find left edge of potential peaks
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	4413      	add	r3, r2
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	6a3a      	ldr	r2, [r7, #32]
 8004444:	429a      	cmp	r2, r3
 8004446:	da4f      	bge.n	80044e8 <maxim_peaks_above_min_height+0xca>
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	4413      	add	r3, r2
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004458:	3b01      	subs	r3, #1
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	6879      	ldr	r1, [r7, #4]
 800445e:	440b      	add	r3, r1
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	429a      	cmp	r2, r3
 8004464:	dd40      	ble.n	80044e8 <maxim_peaks_above_min_height+0xca>
            n_width = 1;
 8004466:	2301      	movs	r3, #1
 8004468:	613b      	str	r3, [r7, #16]
            while (i+n_width < n_size && pn_x[i] == pn_x[i+n_width])    // find flat peaks
 800446a:	e002      	b.n	8004472 <maxim_peaks_above_min_height+0x54>
                n_width++;
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	3301      	adds	r3, #1
 8004470:	613b      	str	r3, [r7, #16]
            while (i+n_width < n_size && pn_x[i] == pn_x[i+n_width])    // find flat peaks
 8004472:	697a      	ldr	r2, [r7, #20]
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	4413      	add	r3, r2
 8004478:	683a      	ldr	r2, [r7, #0]
 800447a:	429a      	cmp	r2, r3
 800447c:	dd0d      	ble.n	800449a <maxim_peaks_above_min_height+0x7c>
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	4413      	add	r3, r2
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	6979      	ldr	r1, [r7, #20]
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	440b      	add	r3, r1
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	6879      	ldr	r1, [r7, #4]
 8004492:	440b      	add	r3, r1
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	429a      	cmp	r2, r3
 8004498:	d0e8      	beq.n	800446c <maxim_peaks_above_min_height+0x4e>
            if (pn_x[i] > pn_x[i+n_width] && (*pn_npks) < 15 ){                            // find right edge of peaks
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	4413      	add	r3, r2
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	6979      	ldr	r1, [r7, #20]
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	440b      	add	r3, r1
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	6879      	ldr	r1, [r7, #4]
 80044ae:	440b      	add	r3, r1
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	dd13      	ble.n	80044de <maxim_peaks_above_min_height+0xc0>
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2b0e      	cmp	r3, #14
 80044bc:	dc0f      	bgt.n	80044de <maxim_peaks_above_min_height+0xc0>
                pn_locs[(*pn_npks)++] = i;
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	1c59      	adds	r1, r3, #1
 80044c4:	68ba      	ldr	r2, [r7, #8]
 80044c6:	6011      	str	r1, [r2, #0]
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	4413      	add	r3, r2
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	601a      	str	r2, [r3, #0]
                // for flat peaks, peak location is left edge
                i += n_width+1;
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	3301      	adds	r3, #1
 80044d6:	697a      	ldr	r2, [r7, #20]
 80044d8:	4413      	add	r3, r2
 80044da:	617b      	str	r3, [r7, #20]
 80044dc:	e003      	b.n	80044e6 <maxim_peaks_above_min_height+0xc8>
            }
            else
                i += n_width;
 80044de:	697a      	ldr	r2, [r7, #20]
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	4413      	add	r3, r2
 80044e4:	617b      	str	r3, [r7, #20]
            if (pn_x[i] > pn_x[i+n_width] && (*pn_npks) < 15 ){                            // find right edge of peaks
 80044e6:	e002      	b.n	80044ee <maxim_peaks_above_min_height+0xd0>
        }
        else
            i++;
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	3301      	adds	r3, #1
 80044ec:	617b      	str	r3, [r7, #20]
    while (i < n_size-1){
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	3b01      	subs	r3, #1
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	db9f      	blt.n	8004438 <maxim_peaks_above_min_height+0x1a>
    }
}
 80044f8:	bf00      	nop
 80044fa:	bf00      	nop
 80044fc:	371c      	adds	r7, #28
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr

08004506 <maxim_remove_close_peaks>:
* \par          Details
*               Remove peaks separated by less than MIN_DISTANCE
*
* \retval       None
*/
{
 8004506:	b580      	push	{r7, lr}
 8004508:	b088      	sub	sp, #32
 800450a:	af00      	add	r7, sp, #0
 800450c:	60f8      	str	r0, [r7, #12]
 800450e:	60b9      	str	r1, [r7, #8]
 8004510:	607a      	str	r2, [r7, #4]
 8004512:	603b      	str	r3, [r7, #0]

    int32_t i, j, n_old_npks, n_dist;

    /* Order peaks from large to small */
    maxim_sort_indices_descend( pn_x, pn_locs, *pn_npks );
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	461a      	mov	r2, r3
 800451a:	68f9      	ldr	r1, [r7, #12]
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 f895 	bl	800464c <maxim_sort_indices_descend>

    for ( i = -1; i < *pn_npks; i++ ){
 8004522:	f04f 33ff 	mov.w	r3, #4294967295
 8004526:	61fb      	str	r3, [r7, #28]
 8004528:	e03e      	b.n	80045a8 <maxim_remove_close_peaks+0xa2>
        n_old_npks = *pn_npks;
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	617b      	str	r3, [r7, #20]
        *pn_npks = i+1;
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	1c5a      	adds	r2, r3, #1
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	601a      	str	r2, [r3, #0]
        for ( j = i+1; j < n_old_npks; j++ ){
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	3301      	adds	r3, #1
 800453c:	61bb      	str	r3, [r7, #24]
 800453e:	e02c      	b.n	800459a <maxim_remove_close_peaks+0x94>
            n_dist =  pn_locs[j] - ( i == -1 ? -1 : pn_locs[i] ); // lag-zero peak of autocorr is at index -1
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	4413      	add	r3, r2
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004550:	d005      	beq.n	800455e <maxim_remove_close_peaks+0x58>
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	68f9      	ldr	r1, [r7, #12]
 8004558:	440b      	add	r3, r1
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	e001      	b.n	8004562 <maxim_remove_close_peaks+0x5c>
 800455e:	f04f 33ff 	mov.w	r3, #4294967295
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	613b      	str	r3, [r7, #16]
            if ( n_dist > n_min_distance || n_dist < -n_min_distance )
 8004566:	693a      	ldr	r2, [r7, #16]
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	429a      	cmp	r2, r3
 800456c:	dc04      	bgt.n	8004578 <maxim_remove_close_peaks+0x72>
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	425b      	negs	r3, r3
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	429a      	cmp	r2, r3
 8004576:	da0d      	bge.n	8004594 <maxim_remove_close_peaks+0x8e>
                pn_locs[(*pn_npks)++] = pn_locs[j];
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	441a      	add	r2, r3
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	1c58      	adds	r0, r3, #1
 8004586:	68b9      	ldr	r1, [r7, #8]
 8004588:	6008      	str	r0, [r1, #0]
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	68f9      	ldr	r1, [r7, #12]
 800458e:	440b      	add	r3, r1
 8004590:	6812      	ldr	r2, [r2, #0]
 8004592:	601a      	str	r2, [r3, #0]
        for ( j = i+1; j < n_old_npks; j++ ){
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	3301      	adds	r3, #1
 8004598:	61bb      	str	r3, [r7, #24]
 800459a:	69ba      	ldr	r2, [r7, #24]
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	429a      	cmp	r2, r3
 80045a0:	dbce      	blt.n	8004540 <maxim_remove_close_peaks+0x3a>
    for ( i = -1; i < *pn_npks; i++ ){
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	3301      	adds	r3, #1
 80045a6:	61fb      	str	r3, [r7, #28]
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	69fa      	ldr	r2, [r7, #28]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	dbbb      	blt.n	800452a <maxim_remove_close_peaks+0x24>
        }
    }

    // Resort indices longo ascending order
    maxim_sort_ascend( pn_locs, *pn_npks );
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4619      	mov	r1, r3
 80045b8:	68f8      	ldr	r0, [r7, #12]
 80045ba:	f000 f804 	bl	80045c6 <maxim_sort_ascend>
}
 80045be:	bf00      	nop
 80045c0:	3720      	adds	r7, #32
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <maxim_sort_ascend>:
* \par          Details
*               Sort array in ascending order (insertion sort algorithm)
*
* \retval       None
*/
{
 80045c6:	b480      	push	{r7}
 80045c8:	b087      	sub	sp, #28
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
 80045ce:	6039      	str	r1, [r7, #0]
    int32_t i, j, n_temp;
    for (i = 1; i < n_size; i++) {
 80045d0:	2301      	movs	r3, #1
 80045d2:	617b      	str	r3, [r7, #20]
 80045d4:	e02f      	b.n	8004636 <maxim_sort_ascend+0x70>
        n_temp = pn_x[i];
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	4413      	add	r3, r2
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	60fb      	str	r3, [r7, #12]
        for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	613b      	str	r3, [r7, #16]
 80045e6:	e00f      	b.n	8004608 <maxim_sort_ascend+0x42>
            pn_x[j] = pn_x[j-1];
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80045ee:	3b01      	subs	r3, #1
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	441a      	add	r2, r3
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	6879      	ldr	r1, [r7, #4]
 80045fc:	440b      	add	r3, r1
 80045fe:	6812      	ldr	r2, [r2, #0]
 8004600:	601a      	str	r2, [r3, #0]
        for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	3b01      	subs	r3, #1
 8004606:	613b      	str	r3, [r7, #16]
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	2b00      	cmp	r3, #0
 800460c:	dd0a      	ble.n	8004624 <maxim_sort_ascend+0x5e>
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004614:	3b01      	subs	r3, #1
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	4413      	add	r3, r2
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	429a      	cmp	r2, r3
 8004622:	dbe1      	blt.n	80045e8 <maxim_sort_ascend+0x22>
        pn_x[j] = n_temp;
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	4413      	add	r3, r2
 800462c:	68fa      	ldr	r2, [r7, #12]
 800462e:	601a      	str	r2, [r3, #0]
    for (i = 1; i < n_size; i++) {
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	3301      	adds	r3, #1
 8004634:	617b      	str	r3, [r7, #20]
 8004636:	697a      	ldr	r2, [r7, #20]
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	429a      	cmp	r2, r3
 800463c:	dbcb      	blt.n	80045d6 <maxim_sort_ascend+0x10>
    }
}
 800463e:	bf00      	nop
 8004640:	bf00      	nop
 8004642:	371c      	adds	r7, #28
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <maxim_sort_indices_descend>:
* \par          Details
*               Sort indices according to descending order (insertion sort algorithm)
*
* \retval       None
*/
{
 800464c:	b480      	push	{r7}
 800464e:	b089      	sub	sp, #36	; 0x24
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	607a      	str	r2, [r7, #4]
    int32_t i, j, n_temp;
    for (i = 1; i < n_size; i++) {
 8004658:	2301      	movs	r3, #1
 800465a:	61fb      	str	r3, [r7, #28]
 800465c:	e037      	b.n	80046ce <maxim_sort_indices_descend+0x82>
        n_temp = pn_indx[i];
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	68ba      	ldr	r2, [r7, #8]
 8004664:	4413      	add	r3, r2
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	617b      	str	r3, [r7, #20]
        for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	61bb      	str	r3, [r7, #24]
 800466e:	e00f      	b.n	8004690 <maxim_sort_indices_descend+0x44>
            pn_indx[j] = pn_indx[j-1];
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004676:	3b01      	subs	r3, #1
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	68ba      	ldr	r2, [r7, #8]
 800467c:	441a      	add	r2, r3
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	68b9      	ldr	r1, [r7, #8]
 8004684:	440b      	add	r3, r1
 8004686:	6812      	ldr	r2, [r2, #0]
 8004688:	601a      	str	r2, [r3, #0]
        for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	3b01      	subs	r3, #1
 800468e:	61bb      	str	r3, [r7, #24]
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	2b00      	cmp	r3, #0
 8004694:	dd12      	ble.n	80046bc <maxim_sort_indices_descend+0x70>
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	4413      	add	r3, r2
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80046a6:	3b01      	subs	r3, #1
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	68b9      	ldr	r1, [r7, #8]
 80046ac:	440b      	add	r3, r1
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	68f9      	ldr	r1, [r7, #12]
 80046b4:	440b      	add	r3, r1
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	dcd9      	bgt.n	8004670 <maxim_sort_indices_descend+0x24>
        pn_indx[j] = n_temp;
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	68ba      	ldr	r2, [r7, #8]
 80046c2:	4413      	add	r3, r2
 80046c4:	697a      	ldr	r2, [r7, #20]
 80046c6:	601a      	str	r2, [r3, #0]
    for (i = 1; i < n_size; i++) {
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	3301      	adds	r3, #1
 80046cc:	61fb      	str	r3, [r7, #28]
 80046ce:	69fa      	ldr	r2, [r7, #28]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	dbc3      	blt.n	800465e <maxim_sort_indices_descend+0x12>
    }
}
 80046d6:	bf00      	nop
 80046d8:	bf00      	nop
 80046da:	3724      	adds	r7, #36	; 0x24
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <LCD_WR_REG>:
 * @function   :Write an 8-bit command to the LCD screen
 * @parameters :data:Command value to be written
 * @retvalue   :None
******************************************************************************/
void LCD_WR_REG(u8 data)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	4603      	mov	r3, r0
 80046ec:	71fb      	strb	r3, [r7, #7]
   LCD_CS_CLR;
 80046ee:	2200      	movs	r2, #0
 80046f0:	2102      	movs	r1, #2
 80046f2:	480a      	ldr	r0, [pc, #40]	; (800471c <LCD_WR_REG+0x38>)
 80046f4:	f002 fd6a 	bl	80071cc <HAL_GPIO_WritePin>
   LCD_RS_CLR;
 80046f8:	2200      	movs	r2, #0
 80046fa:	2101      	movs	r1, #1
 80046fc:	4807      	ldr	r0, [pc, #28]	; (800471c <LCD_WR_REG+0x38>)
 80046fe:	f002 fd65 	bl	80071cc <HAL_GPIO_WritePin>
   SPI_WriteByte(data);
 8004702:	79fb      	ldrb	r3, [r7, #7]
 8004704:	4618      	mov	r0, r3
 8004706:	f000 faa9 	bl	8004c5c <SPI_WriteByte>
   LCD_CS_SET;
 800470a:	2201      	movs	r2, #1
 800470c:	2102      	movs	r1, #2
 800470e:	4803      	ldr	r0, [pc, #12]	; (800471c <LCD_WR_REG+0x38>)
 8004710:	f002 fd5c 	bl	80071cc <HAL_GPIO_WritePin>
}
 8004714:	bf00      	nop
 8004716:	3708      	adds	r7, #8
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	40020400 	.word	0x40020400

08004720 <LCD_WR_DATA>:
 * @function   :Write an 8-bit data to the LCD screen
 * @parameters :data:data value to be written
 * @retvalue   :None
******************************************************************************/
void LCD_WR_DATA(u8 data)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b082      	sub	sp, #8
 8004724:	af00      	add	r7, sp, #0
 8004726:	4603      	mov	r3, r0
 8004728:	71fb      	strb	r3, [r7, #7]
   LCD_CS_CLR;
 800472a:	2200      	movs	r2, #0
 800472c:	2102      	movs	r1, #2
 800472e:	480a      	ldr	r0, [pc, #40]	; (8004758 <LCD_WR_DATA+0x38>)
 8004730:	f002 fd4c 	bl	80071cc <HAL_GPIO_WritePin>
   LCD_RS_SET;
 8004734:	2201      	movs	r2, #1
 8004736:	2101      	movs	r1, #1
 8004738:	4807      	ldr	r0, [pc, #28]	; (8004758 <LCD_WR_DATA+0x38>)
 800473a:	f002 fd47 	bl	80071cc <HAL_GPIO_WritePin>
   SPI_WriteByte(data);
 800473e:	79fb      	ldrb	r3, [r7, #7]
 8004740:	4618      	mov	r0, r3
 8004742:	f000 fa8b 	bl	8004c5c <SPI_WriteByte>
   LCD_CS_SET;
 8004746:	2201      	movs	r2, #1
 8004748:	2102      	movs	r1, #2
 800474a:	4803      	ldr	r0, [pc, #12]	; (8004758 <LCD_WR_DATA+0x38>)
 800474c:	f002 fd3e 	bl	80071cc <HAL_GPIO_WritePin>
}
 8004750:	bf00      	nop
 8004752:	3708      	adds	r7, #8
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	40020400 	.word	0x40020400

0800475c <LCD_WriteReg>:
 * @parameters :LCD_Reg:Register address
                LCD_RegValue:Data to be written
 * @retvalue   :None
******************************************************************************/
void LCD_WriteReg(u8 LCD_Reg, u16 LCD_RegValue)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	4603      	mov	r3, r0
 8004764:	460a      	mov	r2, r1
 8004766:	71fb      	strb	r3, [r7, #7]
 8004768:	4613      	mov	r3, r2
 800476a:	80bb      	strh	r3, [r7, #4]
	LCD_WR_REG(LCD_Reg);
 800476c:	79fb      	ldrb	r3, [r7, #7]
 800476e:	4618      	mov	r0, r3
 8004770:	f7ff ffb8 	bl	80046e4 <LCD_WR_REG>
	LCD_WR_DATA(LCD_RegValue);
 8004774:	88bb      	ldrh	r3, [r7, #4]
 8004776:	b2db      	uxtb	r3, r3
 8004778:	4618      	mov	r0, r3
 800477a:	f7ff ffd1 	bl	8004720 <LCD_WR_DATA>
}
 800477e:	bf00      	nop
 8004780:	3708      	adds	r7, #8
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
	...

08004788 <LCD_WriteRAM_Prepare>:
 * @function   :Write GRAM
 * @parameters :None
 * @retvalue   :None
******************************************************************************/
void LCD_WriteRAM_Prepare(void)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	af00      	add	r7, sp, #0
	LCD_WR_REG(lcddev.wramcmd);
 800478c:	4b03      	ldr	r3, [pc, #12]	; (800479c <LCD_WriteRAM_Prepare+0x14>)
 800478e:	891b      	ldrh	r3, [r3, #8]
 8004790:	b2db      	uxtb	r3, r3
 8004792:	4618      	mov	r0, r3
 8004794:	f7ff ffa6 	bl	80046e4 <LCD_WR_REG>
}
 8004798:	bf00      	nop
 800479a:	bd80      	pop	{r7, pc}
 800479c:	20001df0 	.word	0x20001df0

080047a0 <Lcd_WriteData_16Bit>:
 * @function   :Write an 16-bit command to the LCD screen
 * @parameters :Data:Data to be written
 * @retvalue   :None
******************************************************************************/
void Lcd_WriteData_16Bit(u16 Data)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b082      	sub	sp, #8
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	4603      	mov	r3, r0
 80047a8:	80fb      	strh	r3, [r7, #6]
   LCD_CS_CLR;
 80047aa:	2200      	movs	r2, #0
 80047ac:	2102      	movs	r1, #2
 80047ae:	480e      	ldr	r0, [pc, #56]	; (80047e8 <Lcd_WriteData_16Bit+0x48>)
 80047b0:	f002 fd0c 	bl	80071cc <HAL_GPIO_WritePin>
   LCD_RS_SET;
 80047b4:	2201      	movs	r2, #1
 80047b6:	2101      	movs	r1, #1
 80047b8:	480b      	ldr	r0, [pc, #44]	; (80047e8 <Lcd_WriteData_16Bit+0x48>)
 80047ba:	f002 fd07 	bl	80071cc <HAL_GPIO_WritePin>
   SPI_WriteByte(Data>>8);
 80047be:	88fb      	ldrh	r3, [r7, #6]
 80047c0:	0a1b      	lsrs	r3, r3, #8
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	4618      	mov	r0, r3
 80047c8:	f000 fa48 	bl	8004c5c <SPI_WriteByte>
   SPI_WriteByte(Data);
 80047cc:	88fb      	ldrh	r3, [r7, #6]
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	4618      	mov	r0, r3
 80047d2:	f000 fa43 	bl	8004c5c <SPI_WriteByte>
   LCD_CS_SET;
 80047d6:	2201      	movs	r2, #1
 80047d8:	2102      	movs	r1, #2
 80047da:	4803      	ldr	r0, [pc, #12]	; (80047e8 <Lcd_WriteData_16Bit+0x48>)
 80047dc:	f002 fcf6 	bl	80071cc <HAL_GPIO_WritePin>
}
 80047e0:	bf00      	nop
 80047e2:	3708      	adds	r7, #8
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	40020400 	.word	0x40020400

080047ec <LCD_DrawPoint>:
 * @parameters :x:the x coordinate of the pixel
                y:the y coordinate of the pixel
 * @retvalue   :None
******************************************************************************/
void LCD_DrawPoint(u16 x,u16 y, u16 color)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	4603      	mov	r3, r0
 80047f4:	80fb      	strh	r3, [r7, #6]
 80047f6:	460b      	mov	r3, r1
 80047f8:	80bb      	strh	r3, [r7, #4]
 80047fa:	4613      	mov	r3, r2
 80047fc:	807b      	strh	r3, [r7, #2]
	LCD_SetCursor(x,y);//设置光标位置
 80047fe:	88ba      	ldrh	r2, [r7, #4]
 8004800:	88fb      	ldrh	r3, [r7, #6]
 8004802:	4611      	mov	r1, r2
 8004804:	4618      	mov	r0, r3
 8004806:	f000 f9c7 	bl	8004b98 <LCD_SetCursor>
	Lcd_WriteData_16Bit(color);
 800480a:	887b      	ldrh	r3, [r7, #2]
 800480c:	4618      	mov	r0, r3
 800480e:	f7ff ffc7 	bl	80047a0 <Lcd_WriteData_16Bit>
}
 8004812:	bf00      	nop
 8004814:	3708      	adds	r7, #8
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
	...

0800481c <LCD_Clear>:
 * @function   :Full screen filled LCD screen
 * @parameters :color:Filled color
 * @retvalue   :None
******************************************************************************/
void LCD_Clear(u16 Color)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	4603      	mov	r3, r0
 8004824:	80fb      	strh	r3, [r7, #6]
  unsigned int i,m;
	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);
 8004826:	4b1d      	ldr	r3, [pc, #116]	; (800489c <LCD_Clear+0x80>)
 8004828:	881b      	ldrh	r3, [r3, #0]
 800482a:	3b01      	subs	r3, #1
 800482c:	b29a      	uxth	r2, r3
 800482e:	4b1b      	ldr	r3, [pc, #108]	; (800489c <LCD_Clear+0x80>)
 8004830:	885b      	ldrh	r3, [r3, #2]
 8004832:	3b01      	subs	r3, #1
 8004834:	b29b      	uxth	r3, r3
 8004836:	2100      	movs	r1, #0
 8004838:	2000      	movs	r0, #0
 800483a:	f000 f969 	bl	8004b10 <LCD_SetWindows>
	LCD_CS_CLR;
 800483e:	2200      	movs	r2, #0
 8004840:	2102      	movs	r1, #2
 8004842:	4817      	ldr	r0, [pc, #92]	; (80048a0 <LCD_Clear+0x84>)
 8004844:	f002 fcc2 	bl	80071cc <HAL_GPIO_WritePin>
	LCD_RS_SET;
 8004848:	2201      	movs	r2, #1
 800484a:	2101      	movs	r1, #1
 800484c:	4814      	ldr	r0, [pc, #80]	; (80048a0 <LCD_Clear+0x84>)
 800484e:	f002 fcbd 	bl	80071cc <HAL_GPIO_WritePin>
	for(i=0;i<lcddev.height;i++)
 8004852:	2300      	movs	r3, #0
 8004854:	60fb      	str	r3, [r7, #12]
 8004856:	e012      	b.n	800487e <LCD_Clear+0x62>
	{
    for(m=0;m<lcddev.width;m++)
 8004858:	2300      	movs	r3, #0
 800485a:	60bb      	str	r3, [r7, #8]
 800485c:	e006      	b.n	800486c <LCD_Clear+0x50>
    {
			Lcd_WriteData_16Bit(Color);
 800485e:	88fb      	ldrh	r3, [r7, #6]
 8004860:	4618      	mov	r0, r3
 8004862:	f7ff ff9d 	bl	80047a0 <Lcd_WriteData_16Bit>
    for(m=0;m<lcddev.width;m++)
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	3301      	adds	r3, #1
 800486a:	60bb      	str	r3, [r7, #8]
 800486c:	4b0b      	ldr	r3, [pc, #44]	; (800489c <LCD_Clear+0x80>)
 800486e:	881b      	ldrh	r3, [r3, #0]
 8004870:	461a      	mov	r2, r3
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	4293      	cmp	r3, r2
 8004876:	d3f2      	bcc.n	800485e <LCD_Clear+0x42>
	for(i=0;i<lcddev.height;i++)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	3301      	adds	r3, #1
 800487c:	60fb      	str	r3, [r7, #12]
 800487e:	4b07      	ldr	r3, [pc, #28]	; (800489c <LCD_Clear+0x80>)
 8004880:	885b      	ldrh	r3, [r3, #2]
 8004882:	461a      	mov	r2, r3
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	4293      	cmp	r3, r2
 8004888:	d3e6      	bcc.n	8004858 <LCD_Clear+0x3c>
		}
	}
	 LCD_CS_SET;
 800488a:	2201      	movs	r2, #1
 800488c:	2102      	movs	r1, #2
 800488e:	4804      	ldr	r0, [pc, #16]	; (80048a0 <LCD_Clear+0x84>)
 8004890:	f002 fc9c 	bl	80071cc <HAL_GPIO_WritePin>
}
 8004894:	bf00      	nop
 8004896:	3710      	adds	r7, #16
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}
 800489c:	20001df0 	.word	0x20001df0
 80048a0:	40020400 	.word	0x40020400

080048a4 <LCD_RESET>:
 * @function   :Reset LCD screen
 * @parameters :None
 * @retvalue   :None
******************************************************************************/
void LCD_RESET(void)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	af00      	add	r7, sp, #0
	LCD_RST_CLR;
 80048a8:	2200      	movs	r2, #0
 80048aa:	2140      	movs	r1, #64	; 0x40
 80048ac:	4807      	ldr	r0, [pc, #28]	; (80048cc <LCD_RESET+0x28>)
 80048ae:	f002 fc8d 	bl	80071cc <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80048b2:	2064      	movs	r0, #100	; 0x64
 80048b4:	f002 f842 	bl	800693c <HAL_Delay>
	LCD_RST_SET;
 80048b8:	2201      	movs	r2, #1
 80048ba:	2140      	movs	r1, #64	; 0x40
 80048bc:	4803      	ldr	r0, [pc, #12]	; (80048cc <LCD_RESET+0x28>)
 80048be:	f002 fc85 	bl	80071cc <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80048c2:	2032      	movs	r0, #50	; 0x32
 80048c4:	f002 f83a 	bl	800693c <HAL_Delay>
}
 80048c8:	bf00      	nop
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	40020000 	.word	0x40020000

080048d0 <LCD_Init>:
 * @function   :Initialization LCD screen
 * @parameters :None
 * @retvalue   :None
******************************************************************************/
void LCD_Init(void)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	af00      	add	r7, sp, #0

 	LCD_RESET(); //LCD 复位
 80048d4:	f7ff ffe6 	bl	80048a4 <LCD_RESET>
//*************2.2inch ILI9341初始化**********//
	LCD_WR_REG(0xB1);
 80048d8:	20b1      	movs	r0, #177	; 0xb1
 80048da:	f7ff ff03 	bl	80046e4 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 80048de:	2001      	movs	r0, #1
 80048e0:	f7ff ff1e 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 80048e4:	202c      	movs	r0, #44	; 0x2c
 80048e6:	f7ff ff1b 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_DATA(0x2D);
 80048ea:	202d      	movs	r0, #45	; 0x2d
 80048ec:	f7ff ff18 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_REG(0xB2);
 80048f0:	20b2      	movs	r0, #178	; 0xb2
 80048f2:	f7ff fef7 	bl	80046e4 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 80048f6:	2001      	movs	r0, #1
 80048f8:	f7ff ff12 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 80048fc:	202c      	movs	r0, #44	; 0x2c
 80048fe:	f7ff ff0f 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_DATA(0x2D);
 8004902:	202d      	movs	r0, #45	; 0x2d
 8004904:	f7ff ff0c 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_REG(0xB3);
 8004908:	20b3      	movs	r0, #179	; 0xb3
 800490a:	f7ff feeb 	bl	80046e4 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 800490e:	2001      	movs	r0, #1
 8004910:	f7ff ff06 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8004914:	202c      	movs	r0, #44	; 0x2c
 8004916:	f7ff ff03 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_DATA(0x2D);
 800491a:	202d      	movs	r0, #45	; 0x2d
 800491c:	f7ff ff00 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8004920:	2001      	movs	r0, #1
 8004922:	f7ff fefd 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8004926:	202c      	movs	r0, #44	; 0x2c
 8004928:	f7ff fefa 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_DATA(0x2D);
 800492c:	202d      	movs	r0, #45	; 0x2d
 800492e:	f7ff fef7 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_REG(0xB4); //Column inversion
 8004932:	20b4      	movs	r0, #180	; 0xb4
 8004934:	f7ff fed6 	bl	80046e4 <LCD_WR_REG>
	LCD_WR_DATA(0x07);
 8004938:	2007      	movs	r0, #7
 800493a:	f7ff fef1 	bl	8004720 <LCD_WR_DATA>
	//ST7735R Power Sequence
	LCD_WR_REG(0xC0);
 800493e:	20c0      	movs	r0, #192	; 0xc0
 8004940:	f7ff fed0 	bl	80046e4 <LCD_WR_REG>
	LCD_WR_DATA(0xA2);
 8004944:	20a2      	movs	r0, #162	; 0xa2
 8004946:	f7ff feeb 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 800494a:	2002      	movs	r0, #2
 800494c:	f7ff fee8 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_DATA(0x84);
 8004950:	2084      	movs	r0, #132	; 0x84
 8004952:	f7ff fee5 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);
 8004956:	20c1      	movs	r0, #193	; 0xc1
 8004958:	f7ff fec4 	bl	80046e4 <LCD_WR_REG>
	LCD_WR_DATA(0xC5);
 800495c:	20c5      	movs	r0, #197	; 0xc5
 800495e:	f7ff fedf 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_REG(0xC2);
 8004962:	20c2      	movs	r0, #194	; 0xc2
 8004964:	f7ff febe 	bl	80046e4 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8004968:	200a      	movs	r0, #10
 800496a:	f7ff fed9 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800496e:	2000      	movs	r0, #0
 8004970:	f7ff fed6 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_REG(0xC3);
 8004974:	20c3      	movs	r0, #195	; 0xc3
 8004976:	f7ff feb5 	bl	80046e4 <LCD_WR_REG>
	LCD_WR_DATA(0x8A);
 800497a:	208a      	movs	r0, #138	; 0x8a
 800497c:	f7ff fed0 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8004980:	202a      	movs	r0, #42	; 0x2a
 8004982:	f7ff fecd 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_REG(0xC4);
 8004986:	20c4      	movs	r0, #196	; 0xc4
 8004988:	f7ff feac 	bl	80046e4 <LCD_WR_REG>
	LCD_WR_DATA(0x8A);
 800498c:	208a      	movs	r0, #138	; 0x8a
 800498e:	f7ff fec7 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_DATA(0xEE);
 8004992:	20ee      	movs	r0, #238	; 0xee
 8004994:	f7ff fec4 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_REG(0xC5); //VCOM
 8004998:	20c5      	movs	r0, #197	; 0xc5
 800499a:	f7ff fea3 	bl	80046e4 <LCD_WR_REG>
	LCD_WR_DATA(0x0E);
 800499e:	200e      	movs	r0, #14
 80049a0:	f7ff febe 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_REG(0x36); //MX, MY, RGB mode
 80049a4:	2036      	movs	r0, #54	; 0x36
 80049a6:	f7ff fe9d 	bl	80046e4 <LCD_WR_REG>
	LCD_WR_DATA(0xC0);
 80049aa:	20c0      	movs	r0, #192	; 0xc0
 80049ac:	f7ff feb8 	bl	8004720 <LCD_WR_DATA>
	//ST7735R Gamma Sequence
	LCD_WR_REG(0xe0);
 80049b0:	20e0      	movs	r0, #224	; 0xe0
 80049b2:	f7ff fe97 	bl	80046e4 <LCD_WR_REG>
	LCD_WR_DATA(0x0f);
 80049b6:	200f      	movs	r0, #15
 80049b8:	f7ff feb2 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_DATA(0x1a);
 80049bc:	201a      	movs	r0, #26
 80049be:	f7ff feaf 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_DATA(0x0f);
 80049c2:	200f      	movs	r0, #15
 80049c4:	f7ff feac 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_DATA(0x18);
 80049c8:	2018      	movs	r0, #24
 80049ca:	f7ff fea9 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_DATA(0x2f);
 80049ce:	202f      	movs	r0, #47	; 0x2f
 80049d0:	f7ff fea6 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 80049d4:	2028      	movs	r0, #40	; 0x28
 80049d6:	f7ff fea3 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_DATA(0x20);
 80049da:	2020      	movs	r0, #32
 80049dc:	f7ff fea0 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_DATA(0x22);
 80049e0:	2022      	movs	r0, #34	; 0x22
 80049e2:	f7ff fe9d 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_DATA(0x1f);
 80049e6:	201f      	movs	r0, #31
 80049e8:	f7ff fe9a 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_DATA(0x1b);
 80049ec:	201b      	movs	r0, #27
 80049ee:	f7ff fe97 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_DATA(0x23);
 80049f2:	2023      	movs	r0, #35	; 0x23
 80049f4:	f7ff fe94 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_DATA(0x37);
 80049f8:	2037      	movs	r0, #55	; 0x37
 80049fa:	f7ff fe91 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80049fe:	2000      	movs	r0, #0
 8004a00:	f7ff fe8e 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8004a04:	2007      	movs	r0, #7
 8004a06:	f7ff fe8b 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8004a0a:	2002      	movs	r0, #2
 8004a0c:	f7ff fe88 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8004a10:	2010      	movs	r0, #16
 8004a12:	f7ff fe85 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_REG(0xe1);
 8004a16:	20e1      	movs	r0, #225	; 0xe1
 8004a18:	f7ff fe64 	bl	80046e4 <LCD_WR_REG>
	LCD_WR_DATA(0x0f);
 8004a1c:	200f      	movs	r0, #15
 8004a1e:	f7ff fe7f 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_DATA(0x1b);
 8004a22:	201b      	movs	r0, #27
 8004a24:	f7ff fe7c 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_DATA(0x0f);
 8004a28:	200f      	movs	r0, #15
 8004a2a:	f7ff fe79 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8004a2e:	2017      	movs	r0, #23
 8004a30:	f7ff fe76 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_DATA(0x33);
 8004a34:	2033      	movs	r0, #51	; 0x33
 8004a36:	f7ff fe73 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_DATA(0x2c);
 8004a3a:	202c      	movs	r0, #44	; 0x2c
 8004a3c:	f7ff fe70 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_DATA(0x29);
 8004a40:	2029      	movs	r0, #41	; 0x29
 8004a42:	f7ff fe6d 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_DATA(0x2e);
 8004a46:	202e      	movs	r0, #46	; 0x2e
 8004a48:	f7ff fe6a 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_DATA(0x30);
 8004a4c:	2030      	movs	r0, #48	; 0x30
 8004a4e:	f7ff fe67 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_DATA(0x30);
 8004a52:	2030      	movs	r0, #48	; 0x30
 8004a54:	f7ff fe64 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_DATA(0x39);
 8004a58:	2039      	movs	r0, #57	; 0x39
 8004a5a:	f7ff fe61 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8004a5e:	203f      	movs	r0, #63	; 0x3f
 8004a60:	f7ff fe5e 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8004a64:	2000      	movs	r0, #0
 8004a66:	f7ff fe5b 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8004a6a:	2007      	movs	r0, #7
 8004a6c:	f7ff fe58 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8004a70:	2003      	movs	r0, #3
 8004a72:	f7ff fe55 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8004a76:	2010      	movs	r0, #16
 8004a78:	f7ff fe52 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_REG(0x2a);
 8004a7c:	202a      	movs	r0, #42	; 0x2a
 8004a7e:	f7ff fe31 	bl	80046e4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8004a82:	2000      	movs	r0, #0
 8004a84:	f7ff fe4c 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8004a88:	2000      	movs	r0, #0
 8004a8a:	f7ff fe49 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8004a8e:	2000      	movs	r0, #0
 8004a90:	f7ff fe46 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_DATA(0x7f);
 8004a94:	207f      	movs	r0, #127	; 0x7f
 8004a96:	f7ff fe43 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_REG(0x2b);
 8004a9a:	202b      	movs	r0, #43	; 0x2b
 8004a9c:	f7ff fe22 	bl	80046e4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8004aa0:	2000      	movs	r0, #0
 8004aa2:	f7ff fe3d 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8004aa6:	2000      	movs	r0, #0
 8004aa8:	f7ff fe3a 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8004aac:	2000      	movs	r0, #0
 8004aae:	f7ff fe37 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_DATA(0x9f);
 8004ab2:	209f      	movs	r0, #159	; 0x9f
 8004ab4:	f7ff fe34 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_REG(0xF0); //Enable test command
 8004ab8:	20f0      	movs	r0, #240	; 0xf0
 8004aba:	f7ff fe13 	bl	80046e4 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8004abe:	2001      	movs	r0, #1
 8004ac0:	f7ff fe2e 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_REG(0xF6); //Disable ram power save mode
 8004ac4:	20f6      	movs	r0, #246	; 0xf6
 8004ac6:	f7ff fe0d 	bl	80046e4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8004aca:	2000      	movs	r0, #0
 8004acc:	f7ff fe28 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_REG(0x3A); //65k mode
 8004ad0:	203a      	movs	r0, #58	; 0x3a
 8004ad2:	f7ff fe07 	bl	80046e4 <LCD_WR_REG>
	LCD_WR_DATA(0x05);
 8004ad6:	2005      	movs	r0, #5
 8004ad8:	f7ff fe22 	bl	8004720 <LCD_WR_DATA>


	LCD_WR_REG(0x11); //Exit Sleep
 8004adc:	2011      	movs	r0, #17
 8004ade:	f7ff fe01 	bl	80046e4 <LCD_WR_REG>
	HAL_Delay(120);
 8004ae2:	2078      	movs	r0, #120	; 0x78
 8004ae4:	f001 ff2a 	bl	800693c <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8004ae8:	2029      	movs	r0, #41	; 0x29
 8004aea:	f7ff fdfb 	bl	80046e4 <LCD_WR_REG>

    LCD_direction(USE_HORIZONTAL);//set LCD direction
 8004aee:	2000      	movs	r0, #0
 8004af0:	f000 f864 	bl	8004bbc <LCD_direction>
	LCD_LED_SET;//点亮背光
 8004af4:	2201      	movs	r2, #1
 8004af6:	2102      	movs	r1, #2
 8004af8:	4804      	ldr	r0, [pc, #16]	; (8004b0c <LCD_Init+0x23c>)
 8004afa:	f002 fb67 	bl	80071cc <HAL_GPIO_WritePin>
	LCD_Clear(WHITE);//清全屏白色
 8004afe:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004b02:	f7ff fe8b 	bl	800481c <LCD_Clear>
}
 8004b06:	bf00      	nop
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	40020000 	.word	0x40020000

08004b10 <LCD_SetWindows>:
								xEnd:the endning x coordinate of the LCD display window
								yEnd:the endning y coordinate of the LCD display window
 * @retvalue   :None
******************************************************************************/
void LCD_SetWindows(u16 xStar, u16 yStar,u16 xEnd,u16 yEnd)
{
 8004b10:	b590      	push	{r4, r7, lr}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	4604      	mov	r4, r0
 8004b18:	4608      	mov	r0, r1
 8004b1a:	4611      	mov	r1, r2
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	4623      	mov	r3, r4
 8004b20:	80fb      	strh	r3, [r7, #6]
 8004b22:	4603      	mov	r3, r0
 8004b24:	80bb      	strh	r3, [r7, #4]
 8004b26:	460b      	mov	r3, r1
 8004b28:	807b      	strh	r3, [r7, #2]
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	803b      	strh	r3, [r7, #0]
	LCD_WR_REG(lcddev.setxcmd);
 8004b2e:	4b19      	ldr	r3, [pc, #100]	; (8004b94 <LCD_SetWindows+0x84>)
 8004b30:	895b      	ldrh	r3, [r3, #10]
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	4618      	mov	r0, r3
 8004b36:	f7ff fdd5 	bl	80046e4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8004b3a:	2000      	movs	r0, #0
 8004b3c:	f7ff fdf0 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_DATA(xStar);
 8004b40:	88fb      	ldrh	r3, [r7, #6]
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	4618      	mov	r0, r3
 8004b46:	f7ff fdeb 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8004b4a:	2000      	movs	r0, #0
 8004b4c:	f7ff fde8 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_DATA(xEnd);
 8004b50:	887b      	ldrh	r3, [r7, #2]
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	4618      	mov	r0, r3
 8004b56:	f7ff fde3 	bl	8004720 <LCD_WR_DATA>

	LCD_WR_REG(lcddev.setycmd);
 8004b5a:	4b0e      	ldr	r3, [pc, #56]	; (8004b94 <LCD_SetWindows+0x84>)
 8004b5c:	899b      	ldrh	r3, [r3, #12]
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	4618      	mov	r0, r3
 8004b62:	f7ff fdbf 	bl	80046e4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8004b66:	2000      	movs	r0, #0
 8004b68:	f7ff fdda 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_DATA(yStar);
 8004b6c:	88bb      	ldrh	r3, [r7, #4]
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	4618      	mov	r0, r3
 8004b72:	f7ff fdd5 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8004b76:	2000      	movs	r0, #0
 8004b78:	f7ff fdd2 	bl	8004720 <LCD_WR_DATA>
	LCD_WR_DATA(yEnd);
 8004b7c:	883b      	ldrh	r3, [r7, #0]
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	4618      	mov	r0, r3
 8004b82:	f7ff fdcd 	bl	8004720 <LCD_WR_DATA>

	LCD_WriteRAM_Prepare();	//start to write to GRAM
 8004b86:	f7ff fdff 	bl	8004788 <LCD_WriteRAM_Prepare>
}
 8004b8a:	bf00      	nop
 8004b8c:	370c      	adds	r7, #12
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd90      	pop	{r4, r7, pc}
 8004b92:	bf00      	nop
 8004b94:	20001df0 	.word	0x20001df0

08004b98 <LCD_SetCursor>:
 * @parameters :Xpos:the  x coordinate of the pixel
								Ypos:the  y coordinate of the pixel
 * @retvalue   :None
******************************************************************************/
void LCD_SetCursor(u16 Xpos, u16 Ypos)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	460a      	mov	r2, r1
 8004ba2:	80fb      	strh	r3, [r7, #6]
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	80bb      	strh	r3, [r7, #4]
	LCD_SetWindows(Xpos,Ypos,Xpos,Ypos);
 8004ba8:	88bb      	ldrh	r3, [r7, #4]
 8004baa:	88fa      	ldrh	r2, [r7, #6]
 8004bac:	88b9      	ldrh	r1, [r7, #4]
 8004bae:	88f8      	ldrh	r0, [r7, #6]
 8004bb0:	f7ff ffae 	bl	8004b10 <LCD_SetWindows>
}
 8004bb4:	bf00      	nop
 8004bb6:	3708      	adds	r7, #8
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <LCD_direction>:
													2-180 degree
													3-270 degree
 * @retvalue   :None
******************************************************************************/
void LCD_direction(u8 direction)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	71fb      	strb	r3, [r7, #7]
	lcddev.setxcmd=0x2A;
 8004bc6:	4b24      	ldr	r3, [pc, #144]	; (8004c58 <LCD_direction+0x9c>)
 8004bc8:	222a      	movs	r2, #42	; 0x2a
 8004bca:	815a      	strh	r2, [r3, #10]
	lcddev.setycmd=0x2B;
 8004bcc:	4b22      	ldr	r3, [pc, #136]	; (8004c58 <LCD_direction+0x9c>)
 8004bce:	222b      	movs	r2, #43	; 0x2b
 8004bd0:	819a      	strh	r2, [r3, #12]
	lcddev.wramcmd=0x2C;
 8004bd2:	4b21      	ldr	r3, [pc, #132]	; (8004c58 <LCD_direction+0x9c>)
 8004bd4:	222c      	movs	r2, #44	; 0x2c
 8004bd6:	811a      	strh	r2, [r3, #8]
switch(direction){
 8004bd8:	79fb      	ldrb	r3, [r7, #7]
 8004bda:	2b03      	cmp	r3, #3
 8004bdc:	d836      	bhi.n	8004c4c <LCD_direction+0x90>
 8004bde:	a201      	add	r2, pc, #4	; (adr r2, 8004be4 <LCD_direction+0x28>)
 8004be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be4:	08004bf5 	.word	0x08004bf5
 8004be8:	08004c0b 	.word	0x08004c0b
 8004bec:	08004c21 	.word	0x08004c21
 8004bf0:	08004c37 	.word	0x08004c37
case 0:
	lcddev.width=LCD_W;
 8004bf4:	4b18      	ldr	r3, [pc, #96]	; (8004c58 <LCD_direction+0x9c>)
 8004bf6:	2280      	movs	r2, #128	; 0x80
 8004bf8:	801a      	strh	r2, [r3, #0]
	lcddev.height=LCD_H;
 8004bfa:	4b17      	ldr	r3, [pc, #92]	; (8004c58 <LCD_direction+0x9c>)
 8004bfc:	22a0      	movs	r2, #160	; 0xa0
 8004bfe:	805a      	strh	r2, [r3, #2]
	LCD_WriteReg(0x36,(0<<3)|(1<<6)|(1<<7));//BGR==1,MY==0,MX==0,MV==0
 8004c00:	21c0      	movs	r1, #192	; 0xc0
 8004c02:	2036      	movs	r0, #54	; 0x36
 8004c04:	f7ff fdaa 	bl	800475c <LCD_WriteReg>
break;
 8004c08:	e021      	b.n	8004c4e <LCD_direction+0x92>
case 1:
	lcddev.width=LCD_H;
 8004c0a:	4b13      	ldr	r3, [pc, #76]	; (8004c58 <LCD_direction+0x9c>)
 8004c0c:	22a0      	movs	r2, #160	; 0xa0
 8004c0e:	801a      	strh	r2, [r3, #0]
	lcddev.height=LCD_W;
 8004c10:	4b11      	ldr	r3, [pc, #68]	; (8004c58 <LCD_direction+0x9c>)
 8004c12:	2280      	movs	r2, #128	; 0x80
 8004c14:	805a      	strh	r2, [r3, #2]
	LCD_WriteReg(0x36,(0<<3)|(1<<7)|(1<<5));//BGR==1,MY==1,MX==0,MV==1
 8004c16:	21a0      	movs	r1, #160	; 0xa0
 8004c18:	2036      	movs	r0, #54	; 0x36
 8004c1a:	f7ff fd9f 	bl	800475c <LCD_WriteReg>
break;
 8004c1e:	e016      	b.n	8004c4e <LCD_direction+0x92>
case 2:
	lcddev.width=LCD_W;
 8004c20:	4b0d      	ldr	r3, [pc, #52]	; (8004c58 <LCD_direction+0x9c>)
 8004c22:	2280      	movs	r2, #128	; 0x80
 8004c24:	801a      	strh	r2, [r3, #0]
	lcddev.height=LCD_H;
 8004c26:	4b0c      	ldr	r3, [pc, #48]	; (8004c58 <LCD_direction+0x9c>)
 8004c28:	22a0      	movs	r2, #160	; 0xa0
 8004c2a:	805a      	strh	r2, [r3, #2]
	LCD_WriteReg(0x36,(0<<3)|(0<<6)|(0<<7));//BGR==1,MY==0,MX==0,MV==0
 8004c2c:	2100      	movs	r1, #0
 8004c2e:	2036      	movs	r0, #54	; 0x36
 8004c30:	f7ff fd94 	bl	800475c <LCD_WriteReg>
break;
 8004c34:	e00b      	b.n	8004c4e <LCD_direction+0x92>
case 3:
	lcddev.width=LCD_H;
 8004c36:	4b08      	ldr	r3, [pc, #32]	; (8004c58 <LCD_direction+0x9c>)
 8004c38:	22a0      	movs	r2, #160	; 0xa0
 8004c3a:	801a      	strh	r2, [r3, #0]
	lcddev.height=LCD_W;
 8004c3c:	4b06      	ldr	r3, [pc, #24]	; (8004c58 <LCD_direction+0x9c>)
 8004c3e:	2280      	movs	r2, #128	; 0x80
 8004c40:	805a      	strh	r2, [r3, #2]
	LCD_WriteReg(0x36,(0<<3)|(0<<7)|(1<<6)|(1<<5));//BGR==1,MY==1,MX==0,MV==1
 8004c42:	2160      	movs	r1, #96	; 0x60
 8004c44:	2036      	movs	r0, #54	; 0x36
 8004c46:	f7ff fd89 	bl	800475c <LCD_WriteReg>
break;
 8004c4a:	e000      	b.n	8004c4e <LCD_direction+0x92>
default:break;
 8004c4c:	bf00      	nop
}
}
 8004c4e:	bf00      	nop
 8004c50:	3708      	adds	r7, #8
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	20001df0 	.word	0x20001df0

08004c5c <SPI_WriteByte>:


// use to wrtie a byte of data to display
u8 SPI_WriteByte(u8 TxData)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b086      	sub	sp, #24
 8004c60:	af02      	add	r7, sp, #8
 8004c62:	4603      	mov	r3, r0
 8004c64:	71fb      	strb	r3, [r7, #7]
    u8 Rxdata;
    HAL_SPI_TransmitReceive(&hspi1,&TxData,&Rxdata,1, 1000);
 8004c66:	f107 020f 	add.w	r2, r7, #15
 8004c6a:	1df9      	adds	r1, r7, #7
 8004c6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c70:	9300      	str	r3, [sp, #0]
 8004c72:	2301      	movs	r3, #1
 8004c74:	4803      	ldr	r0, [pc, #12]	; (8004c84 <SPI_WriteByte+0x28>)
 8004c76:	f003 ff92 	bl	8008b9e <HAL_SPI_TransmitReceive>
 	return Rxdata;
 8004c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3710      	adds	r7, #16
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	20001eec 	.word	0x20001eec

08004c88 <LCD_DrawLine>:
                x2,y2   ends
                color   line color
      return：  n/a
******************************************************************************/
void LCD_DrawLine(u16 x1, u16 y1, u16 x2, u16 y2, u16 color)
{
 8004c88:	b590      	push	{r4, r7, lr}
 8004c8a:	b08d      	sub	sp, #52	; 0x34
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	4604      	mov	r4, r0
 8004c90:	4608      	mov	r0, r1
 8004c92:	4611      	mov	r1, r2
 8004c94:	461a      	mov	r2, r3
 8004c96:	4623      	mov	r3, r4
 8004c98:	80fb      	strh	r3, [r7, #6]
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	80bb      	strh	r3, [r7, #4]
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	807b      	strh	r3, [r7, #2]
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	803b      	strh	r3, [r7, #0]
	u16 t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004caa:	2300      	movs	r3, #0
 8004cac:	627b      	str	r3, [r7, #36]	; 0x24
	int incx,incy,uRow,uCol;
	delta_x=x2-x1;
 8004cae:	887a      	ldrh	r2, [r7, #2]
 8004cb0:	88fb      	ldrh	r3, [r7, #6]
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 8004cb6:	883a      	ldrh	r2, [r7, #0]
 8004cb8:	88bb      	ldrh	r3, [r7, #4]
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 8004cbe:	88fb      	ldrh	r3, [r7, #6]
 8004cc0:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 8004cc2:	88bb      	ldrh	r3, [r7, #4]
 8004cc4:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1;
 8004cc6:	6a3b      	ldr	r3, [r7, #32]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	dd02      	ble.n	8004cd2 <LCD_DrawLine+0x4a>
 8004ccc:	2301      	movs	r3, #1
 8004cce:	617b      	str	r3, [r7, #20]
 8004cd0:	e00b      	b.n	8004cea <LCD_DrawLine+0x62>
	else if (delta_x==0)incx=0;
 8004cd2:	6a3b      	ldr	r3, [r7, #32]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d102      	bne.n	8004cde <LCD_DrawLine+0x56>
 8004cd8:	2300      	movs	r3, #0
 8004cda:	617b      	str	r3, [r7, #20]
 8004cdc:	e005      	b.n	8004cea <LCD_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 8004cde:	f04f 33ff 	mov.w	r3, #4294967295
 8004ce2:	617b      	str	r3, [r7, #20]
 8004ce4:	6a3b      	ldr	r3, [r7, #32]
 8004ce6:	425b      	negs	r3, r3
 8004ce8:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	dd02      	ble.n	8004cf6 <LCD_DrawLine+0x6e>
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	613b      	str	r3, [r7, #16]
 8004cf4:	e00b      	b.n	8004d0e <LCD_DrawLine+0x86>
	else if (delta_y==0)incy=0;
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d102      	bne.n	8004d02 <LCD_DrawLine+0x7a>
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	613b      	str	r3, [r7, #16]
 8004d00:	e005      	b.n	8004d0e <LCD_DrawLine+0x86>
	else {incy=-1;delta_y=-delta_x;}
 8004d02:	f04f 33ff 	mov.w	r3, #4294967295
 8004d06:	613b      	str	r3, [r7, #16]
 8004d08:	6a3b      	ldr	r3, [r7, #32]
 8004d0a:	425b      	negs	r3, r3
 8004d0c:	61fb      	str	r3, [r7, #28]
	if(delta_x>delta_y)distance=delta_x;
 8004d0e:	6a3a      	ldr	r2, [r7, #32]
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	dd02      	ble.n	8004d1c <LCD_DrawLine+0x94>
 8004d16:	6a3b      	ldr	r3, [r7, #32]
 8004d18:	61bb      	str	r3, [r7, #24]
 8004d1a:	e001      	b.n	8004d20 <LCD_DrawLine+0x98>
	else distance=delta_y;
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	61bb      	str	r3, [r7, #24]
	for(t=0;t<distance+1;t++)
 8004d20:	2300      	movs	r3, #0
 8004d22:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004d24:	e02b      	b.n	8004d7e <LCD_DrawLine+0xf6>
	{
		LCD_DrawPoint(uRow,uCol,color);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	68ba      	ldr	r2, [r7, #8]
 8004d2c:	b291      	uxth	r1, r2
 8004d2e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8004d32:	4618      	mov	r0, r3
 8004d34:	f7ff fd5a 	bl	80047ec <LCD_DrawPoint>
		xerr+=delta_x;
 8004d38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d3a:	6a3b      	ldr	r3, [r7, #32]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr+=delta_y;
 8004d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	4413      	add	r3, r2
 8004d46:	627b      	str	r3, [r7, #36]	; 0x24
		if(xerr>distance)
 8004d48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	dd07      	ble.n	8004d60 <LCD_DrawLine+0xd8>
		{
			xerr-=distance;
 8004d50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow+=incx;
 8004d58:	68fa      	ldr	r2, [r7, #12]
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 8004d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	dd07      	ble.n	8004d78 <LCD_DrawLine+0xf0>
		{
			yerr-=distance;
 8004d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	627b      	str	r3, [r7, #36]	; 0x24
			uCol+=incy;
 8004d70:	68ba      	ldr	r2, [r7, #8]
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	4413      	add	r3, r2
 8004d76:	60bb      	str	r3, [r7, #8]
	for(t=0;t<distance+1;t++)
 8004d78:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004d7e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004d80:	69ba      	ldr	r2, [r7, #24]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	dacf      	bge.n	8004d26 <LCD_DrawLine+0x9e>
		}
	}
}
 8004d86:	bf00      	nop
 8004d88:	bf00      	nop
 8004d8a:	3734      	adds	r7, #52	; 0x34
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd90      	pop	{r4, r7, pc}

08004d90 <LCD_DrawRectangle>:
                x2,y2   ends
                color   color
      return：  n/a
******************************************************************************/
void LCD_DrawRectangle(u16 x1, u16 y1, u16 x2, u16 y2,u16 color)
{
 8004d90:	b590      	push	{r4, r7, lr}
 8004d92:	b085      	sub	sp, #20
 8004d94:	af02      	add	r7, sp, #8
 8004d96:	4604      	mov	r4, r0
 8004d98:	4608      	mov	r0, r1
 8004d9a:	4611      	mov	r1, r2
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	4623      	mov	r3, r4
 8004da0:	80fb      	strh	r3, [r7, #6]
 8004da2:	4603      	mov	r3, r0
 8004da4:	80bb      	strh	r3, [r7, #4]
 8004da6:	460b      	mov	r3, r1
 8004da8:	807b      	strh	r3, [r7, #2]
 8004daa:	4613      	mov	r3, r2
 8004dac:	803b      	strh	r3, [r7, #0]
	LCD_DrawLine(x1,y1,x2,y1,color);
 8004dae:	88bc      	ldrh	r4, [r7, #4]
 8004db0:	887a      	ldrh	r2, [r7, #2]
 8004db2:	88b9      	ldrh	r1, [r7, #4]
 8004db4:	88f8      	ldrh	r0, [r7, #6]
 8004db6:	8b3b      	ldrh	r3, [r7, #24]
 8004db8:	9300      	str	r3, [sp, #0]
 8004dba:	4623      	mov	r3, r4
 8004dbc:	f7ff ff64 	bl	8004c88 <LCD_DrawLine>
	LCD_DrawLine(x1,y1,x1,y2,color);
 8004dc0:	883c      	ldrh	r4, [r7, #0]
 8004dc2:	88fa      	ldrh	r2, [r7, #6]
 8004dc4:	88b9      	ldrh	r1, [r7, #4]
 8004dc6:	88f8      	ldrh	r0, [r7, #6]
 8004dc8:	8b3b      	ldrh	r3, [r7, #24]
 8004dca:	9300      	str	r3, [sp, #0]
 8004dcc:	4623      	mov	r3, r4
 8004dce:	f7ff ff5b 	bl	8004c88 <LCD_DrawLine>
	LCD_DrawLine(x1,y2,x2,y2,color);
 8004dd2:	883c      	ldrh	r4, [r7, #0]
 8004dd4:	887a      	ldrh	r2, [r7, #2]
 8004dd6:	8839      	ldrh	r1, [r7, #0]
 8004dd8:	88f8      	ldrh	r0, [r7, #6]
 8004dda:	8b3b      	ldrh	r3, [r7, #24]
 8004ddc:	9300      	str	r3, [sp, #0]
 8004dde:	4623      	mov	r3, r4
 8004de0:	f7ff ff52 	bl	8004c88 <LCD_DrawLine>
	LCD_DrawLine(x2,y1,x2,y2,color);
 8004de4:	883c      	ldrh	r4, [r7, #0]
 8004de6:	887a      	ldrh	r2, [r7, #2]
 8004de8:	88b9      	ldrh	r1, [r7, #4]
 8004dea:	8878      	ldrh	r0, [r7, #2]
 8004dec:	8b3b      	ldrh	r3, [r7, #24]
 8004dee:	9300      	str	r3, [sp, #0]
 8004df0:	4623      	mov	r3, r4
 8004df2:	f7ff ff49 	bl	8004c88 <LCD_DrawLine>
}
 8004df6:	bf00      	nop
 8004df8:	370c      	adds	r7, #12
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd90      	pop	{r4, r7, pc}
	...

08004e00 <LCD_Fill>:
             xend,yend   end
			color       color to fill in
      return：  n/a
******************************************************************************/
void LCD_Fill(u16 sx,u16 sy,u16 ex,u16 ey,u16 color)
{
 8004e00:	b590      	push	{r4, r7, lr}
 8004e02:	b085      	sub	sp, #20
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	4604      	mov	r4, r0
 8004e08:	4608      	mov	r0, r1
 8004e0a:	4611      	mov	r1, r2
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	4623      	mov	r3, r4
 8004e10:	80fb      	strh	r3, [r7, #6]
 8004e12:	4603      	mov	r3, r0
 8004e14:	80bb      	strh	r3, [r7, #4]
 8004e16:	460b      	mov	r3, r1
 8004e18:	807b      	strh	r3, [r7, #2]
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	803b      	strh	r3, [r7, #0]
	u16 i,j;
	u16 width=ex-sx+1; 		//得到填充的宽度
 8004e1e:	887a      	ldrh	r2, [r7, #2]
 8004e20:	88fb      	ldrh	r3, [r7, #6]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	3301      	adds	r3, #1
 8004e28:	817b      	strh	r3, [r7, #10]
	u16 height=ey-sy+1;		//高度
 8004e2a:	883a      	ldrh	r2, [r7, #0]
 8004e2c:	88bb      	ldrh	r3, [r7, #4]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	3301      	adds	r3, #1
 8004e34:	813b      	strh	r3, [r7, #8]
	LCD_SetWindows(sx,sy,ex,ey);//设置显示窗口
 8004e36:	883b      	ldrh	r3, [r7, #0]
 8004e38:	887a      	ldrh	r2, [r7, #2]
 8004e3a:	88b9      	ldrh	r1, [r7, #4]
 8004e3c:	88f8      	ldrh	r0, [r7, #6]
 8004e3e:	f7ff fe67 	bl	8004b10 <LCD_SetWindows>
	for(i=0;i<height;i++)
 8004e42:	2300      	movs	r3, #0
 8004e44:	81fb      	strh	r3, [r7, #14]
 8004e46:	e010      	b.n	8004e6a <LCD_Fill+0x6a>
	{
		for(j=0;j<width;j++)
 8004e48:	2300      	movs	r3, #0
 8004e4a:	81bb      	strh	r3, [r7, #12]
 8004e4c:	e006      	b.n	8004e5c <LCD_Fill+0x5c>
		Lcd_WriteData_16Bit(color);	//写入数据
 8004e4e:	8c3b      	ldrh	r3, [r7, #32]
 8004e50:	4618      	mov	r0, r3
 8004e52:	f7ff fca5 	bl	80047a0 <Lcd_WriteData_16Bit>
		for(j=0;j<width;j++)
 8004e56:	89bb      	ldrh	r3, [r7, #12]
 8004e58:	3301      	adds	r3, #1
 8004e5a:	81bb      	strh	r3, [r7, #12]
 8004e5c:	89ba      	ldrh	r2, [r7, #12]
 8004e5e:	897b      	ldrh	r3, [r7, #10]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d3f4      	bcc.n	8004e4e <LCD_Fill+0x4e>
	for(i=0;i<height;i++)
 8004e64:	89fb      	ldrh	r3, [r7, #14]
 8004e66:	3301      	adds	r3, #1
 8004e68:	81fb      	strh	r3, [r7, #14]
 8004e6a:	89fa      	ldrh	r2, [r7, #14]
 8004e6c:	893b      	ldrh	r3, [r7, #8]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d3ea      	bcc.n	8004e48 <LCD_Fill+0x48>
	}
	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);//恢复窗口设置为全屏
 8004e72:	4b08      	ldr	r3, [pc, #32]	; (8004e94 <LCD_Fill+0x94>)
 8004e74:	881b      	ldrh	r3, [r3, #0]
 8004e76:	3b01      	subs	r3, #1
 8004e78:	b29a      	uxth	r2, r3
 8004e7a:	4b06      	ldr	r3, [pc, #24]	; (8004e94 <LCD_Fill+0x94>)
 8004e7c:	885b      	ldrh	r3, [r3, #2]
 8004e7e:	3b01      	subs	r3, #1
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	2100      	movs	r1, #0
 8004e84:	2000      	movs	r0, #0
 8004e86:	f7ff fe43 	bl	8004b10 <LCD_SetWindows>
}
 8004e8a:	bf00      	nop
 8004e8c:	3714      	adds	r7, #20
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd90      	pop	{r4, r7, pc}
 8004e92:	bf00      	nop
 8004e94:	20001df0 	.word	0x20001df0

08004e98 <LCD_ShowChar>:
                sizey font siez-8 or 16 or 32
                mode:  0-nonoverlay  1-Overlay
      retun：  n/a
******************************************************************************/
void LCD_ShowChar(u16 x,u16 y,u8 num,u16 fc,u16 bc,u8 sizey,u8 mode)
{
 8004e98:	b590      	push	{r4, r7, lr}
 8004e9a:	b085      	sub	sp, #20
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	4604      	mov	r4, r0
 8004ea0:	4608      	mov	r0, r1
 8004ea2:	4611      	mov	r1, r2
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	4623      	mov	r3, r4
 8004ea8:	80fb      	strh	r3, [r7, #6]
 8004eaa:	4603      	mov	r3, r0
 8004eac:	80bb      	strh	r3, [r7, #4]
 8004eae:	460b      	mov	r3, r1
 8004eb0:	70fb      	strb	r3, [r7, #3]
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	803b      	strh	r3, [r7, #0]
    u8 temp;
    u8 pos,t;
	u16 colortemp=POINT_COLOR;
 8004eb6:	4b5f      	ldr	r3, [pc, #380]	; (8005034 <LCD_ShowChar+0x19c>)
 8004eb8:	881b      	ldrh	r3, [r3, #0]
 8004eba:	817b      	strh	r3, [r7, #10]

	num=num-' ';//得到偏移后的值
 8004ebc:	78fb      	ldrb	r3, [r7, #3]
 8004ebe:	3b20      	subs	r3, #32
 8004ec0:	70fb      	strb	r3, [r7, #3]
	LCD_SetWindows(x,y,x+sizey/2-1,y+sizey-1);//设置单个文字显示窗口
 8004ec2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004ec6:	085b      	lsrs	r3, r3, #1
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	b29a      	uxth	r2, r3
 8004ecc:	88fb      	ldrh	r3, [r7, #6]
 8004ece:	4413      	add	r3, r2
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	b29c      	uxth	r4, r3
 8004ed6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004eda:	b29a      	uxth	r2, r3
 8004edc:	88bb      	ldrh	r3, [r7, #4]
 8004ede:	4413      	add	r3, r2
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	88b9      	ldrh	r1, [r7, #4]
 8004ee8:	88f8      	ldrh	r0, [r7, #6]
 8004eea:	4622      	mov	r2, r4
 8004eec:	f7ff fe10 	bl	8004b10 <LCD_SetWindows>
	if(!mode) //非叠加方式
 8004ef0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d141      	bne.n	8004f7c <LCD_ShowChar+0xe4>
	{
		for(pos=0;pos<sizey;pos++)
 8004ef8:	2300      	movs	r3, #0
 8004efa:	73bb      	strb	r3, [r7, #14]
 8004efc:	e038      	b.n	8004f70 <LCD_ShowChar+0xd8>
		{
			if(sizey==12)temp=asc2_1206[num][pos];//调用1206字体 //asc2_1206
 8004efe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004f02:	2b0c      	cmp	r3, #12
 8004f04:	d10b      	bne.n	8004f1e <LCD_ShowChar+0x86>
 8004f06:	78fa      	ldrb	r2, [r7, #3]
 8004f08:	7bb9      	ldrb	r1, [r7, #14]
 8004f0a:	484b      	ldr	r0, [pc, #300]	; (8005038 <LCD_ShowChar+0x1a0>)
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	005b      	lsls	r3, r3, #1
 8004f10:	4413      	add	r3, r2
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	4403      	add	r3, r0
 8004f16:	440b      	add	r3, r1
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	73fb      	strb	r3, [r7, #15]
 8004f1c:	e007      	b.n	8004f2e <LCD_ShowChar+0x96>
			else temp=asc2_1608[num][pos];		 //调用1608字体 //asc2_1608
 8004f1e:	78fa      	ldrb	r2, [r7, #3]
 8004f20:	7bbb      	ldrb	r3, [r7, #14]
 8004f22:	4946      	ldr	r1, [pc, #280]	; (800503c <LCD_ShowChar+0x1a4>)
 8004f24:	0112      	lsls	r2, r2, #4
 8004f26:	440a      	add	r2, r1
 8004f28:	4413      	add	r3, r2
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	73fb      	strb	r3, [r7, #15]
			for(t=0;t<sizey/2;t++)
 8004f2e:	2300      	movs	r3, #0
 8004f30:	737b      	strb	r3, [r7, #13]
 8004f32:	e013      	b.n	8004f5c <LCD_ShowChar+0xc4>
		    {
		        if(temp&0x01)Lcd_WriteData_16Bit(fc);
 8004f34:	7bfb      	ldrb	r3, [r7, #15]
 8004f36:	f003 0301 	and.w	r3, r3, #1
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d004      	beq.n	8004f48 <LCD_ShowChar+0xb0>
 8004f3e:	883b      	ldrh	r3, [r7, #0]
 8004f40:	4618      	mov	r0, r3
 8004f42:	f7ff fc2d 	bl	80047a0 <Lcd_WriteData_16Bit>
 8004f46:	e003      	b.n	8004f50 <LCD_ShowChar+0xb8>
				else Lcd_WriteData_16Bit(bc);
 8004f48:	8c3b      	ldrh	r3, [r7, #32]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f7ff fc28 	bl	80047a0 <Lcd_WriteData_16Bit>
				temp>>=1;
 8004f50:	7bfb      	ldrb	r3, [r7, #15]
 8004f52:	085b      	lsrs	r3, r3, #1
 8004f54:	73fb      	strb	r3, [r7, #15]
			for(t=0;t<sizey/2;t++)
 8004f56:	7b7b      	ldrb	r3, [r7, #13]
 8004f58:	3301      	adds	r3, #1
 8004f5a:	737b      	strb	r3, [r7, #13]
 8004f5c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004f60:	085b      	lsrs	r3, r3, #1
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	7b7a      	ldrb	r2, [r7, #13]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d3e4      	bcc.n	8004f34 <LCD_ShowChar+0x9c>
		for(pos=0;pos<sizey;pos++)
 8004f6a:	7bbb      	ldrb	r3, [r7, #14]
 8004f6c:	3301      	adds	r3, #1
 8004f6e:	73bb      	strb	r3, [r7, #14]
 8004f70:	7bba      	ldrb	r2, [r7, #14]
 8004f72:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d3c1      	bcc.n	8004efe <LCD_ShowChar+0x66>
 8004f7a:	e048      	b.n	800500e <LCD_ShowChar+0x176>
		    }

		}
	}else//叠加方式
	{
		for(pos=0;pos<sizey;pos++)
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	73bb      	strb	r3, [r7, #14]
 8004f80:	e040      	b.n	8005004 <LCD_ShowChar+0x16c>
		{
			if(sizey==12)temp=asc2_1206[num][pos];//调用1206字体
 8004f82:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004f86:	2b0c      	cmp	r3, #12
 8004f88:	d10b      	bne.n	8004fa2 <LCD_ShowChar+0x10a>
 8004f8a:	78fa      	ldrb	r2, [r7, #3]
 8004f8c:	7bb9      	ldrb	r1, [r7, #14]
 8004f8e:	482a      	ldr	r0, [pc, #168]	; (8005038 <LCD_ShowChar+0x1a0>)
 8004f90:	4613      	mov	r3, r2
 8004f92:	005b      	lsls	r3, r3, #1
 8004f94:	4413      	add	r3, r2
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	4403      	add	r3, r0
 8004f9a:	440b      	add	r3, r1
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	73fb      	strb	r3, [r7, #15]
 8004fa0:	e007      	b.n	8004fb2 <LCD_ShowChar+0x11a>
			else temp=asc2_1608[num][pos];		 //调用1608字体
 8004fa2:	78fa      	ldrb	r2, [r7, #3]
 8004fa4:	7bbb      	ldrb	r3, [r7, #14]
 8004fa6:	4925      	ldr	r1, [pc, #148]	; (800503c <LCD_ShowChar+0x1a4>)
 8004fa8:	0112      	lsls	r2, r2, #4
 8004faa:	440a      	add	r2, r1
 8004fac:	4413      	add	r3, r2
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	73fb      	strb	r3, [r7, #15]
			for(t=0;t<sizey/2;t++)
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	737b      	strb	r3, [r7, #13]
 8004fb6:	e01b      	b.n	8004ff0 <LCD_ShowChar+0x158>
		    {
				POINT_COLOR=fc;
 8004fb8:	4a1e      	ldr	r2, [pc, #120]	; (8005034 <LCD_ShowChar+0x19c>)
 8004fba:	883b      	ldrh	r3, [r7, #0]
 8004fbc:	8013      	strh	r3, [r2, #0]
		        if(temp&0x01)LCD_DrawPoint(x+t,y+pos,fc);//画一个点
 8004fbe:	7bfb      	ldrb	r3, [r7, #15]
 8004fc0:	f003 0301 	and.w	r3, r3, #1
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d00d      	beq.n	8004fe4 <LCD_ShowChar+0x14c>
 8004fc8:	7b7b      	ldrb	r3, [r7, #13]
 8004fca:	b29a      	uxth	r2, r3
 8004fcc:	88fb      	ldrh	r3, [r7, #6]
 8004fce:	4413      	add	r3, r2
 8004fd0:	b298      	uxth	r0, r3
 8004fd2:	7bbb      	ldrb	r3, [r7, #14]
 8004fd4:	b29a      	uxth	r2, r3
 8004fd6:	88bb      	ldrh	r3, [r7, #4]
 8004fd8:	4413      	add	r3, r2
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	883a      	ldrh	r2, [r7, #0]
 8004fde:	4619      	mov	r1, r3
 8004fe0:	f7ff fc04 	bl	80047ec <LCD_DrawPoint>
		        temp>>=1;
 8004fe4:	7bfb      	ldrb	r3, [r7, #15]
 8004fe6:	085b      	lsrs	r3, r3, #1
 8004fe8:	73fb      	strb	r3, [r7, #15]
			for(t=0;t<sizey/2;t++)
 8004fea:	7b7b      	ldrb	r3, [r7, #13]
 8004fec:	3301      	adds	r3, #1
 8004fee:	737b      	strb	r3, [r7, #13]
 8004ff0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004ff4:	085b      	lsrs	r3, r3, #1
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	7b7a      	ldrb	r2, [r7, #13]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d3dc      	bcc.n	8004fb8 <LCD_ShowChar+0x120>
		for(pos=0;pos<sizey;pos++)
 8004ffe:	7bbb      	ldrb	r3, [r7, #14]
 8005000:	3301      	adds	r3, #1
 8005002:	73bb      	strb	r3, [r7, #14]
 8005004:	7bba      	ldrb	r2, [r7, #14]
 8005006:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800500a:	429a      	cmp	r2, r3
 800500c:	d3b9      	bcc.n	8004f82 <LCD_ShowChar+0xea>
		    }
		}
	}
	POINT_COLOR=colortemp;
 800500e:	4a09      	ldr	r2, [pc, #36]	; (8005034 <LCD_ShowChar+0x19c>)
 8005010:	897b      	ldrh	r3, [r7, #10]
 8005012:	8013      	strh	r3, [r2, #0]
	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);//恢复窗口为全屏
 8005014:	4b0a      	ldr	r3, [pc, #40]	; (8005040 <LCD_ShowChar+0x1a8>)
 8005016:	881b      	ldrh	r3, [r3, #0]
 8005018:	3b01      	subs	r3, #1
 800501a:	b29a      	uxth	r2, r3
 800501c:	4b08      	ldr	r3, [pc, #32]	; (8005040 <LCD_ShowChar+0x1a8>)
 800501e:	885b      	ldrh	r3, [r3, #2]
 8005020:	3b01      	subs	r3, #1
 8005022:	b29b      	uxth	r3, r3
 8005024:	2100      	movs	r1, #0
 8005026:	2000      	movs	r0, #0
 8005028:	f7ff fd72 	bl	8004b10 <LCD_SetWindows>
}
 800502c:	bf00      	nop
 800502e:	3714      	adds	r7, #20
 8005030:	46bd      	mov	sp, r7
 8005032:	bd90      	pop	{r4, r7, pc}
 8005034:	20001990 	.word	0x20001990
 8005038:	0800fad4 	.word	0x0800fad4
 800503c:	0800ff48 	.word	0x0800ff48
 8005040:	20001df0 	.word	0x20001df0

08005044 <LCD_ShowString>:
                sizey font siez-8 or 16 or 32
                mode:  0-nonoverlay  1-Overlay
      retun：  n/a
******************************************************************************/
void LCD_ShowString(u16 x,u16 y,const u8 *p,u16 fc,u16 bc,u8 sizey,u8 mode)
{
 8005044:	b590      	push	{r4, r7, lr}
 8005046:	b089      	sub	sp, #36	; 0x24
 8005048:	af04      	add	r7, sp, #16
 800504a:	60ba      	str	r2, [r7, #8]
 800504c:	461a      	mov	r2, r3
 800504e:	4603      	mov	r3, r0
 8005050:	81fb      	strh	r3, [r7, #14]
 8005052:	460b      	mov	r3, r1
 8005054:	81bb      	strh	r3, [r7, #12]
 8005056:	4613      	mov	r3, r2
 8005058:	80fb      	strh	r3, [r7, #6]
	while((*p<='~')&&(*p>=' '))
 800505a:	e024      	b.n	80050a6 <LCD_ShowString+0x62>
	{
		if(x>(lcddev.width-1)||y>(lcddev.height-1))
 800505c:	4b18      	ldr	r3, [pc, #96]	; (80050c0 <LCD_ShowString+0x7c>)
 800505e:	881b      	ldrh	r3, [r3, #0]
 8005060:	89fa      	ldrh	r2, [r7, #14]
 8005062:	429a      	cmp	r2, r3
 8005064:	d228      	bcs.n	80050b8 <LCD_ShowString+0x74>
 8005066:	4b16      	ldr	r3, [pc, #88]	; (80050c0 <LCD_ShowString+0x7c>)
 8005068:	885b      	ldrh	r3, [r3, #2]
 800506a:	89ba      	ldrh	r2, [r7, #12]
 800506c:	429a      	cmp	r2, r3
 800506e:	d223      	bcs.n	80050b8 <LCD_ShowString+0x74>
		return;
		LCD_ShowChar(x,y,*p,fc,bc,sizey,mode);
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	781a      	ldrb	r2, [r3, #0]
 8005074:	88fc      	ldrh	r4, [r7, #6]
 8005076:	89b9      	ldrh	r1, [r7, #12]
 8005078:	89f8      	ldrh	r0, [r7, #14]
 800507a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800507e:	9302      	str	r3, [sp, #8]
 8005080:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005084:	9301      	str	r3, [sp, #4]
 8005086:	8c3b      	ldrh	r3, [r7, #32]
 8005088:	9300      	str	r3, [sp, #0]
 800508a:	4623      	mov	r3, r4
 800508c:	f7ff ff04 	bl	8004e98 <LCD_ShowChar>
		x+=sizey/2;
 8005090:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005094:	085b      	lsrs	r3, r3, #1
 8005096:	b2db      	uxtb	r3, r3
 8005098:	b29a      	uxth	r2, r3
 800509a:	89fb      	ldrh	r3, [r7, #14]
 800509c:	4413      	add	r3, r2
 800509e:	81fb      	strh	r3, [r7, #14]
		p++;
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	3301      	adds	r3, #1
 80050a4:	60bb      	str	r3, [r7, #8]
	while((*p<='~')&&(*p>=' '))
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	2b7e      	cmp	r3, #126	; 0x7e
 80050ac:	d805      	bhi.n	80050ba <LCD_ShowString+0x76>
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	2b1f      	cmp	r3, #31
 80050b4:	d8d2      	bhi.n	800505c <LCD_ShowString+0x18>
 80050b6:	e000      	b.n	80050ba <LCD_ShowString+0x76>
		return;
 80050b8:	bf00      	nop
	}
}
 80050ba:	3714      	adds	r7, #20
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd90      	pop	{r4, r7, pc}
 80050c0:	20001df0 	.word	0x20001df0

080050c4 <LCD_ShowIntVar>:
               var variable to display
               var1 array to store the string
      return：  n/a
******************************************************************************/
void LCD_ShowIntVar(u16 x,u16 y,int var,u8* var1, u16 fc,u16 bc,u8 sizey)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b088      	sub	sp, #32
 80050c8:	af04      	add	r7, sp, #16
 80050ca:	60ba      	str	r2, [r7, #8]
 80050cc:	607b      	str	r3, [r7, #4]
 80050ce:	4603      	mov	r3, r0
 80050d0:	81fb      	strh	r3, [r7, #14]
 80050d2:	460b      	mov	r3, r1
 80050d4:	81bb      	strh	r3, [r7, #12]
	sprintf(var1, "%d", var);
 80050d6:	68ba      	ldr	r2, [r7, #8]
 80050d8:	490a      	ldr	r1, [pc, #40]	; (8005104 <LCD_ShowIntVar+0x40>)
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f006 fa74 	bl	800b5c8 <siprintf>
	LCD_ShowString(x,y,var1,fc,bc,sizey,1);
 80050e0:	8b3a      	ldrh	r2, [r7, #24]
 80050e2:	89b9      	ldrh	r1, [r7, #12]
 80050e4:	89f8      	ldrh	r0, [r7, #14]
 80050e6:	2301      	movs	r3, #1
 80050e8:	9302      	str	r3, [sp, #8]
 80050ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 80050ee:	9301      	str	r3, [sp, #4]
 80050f0:	8bbb      	ldrh	r3, [r7, #28]
 80050f2:	9300      	str	r3, [sp, #0]
 80050f4:	4613      	mov	r3, r2
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	f7ff ffa4 	bl	8005044 <LCD_ShowString>
}
 80050fc:	bf00      	nop
 80050fe:	3710      	adds	r7, #16
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}
 8005104:	0800f9a8 	.word	0x0800f9a8

08005108 <LCD_ShowFloatVar>:
               var variable to display
               var1 array to store the string
      n/a：  n/a
******************************************************************************/
void LCD_ShowFloatVar(u16 x,u16 y,float var,u8* var1, u16 fc,u16 bc,u8 sizey)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b088      	sub	sp, #32
 800510c:	af04      	add	r7, sp, #16
 800510e:	ed87 0a02 	vstr	s0, [r7, #8]
 8005112:	607a      	str	r2, [r7, #4]
 8005114:	461a      	mov	r2, r3
 8005116:	4603      	mov	r3, r0
 8005118:	81fb      	strh	r3, [r7, #14]
 800511a:	460b      	mov	r3, r1
 800511c:	81bb      	strh	r3, [r7, #12]
 800511e:	4613      	mov	r3, r2
 8005120:	807b      	strh	r3, [r7, #2]
	sprintf(var1, "%.2f", var);
 8005122:	68b8      	ldr	r0, [r7, #8]
 8005124:	f7fb fa18 	bl	8000558 <__aeabi_f2d>
 8005128:	4602      	mov	r2, r0
 800512a:	460b      	mov	r3, r1
 800512c:	490a      	ldr	r1, [pc, #40]	; (8005158 <LCD_ShowFloatVar+0x50>)
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f006 fa4a 	bl	800b5c8 <siprintf>
	LCD_ShowString(x,y,var1,fc,bc,sizey,1);
 8005134:	887a      	ldrh	r2, [r7, #2]
 8005136:	89b9      	ldrh	r1, [r7, #12]
 8005138:	89f8      	ldrh	r0, [r7, #14]
 800513a:	2301      	movs	r3, #1
 800513c:	9302      	str	r3, [sp, #8]
 800513e:	7f3b      	ldrb	r3, [r7, #28]
 8005140:	9301      	str	r3, [sp, #4]
 8005142:	8b3b      	ldrh	r3, [r7, #24]
 8005144:	9300      	str	r3, [sp, #0]
 8005146:	4613      	mov	r3, r2
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	f7ff ff7b 	bl	8005044 <LCD_ShowString>
}
 800514e:	bf00      	nop
 8005150:	3710      	adds	r7, #16
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	0800f9ac 	.word	0x0800f9ac

0800515c <LCD_ShowChinese>:
                sizey font sieze from 16 24 32
                mode:  0-nonoverlay  1-Overlay
      return：  n/a
******************************************************************************/
void LCD_ShowChinese(u16 x,u16 y,u8 *s,u16 fc,u16 bc,u8 sizey,u8 mode)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b088      	sub	sp, #32
 8005160:	af04      	add	r7, sp, #16
 8005162:	60ba      	str	r2, [r7, #8]
 8005164:	461a      	mov	r2, r3
 8005166:	4603      	mov	r3, r0
 8005168:	81fb      	strh	r3, [r7, #14]
 800516a:	460b      	mov	r3, r1
 800516c:	81bb      	strh	r3, [r7, #12]
 800516e:	4613      	mov	r3, r2
 8005170:	80fb      	strh	r3, [r7, #6]
	while(*s!=0)
 8005172:	e03c      	b.n	80051ee <LCD_ShowChinese+0x92>
	{
		if(sizey==16) LCD_ShowChinese16x16(x,y,s,fc,bc,sizey,mode);
 8005174:	7f3b      	ldrb	r3, [r7, #28]
 8005176:	2b10      	cmp	r3, #16
 8005178:	d10e      	bne.n	8005198 <LCD_ShowChinese+0x3c>
 800517a:	88fa      	ldrh	r2, [r7, #6]
 800517c:	89b9      	ldrh	r1, [r7, #12]
 800517e:	89f8      	ldrh	r0, [r7, #14]
 8005180:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005184:	9302      	str	r3, [sp, #8]
 8005186:	7f3b      	ldrb	r3, [r7, #28]
 8005188:	9301      	str	r3, [sp, #4]
 800518a:	8b3b      	ldrh	r3, [r7, #24]
 800518c:	9300      	str	r3, [sp, #0]
 800518e:	4613      	mov	r3, r2
 8005190:	68ba      	ldr	r2, [r7, #8]
 8005192:	f000 f835 	bl	8005200 <LCD_ShowChinese16x16>
 8005196:	e022      	b.n	80051de <LCD_ShowChinese+0x82>
		else if(sizey==24) LCD_ShowChinese24x24(x,y,s,fc,bc,sizey,mode);
 8005198:	7f3b      	ldrb	r3, [r7, #28]
 800519a:	2b18      	cmp	r3, #24
 800519c:	d10e      	bne.n	80051bc <LCD_ShowChinese+0x60>
 800519e:	88fa      	ldrh	r2, [r7, #6]
 80051a0:	89b9      	ldrh	r1, [r7, #12]
 80051a2:	89f8      	ldrh	r0, [r7, #14]
 80051a4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80051a8:	9302      	str	r3, [sp, #8]
 80051aa:	7f3b      	ldrb	r3, [r7, #28]
 80051ac:	9301      	str	r3, [sp, #4]
 80051ae:	8b3b      	ldrh	r3, [r7, #24]
 80051b0:	9300      	str	r3, [sp, #0]
 80051b2:	4613      	mov	r3, r2
 80051b4:	68ba      	ldr	r2, [r7, #8]
 80051b6:	f000 f8df 	bl	8005378 <LCD_ShowChinese24x24>
 80051ba:	e010      	b.n	80051de <LCD_ShowChinese+0x82>
		else if(sizey==32) LCD_ShowChinese32x32(x,y,s,fc,bc,sizey,mode);
 80051bc:	7f3b      	ldrb	r3, [r7, #28]
 80051be:	2b20      	cmp	r3, #32
 80051c0:	d11a      	bne.n	80051f8 <LCD_ShowChinese+0x9c>
 80051c2:	88fa      	ldrh	r2, [r7, #6]
 80051c4:	89b9      	ldrh	r1, [r7, #12]
 80051c6:	89f8      	ldrh	r0, [r7, #14]
 80051c8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80051cc:	9302      	str	r3, [sp, #8]
 80051ce:	7f3b      	ldrb	r3, [r7, #28]
 80051d0:	9301      	str	r3, [sp, #4]
 80051d2:	8b3b      	ldrh	r3, [r7, #24]
 80051d4:	9300      	str	r3, [sp, #0]
 80051d6:	4613      	mov	r3, r2
 80051d8:	68ba      	ldr	r2, [r7, #8]
 80051da:	f000 f985 	bl	80054e8 <LCD_ShowChinese32x32>
		else return;
		s+=2;
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	3302      	adds	r3, #2
 80051e2:	60bb      	str	r3, [r7, #8]
		x+=sizey;
 80051e4:	7f3b      	ldrb	r3, [r7, #28]
 80051e6:	b29a      	uxth	r2, r3
 80051e8:	89fb      	ldrh	r3, [r7, #14]
 80051ea:	4413      	add	r3, r2
 80051ec:	81fb      	strh	r3, [r7, #14]
	while(*s!=0)
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d1be      	bne.n	8005174 <LCD_ShowChinese+0x18>
 80051f6:	e000      	b.n	80051fa <LCD_ShowChinese+0x9e>
		else return;
 80051f8:	bf00      	nop
	}
}
 80051fa:	3710      	adds	r7, #16
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <LCD_ShowChinese16x16>:
                sizey font sieze from 16 24 32
                mode:  0-nonoverlay  1-Overlay
      return：  n/a
******************************************************************************/
void LCD_ShowChinese16x16(u16 x,u16 y,u8 *s,u16 fc,u16 bc,u8 sizey,u8 mode)
{
 8005200:	b590      	push	{r4, r7, lr}
 8005202:	b089      	sub	sp, #36	; 0x24
 8005204:	af00      	add	r7, sp, #0
 8005206:	60ba      	str	r2, [r7, #8]
 8005208:	461a      	mov	r2, r3
 800520a:	4603      	mov	r3, r0
 800520c:	81fb      	strh	r3, [r7, #14]
 800520e:	460b      	mov	r3, r1
 8005210:	81bb      	strh	r3, [r7, #12]
 8005212:	4613      	mov	r3, r2
 8005214:	80fb      	strh	r3, [r7, #6]
	u8 i,j;
	u16 k;
	u16 HZnum;//size
	u16 TypefaceNum;
	u16 x0=x;
 8005216:	89fb      	ldrh	r3, [r7, #14]
 8005218:	837b      	strh	r3, [r7, #26]
	TypefaceNum=sizey/8*sizey;
 800521a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800521e:	08db      	lsrs	r3, r3, #3
 8005220:	b2db      	uxtb	r3, r3
 8005222:	b29a      	uxth	r2, r3
 8005224:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8005228:	b29b      	uxth	r3, r3
 800522a:	fb12 f303 	smulbb	r3, r2, r3
 800522e:	833b      	strh	r3, [r7, #24]

	HZnum=sizeof(tfont16)/sizeof(typFNT_GB16);
 8005230:	2311      	movs	r3, #17
 8005232:	82fb      	strh	r3, [r7, #22]
	for(k=0;k<HZnum;k++)
 8005234:	2300      	movs	r3, #0
 8005236:	83bb      	strh	r3, [r7, #28]
 8005238:	e092      	b.n	8005360 <LCD_ShowChinese16x16+0x160>
	{
		if ((tfont16[k].Index[0]==*(s))&&(tfont16[k].Index[1]==*(s+1)))
 800523a:	8bba      	ldrh	r2, [r7, #28]
 800523c:	494d      	ldr	r1, [pc, #308]	; (8005374 <LCD_ShowChinese16x16+0x174>)
 800523e:	4613      	mov	r3, r2
 8005240:	011b      	lsls	r3, r3, #4
 8005242:	4413      	add	r3, r2
 8005244:	005b      	lsls	r3, r3, #1
 8005246:	440b      	add	r3, r1
 8005248:	781a      	ldrb	r2, [r3, #0]
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	429a      	cmp	r2, r3
 8005250:	f040 8083 	bne.w	800535a <LCD_ShowChinese16x16+0x15a>
 8005254:	8bba      	ldrh	r2, [r7, #28]
 8005256:	4947      	ldr	r1, [pc, #284]	; (8005374 <LCD_ShowChinese16x16+0x174>)
 8005258:	4613      	mov	r3, r2
 800525a:	011b      	lsls	r3, r3, #4
 800525c:	4413      	add	r3, r2
 800525e:	005b      	lsls	r3, r3, #1
 8005260:	440b      	add	r3, r1
 8005262:	3301      	adds	r3, #1
 8005264:	781a      	ldrb	r2, [r3, #0]
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	3301      	adds	r3, #1
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	429a      	cmp	r2, r3
 800526e:	d174      	bne.n	800535a <LCD_ShowChinese16x16+0x15a>
		{
			LCD_SetWindows(x,y,x+sizey-1,y+sizey-1);
 8005270:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8005274:	b29a      	uxth	r2, r3
 8005276:	89fb      	ldrh	r3, [r7, #14]
 8005278:	4413      	add	r3, r2
 800527a:	b29b      	uxth	r3, r3
 800527c:	3b01      	subs	r3, #1
 800527e:	b29c      	uxth	r4, r3
 8005280:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8005284:	b29a      	uxth	r2, r3
 8005286:	89bb      	ldrh	r3, [r7, #12]
 8005288:	4413      	add	r3, r2
 800528a:	b29b      	uxth	r3, r3
 800528c:	3b01      	subs	r3, #1
 800528e:	b29b      	uxth	r3, r3
 8005290:	89b9      	ldrh	r1, [r7, #12]
 8005292:	89f8      	ldrh	r0, [r7, #14]
 8005294:	4622      	mov	r2, r4
 8005296:	f7ff fc3b 	bl	8004b10 <LCD_SetWindows>
			for(i=0;i<TypefaceNum;i++)
 800529a:	2300      	movs	r3, #0
 800529c:	77fb      	strb	r3, [r7, #31]
 800529e:	e057      	b.n	8005350 <LCD_ShowChinese16x16+0x150>
			{
				for(j=0;j<8;j++)
 80052a0:	2300      	movs	r3, #0
 80052a2:	77bb      	strb	r3, [r7, #30]
 80052a4:	e04e      	b.n	8005344 <LCD_ShowChinese16x16+0x144>
				{
					if(!mode)//nonoverlay
 80052a6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d11e      	bne.n	80052ec <LCD_ShowChinese16x16+0xec>
					{
						if(tfont16[k].Msk[i]&(0x01<<j))LCD_WR_DATA(fc);
 80052ae:	8bba      	ldrh	r2, [r7, #28]
 80052b0:	7ff9      	ldrb	r1, [r7, #31]
 80052b2:	4830      	ldr	r0, [pc, #192]	; (8005374 <LCD_ShowChinese16x16+0x174>)
 80052b4:	4613      	mov	r3, r2
 80052b6:	011b      	lsls	r3, r3, #4
 80052b8:	4413      	add	r3, r2
 80052ba:	005b      	lsls	r3, r3, #1
 80052bc:	4403      	add	r3, r0
 80052be:	440b      	add	r3, r1
 80052c0:	3302      	adds	r3, #2
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	461a      	mov	r2, r3
 80052c6:	7fbb      	ldrb	r3, [r7, #30]
 80052c8:	fa42 f303 	asr.w	r3, r2, r3
 80052cc:	f003 0301 	and.w	r3, r3, #1
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d005      	beq.n	80052e0 <LCD_ShowChinese16x16+0xe0>
 80052d4:	88fb      	ldrh	r3, [r7, #6]
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	4618      	mov	r0, r3
 80052da:	f7ff fa21 	bl	8004720 <LCD_WR_DATA>
 80052de:	e02e      	b.n	800533e <LCD_ShowChinese16x16+0x13e>
						else LCD_WR_DATA(bc);
 80052e0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	4618      	mov	r0, r3
 80052e6:	f7ff fa1b 	bl	8004720 <LCD_WR_DATA>
 80052ea:	e028      	b.n	800533e <LCD_ShowChinese16x16+0x13e>
					}
					else//overaly
					{
						if(tfont16[k].Msk[i]&(0x01<<j))	LCD_DrawPoint(x,y,fc);
 80052ec:	8bba      	ldrh	r2, [r7, #28]
 80052ee:	7ff9      	ldrb	r1, [r7, #31]
 80052f0:	4820      	ldr	r0, [pc, #128]	; (8005374 <LCD_ShowChinese16x16+0x174>)
 80052f2:	4613      	mov	r3, r2
 80052f4:	011b      	lsls	r3, r3, #4
 80052f6:	4413      	add	r3, r2
 80052f8:	005b      	lsls	r3, r3, #1
 80052fa:	4403      	add	r3, r0
 80052fc:	440b      	add	r3, r1
 80052fe:	3302      	adds	r3, #2
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	461a      	mov	r2, r3
 8005304:	7fbb      	ldrb	r3, [r7, #30]
 8005306:	fa42 f303 	asr.w	r3, r2, r3
 800530a:	f003 0301 	and.w	r3, r3, #1
 800530e:	2b00      	cmp	r3, #0
 8005310:	d005      	beq.n	800531e <LCD_ShowChinese16x16+0x11e>
 8005312:	88fa      	ldrh	r2, [r7, #6]
 8005314:	89b9      	ldrh	r1, [r7, #12]
 8005316:	89fb      	ldrh	r3, [r7, #14]
 8005318:	4618      	mov	r0, r3
 800531a:	f7ff fa67 	bl	80047ec <LCD_DrawPoint>
						x++;
 800531e:	89fb      	ldrh	r3, [r7, #14]
 8005320:	3301      	adds	r3, #1
 8005322:	81fb      	strh	r3, [r7, #14]
						if((x-x0)==sizey)
 8005324:	89fa      	ldrh	r2, [r7, #14]
 8005326:	8b7b      	ldrh	r3, [r7, #26]
 8005328:	1ad2      	subs	r2, r2, r3
 800532a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800532e:	429a      	cmp	r2, r3
 8005330:	d105      	bne.n	800533e <LCD_ShowChinese16x16+0x13e>
						{
							x=x0;
 8005332:	8b7b      	ldrh	r3, [r7, #26]
 8005334:	81fb      	strh	r3, [r7, #14]
							y++;
 8005336:	89bb      	ldrh	r3, [r7, #12]
 8005338:	3301      	adds	r3, #1
 800533a:	81bb      	strh	r3, [r7, #12]
							break;
 800533c:	e005      	b.n	800534a <LCD_ShowChinese16x16+0x14a>
				for(j=0;j<8;j++)
 800533e:	7fbb      	ldrb	r3, [r7, #30]
 8005340:	3301      	adds	r3, #1
 8005342:	77bb      	strb	r3, [r7, #30]
 8005344:	7fbb      	ldrb	r3, [r7, #30]
 8005346:	2b07      	cmp	r3, #7
 8005348:	d9ad      	bls.n	80052a6 <LCD_ShowChinese16x16+0xa6>
			for(i=0;i<TypefaceNum;i++)
 800534a:	7ffb      	ldrb	r3, [r7, #31]
 800534c:	3301      	adds	r3, #1
 800534e:	77fb      	strb	r3, [r7, #31]
 8005350:	7ffb      	ldrb	r3, [r7, #31]
 8005352:	b29b      	uxth	r3, r3
 8005354:	8b3a      	ldrh	r2, [r7, #24]
 8005356:	429a      	cmp	r2, r3
 8005358:	d8a2      	bhi.n	80052a0 <LCD_ShowChinese16x16+0xa0>
	for(k=0;k<HZnum;k++)
 800535a:	8bbb      	ldrh	r3, [r7, #28]
 800535c:	3301      	adds	r3, #1
 800535e:	83bb      	strh	r3, [r7, #28]
 8005360:	8bba      	ldrh	r2, [r7, #28]
 8005362:	8afb      	ldrh	r3, [r7, #22]
 8005364:	429a      	cmp	r2, r3
 8005366:	f4ff af68 	bcc.w	800523a <LCD_ShowChinese16x16+0x3a>
				}
			}
		}
		continue;  //quit after find the correct charater
	}
}
 800536a:	bf00      	nop
 800536c:	bf00      	nop
 800536e:	3724      	adds	r7, #36	; 0x24
 8005370:	46bd      	mov	sp, r7
 8005372:	bd90      	pop	{r4, r7, pc}
 8005374:	08010538 	.word	0x08010538

08005378 <LCD_ShowChinese24x24>:
                sizey font sieze from 16 24 32
                mode:  0-nonoverlay  1-Overlay
      return：  n/a
******************************************************************************/
void LCD_ShowChinese24x24(u16 x,u16 y,u8 *s,u16 fc,u16 bc,u8 sizey,u8 mode)
{
 8005378:	b590      	push	{r4, r7, lr}
 800537a:	b089      	sub	sp, #36	; 0x24
 800537c:	af00      	add	r7, sp, #0
 800537e:	60ba      	str	r2, [r7, #8]
 8005380:	461a      	mov	r2, r3
 8005382:	4603      	mov	r3, r0
 8005384:	81fb      	strh	r3, [r7, #14]
 8005386:	460b      	mov	r3, r1
 8005388:	81bb      	strh	r3, [r7, #12]
 800538a:	4613      	mov	r3, r2
 800538c:	80fb      	strh	r3, [r7, #6]
	u8 i,j;
	u16 k;
	u16 HZnum;
	u16 TypefaceNum;
	u16 x0=x;
 800538e:	89fb      	ldrh	r3, [r7, #14]
 8005390:	837b      	strh	r3, [r7, #26]
	TypefaceNum=sizey/8*sizey;
 8005392:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8005396:	08db      	lsrs	r3, r3, #3
 8005398:	b2db      	uxtb	r3, r3
 800539a:	b29a      	uxth	r2, r3
 800539c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	fb12 f303 	smulbb	r3, r2, r3
 80053a6:	833b      	strh	r3, [r7, #24]
	HZnum=sizeof(tfont24)/sizeof(typFNT_GB24);
 80053a8:	2332      	movs	r3, #50	; 0x32
 80053aa:	82fb      	strh	r3, [r7, #22]
	for(k=0;k<HZnum;k++)
 80053ac:	2300      	movs	r3, #0
 80053ae:	83bb      	strh	r3, [r7, #28]
 80053b0:	e08d      	b.n	80054ce <LCD_ShowChinese24x24+0x156>
	{
		if ((tfont24[k].Index[0]==*(s))&&(tfont24[k].Index[1]==*(s+1)))
 80053b2:	8bbb      	ldrh	r3, [r7, #28]
 80053b4:	4a4b      	ldr	r2, [pc, #300]	; (80054e4 <LCD_ShowChinese24x24+0x16c>)
 80053b6:	214a      	movs	r1, #74	; 0x4a
 80053b8:	fb01 f303 	mul.w	r3, r1, r3
 80053bc:	4413      	add	r3, r2
 80053be:	781a      	ldrb	r2, [r3, #0]
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d17f      	bne.n	80054c8 <LCD_ShowChinese24x24+0x150>
 80053c8:	8bbb      	ldrh	r3, [r7, #28]
 80053ca:	4a46      	ldr	r2, [pc, #280]	; (80054e4 <LCD_ShowChinese24x24+0x16c>)
 80053cc:	214a      	movs	r1, #74	; 0x4a
 80053ce:	fb01 f303 	mul.w	r3, r1, r3
 80053d2:	4413      	add	r3, r2
 80053d4:	3301      	adds	r3, #1
 80053d6:	781a      	ldrb	r2, [r3, #0]
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	3301      	adds	r3, #1
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	429a      	cmp	r2, r3
 80053e0:	d172      	bne.n	80054c8 <LCD_ShowChinese24x24+0x150>
		{
			LCD_SetWindows(x,y,x+sizey-1,y+sizey-1);
 80053e2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80053e6:	b29a      	uxth	r2, r3
 80053e8:	89fb      	ldrh	r3, [r7, #14]
 80053ea:	4413      	add	r3, r2
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	3b01      	subs	r3, #1
 80053f0:	b29c      	uxth	r4, r3
 80053f2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	89bb      	ldrh	r3, [r7, #12]
 80053fa:	4413      	add	r3, r2
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	3b01      	subs	r3, #1
 8005400:	b29b      	uxth	r3, r3
 8005402:	89b9      	ldrh	r1, [r7, #12]
 8005404:	89f8      	ldrh	r0, [r7, #14]
 8005406:	4622      	mov	r2, r4
 8005408:	f7ff fb82 	bl	8004b10 <LCD_SetWindows>
			for(i=0;i<TypefaceNum;i++)
 800540c:	2300      	movs	r3, #0
 800540e:	77fb      	strb	r3, [r7, #31]
 8005410:	e055      	b.n	80054be <LCD_ShowChinese24x24+0x146>
			{
				for(j=0;j<8;j++)
 8005412:	2300      	movs	r3, #0
 8005414:	77bb      	strb	r3, [r7, #30]
 8005416:	e04c      	b.n	80054b2 <LCD_ShowChinese24x24+0x13a>
				{
					if(!mode)
 8005418:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800541c:	2b00      	cmp	r3, #0
 800541e:	d11d      	bne.n	800545c <LCD_ShowChinese24x24+0xe4>
					{
						if(tfont24[k].Msk[i]&(0x01<<j))LCD_WR_DATA(fc);
 8005420:	8bba      	ldrh	r2, [r7, #28]
 8005422:	7ffb      	ldrb	r3, [r7, #31]
 8005424:	492f      	ldr	r1, [pc, #188]	; (80054e4 <LCD_ShowChinese24x24+0x16c>)
 8005426:	204a      	movs	r0, #74	; 0x4a
 8005428:	fb00 f202 	mul.w	r2, r0, r2
 800542c:	440a      	add	r2, r1
 800542e:	4413      	add	r3, r2
 8005430:	3302      	adds	r3, #2
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	461a      	mov	r2, r3
 8005436:	7fbb      	ldrb	r3, [r7, #30]
 8005438:	fa42 f303 	asr.w	r3, r2, r3
 800543c:	f003 0301 	and.w	r3, r3, #1
 8005440:	2b00      	cmp	r3, #0
 8005442:	d005      	beq.n	8005450 <LCD_ShowChinese24x24+0xd8>
 8005444:	88fb      	ldrh	r3, [r7, #6]
 8005446:	b2db      	uxtb	r3, r3
 8005448:	4618      	mov	r0, r3
 800544a:	f7ff f969 	bl	8004720 <LCD_WR_DATA>
 800544e:	e02d      	b.n	80054ac <LCD_ShowChinese24x24+0x134>
						else LCD_WR_DATA(bc);
 8005450:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005452:	b2db      	uxtb	r3, r3
 8005454:	4618      	mov	r0, r3
 8005456:	f7ff f963 	bl	8004720 <LCD_WR_DATA>
 800545a:	e027      	b.n	80054ac <LCD_ShowChinese24x24+0x134>
					}
					else
					{
						if(tfont24[k].Msk[i]&(0x01<<j))	LCD_DrawPoint(x,y,fc);
 800545c:	8bba      	ldrh	r2, [r7, #28]
 800545e:	7ffb      	ldrb	r3, [r7, #31]
 8005460:	4920      	ldr	r1, [pc, #128]	; (80054e4 <LCD_ShowChinese24x24+0x16c>)
 8005462:	204a      	movs	r0, #74	; 0x4a
 8005464:	fb00 f202 	mul.w	r2, r0, r2
 8005468:	440a      	add	r2, r1
 800546a:	4413      	add	r3, r2
 800546c:	3302      	adds	r3, #2
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	461a      	mov	r2, r3
 8005472:	7fbb      	ldrb	r3, [r7, #30]
 8005474:	fa42 f303 	asr.w	r3, r2, r3
 8005478:	f003 0301 	and.w	r3, r3, #1
 800547c:	2b00      	cmp	r3, #0
 800547e:	d005      	beq.n	800548c <LCD_ShowChinese24x24+0x114>
 8005480:	88fa      	ldrh	r2, [r7, #6]
 8005482:	89b9      	ldrh	r1, [r7, #12]
 8005484:	89fb      	ldrh	r3, [r7, #14]
 8005486:	4618      	mov	r0, r3
 8005488:	f7ff f9b0 	bl	80047ec <LCD_DrawPoint>
						x++;
 800548c:	89fb      	ldrh	r3, [r7, #14]
 800548e:	3301      	adds	r3, #1
 8005490:	81fb      	strh	r3, [r7, #14]
						if((x-x0)==sizey)
 8005492:	89fa      	ldrh	r2, [r7, #14]
 8005494:	8b7b      	ldrh	r3, [r7, #26]
 8005496:	1ad2      	subs	r2, r2, r3
 8005498:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800549c:	429a      	cmp	r2, r3
 800549e:	d105      	bne.n	80054ac <LCD_ShowChinese24x24+0x134>
						{
							x=x0;
 80054a0:	8b7b      	ldrh	r3, [r7, #26]
 80054a2:	81fb      	strh	r3, [r7, #14]
							y++;
 80054a4:	89bb      	ldrh	r3, [r7, #12]
 80054a6:	3301      	adds	r3, #1
 80054a8:	81bb      	strh	r3, [r7, #12]
							break;
 80054aa:	e005      	b.n	80054b8 <LCD_ShowChinese24x24+0x140>
				for(j=0;j<8;j++)
 80054ac:	7fbb      	ldrb	r3, [r7, #30]
 80054ae:	3301      	adds	r3, #1
 80054b0:	77bb      	strb	r3, [r7, #30]
 80054b2:	7fbb      	ldrb	r3, [r7, #30]
 80054b4:	2b07      	cmp	r3, #7
 80054b6:	d9af      	bls.n	8005418 <LCD_ShowChinese24x24+0xa0>
			for(i=0;i<TypefaceNum;i++)
 80054b8:	7ffb      	ldrb	r3, [r7, #31]
 80054ba:	3301      	adds	r3, #1
 80054bc:	77fb      	strb	r3, [r7, #31]
 80054be:	7ffb      	ldrb	r3, [r7, #31]
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	8b3a      	ldrh	r2, [r7, #24]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d8a4      	bhi.n	8005412 <LCD_ShowChinese24x24+0x9a>
	for(k=0;k<HZnum;k++)
 80054c8:	8bbb      	ldrh	r3, [r7, #28]
 80054ca:	3301      	adds	r3, #1
 80054cc:	83bb      	strh	r3, [r7, #28]
 80054ce:	8bba      	ldrh	r2, [r7, #28]
 80054d0:	8afb      	ldrh	r3, [r7, #22]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	f4ff af6d 	bcc.w	80053b2 <LCD_ShowChinese24x24+0x3a>
				}
			}
		}
		continue;  //quit after find the correct charater
	}
}
 80054d8:	bf00      	nop
 80054da:	bf00      	nop
 80054dc:	3724      	adds	r7, #36	; 0x24
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd90      	pop	{r4, r7, pc}
 80054e2:	bf00      	nop
 80054e4:	0801077c 	.word	0x0801077c

080054e8 <LCD_ShowChinese32x32>:
                sizey font sieze from 16 24 32
                mode:  0-nonoverlay  1-Overlay
      return：  n/a
******************************************************************************/
void LCD_ShowChinese32x32(u16 x,u16 y,u8 *s,u16 fc,u16 bc,u8 sizey,u8 mode)
{
 80054e8:	b590      	push	{r4, r7, lr}
 80054ea:	b089      	sub	sp, #36	; 0x24
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60ba      	str	r2, [r7, #8]
 80054f0:	461a      	mov	r2, r3
 80054f2:	4603      	mov	r3, r0
 80054f4:	81fb      	strh	r3, [r7, #14]
 80054f6:	460b      	mov	r3, r1
 80054f8:	81bb      	strh	r3, [r7, #12]
 80054fa:	4613      	mov	r3, r2
 80054fc:	80fb      	strh	r3, [r7, #6]
	u8 i,j;
	u16 k;
	u16 HZnum;
	u16 TypefaceNum;
	u16 x0=x;
 80054fe:	89fb      	ldrh	r3, [r7, #14]
 8005500:	837b      	strh	r3, [r7, #26]
	TypefaceNum=sizey/8*sizey;
 8005502:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8005506:	08db      	lsrs	r3, r3, #3
 8005508:	b2db      	uxtb	r3, r3
 800550a:	b29a      	uxth	r2, r3
 800550c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8005510:	b29b      	uxth	r3, r3
 8005512:	fb12 f303 	smulbb	r3, r2, r3
 8005516:	833b      	strh	r3, [r7, #24]
	HZnum=sizeof(tfont32)/sizeof(typFNT_GB32);
 8005518:	230f      	movs	r3, #15
 800551a:	82fb      	strh	r3, [r7, #22]
	for(k=0;k<HZnum;k++)
 800551c:	2300      	movs	r3, #0
 800551e:	83bb      	strh	r3, [r7, #28]
 8005520:	e092      	b.n	8005648 <LCD_ShowChinese32x32+0x160>
	{
		if ((tfont32[k].Index[0]==*(s))&&(tfont32[k].Index[1]==*(s+1)))
 8005522:	8bba      	ldrh	r2, [r7, #28]
 8005524:	494d      	ldr	r1, [pc, #308]	; (800565c <LCD_ShowChinese32x32+0x174>)
 8005526:	4613      	mov	r3, r2
 8005528:	019b      	lsls	r3, r3, #6
 800552a:	4413      	add	r3, r2
 800552c:	005b      	lsls	r3, r3, #1
 800552e:	440b      	add	r3, r1
 8005530:	781a      	ldrb	r2, [r3, #0]
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	429a      	cmp	r2, r3
 8005538:	f040 8083 	bne.w	8005642 <LCD_ShowChinese32x32+0x15a>
 800553c:	8bba      	ldrh	r2, [r7, #28]
 800553e:	4947      	ldr	r1, [pc, #284]	; (800565c <LCD_ShowChinese32x32+0x174>)
 8005540:	4613      	mov	r3, r2
 8005542:	019b      	lsls	r3, r3, #6
 8005544:	4413      	add	r3, r2
 8005546:	005b      	lsls	r3, r3, #1
 8005548:	440b      	add	r3, r1
 800554a:	3301      	adds	r3, #1
 800554c:	781a      	ldrb	r2, [r3, #0]
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	3301      	adds	r3, #1
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	429a      	cmp	r2, r3
 8005556:	d174      	bne.n	8005642 <LCD_ShowChinese32x32+0x15a>
		{
			LCD_SetWindows(x,y,x+sizey-1,y+sizey-1);
 8005558:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800555c:	b29a      	uxth	r2, r3
 800555e:	89fb      	ldrh	r3, [r7, #14]
 8005560:	4413      	add	r3, r2
 8005562:	b29b      	uxth	r3, r3
 8005564:	3b01      	subs	r3, #1
 8005566:	b29c      	uxth	r4, r3
 8005568:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800556c:	b29a      	uxth	r2, r3
 800556e:	89bb      	ldrh	r3, [r7, #12]
 8005570:	4413      	add	r3, r2
 8005572:	b29b      	uxth	r3, r3
 8005574:	3b01      	subs	r3, #1
 8005576:	b29b      	uxth	r3, r3
 8005578:	89b9      	ldrh	r1, [r7, #12]
 800557a:	89f8      	ldrh	r0, [r7, #14]
 800557c:	4622      	mov	r2, r4
 800557e:	f7ff fac7 	bl	8004b10 <LCD_SetWindows>
			for(i=0;i<TypefaceNum;i++)
 8005582:	2300      	movs	r3, #0
 8005584:	77fb      	strb	r3, [r7, #31]
 8005586:	e057      	b.n	8005638 <LCD_ShowChinese32x32+0x150>
			{
				for(j=0;j<8;j++)
 8005588:	2300      	movs	r3, #0
 800558a:	77bb      	strb	r3, [r7, #30]
 800558c:	e04e      	b.n	800562c <LCD_ShowChinese32x32+0x144>
				{
					if(!mode)
 800558e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005592:	2b00      	cmp	r3, #0
 8005594:	d11e      	bne.n	80055d4 <LCD_ShowChinese32x32+0xec>
					{
						if(tfont32[k].Msk[i]&(0x01<<j))LCD_WR_DATA(fc);
 8005596:	8bba      	ldrh	r2, [r7, #28]
 8005598:	7ff9      	ldrb	r1, [r7, #31]
 800559a:	4830      	ldr	r0, [pc, #192]	; (800565c <LCD_ShowChinese32x32+0x174>)
 800559c:	4613      	mov	r3, r2
 800559e:	019b      	lsls	r3, r3, #6
 80055a0:	4413      	add	r3, r2
 80055a2:	005b      	lsls	r3, r3, #1
 80055a4:	4403      	add	r3, r0
 80055a6:	440b      	add	r3, r1
 80055a8:	3302      	adds	r3, #2
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	461a      	mov	r2, r3
 80055ae:	7fbb      	ldrb	r3, [r7, #30]
 80055b0:	fa42 f303 	asr.w	r3, r2, r3
 80055b4:	f003 0301 	and.w	r3, r3, #1
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d005      	beq.n	80055c8 <LCD_ShowChinese32x32+0xe0>
 80055bc:	88fb      	ldrh	r3, [r7, #6]
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	4618      	mov	r0, r3
 80055c2:	f7ff f8ad 	bl	8004720 <LCD_WR_DATA>
 80055c6:	e02e      	b.n	8005626 <LCD_ShowChinese32x32+0x13e>
						else LCD_WR_DATA(bc);
 80055c8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	4618      	mov	r0, r3
 80055ce:	f7ff f8a7 	bl	8004720 <LCD_WR_DATA>
 80055d2:	e028      	b.n	8005626 <LCD_ShowChinese32x32+0x13e>
					}
					else
					{
						if(tfont32[k].Msk[i]&(0x01<<j))	LCD_DrawPoint(x,y,fc);
 80055d4:	8bba      	ldrh	r2, [r7, #28]
 80055d6:	7ff9      	ldrb	r1, [r7, #31]
 80055d8:	4820      	ldr	r0, [pc, #128]	; (800565c <LCD_ShowChinese32x32+0x174>)
 80055da:	4613      	mov	r3, r2
 80055dc:	019b      	lsls	r3, r3, #6
 80055de:	4413      	add	r3, r2
 80055e0:	005b      	lsls	r3, r3, #1
 80055e2:	4403      	add	r3, r0
 80055e4:	440b      	add	r3, r1
 80055e6:	3302      	adds	r3, #2
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	461a      	mov	r2, r3
 80055ec:	7fbb      	ldrb	r3, [r7, #30]
 80055ee:	fa42 f303 	asr.w	r3, r2, r3
 80055f2:	f003 0301 	and.w	r3, r3, #1
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d005      	beq.n	8005606 <LCD_ShowChinese32x32+0x11e>
 80055fa:	88fa      	ldrh	r2, [r7, #6]
 80055fc:	89b9      	ldrh	r1, [r7, #12]
 80055fe:	89fb      	ldrh	r3, [r7, #14]
 8005600:	4618      	mov	r0, r3
 8005602:	f7ff f8f3 	bl	80047ec <LCD_DrawPoint>
						x++;
 8005606:	89fb      	ldrh	r3, [r7, #14]
 8005608:	3301      	adds	r3, #1
 800560a:	81fb      	strh	r3, [r7, #14]
						if((x-x0)==sizey)
 800560c:	89fa      	ldrh	r2, [r7, #14]
 800560e:	8b7b      	ldrh	r3, [r7, #26]
 8005610:	1ad2      	subs	r2, r2, r3
 8005612:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8005616:	429a      	cmp	r2, r3
 8005618:	d105      	bne.n	8005626 <LCD_ShowChinese32x32+0x13e>
						{
							x=x0;
 800561a:	8b7b      	ldrh	r3, [r7, #26]
 800561c:	81fb      	strh	r3, [r7, #14]
							y++;
 800561e:	89bb      	ldrh	r3, [r7, #12]
 8005620:	3301      	adds	r3, #1
 8005622:	81bb      	strh	r3, [r7, #12]
							break;
 8005624:	e005      	b.n	8005632 <LCD_ShowChinese32x32+0x14a>
				for(j=0;j<8;j++)
 8005626:	7fbb      	ldrb	r3, [r7, #30]
 8005628:	3301      	adds	r3, #1
 800562a:	77bb      	strb	r3, [r7, #30]
 800562c:	7fbb      	ldrb	r3, [r7, #30]
 800562e:	2b07      	cmp	r3, #7
 8005630:	d9ad      	bls.n	800558e <LCD_ShowChinese32x32+0xa6>
			for(i=0;i<TypefaceNum;i++)
 8005632:	7ffb      	ldrb	r3, [r7, #31]
 8005634:	3301      	adds	r3, #1
 8005636:	77fb      	strb	r3, [r7, #31]
 8005638:	7ffb      	ldrb	r3, [r7, #31]
 800563a:	b29b      	uxth	r3, r3
 800563c:	8b3a      	ldrh	r2, [r7, #24]
 800563e:	429a      	cmp	r2, r3
 8005640:	d8a2      	bhi.n	8005588 <LCD_ShowChinese32x32+0xa0>
	for(k=0;k<HZnum;k++)
 8005642:	8bbb      	ldrh	r3, [r7, #28]
 8005644:	3301      	adds	r3, #1
 8005646:	83bb      	strh	r3, [r7, #28]
 8005648:	8bba      	ldrh	r2, [r7, #28]
 800564a:	8afb      	ldrh	r3, [r7, #22]
 800564c:	429a      	cmp	r2, r3
 800564e:	f4ff af68 	bcc.w	8005522 <LCD_ShowChinese32x32+0x3a>
				}
			}
		}
		continue;  //quit after find the correct charater
	}
}
 8005652:	bf00      	nop
 8005654:	bf00      	nop
 8005656:	3724      	adds	r7, #36	; 0x24
 8005658:	46bd      	mov	sp, r7
 800565a:	bd90      	pop	{r4, r7, pc}
 800565c:	080115f0 	.word	0x080115f0

08005660 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b088      	sub	sp, #32
 8005664:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
  unsigned char switch_value; //pushbottom value
  unsigned char selectedFlag = 100;
 8005666:	2364      	movs	r3, #100	; 0x64
 8005668:	73fb      	strb	r3, [r7, #15]
  unsigned char selection = 1;
 800566a:	2301      	movs	r3, #1
 800566c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800566e:	f001 f8f3 	bl	8006858 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005672:	f000 fb3f 	bl	8005cf4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_I2C_DeInit(I2C1); // de-initialize I2C1 to remove busy flag
 8005676:	48bd      	ldr	r0, [pc, #756]	; (800596c <main+0x30c>)
 8005678:	f001 ff06 	bl	8007488 <HAL_I2C_DeInit>
  HAL_I2C_DeInit(I2C2);	// de-initialize I2C1 to remove busy flag
 800567c:	48bc      	ldr	r0, [pc, #752]	; (8005970 <main+0x310>)
 800567e:	f001 ff03 	bl	8007488 <HAL_I2C_DeInit>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005682:	f000 fcdd 	bl	8006040 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8005686:	f000 fc87 	bl	8005f98 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 800568a:	f000 fbf7 	bl	8005e7c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800568e:	f000 fcad 	bl	8005fec <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8005692:	f000 fc29 	bl	8005ee8 <MX_TIM2_Init>
  MX_I2C1_Init();
 8005696:	f000 fb95 	bl	8005dc4 <MX_I2C1_Init>
  MX_I2C2_Init();
 800569a:	f000 fbc1 	bl	8005e20 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */


  //LED light on to tell MCU start up
  HAL_GPIO_WritePin(LED_GPIO_GPIO_Port, LED_GPIO_Pin, GPIO_PIN_SET);
 800569e:	2201      	movs	r2, #1
 80056a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80056a4:	48b3      	ldr	r0, [pc, #716]	; (8005974 <main+0x314>)
 80056a6:	f001 fd91 	bl	80071cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(HR_GPIO_INT_GPIO_Port, HR_GPIO_INT_Pin, GPIO_PIN_RESET); //connect HR_INT to active low
 80056aa:	2200      	movs	r2, #0
 80056ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80056b0:	48b1      	ldr	r0, [pc, #708]	; (8005978 <main+0x318>)
 80056b2:	f001 fd8b 	bl	80071cc <HAL_GPIO_WritePin>
  //HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); //change to this for final
  //__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 300);
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80056b6:	2104      	movs	r1, #4
 80056b8:	48b0      	ldr	r0, [pc, #704]	; (800597c <main+0x31c>)
 80056ba:	f003 fd2d 	bl	8009118 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 500);
 80056be:	4baf      	ldr	r3, [pc, #700]	; (800597c <main+0x31c>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80056c6:	639a      	str	r2, [r3, #56]	; 0x38
  //temperature Sensor initialize registers
  //temper_init((I2C_HandleTypeDef *) &hi2c2);
  //gyro Sensor initialize registers
  //gyro_init((I2C_HandleTypeDef *) &hi2c1);
  //GPS init
  GPS_Init((UART_HandleTypeDef *) &huart1);
 80056c8:	48ad      	ldr	r0, [pc, #692]	; (8005980 <main+0x320>)
 80056ca:	f7fe f819 	bl	8003700 <GPS_Init>

  screen_off = 0;
 80056ce:	4bad      	ldr	r3, [pc, #692]	; (8005984 <main+0x324>)
 80056d0:	2200      	movs	r2, #0
 80056d2:	701a      	strb	r2, [r3, #0]
  unsigned char i = 0;
 80056d4:	2300      	movs	r3, #0
 80056d6:	73bb      	strb	r3, [r7, #14]
  unsigned char j = 0;
 80056d8:	2300      	movs	r3, #0
 80056da:	737b      	strb	r3, [r7, #13]
  unsigned char z = 0;
 80056dc:	2300      	movs	r3, #0
 80056de:	733b      	strb	r3, [r7, #12]
  unsigned char	i1=0;
 80056e0:	2300      	movs	r3, #0
 80056e2:	72fb      	strb	r3, [r7, #11]
  unsigned char	j1=0;
 80056e4:	2300      	movs	r3, #0
 80056e6:	72bb      	strb	r3, [r7, #10]
  unsigned char select1 = 1;
 80056e8:	2301      	movs	r3, #1
 80056ea:	727b      	strb	r3, [r7, #9]
  unsigned char select2 = 1;
 80056ec:	2301      	movs	r3, #1
 80056ee:	723b      	strb	r3, [r7, #8]
  unsigned char unit = 1;
 80056f0:	2301      	movs	r3, #1
 80056f2:	71bb      	strb	r3, [r7, #6]
  //char bluetoothTxBuffer[5] = "pur";
  //char bluetoothTxBuffernew[5];
  //uint8_t bluetoothRxBuffer[5] = {0};

  HeartInt();
 80056f4:	f7fb fe8a 	bl	800140c <HeartInt>
  //latitude = -86.91;
  //longitude = 40.42;
  MENU_init(); //show start up menu
 80056f8:	f7fd f978 	bl	80029ec <MENU_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	// Turn on display if off
		switch_value =  Get_Key_value(0);
 80056fc:	2000      	movs	r0, #0
 80056fe:	f7fb fdb5 	bl	800126c <Get_Key_value>
 8005702:	4603      	mov	r3, r0
 8005704:	717b      	strb	r3, [r7, #5]
		if(screen_off == 1)
 8005706:	4b9f      	ldr	r3, [pc, #636]	; (8005984 <main+0x324>)
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	2b01      	cmp	r3, #1
 800570c:	d104      	bne.n	8005718 <main+0xb8>
		{
			Display_On_Off(switch_value);
 800570e:	797b      	ldrb	r3, [r7, #5]
 8005710:	4618      	mov	r0, r3
 8005712:	f7fb fe1d 	bl	8001350 <Display_On_Off>
			continue;
 8005716:	e2ec      	b.n	8005cf2 <main+0x692>
		}



		//Counter to aviod update too fast
		if((i == 0) && (j == 0) && (z==0))
 8005718:	7bbb      	ldrb	r3, [r7, #14]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d10d      	bne.n	800573a <main+0xda>
 800571e:	7b7b      	ldrb	r3, [r7, #13]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d10a      	bne.n	800573a <main+0xda>
 8005724:	7b3b      	ldrb	r3, [r7, #12]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d107      	bne.n	800573a <main+0xda>
		{
			Get_Heart_data();
 800572a:	f7fc fa63 	bl	8001bf4 <Get_Heart_data>
			//Get_Temperature_data();
			//Get_GyroAccel_data();
			Get_GPS_data();
 800572e:	f7fc fec3 	bl	80024b8 <Get_GPS_data>
			BlueStatus();
 8005732:	f7fc fed5 	bl	80024e0 <BlueStatus>
			MENU_main();
 8005736:	f7fd f96b 	bl	8002a10 <MENU_main>
		}
		i++;
 800573a:	7bbb      	ldrb	r3, [r7, #14]
 800573c:	3301      	adds	r3, #1
 800573e:	73bb      	strb	r3, [r7, #14]
		if(i>=255)
 8005740:	7bbb      	ldrb	r3, [r7, #14]
 8005742:	2bff      	cmp	r3, #255	; 0xff
 8005744:	d104      	bne.n	8005750 <main+0xf0>
		{
			i=0;
 8005746:	2300      	movs	r3, #0
 8005748:	73bb      	strb	r3, [r7, #14]
			j++;
 800574a:	7b7b      	ldrb	r3, [r7, #13]
 800574c:	3301      	adds	r3, #1
 800574e:	737b      	strb	r3, [r7, #13]
		}
		if(j>=255)
 8005750:	7b7b      	ldrb	r3, [r7, #13]
 8005752:	2bff      	cmp	r3, #255	; 0xff
 8005754:	d104      	bne.n	8005760 <main+0x100>
		{
			z++;
 8005756:	7b3b      	ldrb	r3, [r7, #12]
 8005758:	3301      	adds	r3, #1
 800575a:	733b      	strb	r3, [r7, #12]
			j = 0;
 800575c:	2300      	movs	r3, #0
 800575e:	737b      	strb	r3, [r7, #13]
		}
		if(z>=5)
 8005760:	7b3b      	ldrb	r3, [r7, #12]
 8005762:	2b04      	cmp	r3, #4
 8005764:	d905      	bls.n	8005772 <main+0x112>
		{
			i=0;
 8005766:	2300      	movs	r3, #0
 8005768:	73bb      	strb	r3, [r7, #14]
			j=0;
 800576a:	2300      	movs	r3, #0
 800576c:	737b      	strb	r3, [r7, #13]
			z=0;
 800576e:	2300      	movs	r3, #0
 8005770:	733b      	strb	r3, [r7, #12]
		}

		//Selecte page to display
		selectedFlag = MENU_SELECTION(switch_value);
 8005772:	797b      	ldrb	r3, [r7, #5]
 8005774:	4618      	mov	r0, r3
 8005776:	f7fd fd7b 	bl	8003270 <MENU_SELECTION>
 800577a:	4603      	mov	r3, r0
 800577c:	73fb      	strb	r3, [r7, #15]
		switch(selectedFlag)
 800577e:	7bfb      	ldrb	r3, [r7, #15]
 8005780:	3b01      	subs	r3, #1
 8005782:	2b08      	cmp	r3, #8
 8005784:	d838      	bhi.n	80057f8 <main+0x198>
 8005786:	a201      	add	r2, pc, #4	; (adr r2, 800578c <main+0x12c>)
 8005788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800578c:	080057b1 	.word	0x080057b1
 8005790:	080057b7 	.word	0x080057b7
 8005794:	080057bd 	.word	0x080057bd
 8005798:	080057c3 	.word	0x080057c3
 800579c:	080057c9 	.word	0x080057c9
 80057a0:	080057cf 	.word	0x080057cf
 80057a4:	080057d5 	.word	0x080057d5
 80057a8:	080057db 	.word	0x080057db
 80057ac:	080057e1 	.word	0x080057e1
		{
			case SETTING :
				MENU_SETTING();
 80057b0:	f7fd fb68 	bl	8002e84 <MENU_SETTING>
			    break;
 80057b4:	e023      	b.n	80057fe <main+0x19e>
			case TEMP :
			    MENU_TEMP();
 80057b6:	f7fd fbdd 	bl	8002f74 <MENU_TEMP>
			    break;
 80057ba:	e020      	b.n	80057fe <main+0x19e>
			case BLOOD :
			    MENU_BLOOD();
 80057bc:	f7fd fc16 	bl	8002fec <MENU_BLOOD>
			    break;
 80057c0:	e01d      	b.n	80057fe <main+0x19e>
			case HEART :
			    MENU_HEART();
 80057c2:	f7fd fc3f 	bl	8003044 <MENU_HEART>
			    break;
 80057c6:	e01a      	b.n	80057fe <main+0x19e>
			case LAT :
			    MENU_LAT();
 80057c8:	f7fd fc68 	bl	800309c <MENU_LAT>
			    break;
 80057cc:	e017      	b.n	80057fe <main+0x19e>
			case LON :
			    MENU_LON();
 80057ce:	f7fd fca1 	bl	8003114 <MENU_LON>
			    break;
 80057d2:	e014      	b.n	80057fe <main+0x19e>
			case FALLD :
			    MENU_FALL();
 80057d4:	f7fd fcda 	bl	800318c <MENU_FALL>
			    break;
 80057d8:	e011      	b.n	80057fe <main+0x19e>
			case BLUEM :

				MENU_BLUET();
 80057da:	f7fd fcf5 	bl	80031c8 <MENU_BLUET>
			    break;
 80057de:	e00e      	b.n	80057fe <main+0x19e>
			case POWER : //poweroff
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0); //turn off display
 80057e0:	4b66      	ldr	r3, [pc, #408]	; (800597c <main+0x31c>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2200      	movs	r2, #0
 80057e6:	639a      	str	r2, [r3, #56]	; 0x38
				Refresh();
 80057e8:	f7fd fd30 	bl	800324c <Refresh>
				screen_off = 1;
 80057ec:	4b65      	ldr	r3, [pc, #404]	; (8005984 <main+0x324>)
 80057ee:	2201      	movs	r2, #1
 80057f0:	701a      	strb	r2, [r3, #0]
				selectedFlag = 100;
 80057f2:	2364      	movs	r3, #100	; 0x64
 80057f4:	73fb      	strb	r3, [r7, #15]
			    break;
 80057f6:	e002      	b.n	80057fe <main+0x19e>
			default:
				selectedFlag = 100;
 80057f8:	2364      	movs	r3, #100	; 0x64
 80057fa:	73fb      	strb	r3, [r7, #15]
				break;
 80057fc:	bf00      	nop
		}

		// In non-main page, key 1 or key 3 return to main page, key 2 turn off display
		// Implement update variable here(you can write funtion like me to implement this or directly write here)
		if(selectedFlag == 1)
 80057fe:	7bfb      	ldrb	r3, [r7, #15]
 8005800:	2b01      	cmp	r3, #1
 8005802:	d12b      	bne.n	800585c <main+0x1fc>
		{
			select1 = 1;
 8005804:	2301      	movs	r3, #1
 8005806:	727b      	strb	r3, [r7, #9]
			select2 = 1;
 8005808:	2301      	movs	r3, #1
 800580a:	723b      	strb	r3, [r7, #8]
			while (selectedFlag == 1)
 800580c:	e023      	b.n	8005856 <main+0x1f6>
			{
				switch_value =  Get_Key_value(0);
 800580e:	2000      	movs	r0, #0
 8005810:	f7fb fd2c 	bl	800126c <Get_Key_value>
 8005814:	4603      	mov	r3, r0
 8005816:	717b      	strb	r3, [r7, #5]
				if(switch_value == 1)
 8005818:	797b      	ldrb	r3, [r7, #5]
 800581a:	2b01      	cmp	r3, #1
 800581c:	d103      	bne.n	8005826 <main+0x1c6>
				{
					select1 ++;
 800581e:	7a7b      	ldrb	r3, [r7, #9]
 8005820:	3301      	adds	r3, #1
 8005822:	727b      	strb	r3, [r7, #9]
 8005824:	e005      	b.n	8005832 <main+0x1d2>
				}
				else if (switch_value == 3)
 8005826:	797b      	ldrb	r3, [r7, #5]
 8005828:	2b03      	cmp	r3, #3
 800582a:	d102      	bne.n	8005832 <main+0x1d2>
				{
					select2 ++;
 800582c:	7a3b      	ldrb	r3, [r7, #8]
 800582e:	3301      	adds	r3, #1
 8005830:	723b      	strb	r3, [r7, #8]
				}

				if(select1 >=3)
 8005832:	7a7b      	ldrb	r3, [r7, #9]
 8005834:	2b02      	cmp	r3, #2
 8005836:	d901      	bls.n	800583c <main+0x1dc>
				{
					select1 = 1;
 8005838:	2301      	movs	r3, #1
 800583a:	727b      	strb	r3, [r7, #9]
				}
				if(select2 >=3)
 800583c:	7a3b      	ldrb	r3, [r7, #8]
 800583e:	2b02      	cmp	r3, #2
 8005840:	d901      	bls.n	8005846 <main+0x1e6>
				{
					select2 = 1;
 8005842:	2301      	movs	r3, #1
 8005844:	723b      	strb	r3, [r7, #8]
				}

				selectedFlag = SETTING_SELECTION(select1, select2, switch_value);
 8005846:	797a      	ldrb	r2, [r7, #5]
 8005848:	7a39      	ldrb	r1, [r7, #8]
 800584a:	7a7b      	ldrb	r3, [r7, #9]
 800584c:	4618      	mov	r0, r3
 800584e:	f7fd fe8d 	bl	800356c <SETTING_SELECTION>
 8005852:	4603      	mov	r3, r0
 8005854:	73fb      	strb	r3, [r7, #15]
			while (selectedFlag == 1)
 8005856:	7bfb      	ldrb	r3, [r7, #15]
 8005858:	2b01      	cmp	r3, #1
 800585a:	d0d8      	beq.n	800580e <main+0x1ae>

			}
		}

		i1=0;
 800585c:	2300      	movs	r3, #0
 800585e:	72fb      	strb	r3, [r7, #11]
		j1=0;
 8005860:	2300      	movs	r3, #0
 8005862:	72bb      	strb	r3, [r7, #10]
		while(selectedFlag != 100)
 8005864:	e241      	b.n	8005cea <main+0x68a>
		{
			switch_value =  Get_Key_value(0);
 8005866:	2000      	movs	r0, #0
 8005868:	f7fb fd00 	bl	800126c <Get_Key_value>
 800586c:	4603      	mov	r3, r0
 800586e:	717b      	strb	r3, [r7, #5]
			if((switch_value == 1) || (switch_value==3))
 8005870:	797b      	ldrb	r3, [r7, #5]
 8005872:	2b01      	cmp	r3, #1
 8005874:	d002      	beq.n	800587c <main+0x21c>
 8005876:	797b      	ldrb	r3, [r7, #5]
 8005878:	2b03      	cmp	r3, #3
 800587a:	d104      	bne.n	8005886 <main+0x226>
			{
				selectedFlag = 100;
 800587c:	2364      	movs	r3, #100	; 0x64
 800587e:	73fb      	strb	r3, [r7, #15]
				Refresh();
 8005880:	f7fd fce4 	bl	800324c <Refresh>
				break;
 8005884:	e235      	b.n	8005cf2 <main+0x692>
			}
			else if(switch_value == 2)
 8005886:	797b      	ldrb	r3, [r7, #5]
 8005888:	2b02      	cmp	r3, #2
 800588a:	d105      	bne.n	8005898 <main+0x238>
			{
				selectedFlag = 100;
 800588c:	2364      	movs	r3, #100	; 0x64
 800588e:	73fb      	strb	r3, [r7, #15]
				Display_On_Off(switch_value);
 8005890:	797b      	ldrb	r3, [r7, #5]
 8005892:	4618      	mov	r0, r3
 8005894:	f7fb fd5c 	bl	8001350 <Display_On_Off>
			}



			if((i1==0) && (j1==0))
 8005898:	7afb      	ldrb	r3, [r7, #11]
 800589a:	2b00      	cmp	r3, #0
 800589c:	f040 8213 	bne.w	8005cc6 <main+0x666>
 80058a0:	7abb      	ldrb	r3, [r7, #10]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	f040 820f 	bne.w	8005cc6 <main+0x666>
			{
				// keep getting data from sensor even if not in the main page
				switch_value =  Get_Key_value(0);
 80058a8:	2000      	movs	r0, #0
 80058aa:	f7fb fcdf 	bl	800126c <Get_Key_value>
 80058ae:	4603      	mov	r3, r0
 80058b0:	717b      	strb	r3, [r7, #5]
				//Get_Temperature_data();
				//Get_GyroAccel_data();

				switch(selectedFlag)
 80058b2:	7bfb      	ldrb	r3, [r7, #15]
 80058b4:	3b02      	subs	r3, #2
 80058b6:	2b06      	cmp	r3, #6
 80058b8:	f200 81fc 	bhi.w	8005cb4 <main+0x654>
 80058bc:	a201      	add	r2, pc, #4	; (adr r2, 80058c4 <main+0x264>)
 80058be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c2:	bf00      	nop
 80058c4:	080058e1 	.word	0x080058e1
 80058c8:	080059df 	.word	0x080059df
 80058cc:	08005a37 	.word	0x08005a37
 80058d0:	08005a97 	.word	0x08005a97
 80058d4:	08005b2f 	.word	0x08005b2f
 80058d8:	08005bc7 	.word	0x08005bc7
 80058dc:	08005c17 	.word	0x08005c17
					//case SETTING :
						//LCD_ShowString (LCD_W/2,LCD_H/2,"SETTING", WHITE,	BLACK, 16,	1);
					//  break;
					case TEMP :
						//Get_Temperature_data();
						LCD_Fill(1,LCD_H/16*3,LCD_W/16*7,LCD_H/16*5,BLACK);
 80058e0:	2300      	movs	r3, #0
 80058e2:	9300      	str	r3, [sp, #0]
 80058e4:	2332      	movs	r3, #50	; 0x32
 80058e6:	2238      	movs	r2, #56	; 0x38
 80058e8:	211e      	movs	r1, #30
 80058ea:	2001      	movs	r0, #1
 80058ec:	f7ff fa88 	bl	8004e00 <LCD_Fill>
						LCD_Fill(1,LCD_H/16*5,LCD_W/16*7,LCD_H/16*7,BLACK);
 80058f0:	2300      	movs	r3, #0
 80058f2:	9300      	str	r3, [sp, #0]
 80058f4:	2346      	movs	r3, #70	; 0x46
 80058f6:	2238      	movs	r2, #56	; 0x38
 80058f8:	2132      	movs	r1, #50	; 0x32
 80058fa:	2001      	movs	r0, #1
 80058fc:	f7ff fa80 	bl	8004e00 <LCD_Fill>
						if((temperature < 28) || (temperature>38))
 8005900:	4b21      	ldr	r3, [pc, #132]	; (8005988 <main+0x328>)
 8005902:	edd3 7a00 	vldr	s15, [r3]
 8005906:	eeb3 7a0c 	vmov.f32	s14, #60	; 0x41e00000  28.0
 800590a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800590e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005912:	d409      	bmi.n	8005928 <main+0x2c8>
 8005914:	4b1c      	ldr	r3, [pc, #112]	; (8005988 <main+0x328>)
 8005916:	edd3 7a00 	vldr	s15, [r3]
 800591a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800598c <main+0x32c>
 800591e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005926:	dd39      	ble.n	800599c <main+0x33c>
						{
							LCD_ShowFloatVar(LCD_W/16*1,LCD_H/16*3,temperature,temperature1, RED,BLACK,16); //show tempeature
 8005928:	4b17      	ldr	r3, [pc, #92]	; (8005988 <main+0x328>)
 800592a:	edd3 7a00 	vldr	s15, [r3]
 800592e:	2310      	movs	r3, #16
 8005930:	9301      	str	r3, [sp, #4]
 8005932:	2300      	movs	r3, #0
 8005934:	9300      	str	r3, [sp, #0]
 8005936:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800593a:	4a15      	ldr	r2, [pc, #84]	; (8005990 <main+0x330>)
 800593c:	eeb0 0a67 	vmov.f32	s0, s15
 8005940:	211e      	movs	r1, #30
 8005942:	2008      	movs	r0, #8
 8005944:	f7ff fbe0 	bl	8005108 <LCD_ShowFloatVar>
							LCD_ShowFloatVar(LCD_W/16*1,LCD_H/16*5,temperatureUS,temperatureUS1, RED,BLACK,16); //show tempeature
 8005948:	4b12      	ldr	r3, [pc, #72]	; (8005994 <main+0x334>)
 800594a:	edd3 7a00 	vldr	s15, [r3]
 800594e:	2310      	movs	r3, #16
 8005950:	9301      	str	r3, [sp, #4]
 8005952:	2300      	movs	r3, #0
 8005954:	9300      	str	r3, [sp, #0]
 8005956:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800595a:	4a0f      	ldr	r2, [pc, #60]	; (8005998 <main+0x338>)
 800595c:	eeb0 0a67 	vmov.f32	s0, s15
 8005960:	2132      	movs	r1, #50	; 0x32
 8005962:	2008      	movs	r0, #8
 8005964:	f7ff fbd0 	bl	8005108 <LCD_ShowFloatVar>
						else
						{
							LCD_ShowFloatVar(LCD_W/16*1,LCD_H/16*3,temperature,temperature1, WHITE,BLACK,16); //show tempeature
							LCD_ShowFloatVar(LCD_W/16*1,LCD_H/16*5,temperatureUS,temperatureUS1, WHITE,BLACK,16); //show tempeature
						}
					    break;
 8005968:	e1a7      	b.n	8005cba <main+0x65a>
 800596a:	bf00      	nop
 800596c:	40005400 	.word	0x40005400
 8005970:	40005800 	.word	0x40005800
 8005974:	40020800 	.word	0x40020800
 8005978:	40020400 	.word	0x40020400
 800597c:	20001f44 	.word	0x20001f44
 8005980:	20001ea8 	.word	0x20001ea8
 8005984:	20000000 	.word	0x20000000
 8005988:	20000004 	.word	0x20000004
 800598c:	42180000 	.word	0x42180000
 8005990:	20001cec 	.word	0x20001cec
 8005994:	20000008 	.word	0x20000008
 8005998:	20001d10 	.word	0x20001d10
							LCD_ShowFloatVar(LCD_W/16*1,LCD_H/16*3,temperature,temperature1, WHITE,BLACK,16); //show tempeature
 800599c:	4bb2      	ldr	r3, [pc, #712]	; (8005c68 <main+0x608>)
 800599e:	edd3 7a00 	vldr	s15, [r3]
 80059a2:	2310      	movs	r3, #16
 80059a4:	9301      	str	r3, [sp, #4]
 80059a6:	2300      	movs	r3, #0
 80059a8:	9300      	str	r3, [sp, #0]
 80059aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80059ae:	4aaf      	ldr	r2, [pc, #700]	; (8005c6c <main+0x60c>)
 80059b0:	eeb0 0a67 	vmov.f32	s0, s15
 80059b4:	211e      	movs	r1, #30
 80059b6:	2008      	movs	r0, #8
 80059b8:	f7ff fba6 	bl	8005108 <LCD_ShowFloatVar>
							LCD_ShowFloatVar(LCD_W/16*1,LCD_H/16*5,temperatureUS,temperatureUS1, WHITE,BLACK,16); //show tempeature
 80059bc:	4bac      	ldr	r3, [pc, #688]	; (8005c70 <main+0x610>)
 80059be:	edd3 7a00 	vldr	s15, [r3]
 80059c2:	2310      	movs	r3, #16
 80059c4:	9301      	str	r3, [sp, #4]
 80059c6:	2300      	movs	r3, #0
 80059c8:	9300      	str	r3, [sp, #0]
 80059ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80059ce:	4aa9      	ldr	r2, [pc, #676]	; (8005c74 <main+0x614>)
 80059d0:	eeb0 0a67 	vmov.f32	s0, s15
 80059d4:	2132      	movs	r1, #50	; 0x32
 80059d6:	2008      	movs	r0, #8
 80059d8:	f7ff fb96 	bl	8005108 <LCD_ShowFloatVar>
					    break;
 80059dc:	e16d      	b.n	8005cba <main+0x65a>
					case BLOOD :
						//Get_Heart_data();
						LCD_Fill(LCD_W/16*1,LCD_H/16*3,LCD_W/16*6,LCD_H/16*5,BLACK);
 80059de:	2300      	movs	r3, #0
 80059e0:	9300      	str	r3, [sp, #0]
 80059e2:	2332      	movs	r3, #50	; 0x32
 80059e4:	2230      	movs	r2, #48	; 0x30
 80059e6:	211e      	movs	r1, #30
 80059e8:	2008      	movs	r0, #8
 80059ea:	f7ff fa09 	bl	8004e00 <LCD_Fill>
						if(blood_oxygen < 95)
 80059ee:	4ba2      	ldr	r3, [pc, #648]	; (8005c78 <main+0x618>)
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	2b5e      	cmp	r3, #94	; 0x5e
 80059f4:	d80f      	bhi.n	8005a16 <main+0x3b6>
						{
							LCD_ShowIntVar(LCD_W/16*1,LCD_H/16*3,blood_oxygen,blood_oxygen1, RED,BLACK,16); //show blood oxygen
 80059f6:	4ba0      	ldr	r3, [pc, #640]	; (8005c78 <main+0x618>)
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	461a      	mov	r2, r3
 80059fc:	2310      	movs	r3, #16
 80059fe:	9302      	str	r3, [sp, #8]
 8005a00:	2300      	movs	r3, #0
 8005a02:	9301      	str	r3, [sp, #4]
 8005a04:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005a08:	9300      	str	r3, [sp, #0]
 8005a0a:	4b9c      	ldr	r3, [pc, #624]	; (8005c7c <main+0x61c>)
 8005a0c:	211e      	movs	r1, #30
 8005a0e:	2008      	movs	r0, #8
 8005a10:	f7ff fb58 	bl	80050c4 <LCD_ShowIntVar>
						}
						else
						{
							LCD_ShowIntVar(LCD_W/16*1,LCD_H/16*3,blood_oxygen,blood_oxygen1, WHITE,BLACK,16); //show blood oxygen
						}
					    break;
 8005a14:	e151      	b.n	8005cba <main+0x65a>
							LCD_ShowIntVar(LCD_W/16*1,LCD_H/16*3,blood_oxygen,blood_oxygen1, WHITE,BLACK,16); //show blood oxygen
 8005a16:	4b98      	ldr	r3, [pc, #608]	; (8005c78 <main+0x618>)
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	2310      	movs	r3, #16
 8005a1e:	9302      	str	r3, [sp, #8]
 8005a20:	2300      	movs	r3, #0
 8005a22:	9301      	str	r3, [sp, #4]
 8005a24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005a28:	9300      	str	r3, [sp, #0]
 8005a2a:	4b94      	ldr	r3, [pc, #592]	; (8005c7c <main+0x61c>)
 8005a2c:	211e      	movs	r1, #30
 8005a2e:	2008      	movs	r0, #8
 8005a30:	f7ff fb48 	bl	80050c4 <LCD_ShowIntVar>
					    break;
 8005a34:	e141      	b.n	8005cba <main+0x65a>
					case HEART :
						//Get_Heart_data();
						LCD_Fill(LCD_W/16*1,LCD_H/16*3,LCD_W/16*6,LCD_H/16*5,BLACK);
 8005a36:	2300      	movs	r3, #0
 8005a38:	9300      	str	r3, [sp, #0]
 8005a3a:	2332      	movs	r3, #50	; 0x32
 8005a3c:	2230      	movs	r2, #48	; 0x30
 8005a3e:	211e      	movs	r1, #30
 8005a40:	2008      	movs	r0, #8
 8005a42:	f7ff f9dd 	bl	8004e00 <LCD_Fill>
						if((heart_rate < 60) || (heart_rate > 100))
 8005a46:	4b8e      	ldr	r3, [pc, #568]	; (8005c80 <main+0x620>)
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	2b3b      	cmp	r3, #59	; 0x3b
 8005a4c:	d903      	bls.n	8005a56 <main+0x3f6>
 8005a4e:	4b8c      	ldr	r3, [pc, #560]	; (8005c80 <main+0x620>)
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	2b64      	cmp	r3, #100	; 0x64
 8005a54:	d90f      	bls.n	8005a76 <main+0x416>
						{
							LCD_ShowIntVar(LCD_W/16*1,LCD_H/16*3,heart_rate,heart_rate1, RED,BLACK,16); //show heart rate
 8005a56:	4b8a      	ldr	r3, [pc, #552]	; (8005c80 <main+0x620>)
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	2310      	movs	r3, #16
 8005a5e:	9302      	str	r3, [sp, #8]
 8005a60:	2300      	movs	r3, #0
 8005a62:	9301      	str	r3, [sp, #4]
 8005a64:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005a68:	9300      	str	r3, [sp, #0]
 8005a6a:	4b86      	ldr	r3, [pc, #536]	; (8005c84 <main+0x624>)
 8005a6c:	211e      	movs	r1, #30
 8005a6e:	2008      	movs	r0, #8
 8005a70:	f7ff fb28 	bl	80050c4 <LCD_ShowIntVar>
						}
						else
						{
							LCD_ShowIntVar(LCD_W/16*1,LCD_H/16*3,heart_rate,heart_rate1, WHITE,BLACK,16); //show heart rate
						}
					    break;
 8005a74:	e121      	b.n	8005cba <main+0x65a>
							LCD_ShowIntVar(LCD_W/16*1,LCD_H/16*3,heart_rate,heart_rate1, WHITE,BLACK,16); //show heart rate
 8005a76:	4b82      	ldr	r3, [pc, #520]	; (8005c80 <main+0x620>)
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	2310      	movs	r3, #16
 8005a7e:	9302      	str	r3, [sp, #8]
 8005a80:	2300      	movs	r3, #0
 8005a82:	9301      	str	r3, [sp, #4]
 8005a84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005a88:	9300      	str	r3, [sp, #0]
 8005a8a:	4b7e      	ldr	r3, [pc, #504]	; (8005c84 <main+0x624>)
 8005a8c:	211e      	movs	r1, #30
 8005a8e:	2008      	movs	r0, #8
 8005a90:	f7ff fb18 	bl	80050c4 <LCD_ShowIntVar>
					    break;
 8005a94:	e111      	b.n	8005cba <main+0x65a>
					case LAT :
						if(latitude == 0 && longitude == 0)
 8005a96:	4b7c      	ldr	r3, [pc, #496]	; (8005c88 <main+0x628>)
 8005a98:	edd3 7a00 	vldr	s15, [r3]
 8005a9c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005aa4:	d122      	bne.n	8005aec <main+0x48c>
 8005aa6:	4b79      	ldr	r3, [pc, #484]	; (8005c8c <main+0x62c>)
 8005aa8:	edd3 7a00 	vldr	s15, [r3]
 8005aac:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ab4:	d11a      	bne.n	8005aec <main+0x48c>
						{
							LCD_ShowString (LCD_W/16*9,LCD_H/16*3,"No Conn.", RED,	BLACK, 12,	1);
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	9302      	str	r3, [sp, #8]
 8005aba:	230c      	movs	r3, #12
 8005abc:	9301      	str	r3, [sp, #4]
 8005abe:	2300      	movs	r3, #0
 8005ac0:	9300      	str	r3, [sp, #0]
 8005ac2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005ac6:	4a72      	ldr	r2, [pc, #456]	; (8005c90 <main+0x630>)
 8005ac8:	211e      	movs	r1, #30
 8005aca:	2048      	movs	r0, #72	; 0x48
 8005acc:	f7ff faba 	bl	8005044 <LCD_ShowString>
							LCD_ShowString (LCD_W/16*9,LCD_H/16*5,"No Conn.", RED,	BLACK, 12,	1);
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	9302      	str	r3, [sp, #8]
 8005ad4:	230c      	movs	r3, #12
 8005ad6:	9301      	str	r3, [sp, #4]
 8005ad8:	2300      	movs	r3, #0
 8005ada:	9300      	str	r3, [sp, #0]
 8005adc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005ae0:	4a6b      	ldr	r2, [pc, #428]	; (8005c90 <main+0x630>)
 8005ae2:	2132      	movs	r1, #50	; 0x32
 8005ae4:	2048      	movs	r0, #72	; 0x48
 8005ae6:	f7ff faad 	bl	8005044 <LCD_ShowString>
						{
							LCD_ShowFloatVar(LCD_W/16*9,LCD_H/16*3,latitude,latitude1, WHITE,BLACK,16);
							LCD_ShowFloatVar(LCD_W/16*9,LCD_H/16*5,longitude,longitude1, WHITE,BLACK,16);
						}
						//LCD_ShowString (LCD_W/2,LCD_H/2,"LAT", WHITE,	BLACK, 16,	1);
					    break;
 8005aea:	e0e6      	b.n	8005cba <main+0x65a>
							LCD_ShowFloatVar(LCD_W/16*9,LCD_H/16*3,latitude,latitude1, WHITE,BLACK,16);
 8005aec:	4b66      	ldr	r3, [pc, #408]	; (8005c88 <main+0x628>)
 8005aee:	edd3 7a00 	vldr	s15, [r3]
 8005af2:	2310      	movs	r3, #16
 8005af4:	9301      	str	r3, [sp, #4]
 8005af6:	2300      	movs	r3, #0
 8005af8:	9300      	str	r3, [sp, #0]
 8005afa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005afe:	4a65      	ldr	r2, [pc, #404]	; (8005c94 <main+0x634>)
 8005b00:	eeb0 0a67 	vmov.f32	s0, s15
 8005b04:	211e      	movs	r1, #30
 8005b06:	2048      	movs	r0, #72	; 0x48
 8005b08:	f7ff fafe 	bl	8005108 <LCD_ShowFloatVar>
							LCD_ShowFloatVar(LCD_W/16*9,LCD_H/16*5,longitude,longitude1, WHITE,BLACK,16);
 8005b0c:	4b5f      	ldr	r3, [pc, #380]	; (8005c8c <main+0x62c>)
 8005b0e:	edd3 7a00 	vldr	s15, [r3]
 8005b12:	2310      	movs	r3, #16
 8005b14:	9301      	str	r3, [sp, #4]
 8005b16:	2300      	movs	r3, #0
 8005b18:	9300      	str	r3, [sp, #0]
 8005b1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005b1e:	4a5e      	ldr	r2, [pc, #376]	; (8005c98 <main+0x638>)
 8005b20:	eeb0 0a67 	vmov.f32	s0, s15
 8005b24:	2132      	movs	r1, #50	; 0x32
 8005b26:	2048      	movs	r0, #72	; 0x48
 8005b28:	f7ff faee 	bl	8005108 <LCD_ShowFloatVar>
					    break;
 8005b2c:	e0c5      	b.n	8005cba <main+0x65a>
					case LON :
						if(latitude == 0 && longitude == 0)
 8005b2e:	4b56      	ldr	r3, [pc, #344]	; (8005c88 <main+0x628>)
 8005b30:	edd3 7a00 	vldr	s15, [r3]
 8005b34:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b3c:	d122      	bne.n	8005b84 <main+0x524>
 8005b3e:	4b53      	ldr	r3, [pc, #332]	; (8005c8c <main+0x62c>)
 8005b40:	edd3 7a00 	vldr	s15, [r3]
 8005b44:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b4c:	d11a      	bne.n	8005b84 <main+0x524>
						{
							LCD_ShowString (LCD_W/16*9,LCD_H/16*3,"No Conn.", RED,	BLACK, 12,	1);
 8005b4e:	2301      	movs	r3, #1
 8005b50:	9302      	str	r3, [sp, #8]
 8005b52:	230c      	movs	r3, #12
 8005b54:	9301      	str	r3, [sp, #4]
 8005b56:	2300      	movs	r3, #0
 8005b58:	9300      	str	r3, [sp, #0]
 8005b5a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005b5e:	4a4c      	ldr	r2, [pc, #304]	; (8005c90 <main+0x630>)
 8005b60:	211e      	movs	r1, #30
 8005b62:	2048      	movs	r0, #72	; 0x48
 8005b64:	f7ff fa6e 	bl	8005044 <LCD_ShowString>
							LCD_ShowString (LCD_W/16*9,LCD_H/16*5,"No Conn.", RED,	BLACK, 12,	1);
 8005b68:	2301      	movs	r3, #1
 8005b6a:	9302      	str	r3, [sp, #8]
 8005b6c:	230c      	movs	r3, #12
 8005b6e:	9301      	str	r3, [sp, #4]
 8005b70:	2300      	movs	r3, #0
 8005b72:	9300      	str	r3, [sp, #0]
 8005b74:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005b78:	4a45      	ldr	r2, [pc, #276]	; (8005c90 <main+0x630>)
 8005b7a:	2132      	movs	r1, #50	; 0x32
 8005b7c:	2048      	movs	r0, #72	; 0x48
 8005b7e:	f7ff fa61 	bl	8005044 <LCD_ShowString>
						{
							LCD_ShowFloatVar(LCD_W/16*9,LCD_H/16*3,latitude,latitude1, WHITE,BLACK,16);
							LCD_ShowFloatVar(LCD_W/16*9,LCD_H/16*5,longitude,longitude1, WHITE,BLACK,16);
						}
						//LCD_ShowString (LCD_W/2,LCD_H/2,"LON", WHITE,	BLACK, 16,	1);
					    break;
 8005b82:	e09a      	b.n	8005cba <main+0x65a>
							LCD_ShowFloatVar(LCD_W/16*9,LCD_H/16*3,latitude,latitude1, WHITE,BLACK,16);
 8005b84:	4b40      	ldr	r3, [pc, #256]	; (8005c88 <main+0x628>)
 8005b86:	edd3 7a00 	vldr	s15, [r3]
 8005b8a:	2310      	movs	r3, #16
 8005b8c:	9301      	str	r3, [sp, #4]
 8005b8e:	2300      	movs	r3, #0
 8005b90:	9300      	str	r3, [sp, #0]
 8005b92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005b96:	4a3f      	ldr	r2, [pc, #252]	; (8005c94 <main+0x634>)
 8005b98:	eeb0 0a67 	vmov.f32	s0, s15
 8005b9c:	211e      	movs	r1, #30
 8005b9e:	2048      	movs	r0, #72	; 0x48
 8005ba0:	f7ff fab2 	bl	8005108 <LCD_ShowFloatVar>
							LCD_ShowFloatVar(LCD_W/16*9,LCD_H/16*5,longitude,longitude1, WHITE,BLACK,16);
 8005ba4:	4b39      	ldr	r3, [pc, #228]	; (8005c8c <main+0x62c>)
 8005ba6:	edd3 7a00 	vldr	s15, [r3]
 8005baa:	2310      	movs	r3, #16
 8005bac:	9301      	str	r3, [sp, #4]
 8005bae:	2300      	movs	r3, #0
 8005bb0:	9300      	str	r3, [sp, #0]
 8005bb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005bb6:	4a38      	ldr	r2, [pc, #224]	; (8005c98 <main+0x638>)
 8005bb8:	eeb0 0a67 	vmov.f32	s0, s15
 8005bbc:	2132      	movs	r1, #50	; 0x32
 8005bbe:	2048      	movs	r0, #72	; 0x48
 8005bc0:	f7ff faa2 	bl	8005108 <LCD_ShowFloatVar>
					    break;
 8005bc4:	e079      	b.n	8005cba <main+0x65a>
					case FALLD :
						LCD_Fill(LCD_W/16*7,LCD_H/16*3,LCD_W/16*11,LCD_H/16*5,BLACK);
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	9300      	str	r3, [sp, #0]
 8005bca:	2332      	movs	r3, #50	; 0x32
 8005bcc:	2258      	movs	r2, #88	; 0x58
 8005bce:	211e      	movs	r1, #30
 8005bd0:	2038      	movs	r0, #56	; 0x38
 8005bd2:	f7ff f915 	bl	8004e00 <LCD_Fill>
						//Get_GyroAccel_data();
						if(fall == 1)
 8005bd6:	4b31      	ldr	r3, [pc, #196]	; (8005c9c <main+0x63c>)
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d10d      	bne.n	8005bfa <main+0x59a>
						{
							LCD_ShowString (LCD_W/16*7,LCD_H/16*3,"YES", RED, BLACK, 16,	1);
 8005bde:	2301      	movs	r3, #1
 8005be0:	9302      	str	r3, [sp, #8]
 8005be2:	2310      	movs	r3, #16
 8005be4:	9301      	str	r3, [sp, #4]
 8005be6:	2300      	movs	r3, #0
 8005be8:	9300      	str	r3, [sp, #0]
 8005bea:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005bee:	4a2c      	ldr	r2, [pc, #176]	; (8005ca0 <main+0x640>)
 8005bf0:	211e      	movs	r1, #30
 8005bf2:	2038      	movs	r0, #56	; 0x38
 8005bf4:	f7ff fa26 	bl	8005044 <LCD_ShowString>
						}
						else
						{
							LCD_ShowString (LCD_W/16*7,LCD_H/16*3,"NO", WHITE,BLACK, 16,	1);
						}
					    break;
 8005bf8:	e05f      	b.n	8005cba <main+0x65a>
							LCD_ShowString (LCD_W/16*7,LCD_H/16*3,"NO", WHITE,BLACK, 16,	1);
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	9302      	str	r3, [sp, #8]
 8005bfe:	2310      	movs	r3, #16
 8005c00:	9301      	str	r3, [sp, #4]
 8005c02:	2300      	movs	r3, #0
 8005c04:	9300      	str	r3, [sp, #0]
 8005c06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005c0a:	4a26      	ldr	r2, [pc, #152]	; (8005ca4 <main+0x644>)
 8005c0c:	211e      	movs	r1, #30
 8005c0e:	2038      	movs	r0, #56	; 0x38
 8005c10:	f7ff fa18 	bl	8005044 <LCD_ShowString>
					    break;
 8005c14:	e051      	b.n	8005cba <main+0x65a>
					case BLUEM :
						LCD_Fill(LCD_W/16*7,LCD_H/16*3,LCD_W/16*11,LCD_H/16*5,BLACK);
 8005c16:	2300      	movs	r3, #0
 8005c18:	9300      	str	r3, [sp, #0]
 8005c1a:	2332      	movs	r3, #50	; 0x32
 8005c1c:	2258      	movs	r2, #88	; 0x58
 8005c1e:	211e      	movs	r1, #30
 8005c20:	2038      	movs	r0, #56	; 0x38
 8005c22:	f7ff f8ed 	bl	8004e00 <LCD_Fill>
						//BlueStatus();
						if(blueOn == 1)
 8005c26:	4b20      	ldr	r3, [pc, #128]	; (8005ca8 <main+0x648>)
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d10d      	bne.n	8005c4a <main+0x5ea>
						{
							LCD_ShowString (LCD_W/16*7,LCD_H/16*3,"ON", WHITE, BLACK, 16,	1);
 8005c2e:	2301      	movs	r3, #1
 8005c30:	9302      	str	r3, [sp, #8]
 8005c32:	2310      	movs	r3, #16
 8005c34:	9301      	str	r3, [sp, #4]
 8005c36:	2300      	movs	r3, #0
 8005c38:	9300      	str	r3, [sp, #0]
 8005c3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005c3e:	4a1b      	ldr	r2, [pc, #108]	; (8005cac <main+0x64c>)
 8005c40:	211e      	movs	r1, #30
 8005c42:	2038      	movs	r0, #56	; 0x38
 8005c44:	f7ff f9fe 	bl	8005044 <LCD_ShowString>
						}
						else
						{
							LCD_ShowString (LCD_W/16*7,LCD_H/16*3,"OFF", WHITE,BLACK, 16,	1);
						}
					    break;
 8005c48:	e037      	b.n	8005cba <main+0x65a>
							LCD_ShowString (LCD_W/16*7,LCD_H/16*3,"OFF", WHITE,BLACK, 16,	1);
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	9302      	str	r3, [sp, #8]
 8005c4e:	2310      	movs	r3, #16
 8005c50:	9301      	str	r3, [sp, #4]
 8005c52:	2300      	movs	r3, #0
 8005c54:	9300      	str	r3, [sp, #0]
 8005c56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005c5a:	4a15      	ldr	r2, [pc, #84]	; (8005cb0 <main+0x650>)
 8005c5c:	211e      	movs	r1, #30
 8005c5e:	2038      	movs	r0, #56	; 0x38
 8005c60:	f7ff f9f0 	bl	8005044 <LCD_ShowString>
					    break;
 8005c64:	e029      	b.n	8005cba <main+0x65a>
 8005c66:	bf00      	nop
 8005c68:	20000004 	.word	0x20000004
 8005c6c:	20001cec 	.word	0x20001cec
 8005c70:	20000008 	.word	0x20000008
 8005c74:	20001d10 	.word	0x20001d10
 8005c78:	2000000d 	.word	0x2000000d
 8005c7c:	20001cfc 	.word	0x20001cfc
 8005c80:	2000000c 	.word	0x2000000c
 8005c84:	20001cf4 	.word	0x20001cf4
 8005c88:	20000010 	.word	0x20000010
 8005c8c:	20000014 	.word	0x20000014
 8005c90:	0800f9b4 	.word	0x0800f9b4
 8005c94:	20001d00 	.word	0x20001d00
 8005c98:	20001d08 	.word	0x20001d08
 8005c9c:	2000022c 	.word	0x2000022c
 8005ca0:	0800f9c0 	.word	0x0800f9c0
 8005ca4:	0800f9c4 	.word	0x0800f9c4
 8005ca8:	2000022d 	.word	0x2000022d
 8005cac:	0800f9c8 	.word	0x0800f9c8
 8005cb0:	0800f9cc 	.word	0x0800f9cc
					default:
						selectedFlag = 100;
 8005cb4:	2364      	movs	r3, #100	; 0x64
 8005cb6:	73fb      	strb	r3, [r7, #15]
						break;
 8005cb8:	bf00      	nop
				}
				Get_GPS_data();
 8005cba:	f7fc fbfd 	bl	80024b8 <Get_GPS_data>
				BlueStatus();
 8005cbe:	f7fc fc0f 	bl	80024e0 <BlueStatus>
				Get_Heart_data();
 8005cc2:	f7fb ff97 	bl	8001bf4 <Get_Heart_data>
			}

			i1++;
 8005cc6:	7afb      	ldrb	r3, [r7, #11]
 8005cc8:	3301      	adds	r3, #1
 8005cca:	72fb      	strb	r3, [r7, #11]
			if(i1>=255)
 8005ccc:	7afb      	ldrb	r3, [r7, #11]
 8005cce:	2bff      	cmp	r3, #255	; 0xff
 8005cd0:	d104      	bne.n	8005cdc <main+0x67c>
			{
				i1=0;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	72fb      	strb	r3, [r7, #11]
				j1++;
 8005cd6:	7abb      	ldrb	r3, [r7, #10]
 8005cd8:	3301      	adds	r3, #1
 8005cda:	72bb      	strb	r3, [r7, #10]
			}
			if(j1>=255)
 8005cdc:	7abb      	ldrb	r3, [r7, #10]
 8005cde:	2bff      	cmp	r3, #255	; 0xff
 8005ce0:	d103      	bne.n	8005cea <main+0x68a>
			{
				i1=0;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	72fb      	strb	r3, [r7, #11]
				j1=0;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	72bb      	strb	r3, [r7, #10]
		while(selectedFlag != 100)
 8005cea:	7bfb      	ldrb	r3, [r7, #15]
 8005cec:	2b64      	cmp	r3, #100	; 0x64
 8005cee:	f47f adba 	bne.w	8005866 <main+0x206>
		switch_value =  Get_Key_value(0);
 8005cf2:	e503      	b.n	80056fc <main+0x9c>

08005cf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b094      	sub	sp, #80	; 0x50
 8005cf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005cfa:	f107 0320 	add.w	r3, r7, #32
 8005cfe:	2230      	movs	r2, #48	; 0x30
 8005d00:	2100      	movs	r1, #0
 8005d02:	4618      	mov	r0, r3
 8005d04:	f004 fd1e 	bl	800a744 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005d08:	f107 030c 	add.w	r3, r7, #12
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	601a      	str	r2, [r3, #0]
 8005d10:	605a      	str	r2, [r3, #4]
 8005d12:	609a      	str	r2, [r3, #8]
 8005d14:	60da      	str	r2, [r3, #12]
 8005d16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005d18:	2300      	movs	r3, #0
 8005d1a:	60bb      	str	r3, [r7, #8]
 8005d1c:	4b27      	ldr	r3, [pc, #156]	; (8005dbc <SystemClock_Config+0xc8>)
 8005d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d20:	4a26      	ldr	r2, [pc, #152]	; (8005dbc <SystemClock_Config+0xc8>)
 8005d22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d26:	6413      	str	r3, [r2, #64]	; 0x40
 8005d28:	4b24      	ldr	r3, [pc, #144]	; (8005dbc <SystemClock_Config+0xc8>)
 8005d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d30:	60bb      	str	r3, [r7, #8]
 8005d32:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005d34:	2300      	movs	r3, #0
 8005d36:	607b      	str	r3, [r7, #4]
 8005d38:	4b21      	ldr	r3, [pc, #132]	; (8005dc0 <SystemClock_Config+0xcc>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a20      	ldr	r2, [pc, #128]	; (8005dc0 <SystemClock_Config+0xcc>)
 8005d3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d42:	6013      	str	r3, [r2, #0]
 8005d44:	4b1e      	ldr	r3, [pc, #120]	; (8005dc0 <SystemClock_Config+0xcc>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005d4c:	607b      	str	r3, [r7, #4]
 8005d4e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005d50:	2302      	movs	r3, #2
 8005d52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005d54:	2301      	movs	r3, #1
 8005d56:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005d58:	2310      	movs	r3, #16
 8005d5a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005d5c:	2302      	movs	r3, #2
 8005d5e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005d60:	2300      	movs	r3, #0
 8005d62:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005d64:	2308      	movs	r3, #8
 8005d66:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8005d68:	2332      	movs	r3, #50	; 0x32
 8005d6a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005d6c:	2302      	movs	r3, #2
 8005d6e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005d70:	2304      	movs	r3, #4
 8005d72:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005d74:	f107 0320 	add.w	r3, r7, #32
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f002 fa3f 	bl	80081fc <HAL_RCC_OscConfig>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d001      	beq.n	8005d88 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8005d84:	f000 f9f8 	bl	8006178 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005d88:	230f      	movs	r3, #15
 8005d8a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005d8c:	2302      	movs	r3, #2
 8005d8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005d90:	2300      	movs	r3, #0
 8005d92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005d94:	2300      	movs	r3, #0
 8005d96:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8005d9c:	f107 030c 	add.w	r3, r7, #12
 8005da0:	2101      	movs	r1, #1
 8005da2:	4618      	mov	r0, r3
 8005da4:	f002 fca2 	bl	80086ec <HAL_RCC_ClockConfig>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d001      	beq.n	8005db2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8005dae:	f000 f9e3 	bl	8006178 <Error_Handler>
  }
}
 8005db2:	bf00      	nop
 8005db4:	3750      	adds	r7, #80	; 0x50
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	bf00      	nop
 8005dbc:	40023800 	.word	0x40023800
 8005dc0:	40007000 	.word	0x40007000

08005dc4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005dc8:	4b12      	ldr	r3, [pc, #72]	; (8005e14 <MX_I2C1_Init+0x50>)
 8005dca:	4a13      	ldr	r2, [pc, #76]	; (8005e18 <MX_I2C1_Init+0x54>)
 8005dcc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8005dce:	4b11      	ldr	r3, [pc, #68]	; (8005e14 <MX_I2C1_Init+0x50>)
 8005dd0:	4a12      	ldr	r2, [pc, #72]	; (8005e1c <MX_I2C1_Init+0x58>)
 8005dd2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005dd4:	4b0f      	ldr	r3, [pc, #60]	; (8005e14 <MX_I2C1_Init+0x50>)
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005dda:	4b0e      	ldr	r3, [pc, #56]	; (8005e14 <MX_I2C1_Init+0x50>)
 8005ddc:	2200      	movs	r2, #0
 8005dde:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005de0:	4b0c      	ldr	r3, [pc, #48]	; (8005e14 <MX_I2C1_Init+0x50>)
 8005de2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005de6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005de8:	4b0a      	ldr	r3, [pc, #40]	; (8005e14 <MX_I2C1_Init+0x50>)
 8005dea:	2200      	movs	r2, #0
 8005dec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005dee:	4b09      	ldr	r3, [pc, #36]	; (8005e14 <MX_I2C1_Init+0x50>)
 8005df0:	2200      	movs	r2, #0
 8005df2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005df4:	4b07      	ldr	r3, [pc, #28]	; (8005e14 <MX_I2C1_Init+0x50>)
 8005df6:	2200      	movs	r2, #0
 8005df8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005dfa:	4b06      	ldr	r3, [pc, #24]	; (8005e14 <MX_I2C1_Init+0x50>)
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005e00:	4804      	ldr	r0, [pc, #16]	; (8005e14 <MX_I2C1_Init+0x50>)
 8005e02:	f001 f9fd 	bl	8007200 <HAL_I2C_Init>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d001      	beq.n	8005e10 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005e0c:	f000 f9b4 	bl	8006178 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005e10:	bf00      	nop
 8005e12:	bd80      	pop	{r7, pc}
 8005e14:	20001e00 	.word	0x20001e00
 8005e18:	40005400 	.word	0x40005400
 8005e1c:	000186a0 	.word	0x000186a0

08005e20 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8005e24:	4b12      	ldr	r3, [pc, #72]	; (8005e70 <MX_I2C2_Init+0x50>)
 8005e26:	4a13      	ldr	r2, [pc, #76]	; (8005e74 <MX_I2C2_Init+0x54>)
 8005e28:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8005e2a:	4b11      	ldr	r3, [pc, #68]	; (8005e70 <MX_I2C2_Init+0x50>)
 8005e2c:	4a12      	ldr	r2, [pc, #72]	; (8005e78 <MX_I2C2_Init+0x58>)
 8005e2e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005e30:	4b0f      	ldr	r3, [pc, #60]	; (8005e70 <MX_I2C2_Init+0x50>)
 8005e32:	2200      	movs	r2, #0
 8005e34:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8005e36:	4b0e      	ldr	r3, [pc, #56]	; (8005e70 <MX_I2C2_Init+0x50>)
 8005e38:	2200      	movs	r2, #0
 8005e3a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005e3c:	4b0c      	ldr	r3, [pc, #48]	; (8005e70 <MX_I2C2_Init+0x50>)
 8005e3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005e42:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005e44:	4b0a      	ldr	r3, [pc, #40]	; (8005e70 <MX_I2C2_Init+0x50>)
 8005e46:	2200      	movs	r2, #0
 8005e48:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8005e4a:	4b09      	ldr	r3, [pc, #36]	; (8005e70 <MX_I2C2_Init+0x50>)
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005e50:	4b07      	ldr	r3, [pc, #28]	; (8005e70 <MX_I2C2_Init+0x50>)
 8005e52:	2200      	movs	r2, #0
 8005e54:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005e56:	4b06      	ldr	r3, [pc, #24]	; (8005e70 <MX_I2C2_Init+0x50>)
 8005e58:	2200      	movs	r2, #0
 8005e5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005e5c:	4804      	ldr	r0, [pc, #16]	; (8005e70 <MX_I2C2_Init+0x50>)
 8005e5e:	f001 f9cf 	bl	8007200 <HAL_I2C_Init>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d001      	beq.n	8005e6c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8005e68:	f000 f986 	bl	8006178 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8005e6c:	bf00      	nop
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	20001e54 	.word	0x20001e54
 8005e74:	40005800 	.word	0x40005800
 8005e78:	000186a0 	.word	0x000186a0

08005e7c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8005e80:	4b17      	ldr	r3, [pc, #92]	; (8005ee0 <MX_SPI1_Init+0x64>)
 8005e82:	4a18      	ldr	r2, [pc, #96]	; (8005ee4 <MX_SPI1_Init+0x68>)
 8005e84:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005e86:	4b16      	ldr	r3, [pc, #88]	; (8005ee0 <MX_SPI1_Init+0x64>)
 8005e88:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005e8c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005e8e:	4b14      	ldr	r3, [pc, #80]	; (8005ee0 <MX_SPI1_Init+0x64>)
 8005e90:	2200      	movs	r2, #0
 8005e92:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005e94:	4b12      	ldr	r3, [pc, #72]	; (8005ee0 <MX_SPI1_Init+0x64>)
 8005e96:	2200      	movs	r2, #0
 8005e98:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e9a:	4b11      	ldr	r3, [pc, #68]	; (8005ee0 <MX_SPI1_Init+0x64>)
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005ea0:	4b0f      	ldr	r3, [pc, #60]	; (8005ee0 <MX_SPI1_Init+0x64>)
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005ea6:	4b0e      	ldr	r3, [pc, #56]	; (8005ee0 <MX_SPI1_Init+0x64>)
 8005ea8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005eac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005eae:	4b0c      	ldr	r3, [pc, #48]	; (8005ee0 <MX_SPI1_Init+0x64>)
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005eb4:	4b0a      	ldr	r3, [pc, #40]	; (8005ee0 <MX_SPI1_Init+0x64>)
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005eba:	4b09      	ldr	r3, [pc, #36]	; (8005ee0 <MX_SPI1_Init+0x64>)
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ec0:	4b07      	ldr	r3, [pc, #28]	; (8005ee0 <MX_SPI1_Init+0x64>)
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8005ec6:	4b06      	ldr	r3, [pc, #24]	; (8005ee0 <MX_SPI1_Init+0x64>)
 8005ec8:	220a      	movs	r2, #10
 8005eca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005ecc:	4804      	ldr	r0, [pc, #16]	; (8005ee0 <MX_SPI1_Init+0x64>)
 8005ece:	f002 fddd 	bl	8008a8c <HAL_SPI_Init>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d001      	beq.n	8005edc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8005ed8:	f000 f94e 	bl	8006178 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  //__HAL_SPI_ENABLE(&hspi1);
  /* USER CODE END SPI1_Init 2 */

}
 8005edc:	bf00      	nop
 8005ede:	bd80      	pop	{r7, pc}
 8005ee0:	20001eec 	.word	0x20001eec
 8005ee4:	40013000 	.word	0x40013000

08005ee8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b08a      	sub	sp, #40	; 0x28
 8005eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005eee:	f107 0320 	add.w	r3, r7, #32
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	601a      	str	r2, [r3, #0]
 8005ef6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005ef8:	1d3b      	adds	r3, r7, #4
 8005efa:	2200      	movs	r2, #0
 8005efc:	601a      	str	r2, [r3, #0]
 8005efe:	605a      	str	r2, [r3, #4]
 8005f00:	609a      	str	r2, [r3, #8]
 8005f02:	60da      	str	r2, [r3, #12]
 8005f04:	611a      	str	r2, [r3, #16]
 8005f06:	615a      	str	r2, [r3, #20]
 8005f08:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005f0a:	4b22      	ldr	r3, [pc, #136]	; (8005f94 <MX_TIM2_Init+0xac>)
 8005f0c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005f10:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8005f12:	4b20      	ldr	r3, [pc, #128]	; (8005f94 <MX_TIM2_Init+0xac>)
 8005f14:	2263      	movs	r2, #99	; 0x63
 8005f16:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f18:	4b1e      	ldr	r3, [pc, #120]	; (8005f94 <MX_TIM2_Init+0xac>)
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500-1;
 8005f1e:	4b1d      	ldr	r3, [pc, #116]	; (8005f94 <MX_TIM2_Init+0xac>)
 8005f20:	f240 12f3 	movw	r2, #499	; 0x1f3
 8005f24:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005f26:	4b1b      	ldr	r3, [pc, #108]	; (8005f94 <MX_TIM2_Init+0xac>)
 8005f28:	2200      	movs	r2, #0
 8005f2a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005f2c:	4b19      	ldr	r3, [pc, #100]	; (8005f94 <MX_TIM2_Init+0xac>)
 8005f2e:	2200      	movs	r2, #0
 8005f30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8005f32:	4818      	ldr	r0, [pc, #96]	; (8005f94 <MX_TIM2_Init+0xac>)
 8005f34:	f003 f8a0 	bl	8009078 <HAL_TIM_PWM_Init>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d001      	beq.n	8005f42 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8005f3e:	f000 f91b 	bl	8006178 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005f42:	2300      	movs	r3, #0
 8005f44:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005f46:	2300      	movs	r3, #0
 8005f48:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005f4a:	f107 0320 	add.w	r3, r7, #32
 8005f4e:	4619      	mov	r1, r3
 8005f50:	4810      	ldr	r0, [pc, #64]	; (8005f94 <MX_TIM2_Init+0xac>)
 8005f52:	f003 fc85 	bl	8009860 <HAL_TIMEx_MasterConfigSynchronization>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d001      	beq.n	8005f60 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8005f5c:	f000 f90c 	bl	8006178 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005f60:	2360      	movs	r3, #96	; 0x60
 8005f62:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005f64:	2300      	movs	r3, #0
 8005f66:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005f70:	1d3b      	adds	r3, r7, #4
 8005f72:	2204      	movs	r2, #4
 8005f74:	4619      	mov	r1, r3
 8005f76:	4807      	ldr	r0, [pc, #28]	; (8005f94 <MX_TIM2_Init+0xac>)
 8005f78:	f003 f97e 	bl	8009278 <HAL_TIM_PWM_ConfigChannel>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d001      	beq.n	8005f86 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8005f82:	f000 f8f9 	bl	8006178 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8005f86:	4803      	ldr	r0, [pc, #12]	; (8005f94 <MX_TIM2_Init+0xac>)
 8005f88:	f000 fa74 	bl	8006474 <HAL_TIM_MspPostInit>

}
 8005f8c:	bf00      	nop
 8005f8e:	3728      	adds	r7, #40	; 0x28
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	20001f44 	.word	0x20001f44

08005f98 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005f9c:	4b11      	ldr	r3, [pc, #68]	; (8005fe4 <MX_USART1_UART_Init+0x4c>)
 8005f9e:	4a12      	ldr	r2, [pc, #72]	; (8005fe8 <MX_USART1_UART_Init+0x50>)
 8005fa0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8005fa2:	4b10      	ldr	r3, [pc, #64]	; (8005fe4 <MX_USART1_UART_Init+0x4c>)
 8005fa4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8005fa8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005faa:	4b0e      	ldr	r3, [pc, #56]	; (8005fe4 <MX_USART1_UART_Init+0x4c>)
 8005fac:	2200      	movs	r2, #0
 8005fae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005fb0:	4b0c      	ldr	r3, [pc, #48]	; (8005fe4 <MX_USART1_UART_Init+0x4c>)
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005fb6:	4b0b      	ldr	r3, [pc, #44]	; (8005fe4 <MX_USART1_UART_Init+0x4c>)
 8005fb8:	2200      	movs	r2, #0
 8005fba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005fbc:	4b09      	ldr	r3, [pc, #36]	; (8005fe4 <MX_USART1_UART_Init+0x4c>)
 8005fbe:	220c      	movs	r2, #12
 8005fc0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005fc2:	4b08      	ldr	r3, [pc, #32]	; (8005fe4 <MX_USART1_UART_Init+0x4c>)
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005fc8:	4b06      	ldr	r3, [pc, #24]	; (8005fe4 <MX_USART1_UART_Init+0x4c>)
 8005fca:	2200      	movs	r2, #0
 8005fcc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005fce:	4805      	ldr	r0, [pc, #20]	; (8005fe4 <MX_USART1_UART_Init+0x4c>)
 8005fd0:	f003 fcb4 	bl	800993c <HAL_UART_Init>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d001      	beq.n	8005fde <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005fda:	f000 f8cd 	bl	8006178 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005fde:	bf00      	nop
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	20001ea8 	.word	0x20001ea8
 8005fe8:	40011000 	.word	0x40011000

08005fec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005ff0:	4b11      	ldr	r3, [pc, #68]	; (8006038 <MX_USART2_UART_Init+0x4c>)
 8005ff2:	4a12      	ldr	r2, [pc, #72]	; (800603c <MX_USART2_UART_Init+0x50>)
 8005ff4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005ff6:	4b10      	ldr	r3, [pc, #64]	; (8006038 <MX_USART2_UART_Init+0x4c>)
 8005ff8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005ffc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005ffe:	4b0e      	ldr	r3, [pc, #56]	; (8006038 <MX_USART2_UART_Init+0x4c>)
 8006000:	2200      	movs	r2, #0
 8006002:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006004:	4b0c      	ldr	r3, [pc, #48]	; (8006038 <MX_USART2_UART_Init+0x4c>)
 8006006:	2200      	movs	r2, #0
 8006008:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800600a:	4b0b      	ldr	r3, [pc, #44]	; (8006038 <MX_USART2_UART_Init+0x4c>)
 800600c:	2200      	movs	r2, #0
 800600e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006010:	4b09      	ldr	r3, [pc, #36]	; (8006038 <MX_USART2_UART_Init+0x4c>)
 8006012:	220c      	movs	r2, #12
 8006014:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006016:	4b08      	ldr	r3, [pc, #32]	; (8006038 <MX_USART2_UART_Init+0x4c>)
 8006018:	2200      	movs	r2, #0
 800601a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800601c:	4b06      	ldr	r3, [pc, #24]	; (8006038 <MX_USART2_UART_Init+0x4c>)
 800601e:	2200      	movs	r2, #0
 8006020:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006022:	4805      	ldr	r0, [pc, #20]	; (8006038 <MX_USART2_UART_Init+0x4c>)
 8006024:	f003 fc8a 	bl	800993c <HAL_UART_Init>
 8006028:	4603      	mov	r3, r0
 800602a:	2b00      	cmp	r3, #0
 800602c:	d001      	beq.n	8006032 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800602e:	f000 f8a3 	bl	8006178 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006032:	bf00      	nop
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	20001f8c 	.word	0x20001f8c
 800603c:	40004400 	.word	0x40004400

08006040 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b08a      	sub	sp, #40	; 0x28
 8006044:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006046:	f107 0314 	add.w	r3, r7, #20
 800604a:	2200      	movs	r2, #0
 800604c:	601a      	str	r2, [r3, #0]
 800604e:	605a      	str	r2, [r3, #4]
 8006050:	609a      	str	r2, [r3, #8]
 8006052:	60da      	str	r2, [r3, #12]
 8006054:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006056:	2300      	movs	r3, #0
 8006058:	613b      	str	r3, [r7, #16]
 800605a:	4b43      	ldr	r3, [pc, #268]	; (8006168 <MX_GPIO_Init+0x128>)
 800605c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800605e:	4a42      	ldr	r2, [pc, #264]	; (8006168 <MX_GPIO_Init+0x128>)
 8006060:	f043 0304 	orr.w	r3, r3, #4
 8006064:	6313      	str	r3, [r2, #48]	; 0x30
 8006066:	4b40      	ldr	r3, [pc, #256]	; (8006168 <MX_GPIO_Init+0x128>)
 8006068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800606a:	f003 0304 	and.w	r3, r3, #4
 800606e:	613b      	str	r3, [r7, #16]
 8006070:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006072:	2300      	movs	r3, #0
 8006074:	60fb      	str	r3, [r7, #12]
 8006076:	4b3c      	ldr	r3, [pc, #240]	; (8006168 <MX_GPIO_Init+0x128>)
 8006078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800607a:	4a3b      	ldr	r2, [pc, #236]	; (8006168 <MX_GPIO_Init+0x128>)
 800607c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006080:	6313      	str	r3, [r2, #48]	; 0x30
 8006082:	4b39      	ldr	r3, [pc, #228]	; (8006168 <MX_GPIO_Init+0x128>)
 8006084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800608a:	60fb      	str	r3, [r7, #12]
 800608c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800608e:	2300      	movs	r3, #0
 8006090:	60bb      	str	r3, [r7, #8]
 8006092:	4b35      	ldr	r3, [pc, #212]	; (8006168 <MX_GPIO_Init+0x128>)
 8006094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006096:	4a34      	ldr	r2, [pc, #208]	; (8006168 <MX_GPIO_Init+0x128>)
 8006098:	f043 0301 	orr.w	r3, r3, #1
 800609c:	6313      	str	r3, [r2, #48]	; 0x30
 800609e:	4b32      	ldr	r3, [pc, #200]	; (8006168 <MX_GPIO_Init+0x128>)
 80060a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a2:	f003 0301 	and.w	r3, r3, #1
 80060a6:	60bb      	str	r3, [r7, #8]
 80060a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80060aa:	2300      	movs	r3, #0
 80060ac:	607b      	str	r3, [r7, #4]
 80060ae:	4b2e      	ldr	r3, [pc, #184]	; (8006168 <MX_GPIO_Init+0x128>)
 80060b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b2:	4a2d      	ldr	r2, [pc, #180]	; (8006168 <MX_GPIO_Init+0x128>)
 80060b4:	f043 0302 	orr.w	r3, r3, #2
 80060b8:	6313      	str	r3, [r2, #48]	; 0x30
 80060ba:	4b2b      	ldr	r3, [pc, #172]	; (8006168 <MX_GPIO_Init+0x128>)
 80060bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060be:	f003 0302 	and.w	r3, r3, #2
 80060c2:	607b      	str	r3, [r7, #4]
 80060c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_GPIO_Port, LED_GPIO_Pin, GPIO_PIN_RESET);
 80060c6:	2200      	movs	r2, #0
 80060c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80060cc:	4827      	ldr	r0, [pc, #156]	; (800616c <MX_GPIO_Init+0x12c>)
 80060ce:	f001 f87d 	bl	80071cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BLU_GPIO_SW_Pin|TFT_GPIO_RESET_Pin|BLU_GPIO_HW_Pin|BLU_GPIO_CMD_Pin, GPIO_PIN_RESET);
 80060d2:	2200      	movs	r2, #0
 80060d4:	f248 1150 	movw	r1, #33104	; 0x8150
 80060d8:	4825      	ldr	r0, [pc, #148]	; (8006170 <MX_GPIO_Init+0x130>)
 80060da:	f001 f877 	bl	80071cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TFT_GPIO_DC_Pin|TFT_GPIO__CS_Pin|FD_GPIO_INT_Pin|HR_GPIO_INT_Pin, GPIO_PIN_RESET);
 80060de:	2200      	movs	r2, #0
 80060e0:	f240 1123 	movw	r1, #291	; 0x123
 80060e4:	4823      	ldr	r0, [pc, #140]	; (8006174 <MX_GPIO_Init+0x134>)
 80060e6:	f001 f871 	bl	80071cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GPIO_Pin */
  GPIO_InitStruct.Pin = LED_GPIO_Pin;
 80060ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80060ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80060f0:	2301      	movs	r3, #1
 80060f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060f4:	2300      	movs	r3, #0
 80060f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80060f8:	2300      	movs	r3, #0
 80060fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_GPIO_Port, &GPIO_InitStruct);
 80060fc:	f107 0314 	add.w	r3, r7, #20
 8006100:	4619      	mov	r1, r3
 8006102:	481a      	ldr	r0, [pc, #104]	; (800616c <MX_GPIO_Init+0x12c>)
 8006104:	f000 fde2 	bl	8006ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : BLU_GPIO_SW_Pin TFT_GPIO_RESET_Pin BLU_GPIO_HW_Pin BLU_GPIO_CMD_Pin */
  GPIO_InitStruct.Pin = BLU_GPIO_SW_Pin|TFT_GPIO_RESET_Pin|BLU_GPIO_HW_Pin|BLU_GPIO_CMD_Pin;
 8006108:	f248 1350 	movw	r3, #33104	; 0x8150
 800610c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800610e:	2301      	movs	r3, #1
 8006110:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006112:	2300      	movs	r3, #0
 8006114:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006116:	2300      	movs	r3, #0
 8006118:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800611a:	f107 0314 	add.w	r3, r7, #20
 800611e:	4619      	mov	r1, r3
 8006120:	4813      	ldr	r0, [pc, #76]	; (8006170 <MX_GPIO_Init+0x130>)
 8006122:	f000 fdd3 	bl	8006ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : TFT_GPIO_DC_Pin TFT_GPIO__CS_Pin FD_GPIO_INT_Pin HR_GPIO_INT_Pin */
  GPIO_InitStruct.Pin = TFT_GPIO_DC_Pin|TFT_GPIO__CS_Pin|FD_GPIO_INT_Pin|HR_GPIO_INT_Pin;
 8006126:	f240 1323 	movw	r3, #291	; 0x123
 800612a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800612c:	2301      	movs	r3, #1
 800612e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006130:	2300      	movs	r3, #0
 8006132:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006134:	2300      	movs	r3, #0
 8006136:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006138:	f107 0314 	add.w	r3, r7, #20
 800613c:	4619      	mov	r1, r3
 800613e:	480d      	ldr	r0, [pc, #52]	; (8006174 <MX_GPIO_Init+0x134>)
 8006140:	f000 fdc4 	bl	8006ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : key2_GPIO_Pin key1_GPIO_Pin key3_GPIO_Pin */
  GPIO_InitStruct.Pin = key2_GPIO_Pin|key1_GPIO_Pin|key3_GPIO_Pin;
 8006144:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8006148:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800614a:	2300      	movs	r3, #0
 800614c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800614e:	2301      	movs	r3, #1
 8006150:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006152:	f107 0314 	add.w	r3, r7, #20
 8006156:	4619      	mov	r1, r3
 8006158:	4806      	ldr	r0, [pc, #24]	; (8006174 <MX_GPIO_Init+0x134>)
 800615a:	f000 fdb7 	bl	8006ccc <HAL_GPIO_Init>

}
 800615e:	bf00      	nop
 8006160:	3728      	adds	r7, #40	; 0x28
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop
 8006168:	40023800 	.word	0x40023800
 800616c:	40020800 	.word	0x40020800
 8006170:	40020000 	.word	0x40020000
 8006174:	40020400 	.word	0x40020400

08006178 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006178:	b480      	push	{r7}
 800617a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800617c:	b672      	cpsid	i
}
 800617e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006180:	e7fe      	b.n	8006180 <Error_Handler+0x8>
	...

08006184 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800618a:	2300      	movs	r3, #0
 800618c:	607b      	str	r3, [r7, #4]
 800618e:	4b10      	ldr	r3, [pc, #64]	; (80061d0 <HAL_MspInit+0x4c>)
 8006190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006192:	4a0f      	ldr	r2, [pc, #60]	; (80061d0 <HAL_MspInit+0x4c>)
 8006194:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006198:	6453      	str	r3, [r2, #68]	; 0x44
 800619a:	4b0d      	ldr	r3, [pc, #52]	; (80061d0 <HAL_MspInit+0x4c>)
 800619c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800619e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061a2:	607b      	str	r3, [r7, #4]
 80061a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80061a6:	2300      	movs	r3, #0
 80061a8:	603b      	str	r3, [r7, #0]
 80061aa:	4b09      	ldr	r3, [pc, #36]	; (80061d0 <HAL_MspInit+0x4c>)
 80061ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ae:	4a08      	ldr	r2, [pc, #32]	; (80061d0 <HAL_MspInit+0x4c>)
 80061b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061b4:	6413      	str	r3, [r2, #64]	; 0x40
 80061b6:	4b06      	ldr	r3, [pc, #24]	; (80061d0 <HAL_MspInit+0x4c>)
 80061b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061be:	603b      	str	r3, [r7, #0]
 80061c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80061c2:	bf00      	nop
 80061c4:	370c      	adds	r7, #12
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr
 80061ce:	bf00      	nop
 80061d0:	40023800 	.word	0x40023800

080061d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b08c      	sub	sp, #48	; 0x30
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061dc:	f107 031c 	add.w	r3, r7, #28
 80061e0:	2200      	movs	r2, #0
 80061e2:	601a      	str	r2, [r3, #0]
 80061e4:	605a      	str	r2, [r3, #4]
 80061e6:	609a      	str	r2, [r3, #8]
 80061e8:	60da      	str	r2, [r3, #12]
 80061ea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a3b      	ldr	r2, [pc, #236]	; (80062e0 <HAL_I2C_MspInit+0x10c>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d12d      	bne.n	8006252 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80061f6:	2300      	movs	r3, #0
 80061f8:	61bb      	str	r3, [r7, #24]
 80061fa:	4b3a      	ldr	r3, [pc, #232]	; (80062e4 <HAL_I2C_MspInit+0x110>)
 80061fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061fe:	4a39      	ldr	r2, [pc, #228]	; (80062e4 <HAL_I2C_MspInit+0x110>)
 8006200:	f043 0302 	orr.w	r3, r3, #2
 8006204:	6313      	str	r3, [r2, #48]	; 0x30
 8006206:	4b37      	ldr	r3, [pc, #220]	; (80062e4 <HAL_I2C_MspInit+0x110>)
 8006208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800620a:	f003 0302 	and.w	r3, r3, #2
 800620e:	61bb      	str	r3, [r7, #24]
 8006210:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = FD_I2C1_SCL_Pin|FD_I2C1_SDA_Pin;
 8006212:	f44f 7310 	mov.w	r3, #576	; 0x240
 8006216:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006218:	2312      	movs	r3, #18
 800621a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800621c:	2301      	movs	r3, #1
 800621e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006220:	2303      	movs	r3, #3
 8006222:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006224:	2304      	movs	r3, #4
 8006226:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006228:	f107 031c 	add.w	r3, r7, #28
 800622c:	4619      	mov	r1, r3
 800622e:	482e      	ldr	r0, [pc, #184]	; (80062e8 <HAL_I2C_MspInit+0x114>)
 8006230:	f000 fd4c 	bl	8006ccc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006234:	2300      	movs	r3, #0
 8006236:	617b      	str	r3, [r7, #20]
 8006238:	4b2a      	ldr	r3, [pc, #168]	; (80062e4 <HAL_I2C_MspInit+0x110>)
 800623a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623c:	4a29      	ldr	r2, [pc, #164]	; (80062e4 <HAL_I2C_MspInit+0x110>)
 800623e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006242:	6413      	str	r3, [r2, #64]	; 0x40
 8006244:	4b27      	ldr	r3, [pc, #156]	; (80062e4 <HAL_I2C_MspInit+0x110>)
 8006246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006248:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800624c:	617b      	str	r3, [r7, #20]
 800624e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8006250:	e041      	b.n	80062d6 <HAL_I2C_MspInit+0x102>
  else if(hi2c->Instance==I2C2)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a25      	ldr	r2, [pc, #148]	; (80062ec <HAL_I2C_MspInit+0x118>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d13c      	bne.n	80062d6 <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800625c:	2300      	movs	r3, #0
 800625e:	613b      	str	r3, [r7, #16]
 8006260:	4b20      	ldr	r3, [pc, #128]	; (80062e4 <HAL_I2C_MspInit+0x110>)
 8006262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006264:	4a1f      	ldr	r2, [pc, #124]	; (80062e4 <HAL_I2C_MspInit+0x110>)
 8006266:	f043 0302 	orr.w	r3, r3, #2
 800626a:	6313      	str	r3, [r2, #48]	; 0x30
 800626c:	4b1d      	ldr	r3, [pc, #116]	; (80062e4 <HAL_I2C_MspInit+0x110>)
 800626e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006270:	f003 0302 	and.w	r3, r3, #2
 8006274:	613b      	str	r3, [r7, #16]
 8006276:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = HR_I2C2_SCL_Pin;
 8006278:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800627c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800627e:	2312      	movs	r3, #18
 8006280:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006282:	2301      	movs	r3, #1
 8006284:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006286:	2303      	movs	r3, #3
 8006288:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800628a:	2304      	movs	r3, #4
 800628c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(HR_I2C2_SCL_GPIO_Port, &GPIO_InitStruct);
 800628e:	f107 031c 	add.w	r3, r7, #28
 8006292:	4619      	mov	r1, r3
 8006294:	4814      	ldr	r0, [pc, #80]	; (80062e8 <HAL_I2C_MspInit+0x114>)
 8006296:	f000 fd19 	bl	8006ccc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HR_I2C2_SDA_Pin;
 800629a:	2308      	movs	r3, #8
 800629c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800629e:	2312      	movs	r3, #18
 80062a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80062a2:	2301      	movs	r3, #1
 80062a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062a6:	2303      	movs	r3, #3
 80062a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80062aa:	2309      	movs	r3, #9
 80062ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(HR_I2C2_SDA_GPIO_Port, &GPIO_InitStruct);
 80062ae:	f107 031c 	add.w	r3, r7, #28
 80062b2:	4619      	mov	r1, r3
 80062b4:	480c      	ldr	r0, [pc, #48]	; (80062e8 <HAL_I2C_MspInit+0x114>)
 80062b6:	f000 fd09 	bl	8006ccc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80062ba:	2300      	movs	r3, #0
 80062bc:	60fb      	str	r3, [r7, #12]
 80062be:	4b09      	ldr	r3, [pc, #36]	; (80062e4 <HAL_I2C_MspInit+0x110>)
 80062c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c2:	4a08      	ldr	r2, [pc, #32]	; (80062e4 <HAL_I2C_MspInit+0x110>)
 80062c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80062c8:	6413      	str	r3, [r2, #64]	; 0x40
 80062ca:	4b06      	ldr	r3, [pc, #24]	; (80062e4 <HAL_I2C_MspInit+0x110>)
 80062cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062d2:	60fb      	str	r3, [r7, #12]
 80062d4:	68fb      	ldr	r3, [r7, #12]
}
 80062d6:	bf00      	nop
 80062d8:	3730      	adds	r7, #48	; 0x30
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	40005400 	.word	0x40005400
 80062e4:	40023800 	.word	0x40023800
 80062e8:	40020400 	.word	0x40020400
 80062ec:	40005800 	.word	0x40005800

080062f0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b082      	sub	sp, #8
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a15      	ldr	r2, [pc, #84]	; (8006354 <HAL_I2C_MspDeInit+0x64>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d10f      	bne.n	8006322 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8006302:	4b15      	ldr	r3, [pc, #84]	; (8006358 <HAL_I2C_MspDeInit+0x68>)
 8006304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006306:	4a14      	ldr	r2, [pc, #80]	; (8006358 <HAL_I2C_MspDeInit+0x68>)
 8006308:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800630c:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(FD_I2C1_SCL_GPIO_Port, FD_I2C1_SCL_Pin);
 800630e:	2140      	movs	r1, #64	; 0x40
 8006310:	4812      	ldr	r0, [pc, #72]	; (800635c <HAL_I2C_MspDeInit+0x6c>)
 8006312:	f000 fe5f 	bl	8006fd4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(FD_I2C1_SDA_GPIO_Port, FD_I2C1_SDA_Pin);
 8006316:	f44f 7100 	mov.w	r1, #512	; 0x200
 800631a:	4810      	ldr	r0, [pc, #64]	; (800635c <HAL_I2C_MspDeInit+0x6c>)
 800631c:	f000 fe5a 	bl	8006fd4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8006320:	e013      	b.n	800634a <HAL_I2C_MspDeInit+0x5a>
  else if(hi2c->Instance==I2C2)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a0e      	ldr	r2, [pc, #56]	; (8006360 <HAL_I2C_MspDeInit+0x70>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d10e      	bne.n	800634a <HAL_I2C_MspDeInit+0x5a>
    __HAL_RCC_I2C2_CLK_DISABLE();
 800632c:	4b0a      	ldr	r3, [pc, #40]	; (8006358 <HAL_I2C_MspDeInit+0x68>)
 800632e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006330:	4a09      	ldr	r2, [pc, #36]	; (8006358 <HAL_I2C_MspDeInit+0x68>)
 8006332:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8006336:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(HR_I2C2_SCL_GPIO_Port, HR_I2C2_SCL_Pin);
 8006338:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800633c:	4807      	ldr	r0, [pc, #28]	; (800635c <HAL_I2C_MspDeInit+0x6c>)
 800633e:	f000 fe49 	bl	8006fd4 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(HR_I2C2_SDA_GPIO_Port, HR_I2C2_SDA_Pin);
 8006342:	2108      	movs	r1, #8
 8006344:	4805      	ldr	r0, [pc, #20]	; (800635c <HAL_I2C_MspDeInit+0x6c>)
 8006346:	f000 fe45 	bl	8006fd4 <HAL_GPIO_DeInit>
}
 800634a:	bf00      	nop
 800634c:	3708      	adds	r7, #8
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}
 8006352:	bf00      	nop
 8006354:	40005400 	.word	0x40005400
 8006358:	40023800 	.word	0x40023800
 800635c:	40020400 	.word	0x40020400
 8006360:	40005800 	.word	0x40005800

08006364 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b08a      	sub	sp, #40	; 0x28
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800636c:	f107 0314 	add.w	r3, r7, #20
 8006370:	2200      	movs	r2, #0
 8006372:	601a      	str	r2, [r3, #0]
 8006374:	605a      	str	r2, [r3, #4]
 8006376:	609a      	str	r2, [r3, #8]
 8006378:	60da      	str	r2, [r3, #12]
 800637a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a28      	ldr	r2, [pc, #160]	; (8006424 <HAL_SPI_MspInit+0xc0>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d149      	bne.n	800641a <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006386:	2300      	movs	r3, #0
 8006388:	613b      	str	r3, [r7, #16]
 800638a:	4b27      	ldr	r3, [pc, #156]	; (8006428 <HAL_SPI_MspInit+0xc4>)
 800638c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800638e:	4a26      	ldr	r2, [pc, #152]	; (8006428 <HAL_SPI_MspInit+0xc4>)
 8006390:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006394:	6453      	str	r3, [r2, #68]	; 0x44
 8006396:	4b24      	ldr	r3, [pc, #144]	; (8006428 <HAL_SPI_MspInit+0xc4>)
 8006398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800639a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800639e:	613b      	str	r3, [r7, #16]
 80063a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80063a2:	2300      	movs	r3, #0
 80063a4:	60fb      	str	r3, [r7, #12]
 80063a6:	4b20      	ldr	r3, [pc, #128]	; (8006428 <HAL_SPI_MspInit+0xc4>)
 80063a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063aa:	4a1f      	ldr	r2, [pc, #124]	; (8006428 <HAL_SPI_MspInit+0xc4>)
 80063ac:	f043 0301 	orr.w	r3, r3, #1
 80063b0:	6313      	str	r3, [r2, #48]	; 0x30
 80063b2:	4b1d      	ldr	r3, [pc, #116]	; (8006428 <HAL_SPI_MspInit+0xc4>)
 80063b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b6:	f003 0301 	and.w	r3, r3, #1
 80063ba:	60fb      	str	r3, [r7, #12]
 80063bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80063be:	2300      	movs	r3, #0
 80063c0:	60bb      	str	r3, [r7, #8]
 80063c2:	4b19      	ldr	r3, [pc, #100]	; (8006428 <HAL_SPI_MspInit+0xc4>)
 80063c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c6:	4a18      	ldr	r2, [pc, #96]	; (8006428 <HAL_SPI_MspInit+0xc4>)
 80063c8:	f043 0302 	orr.w	r3, r3, #2
 80063cc:	6313      	str	r3, [r2, #48]	; 0x30
 80063ce:	4b16      	ldr	r3, [pc, #88]	; (8006428 <HAL_SPI_MspInit+0xc4>)
 80063d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d2:	f003 0302 	and.w	r3, r3, #2
 80063d6:	60bb      	str	r3, [r7, #8]
 80063d8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = TFT_SPI1_SCK_Pin|TFT_SPI1_MOSI_SDA_Pin;
 80063da:	23a0      	movs	r3, #160	; 0xa0
 80063dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063de:	2302      	movs	r3, #2
 80063e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063e2:	2300      	movs	r3, #0
 80063e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80063e6:	2303      	movs	r3, #3
 80063e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80063ea:	2305      	movs	r3, #5
 80063ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063ee:	f107 0314 	add.w	r3, r7, #20
 80063f2:	4619      	mov	r1, r3
 80063f4:	480d      	ldr	r0, [pc, #52]	; (800642c <HAL_SPI_MspInit+0xc8>)
 80063f6:	f000 fc69 	bl	8006ccc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80063fa:	2310      	movs	r3, #16
 80063fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063fe:	2302      	movs	r3, #2
 8006400:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006402:	2300      	movs	r3, #0
 8006404:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006406:	2303      	movs	r3, #3
 8006408:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800640a:	2305      	movs	r3, #5
 800640c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800640e:	f107 0314 	add.w	r3, r7, #20
 8006412:	4619      	mov	r1, r3
 8006414:	4806      	ldr	r0, [pc, #24]	; (8006430 <HAL_SPI_MspInit+0xcc>)
 8006416:	f000 fc59 	bl	8006ccc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800641a:	bf00      	nop
 800641c:	3728      	adds	r7, #40	; 0x28
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
 8006422:	bf00      	nop
 8006424:	40013000 	.word	0x40013000
 8006428:	40023800 	.word	0x40023800
 800642c:	40020000 	.word	0x40020000
 8006430:	40020400 	.word	0x40020400

08006434 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8006434:	b480      	push	{r7}
 8006436:	b085      	sub	sp, #20
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006444:	d10d      	bne.n	8006462 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006446:	2300      	movs	r3, #0
 8006448:	60fb      	str	r3, [r7, #12]
 800644a:	4b09      	ldr	r3, [pc, #36]	; (8006470 <HAL_TIM_PWM_MspInit+0x3c>)
 800644c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800644e:	4a08      	ldr	r2, [pc, #32]	; (8006470 <HAL_TIM_PWM_MspInit+0x3c>)
 8006450:	f043 0301 	orr.w	r3, r3, #1
 8006454:	6413      	str	r3, [r2, #64]	; 0x40
 8006456:	4b06      	ldr	r3, [pc, #24]	; (8006470 <HAL_TIM_PWM_MspInit+0x3c>)
 8006458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645a:	f003 0301 	and.w	r3, r3, #1
 800645e:	60fb      	str	r3, [r7, #12]
 8006460:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8006462:	bf00      	nop
 8006464:	3714      	adds	r7, #20
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr
 800646e:	bf00      	nop
 8006470:	40023800 	.word	0x40023800

08006474 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b088      	sub	sp, #32
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800647c:	f107 030c 	add.w	r3, r7, #12
 8006480:	2200      	movs	r2, #0
 8006482:	601a      	str	r2, [r3, #0]
 8006484:	605a      	str	r2, [r3, #4]
 8006486:	609a      	str	r2, [r3, #8]
 8006488:	60da      	str	r2, [r3, #12]
 800648a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006494:	d11d      	bne.n	80064d2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006496:	2300      	movs	r3, #0
 8006498:	60bb      	str	r3, [r7, #8]
 800649a:	4b10      	ldr	r3, [pc, #64]	; (80064dc <HAL_TIM_MspPostInit+0x68>)
 800649c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800649e:	4a0f      	ldr	r2, [pc, #60]	; (80064dc <HAL_TIM_MspPostInit+0x68>)
 80064a0:	f043 0301 	orr.w	r3, r3, #1
 80064a4:	6313      	str	r3, [r2, #48]	; 0x30
 80064a6:	4b0d      	ldr	r3, [pc, #52]	; (80064dc <HAL_TIM_MspPostInit+0x68>)
 80064a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064aa:	f003 0301 	and.w	r3, r3, #1
 80064ae:	60bb      	str	r3, [r7, #8]
 80064b0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = TFT_LED_TIM2_Pin;
 80064b2:	2302      	movs	r3, #2
 80064b4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064b6:	2302      	movs	r3, #2
 80064b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064ba:	2300      	movs	r3, #0
 80064bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064be:	2300      	movs	r3, #0
 80064c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80064c2:	2301      	movs	r3, #1
 80064c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TFT_LED_TIM2_GPIO_Port, &GPIO_InitStruct);
 80064c6:	f107 030c 	add.w	r3, r7, #12
 80064ca:	4619      	mov	r1, r3
 80064cc:	4804      	ldr	r0, [pc, #16]	; (80064e0 <HAL_TIM_MspPostInit+0x6c>)
 80064ce:	f000 fbfd 	bl	8006ccc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80064d2:	bf00      	nop
 80064d4:	3720      	adds	r7, #32
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}
 80064da:	bf00      	nop
 80064dc:	40023800 	.word	0x40023800
 80064e0:	40020000 	.word	0x40020000

080064e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b08c      	sub	sp, #48	; 0x30
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064ec:	f107 031c 	add.w	r3, r7, #28
 80064f0:	2200      	movs	r2, #0
 80064f2:	601a      	str	r2, [r3, #0]
 80064f4:	605a      	str	r2, [r3, #4]
 80064f6:	609a      	str	r2, [r3, #8]
 80064f8:	60da      	str	r2, [r3, #12]
 80064fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a36      	ldr	r2, [pc, #216]	; (80065dc <HAL_UART_MspInit+0xf8>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d135      	bne.n	8006572 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006506:	2300      	movs	r3, #0
 8006508:	61bb      	str	r3, [r7, #24]
 800650a:	4b35      	ldr	r3, [pc, #212]	; (80065e0 <HAL_UART_MspInit+0xfc>)
 800650c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800650e:	4a34      	ldr	r2, [pc, #208]	; (80065e0 <HAL_UART_MspInit+0xfc>)
 8006510:	f043 0310 	orr.w	r3, r3, #16
 8006514:	6453      	str	r3, [r2, #68]	; 0x44
 8006516:	4b32      	ldr	r3, [pc, #200]	; (80065e0 <HAL_UART_MspInit+0xfc>)
 8006518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800651a:	f003 0310 	and.w	r3, r3, #16
 800651e:	61bb      	str	r3, [r7, #24]
 8006520:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006522:	2300      	movs	r3, #0
 8006524:	617b      	str	r3, [r7, #20]
 8006526:	4b2e      	ldr	r3, [pc, #184]	; (80065e0 <HAL_UART_MspInit+0xfc>)
 8006528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800652a:	4a2d      	ldr	r2, [pc, #180]	; (80065e0 <HAL_UART_MspInit+0xfc>)
 800652c:	f043 0301 	orr.w	r3, r3, #1
 8006530:	6313      	str	r3, [r2, #48]	; 0x30
 8006532:	4b2b      	ldr	r3, [pc, #172]	; (80065e0 <HAL_UART_MspInit+0xfc>)
 8006534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006536:	f003 0301 	and.w	r3, r3, #1
 800653a:	617b      	str	r3, [r7, #20]
 800653c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPS_USART1_RX_Pin|GPS_USART1_TX_Pin;
 800653e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8006542:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006544:	2302      	movs	r3, #2
 8006546:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006548:	2300      	movs	r3, #0
 800654a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800654c:	2303      	movs	r3, #3
 800654e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006550:	2307      	movs	r3, #7
 8006552:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006554:	f107 031c 	add.w	r3, r7, #28
 8006558:	4619      	mov	r1, r3
 800655a:	4822      	ldr	r0, [pc, #136]	; (80065e4 <HAL_UART_MspInit+0x100>)
 800655c:	f000 fbb6 	bl	8006ccc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006560:	2200      	movs	r2, #0
 8006562:	2100      	movs	r1, #0
 8006564:	2025      	movs	r0, #37	; 0x25
 8006566:	f000 fae8 	bl	8006b3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800656a:	2025      	movs	r0, #37	; 0x25
 800656c:	f000 fb01 	bl	8006b72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8006570:	e030      	b.n	80065d4 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a1c      	ldr	r2, [pc, #112]	; (80065e8 <HAL_UART_MspInit+0x104>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d12b      	bne.n	80065d4 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800657c:	2300      	movs	r3, #0
 800657e:	613b      	str	r3, [r7, #16]
 8006580:	4b17      	ldr	r3, [pc, #92]	; (80065e0 <HAL_UART_MspInit+0xfc>)
 8006582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006584:	4a16      	ldr	r2, [pc, #88]	; (80065e0 <HAL_UART_MspInit+0xfc>)
 8006586:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800658a:	6413      	str	r3, [r2, #64]	; 0x40
 800658c:	4b14      	ldr	r3, [pc, #80]	; (80065e0 <HAL_UART_MspInit+0xfc>)
 800658e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006590:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006594:	613b      	str	r3, [r7, #16]
 8006596:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006598:	2300      	movs	r3, #0
 800659a:	60fb      	str	r3, [r7, #12]
 800659c:	4b10      	ldr	r3, [pc, #64]	; (80065e0 <HAL_UART_MspInit+0xfc>)
 800659e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065a0:	4a0f      	ldr	r2, [pc, #60]	; (80065e0 <HAL_UART_MspInit+0xfc>)
 80065a2:	f043 0301 	orr.w	r3, r3, #1
 80065a6:	6313      	str	r3, [r2, #48]	; 0x30
 80065a8:	4b0d      	ldr	r3, [pc, #52]	; (80065e0 <HAL_UART_MspInit+0xfc>)
 80065aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ac:	f003 0301 	and.w	r3, r3, #1
 80065b0:	60fb      	str	r3, [r7, #12]
 80065b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BLU_USART2_RX_Pin|BLU_USART2_TX_Pin;
 80065b4:	230c      	movs	r3, #12
 80065b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065b8:	2302      	movs	r3, #2
 80065ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065bc:	2300      	movs	r3, #0
 80065be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80065c0:	2303      	movs	r3, #3
 80065c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80065c4:	2307      	movs	r3, #7
 80065c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80065c8:	f107 031c 	add.w	r3, r7, #28
 80065cc:	4619      	mov	r1, r3
 80065ce:	4805      	ldr	r0, [pc, #20]	; (80065e4 <HAL_UART_MspInit+0x100>)
 80065d0:	f000 fb7c 	bl	8006ccc <HAL_GPIO_Init>
}
 80065d4:	bf00      	nop
 80065d6:	3730      	adds	r7, #48	; 0x30
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}
 80065dc:	40011000 	.word	0x40011000
 80065e0:	40023800 	.word	0x40023800
 80065e4:	40020000 	.word	0x40020000
 80065e8:	40004400 	.word	0x40004400

080065ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80065ec:	b480      	push	{r7}
 80065ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80065f0:	e7fe      	b.n	80065f0 <NMI_Handler+0x4>

080065f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80065f2:	b480      	push	{r7}
 80065f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80065f6:	e7fe      	b.n	80065f6 <HardFault_Handler+0x4>

080065f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80065f8:	b480      	push	{r7}
 80065fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80065fc:	e7fe      	b.n	80065fc <MemManage_Handler+0x4>

080065fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80065fe:	b480      	push	{r7}
 8006600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006602:	e7fe      	b.n	8006602 <BusFault_Handler+0x4>

08006604 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006604:	b480      	push	{r7}
 8006606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006608:	e7fe      	b.n	8006608 <UsageFault_Handler+0x4>

0800660a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800660a:	b480      	push	{r7}
 800660c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800660e:	bf00      	nop
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006618:	b480      	push	{r7}
 800661a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800661c:	bf00      	nop
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr

08006626 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006626:	b480      	push	{r7}
 8006628:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800662a:	bf00      	nop
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006638:	f000 f960 	bl	80068fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800663c:	bf00      	nop
 800663e:	bd80      	pop	{r7, pc}

08006640 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006644:	4802      	ldr	r0, [pc, #8]	; (8006650 <USART1_IRQHandler+0x10>)
 8006646:	f003 f9f7 	bl	8009a38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800664a:	bf00      	nop
 800664c:	bd80      	pop	{r7, pc}
 800664e:	bf00      	nop
 8006650:	20001ea8 	.word	0x20001ea8

08006654 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006654:	b480      	push	{r7}
 8006656:	af00      	add	r7, sp, #0
	return 1;
 8006658:	2301      	movs	r3, #1
}
 800665a:	4618      	mov	r0, r3
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr

08006664 <_kill>:

int _kill(int pid, int sig)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b082      	sub	sp, #8
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800666e:	f004 f837 	bl	800a6e0 <__errno>
 8006672:	4603      	mov	r3, r0
 8006674:	2216      	movs	r2, #22
 8006676:	601a      	str	r2, [r3, #0]
	return -1;
 8006678:	f04f 33ff 	mov.w	r3, #4294967295
}
 800667c:	4618      	mov	r0, r3
 800667e:	3708      	adds	r7, #8
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}

08006684 <_exit>:

void _exit (int status)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b082      	sub	sp, #8
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800668c:	f04f 31ff 	mov.w	r1, #4294967295
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f7ff ffe7 	bl	8006664 <_kill>
	while (1) {}		/* Make sure we hang here */
 8006696:	e7fe      	b.n	8006696 <_exit+0x12>

08006698 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b086      	sub	sp, #24
 800669c:	af00      	add	r7, sp, #0
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	60b9      	str	r1, [r7, #8]
 80066a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80066a4:	2300      	movs	r3, #0
 80066a6:	617b      	str	r3, [r7, #20]
 80066a8:	e00a      	b.n	80066c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80066aa:	f3af 8000 	nop.w
 80066ae:	4601      	mov	r1, r0
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	1c5a      	adds	r2, r3, #1
 80066b4:	60ba      	str	r2, [r7, #8]
 80066b6:	b2ca      	uxtb	r2, r1
 80066b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	3301      	adds	r3, #1
 80066be:	617b      	str	r3, [r7, #20]
 80066c0:	697a      	ldr	r2, [r7, #20]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	dbf0      	blt.n	80066aa <_read+0x12>
	}

return len;
 80066c8:	687b      	ldr	r3, [r7, #4]
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3718      	adds	r7, #24
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}

080066d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80066d2:	b580      	push	{r7, lr}
 80066d4:	b086      	sub	sp, #24
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	60f8      	str	r0, [r7, #12]
 80066da:	60b9      	str	r1, [r7, #8]
 80066dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80066de:	2300      	movs	r3, #0
 80066e0:	617b      	str	r3, [r7, #20]
 80066e2:	e009      	b.n	80066f8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	1c5a      	adds	r2, r3, #1
 80066e8:	60ba      	str	r2, [r7, #8]
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	4618      	mov	r0, r3
 80066ee:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	3301      	adds	r3, #1
 80066f6:	617b      	str	r3, [r7, #20]
 80066f8:	697a      	ldr	r2, [r7, #20]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	429a      	cmp	r2, r3
 80066fe:	dbf1      	blt.n	80066e4 <_write+0x12>
	}
	return len;
 8006700:	687b      	ldr	r3, [r7, #4]
}
 8006702:	4618      	mov	r0, r3
 8006704:	3718      	adds	r7, #24
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}

0800670a <_close>:

int _close(int file)
{
 800670a:	b480      	push	{r7}
 800670c:	b083      	sub	sp, #12
 800670e:	af00      	add	r7, sp, #0
 8006710:	6078      	str	r0, [r7, #4]
	return -1;
 8006712:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006716:	4618      	mov	r0, r3
 8006718:	370c      	adds	r7, #12
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr

08006722 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006722:	b480      	push	{r7}
 8006724:	b083      	sub	sp, #12
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
 800672a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006732:	605a      	str	r2, [r3, #4]
	return 0;
 8006734:	2300      	movs	r3, #0
}
 8006736:	4618      	mov	r0, r3
 8006738:	370c      	adds	r7, #12
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr

08006742 <_isatty>:

int _isatty(int file)
{
 8006742:	b480      	push	{r7}
 8006744:	b083      	sub	sp, #12
 8006746:	af00      	add	r7, sp, #0
 8006748:	6078      	str	r0, [r7, #4]
	return 1;
 800674a:	2301      	movs	r3, #1
}
 800674c:	4618      	mov	r0, r3
 800674e:	370c      	adds	r7, #12
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	607a      	str	r2, [r7, #4]
	return 0;
 8006764:	2300      	movs	r3, #0
}
 8006766:	4618      	mov	r0, r3
 8006768:	3714      	adds	r7, #20
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr
	...

08006774 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b086      	sub	sp, #24
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800677c:	4a14      	ldr	r2, [pc, #80]	; (80067d0 <_sbrk+0x5c>)
 800677e:	4b15      	ldr	r3, [pc, #84]	; (80067d4 <_sbrk+0x60>)
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006788:	4b13      	ldr	r3, [pc, #76]	; (80067d8 <_sbrk+0x64>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d102      	bne.n	8006796 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006790:	4b11      	ldr	r3, [pc, #68]	; (80067d8 <_sbrk+0x64>)
 8006792:	4a12      	ldr	r2, [pc, #72]	; (80067dc <_sbrk+0x68>)
 8006794:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006796:	4b10      	ldr	r3, [pc, #64]	; (80067d8 <_sbrk+0x64>)
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4413      	add	r3, r2
 800679e:	693a      	ldr	r2, [r7, #16]
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d207      	bcs.n	80067b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80067a4:	f003 ff9c 	bl	800a6e0 <__errno>
 80067a8:	4603      	mov	r3, r0
 80067aa:	220c      	movs	r2, #12
 80067ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80067ae:	f04f 33ff 	mov.w	r3, #4294967295
 80067b2:	e009      	b.n	80067c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80067b4:	4b08      	ldr	r3, [pc, #32]	; (80067d8 <_sbrk+0x64>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80067ba:	4b07      	ldr	r3, [pc, #28]	; (80067d8 <_sbrk+0x64>)
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	4413      	add	r3, r2
 80067c2:	4a05      	ldr	r2, [pc, #20]	; (80067d8 <_sbrk+0x64>)
 80067c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80067c6:	68fb      	ldr	r3, [r7, #12]
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3718      	adds	r7, #24
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}
 80067d0:	20020000 	.word	0x20020000
 80067d4:	00000400 	.word	0x00000400
 80067d8:	20001994 	.word	0x20001994
 80067dc:	20001fe8 	.word	0x20001fe8

080067e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80067e0:	b480      	push	{r7}
 80067e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80067e4:	4b06      	ldr	r3, [pc, #24]	; (8006800 <SystemInit+0x20>)
 80067e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ea:	4a05      	ldr	r2, [pc, #20]	; (8006800 <SystemInit+0x20>)
 80067ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80067f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80067f4:	bf00      	nop
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr
 80067fe:	bf00      	nop
 8006800:	e000ed00 	.word	0xe000ed00

08006804 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8006804:	f8df d034 	ldr.w	sp, [pc, #52]	; 800683c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006808:	480d      	ldr	r0, [pc, #52]	; (8006840 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800680a:	490e      	ldr	r1, [pc, #56]	; (8006844 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800680c:	4a0e      	ldr	r2, [pc, #56]	; (8006848 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800680e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006810:	e002      	b.n	8006818 <LoopCopyDataInit>

08006812 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006812:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006814:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006816:	3304      	adds	r3, #4

08006818 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006818:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800681a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800681c:	d3f9      	bcc.n	8006812 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800681e:	4a0b      	ldr	r2, [pc, #44]	; (800684c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006820:	4c0b      	ldr	r4, [pc, #44]	; (8006850 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006822:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006824:	e001      	b.n	800682a <LoopFillZerobss>

08006826 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006826:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006828:	3204      	adds	r2, #4

0800682a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800682a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800682c:	d3fb      	bcc.n	8006826 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800682e:	f7ff ffd7 	bl	80067e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006832:	f003 ff5b 	bl	800a6ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006836:	f7fe ff13 	bl	8005660 <main>
  bx  lr    
 800683a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800683c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006840:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006844:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8006848:	08012284 	.word	0x08012284
  ldr r2, =_sbss
 800684c:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8006850:	20001fe4 	.word	0x20001fe4

08006854 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006854:	e7fe      	b.n	8006854 <ADC_IRQHandler>
	...

08006858 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800685c:	4b0e      	ldr	r3, [pc, #56]	; (8006898 <HAL_Init+0x40>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a0d      	ldr	r2, [pc, #52]	; (8006898 <HAL_Init+0x40>)
 8006862:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006866:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006868:	4b0b      	ldr	r3, [pc, #44]	; (8006898 <HAL_Init+0x40>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a0a      	ldr	r2, [pc, #40]	; (8006898 <HAL_Init+0x40>)
 800686e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006872:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006874:	4b08      	ldr	r3, [pc, #32]	; (8006898 <HAL_Init+0x40>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a07      	ldr	r2, [pc, #28]	; (8006898 <HAL_Init+0x40>)
 800687a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800687e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006880:	2003      	movs	r0, #3
 8006882:	f000 f94f 	bl	8006b24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006886:	200f      	movs	r0, #15
 8006888:	f000 f808 	bl	800689c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800688c:	f7ff fc7a 	bl	8006184 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop
 8006898:	40023c00 	.word	0x40023c00

0800689c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b082      	sub	sp, #8
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80068a4:	4b12      	ldr	r3, [pc, #72]	; (80068f0 <HAL_InitTick+0x54>)
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	4b12      	ldr	r3, [pc, #72]	; (80068f4 <HAL_InitTick+0x58>)
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	4619      	mov	r1, r3
 80068ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80068b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80068b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80068ba:	4618      	mov	r0, r3
 80068bc:	f000 f967 	bl	8006b8e <HAL_SYSTICK_Config>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d001      	beq.n	80068ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	e00e      	b.n	80068e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2b0f      	cmp	r3, #15
 80068ce:	d80a      	bhi.n	80068e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80068d0:	2200      	movs	r2, #0
 80068d2:	6879      	ldr	r1, [r7, #4]
 80068d4:	f04f 30ff 	mov.w	r0, #4294967295
 80068d8:	f000 f92f 	bl	8006b3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80068dc:	4a06      	ldr	r2, [pc, #24]	; (80068f8 <HAL_InitTick+0x5c>)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80068e2:	2300      	movs	r3, #0
 80068e4:	e000      	b.n	80068e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3708      	adds	r7, #8
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}
 80068f0:	20000030 	.word	0x20000030
 80068f4:	20000038 	.word	0x20000038
 80068f8:	20000034 	.word	0x20000034

080068fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80068fc:	b480      	push	{r7}
 80068fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006900:	4b06      	ldr	r3, [pc, #24]	; (800691c <HAL_IncTick+0x20>)
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	461a      	mov	r2, r3
 8006906:	4b06      	ldr	r3, [pc, #24]	; (8006920 <HAL_IncTick+0x24>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4413      	add	r3, r2
 800690c:	4a04      	ldr	r2, [pc, #16]	; (8006920 <HAL_IncTick+0x24>)
 800690e:	6013      	str	r3, [r2, #0]
}
 8006910:	bf00      	nop
 8006912:	46bd      	mov	sp, r7
 8006914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006918:	4770      	bx	lr
 800691a:	bf00      	nop
 800691c:	20000038 	.word	0x20000038
 8006920:	20001fd0 	.word	0x20001fd0

08006924 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006924:	b480      	push	{r7}
 8006926:	af00      	add	r7, sp, #0
  return uwTick;
 8006928:	4b03      	ldr	r3, [pc, #12]	; (8006938 <HAL_GetTick+0x14>)
 800692a:	681b      	ldr	r3, [r3, #0]
}
 800692c:	4618      	mov	r0, r3
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr
 8006936:	bf00      	nop
 8006938:	20001fd0 	.word	0x20001fd0

0800693c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b084      	sub	sp, #16
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006944:	f7ff ffee 	bl	8006924 <HAL_GetTick>
 8006948:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006954:	d005      	beq.n	8006962 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006956:	4b0a      	ldr	r3, [pc, #40]	; (8006980 <HAL_Delay+0x44>)
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	461a      	mov	r2, r3
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	4413      	add	r3, r2
 8006960:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006962:	bf00      	nop
 8006964:	f7ff ffde 	bl	8006924 <HAL_GetTick>
 8006968:	4602      	mov	r2, r0
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	1ad3      	subs	r3, r2, r3
 800696e:	68fa      	ldr	r2, [r7, #12]
 8006970:	429a      	cmp	r2, r3
 8006972:	d8f7      	bhi.n	8006964 <HAL_Delay+0x28>
  {
  }
}
 8006974:	bf00      	nop
 8006976:	bf00      	nop
 8006978:	3710      	adds	r7, #16
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}
 800697e:	bf00      	nop
 8006980:	20000038 	.word	0x20000038

08006984 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006984:	b480      	push	{r7}
 8006986:	b085      	sub	sp, #20
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f003 0307 	and.w	r3, r3, #7
 8006992:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006994:	4b0c      	ldr	r3, [pc, #48]	; (80069c8 <__NVIC_SetPriorityGrouping+0x44>)
 8006996:	68db      	ldr	r3, [r3, #12]
 8006998:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800699a:	68ba      	ldr	r2, [r7, #8]
 800699c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80069a0:	4013      	ands	r3, r2
 80069a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80069ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80069b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80069b6:	4a04      	ldr	r2, [pc, #16]	; (80069c8 <__NVIC_SetPriorityGrouping+0x44>)
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	60d3      	str	r3, [r2, #12]
}
 80069bc:	bf00      	nop
 80069be:	3714      	adds	r7, #20
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr
 80069c8:	e000ed00 	.word	0xe000ed00

080069cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80069cc:	b480      	push	{r7}
 80069ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80069d0:	4b04      	ldr	r3, [pc, #16]	; (80069e4 <__NVIC_GetPriorityGrouping+0x18>)
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	0a1b      	lsrs	r3, r3, #8
 80069d6:	f003 0307 	and.w	r3, r3, #7
}
 80069da:	4618      	mov	r0, r3
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr
 80069e4:	e000ed00 	.word	0xe000ed00

080069e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	4603      	mov	r3, r0
 80069f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80069f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	db0b      	blt.n	8006a12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80069fa:	79fb      	ldrb	r3, [r7, #7]
 80069fc:	f003 021f 	and.w	r2, r3, #31
 8006a00:	4907      	ldr	r1, [pc, #28]	; (8006a20 <__NVIC_EnableIRQ+0x38>)
 8006a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a06:	095b      	lsrs	r3, r3, #5
 8006a08:	2001      	movs	r0, #1
 8006a0a:	fa00 f202 	lsl.w	r2, r0, r2
 8006a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006a12:	bf00      	nop
 8006a14:	370c      	adds	r7, #12
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr
 8006a1e:	bf00      	nop
 8006a20:	e000e100 	.word	0xe000e100

08006a24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b083      	sub	sp, #12
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	6039      	str	r1, [r7, #0]
 8006a2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	db0a      	blt.n	8006a4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	b2da      	uxtb	r2, r3
 8006a3c:	490c      	ldr	r1, [pc, #48]	; (8006a70 <__NVIC_SetPriority+0x4c>)
 8006a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a42:	0112      	lsls	r2, r2, #4
 8006a44:	b2d2      	uxtb	r2, r2
 8006a46:	440b      	add	r3, r1
 8006a48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006a4c:	e00a      	b.n	8006a64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	b2da      	uxtb	r2, r3
 8006a52:	4908      	ldr	r1, [pc, #32]	; (8006a74 <__NVIC_SetPriority+0x50>)
 8006a54:	79fb      	ldrb	r3, [r7, #7]
 8006a56:	f003 030f 	and.w	r3, r3, #15
 8006a5a:	3b04      	subs	r3, #4
 8006a5c:	0112      	lsls	r2, r2, #4
 8006a5e:	b2d2      	uxtb	r2, r2
 8006a60:	440b      	add	r3, r1
 8006a62:	761a      	strb	r2, [r3, #24]
}
 8006a64:	bf00      	nop
 8006a66:	370c      	adds	r7, #12
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr
 8006a70:	e000e100 	.word	0xe000e100
 8006a74:	e000ed00 	.word	0xe000ed00

08006a78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b089      	sub	sp, #36	; 0x24
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	60b9      	str	r1, [r7, #8]
 8006a82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f003 0307 	and.w	r3, r3, #7
 8006a8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	f1c3 0307 	rsb	r3, r3, #7
 8006a92:	2b04      	cmp	r3, #4
 8006a94:	bf28      	it	cs
 8006a96:	2304      	movcs	r3, #4
 8006a98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006a9a:	69fb      	ldr	r3, [r7, #28]
 8006a9c:	3304      	adds	r3, #4
 8006a9e:	2b06      	cmp	r3, #6
 8006aa0:	d902      	bls.n	8006aa8 <NVIC_EncodePriority+0x30>
 8006aa2:	69fb      	ldr	r3, [r7, #28]
 8006aa4:	3b03      	subs	r3, #3
 8006aa6:	e000      	b.n	8006aaa <NVIC_EncodePriority+0x32>
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006aac:	f04f 32ff 	mov.w	r2, #4294967295
 8006ab0:	69bb      	ldr	r3, [r7, #24]
 8006ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab6:	43da      	mvns	r2, r3
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	401a      	ands	r2, r3
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006ac0:	f04f 31ff 	mov.w	r1, #4294967295
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8006aca:	43d9      	mvns	r1, r3
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ad0:	4313      	orrs	r3, r2
         );
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3724      	adds	r7, #36	; 0x24
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr
	...

08006ae0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b082      	sub	sp, #8
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	3b01      	subs	r3, #1
 8006aec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006af0:	d301      	bcc.n	8006af6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006af2:	2301      	movs	r3, #1
 8006af4:	e00f      	b.n	8006b16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006af6:	4a0a      	ldr	r2, [pc, #40]	; (8006b20 <SysTick_Config+0x40>)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	3b01      	subs	r3, #1
 8006afc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006afe:	210f      	movs	r1, #15
 8006b00:	f04f 30ff 	mov.w	r0, #4294967295
 8006b04:	f7ff ff8e 	bl	8006a24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006b08:	4b05      	ldr	r3, [pc, #20]	; (8006b20 <SysTick_Config+0x40>)
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006b0e:	4b04      	ldr	r3, [pc, #16]	; (8006b20 <SysTick_Config+0x40>)
 8006b10:	2207      	movs	r2, #7
 8006b12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006b14:	2300      	movs	r3, #0
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3708      	adds	r7, #8
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	e000e010 	.word	0xe000e010

08006b24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b082      	sub	sp, #8
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f7ff ff29 	bl	8006984 <__NVIC_SetPriorityGrouping>
}
 8006b32:	bf00      	nop
 8006b34:	3708      	adds	r7, #8
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}

08006b3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006b3a:	b580      	push	{r7, lr}
 8006b3c:	b086      	sub	sp, #24
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	4603      	mov	r3, r0
 8006b42:	60b9      	str	r1, [r7, #8]
 8006b44:	607a      	str	r2, [r7, #4]
 8006b46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006b4c:	f7ff ff3e 	bl	80069cc <__NVIC_GetPriorityGrouping>
 8006b50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	68b9      	ldr	r1, [r7, #8]
 8006b56:	6978      	ldr	r0, [r7, #20]
 8006b58:	f7ff ff8e 	bl	8006a78 <NVIC_EncodePriority>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b62:	4611      	mov	r1, r2
 8006b64:	4618      	mov	r0, r3
 8006b66:	f7ff ff5d 	bl	8006a24 <__NVIC_SetPriority>
}
 8006b6a:	bf00      	nop
 8006b6c:	3718      	adds	r7, #24
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}

08006b72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006b72:	b580      	push	{r7, lr}
 8006b74:	b082      	sub	sp, #8
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	4603      	mov	r3, r0
 8006b7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b80:	4618      	mov	r0, r3
 8006b82:	f7ff ff31 	bl	80069e8 <__NVIC_EnableIRQ>
}
 8006b86:	bf00      	nop
 8006b88:	3708      	adds	r7, #8
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}

08006b8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006b8e:	b580      	push	{r7, lr}
 8006b90:	b082      	sub	sp, #8
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f7ff ffa2 	bl	8006ae0 <SysTick_Config>
 8006b9c:	4603      	mov	r3, r0
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3708      	adds	r7, #8
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}

08006ba6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006ba6:	b580      	push	{r7, lr}
 8006ba8:	b084      	sub	sp, #16
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bb2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006bb4:	f7ff feb6 	bl	8006924 <HAL_GetTick>
 8006bb8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	2b02      	cmp	r3, #2
 8006bc4:	d008      	beq.n	8006bd8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2280      	movs	r2, #128	; 0x80
 8006bca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	e052      	b.n	8006c7e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f022 0216 	bic.w	r2, r2, #22
 8006be6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	695a      	ldr	r2, [r3, #20]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006bf6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d103      	bne.n	8006c08 <HAL_DMA_Abort+0x62>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d007      	beq.n	8006c18 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f022 0208 	bic.w	r2, r2, #8
 8006c16:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f022 0201 	bic.w	r2, r2, #1
 8006c26:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006c28:	e013      	b.n	8006c52 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006c2a:	f7ff fe7b 	bl	8006924 <HAL_GetTick>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	1ad3      	subs	r3, r2, r3
 8006c34:	2b05      	cmp	r3, #5
 8006c36:	d90c      	bls.n	8006c52 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2220      	movs	r2, #32
 8006c3c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2203      	movs	r2, #3
 8006c42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006c4e:	2303      	movs	r3, #3
 8006c50:	e015      	b.n	8006c7e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f003 0301 	and.w	r3, r3, #1
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d1e4      	bne.n	8006c2a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c64:	223f      	movs	r2, #63	; 0x3f
 8006c66:	409a      	lsls	r2, r3
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2200      	movs	r2, #0
 8006c78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006c7c:	2300      	movs	r3, #0
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3710      	adds	r7, #16
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}

08006c86 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006c86:	b480      	push	{r7}
 8006c88:	b083      	sub	sp, #12
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	2b02      	cmp	r3, #2
 8006c98:	d004      	beq.n	8006ca4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2280      	movs	r2, #128	; 0x80
 8006c9e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e00c      	b.n	8006cbe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2205      	movs	r2, #5
 8006ca8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f022 0201 	bic.w	r2, r2, #1
 8006cba:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006cbc:	2300      	movs	r3, #0
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	370c      	adds	r7, #12
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc8:	4770      	bx	lr
	...

08006ccc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b089      	sub	sp, #36	; 0x24
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	61fb      	str	r3, [r7, #28]
 8006ce6:	e159      	b.n	8006f9c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006ce8:	2201      	movs	r2, #1
 8006cea:	69fb      	ldr	r3, [r7, #28]
 8006cec:	fa02 f303 	lsl.w	r3, r2, r3
 8006cf0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	697a      	ldr	r2, [r7, #20]
 8006cf8:	4013      	ands	r3, r2
 8006cfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006cfc:	693a      	ldr	r2, [r7, #16]
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	429a      	cmp	r2, r3
 8006d02:	f040 8148 	bne.w	8006f96 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	f003 0303 	and.w	r3, r3, #3
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d005      	beq.n	8006d1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006d1a:	2b02      	cmp	r3, #2
 8006d1c:	d130      	bne.n	8006d80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006d24:	69fb      	ldr	r3, [r7, #28]
 8006d26:	005b      	lsls	r3, r3, #1
 8006d28:	2203      	movs	r2, #3
 8006d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d2e:	43db      	mvns	r3, r3
 8006d30:	69ba      	ldr	r2, [r7, #24]
 8006d32:	4013      	ands	r3, r2
 8006d34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	68da      	ldr	r2, [r3, #12]
 8006d3a:	69fb      	ldr	r3, [r7, #28]
 8006d3c:	005b      	lsls	r3, r3, #1
 8006d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d42:	69ba      	ldr	r2, [r7, #24]
 8006d44:	4313      	orrs	r3, r2
 8006d46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	69ba      	ldr	r2, [r7, #24]
 8006d4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006d54:	2201      	movs	r2, #1
 8006d56:	69fb      	ldr	r3, [r7, #28]
 8006d58:	fa02 f303 	lsl.w	r3, r2, r3
 8006d5c:	43db      	mvns	r3, r3
 8006d5e:	69ba      	ldr	r2, [r7, #24]
 8006d60:	4013      	ands	r3, r2
 8006d62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	091b      	lsrs	r3, r3, #4
 8006d6a:	f003 0201 	and.w	r2, r3, #1
 8006d6e:	69fb      	ldr	r3, [r7, #28]
 8006d70:	fa02 f303 	lsl.w	r3, r2, r3
 8006d74:	69ba      	ldr	r2, [r7, #24]
 8006d76:	4313      	orrs	r3, r2
 8006d78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	69ba      	ldr	r2, [r7, #24]
 8006d7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	f003 0303 	and.w	r3, r3, #3
 8006d88:	2b03      	cmp	r3, #3
 8006d8a:	d017      	beq.n	8006dbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	68db      	ldr	r3, [r3, #12]
 8006d90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006d92:	69fb      	ldr	r3, [r7, #28]
 8006d94:	005b      	lsls	r3, r3, #1
 8006d96:	2203      	movs	r2, #3
 8006d98:	fa02 f303 	lsl.w	r3, r2, r3
 8006d9c:	43db      	mvns	r3, r3
 8006d9e:	69ba      	ldr	r2, [r7, #24]
 8006da0:	4013      	ands	r3, r2
 8006da2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	689a      	ldr	r2, [r3, #8]
 8006da8:	69fb      	ldr	r3, [r7, #28]
 8006daa:	005b      	lsls	r3, r3, #1
 8006dac:	fa02 f303 	lsl.w	r3, r2, r3
 8006db0:	69ba      	ldr	r2, [r7, #24]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	69ba      	ldr	r2, [r7, #24]
 8006dba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	f003 0303 	and.w	r3, r3, #3
 8006dc4:	2b02      	cmp	r3, #2
 8006dc6:	d123      	bne.n	8006e10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	08da      	lsrs	r2, r3, #3
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	3208      	adds	r2, #8
 8006dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006dd6:	69fb      	ldr	r3, [r7, #28]
 8006dd8:	f003 0307 	and.w	r3, r3, #7
 8006ddc:	009b      	lsls	r3, r3, #2
 8006dde:	220f      	movs	r2, #15
 8006de0:	fa02 f303 	lsl.w	r3, r2, r3
 8006de4:	43db      	mvns	r3, r3
 8006de6:	69ba      	ldr	r2, [r7, #24]
 8006de8:	4013      	ands	r3, r2
 8006dea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	691a      	ldr	r2, [r3, #16]
 8006df0:	69fb      	ldr	r3, [r7, #28]
 8006df2:	f003 0307 	and.w	r3, r3, #7
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	fa02 f303 	lsl.w	r3, r2, r3
 8006dfc:	69ba      	ldr	r2, [r7, #24]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006e02:	69fb      	ldr	r3, [r7, #28]
 8006e04:	08da      	lsrs	r2, r3, #3
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	3208      	adds	r2, #8
 8006e0a:	69b9      	ldr	r1, [r7, #24]
 8006e0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006e16:	69fb      	ldr	r3, [r7, #28]
 8006e18:	005b      	lsls	r3, r3, #1
 8006e1a:	2203      	movs	r2, #3
 8006e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e20:	43db      	mvns	r3, r3
 8006e22:	69ba      	ldr	r2, [r7, #24]
 8006e24:	4013      	ands	r3, r2
 8006e26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	f003 0203 	and.w	r2, r3, #3
 8006e30:	69fb      	ldr	r3, [r7, #28]
 8006e32:	005b      	lsls	r3, r3, #1
 8006e34:	fa02 f303 	lsl.w	r3, r2, r3
 8006e38:	69ba      	ldr	r2, [r7, #24]
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	69ba      	ldr	r2, [r7, #24]
 8006e42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	f000 80a2 	beq.w	8006f96 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006e52:	2300      	movs	r3, #0
 8006e54:	60fb      	str	r3, [r7, #12]
 8006e56:	4b57      	ldr	r3, [pc, #348]	; (8006fb4 <HAL_GPIO_Init+0x2e8>)
 8006e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e5a:	4a56      	ldr	r2, [pc, #344]	; (8006fb4 <HAL_GPIO_Init+0x2e8>)
 8006e5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006e60:	6453      	str	r3, [r2, #68]	; 0x44
 8006e62:	4b54      	ldr	r3, [pc, #336]	; (8006fb4 <HAL_GPIO_Init+0x2e8>)
 8006e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e6a:	60fb      	str	r3, [r7, #12]
 8006e6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006e6e:	4a52      	ldr	r2, [pc, #328]	; (8006fb8 <HAL_GPIO_Init+0x2ec>)
 8006e70:	69fb      	ldr	r3, [r7, #28]
 8006e72:	089b      	lsrs	r3, r3, #2
 8006e74:	3302      	adds	r3, #2
 8006e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006e7c:	69fb      	ldr	r3, [r7, #28]
 8006e7e:	f003 0303 	and.w	r3, r3, #3
 8006e82:	009b      	lsls	r3, r3, #2
 8006e84:	220f      	movs	r2, #15
 8006e86:	fa02 f303 	lsl.w	r3, r2, r3
 8006e8a:	43db      	mvns	r3, r3
 8006e8c:	69ba      	ldr	r2, [r7, #24]
 8006e8e:	4013      	ands	r3, r2
 8006e90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	4a49      	ldr	r2, [pc, #292]	; (8006fbc <HAL_GPIO_Init+0x2f0>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d019      	beq.n	8006ece <HAL_GPIO_Init+0x202>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	4a48      	ldr	r2, [pc, #288]	; (8006fc0 <HAL_GPIO_Init+0x2f4>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d013      	beq.n	8006eca <HAL_GPIO_Init+0x1fe>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	4a47      	ldr	r2, [pc, #284]	; (8006fc4 <HAL_GPIO_Init+0x2f8>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d00d      	beq.n	8006ec6 <HAL_GPIO_Init+0x1fa>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	4a46      	ldr	r2, [pc, #280]	; (8006fc8 <HAL_GPIO_Init+0x2fc>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d007      	beq.n	8006ec2 <HAL_GPIO_Init+0x1f6>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	4a45      	ldr	r2, [pc, #276]	; (8006fcc <HAL_GPIO_Init+0x300>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d101      	bne.n	8006ebe <HAL_GPIO_Init+0x1f2>
 8006eba:	2304      	movs	r3, #4
 8006ebc:	e008      	b.n	8006ed0 <HAL_GPIO_Init+0x204>
 8006ebe:	2307      	movs	r3, #7
 8006ec0:	e006      	b.n	8006ed0 <HAL_GPIO_Init+0x204>
 8006ec2:	2303      	movs	r3, #3
 8006ec4:	e004      	b.n	8006ed0 <HAL_GPIO_Init+0x204>
 8006ec6:	2302      	movs	r3, #2
 8006ec8:	e002      	b.n	8006ed0 <HAL_GPIO_Init+0x204>
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e000      	b.n	8006ed0 <HAL_GPIO_Init+0x204>
 8006ece:	2300      	movs	r3, #0
 8006ed0:	69fa      	ldr	r2, [r7, #28]
 8006ed2:	f002 0203 	and.w	r2, r2, #3
 8006ed6:	0092      	lsls	r2, r2, #2
 8006ed8:	4093      	lsls	r3, r2
 8006eda:	69ba      	ldr	r2, [r7, #24]
 8006edc:	4313      	orrs	r3, r2
 8006ede:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006ee0:	4935      	ldr	r1, [pc, #212]	; (8006fb8 <HAL_GPIO_Init+0x2ec>)
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	089b      	lsrs	r3, r3, #2
 8006ee6:	3302      	adds	r3, #2
 8006ee8:	69ba      	ldr	r2, [r7, #24]
 8006eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006eee:	4b38      	ldr	r3, [pc, #224]	; (8006fd0 <HAL_GPIO_Init+0x304>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	43db      	mvns	r3, r3
 8006ef8:	69ba      	ldr	r2, [r7, #24]
 8006efa:	4013      	ands	r3, r2
 8006efc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d003      	beq.n	8006f12 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006f0a:	69ba      	ldr	r2, [r7, #24]
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006f12:	4a2f      	ldr	r2, [pc, #188]	; (8006fd0 <HAL_GPIO_Init+0x304>)
 8006f14:	69bb      	ldr	r3, [r7, #24]
 8006f16:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006f18:	4b2d      	ldr	r3, [pc, #180]	; (8006fd0 <HAL_GPIO_Init+0x304>)
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	43db      	mvns	r3, r3
 8006f22:	69ba      	ldr	r2, [r7, #24]
 8006f24:	4013      	ands	r3, r2
 8006f26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d003      	beq.n	8006f3c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006f34:	69ba      	ldr	r2, [r7, #24]
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006f3c:	4a24      	ldr	r2, [pc, #144]	; (8006fd0 <HAL_GPIO_Init+0x304>)
 8006f3e:	69bb      	ldr	r3, [r7, #24]
 8006f40:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006f42:	4b23      	ldr	r3, [pc, #140]	; (8006fd0 <HAL_GPIO_Init+0x304>)
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	43db      	mvns	r3, r3
 8006f4c:	69ba      	ldr	r2, [r7, #24]
 8006f4e:	4013      	ands	r3, r2
 8006f50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d003      	beq.n	8006f66 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006f5e:	69ba      	ldr	r2, [r7, #24]
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	4313      	orrs	r3, r2
 8006f64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006f66:	4a1a      	ldr	r2, [pc, #104]	; (8006fd0 <HAL_GPIO_Init+0x304>)
 8006f68:	69bb      	ldr	r3, [r7, #24]
 8006f6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006f6c:	4b18      	ldr	r3, [pc, #96]	; (8006fd0 <HAL_GPIO_Init+0x304>)
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	43db      	mvns	r3, r3
 8006f76:	69ba      	ldr	r2, [r7, #24]
 8006f78:	4013      	ands	r3, r2
 8006f7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d003      	beq.n	8006f90 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006f88:	69ba      	ldr	r2, [r7, #24]
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006f90:	4a0f      	ldr	r2, [pc, #60]	; (8006fd0 <HAL_GPIO_Init+0x304>)
 8006f92:	69bb      	ldr	r3, [r7, #24]
 8006f94:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006f96:	69fb      	ldr	r3, [r7, #28]
 8006f98:	3301      	adds	r3, #1
 8006f9a:	61fb      	str	r3, [r7, #28]
 8006f9c:	69fb      	ldr	r3, [r7, #28]
 8006f9e:	2b0f      	cmp	r3, #15
 8006fa0:	f67f aea2 	bls.w	8006ce8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006fa4:	bf00      	nop
 8006fa6:	bf00      	nop
 8006fa8:	3724      	adds	r7, #36	; 0x24
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr
 8006fb2:	bf00      	nop
 8006fb4:	40023800 	.word	0x40023800
 8006fb8:	40013800 	.word	0x40013800
 8006fbc:	40020000 	.word	0x40020000
 8006fc0:	40020400 	.word	0x40020400
 8006fc4:	40020800 	.word	0x40020800
 8006fc8:	40020c00 	.word	0x40020c00
 8006fcc:	40021000 	.word	0x40021000
 8006fd0:	40013c00 	.word	0x40013c00

08006fd4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b087      	sub	sp, #28
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006fea:	2300      	movs	r3, #0
 8006fec:	617b      	str	r3, [r7, #20]
 8006fee:	e0bb      	b.n	8007168 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ff8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8006ffa:	683a      	ldr	r2, [r7, #0]
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	4013      	ands	r3, r2
 8007000:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8007002:	68fa      	ldr	r2, [r7, #12]
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	429a      	cmp	r2, r3
 8007008:	f040 80ab 	bne.w	8007162 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800700c:	4a5c      	ldr	r2, [pc, #368]	; (8007180 <HAL_GPIO_DeInit+0x1ac>)
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	089b      	lsrs	r3, r3, #2
 8007012:	3302      	adds	r3, #2
 8007014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007018:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	f003 0303 	and.w	r3, r3, #3
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	220f      	movs	r2, #15
 8007024:	fa02 f303 	lsl.w	r3, r2, r3
 8007028:	68ba      	ldr	r2, [r7, #8]
 800702a:	4013      	ands	r3, r2
 800702c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	4a54      	ldr	r2, [pc, #336]	; (8007184 <HAL_GPIO_DeInit+0x1b0>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d019      	beq.n	800706a <HAL_GPIO_DeInit+0x96>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	4a53      	ldr	r2, [pc, #332]	; (8007188 <HAL_GPIO_DeInit+0x1b4>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d013      	beq.n	8007066 <HAL_GPIO_DeInit+0x92>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	4a52      	ldr	r2, [pc, #328]	; (800718c <HAL_GPIO_DeInit+0x1b8>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d00d      	beq.n	8007062 <HAL_GPIO_DeInit+0x8e>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	4a51      	ldr	r2, [pc, #324]	; (8007190 <HAL_GPIO_DeInit+0x1bc>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d007      	beq.n	800705e <HAL_GPIO_DeInit+0x8a>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	4a50      	ldr	r2, [pc, #320]	; (8007194 <HAL_GPIO_DeInit+0x1c0>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d101      	bne.n	800705a <HAL_GPIO_DeInit+0x86>
 8007056:	2304      	movs	r3, #4
 8007058:	e008      	b.n	800706c <HAL_GPIO_DeInit+0x98>
 800705a:	2307      	movs	r3, #7
 800705c:	e006      	b.n	800706c <HAL_GPIO_DeInit+0x98>
 800705e:	2303      	movs	r3, #3
 8007060:	e004      	b.n	800706c <HAL_GPIO_DeInit+0x98>
 8007062:	2302      	movs	r3, #2
 8007064:	e002      	b.n	800706c <HAL_GPIO_DeInit+0x98>
 8007066:	2301      	movs	r3, #1
 8007068:	e000      	b.n	800706c <HAL_GPIO_DeInit+0x98>
 800706a:	2300      	movs	r3, #0
 800706c:	697a      	ldr	r2, [r7, #20]
 800706e:	f002 0203 	and.w	r2, r2, #3
 8007072:	0092      	lsls	r2, r2, #2
 8007074:	4093      	lsls	r3, r2
 8007076:	68ba      	ldr	r2, [r7, #8]
 8007078:	429a      	cmp	r2, r3
 800707a:	d132      	bne.n	80070e2 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800707c:	4b46      	ldr	r3, [pc, #280]	; (8007198 <HAL_GPIO_DeInit+0x1c4>)
 800707e:	681a      	ldr	r2, [r3, #0]
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	43db      	mvns	r3, r3
 8007084:	4944      	ldr	r1, [pc, #272]	; (8007198 <HAL_GPIO_DeInit+0x1c4>)
 8007086:	4013      	ands	r3, r2
 8007088:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800708a:	4b43      	ldr	r3, [pc, #268]	; (8007198 <HAL_GPIO_DeInit+0x1c4>)
 800708c:	685a      	ldr	r2, [r3, #4]
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	43db      	mvns	r3, r3
 8007092:	4941      	ldr	r1, [pc, #260]	; (8007198 <HAL_GPIO_DeInit+0x1c4>)
 8007094:	4013      	ands	r3, r2
 8007096:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007098:	4b3f      	ldr	r3, [pc, #252]	; (8007198 <HAL_GPIO_DeInit+0x1c4>)
 800709a:	689a      	ldr	r2, [r3, #8]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	43db      	mvns	r3, r3
 80070a0:	493d      	ldr	r1, [pc, #244]	; (8007198 <HAL_GPIO_DeInit+0x1c4>)
 80070a2:	4013      	ands	r3, r2
 80070a4:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80070a6:	4b3c      	ldr	r3, [pc, #240]	; (8007198 <HAL_GPIO_DeInit+0x1c4>)
 80070a8:	68da      	ldr	r2, [r3, #12]
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	43db      	mvns	r3, r3
 80070ae:	493a      	ldr	r1, [pc, #232]	; (8007198 <HAL_GPIO_DeInit+0x1c4>)
 80070b0:	4013      	ands	r3, r2
 80070b2:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	f003 0303 	and.w	r3, r3, #3
 80070ba:	009b      	lsls	r3, r3, #2
 80070bc:	220f      	movs	r2, #15
 80070be:	fa02 f303 	lsl.w	r3, r2, r3
 80070c2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80070c4:	4a2e      	ldr	r2, [pc, #184]	; (8007180 <HAL_GPIO_DeInit+0x1ac>)
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	089b      	lsrs	r3, r3, #2
 80070ca:	3302      	adds	r3, #2
 80070cc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	43da      	mvns	r2, r3
 80070d4:	482a      	ldr	r0, [pc, #168]	; (8007180 <HAL_GPIO_DeInit+0x1ac>)
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	089b      	lsrs	r3, r3, #2
 80070da:	400a      	ands	r2, r1
 80070dc:	3302      	adds	r3, #2
 80070de:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	005b      	lsls	r3, r3, #1
 80070ea:	2103      	movs	r1, #3
 80070ec:	fa01 f303 	lsl.w	r3, r1, r3
 80070f0:	43db      	mvns	r3, r3
 80070f2:	401a      	ands	r2, r3
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	08da      	lsrs	r2, r3, #3
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	3208      	adds	r2, #8
 8007100:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	f003 0307 	and.w	r3, r3, #7
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	220f      	movs	r2, #15
 800710e:	fa02 f303 	lsl.w	r3, r2, r3
 8007112:	43db      	mvns	r3, r3
 8007114:	697a      	ldr	r2, [r7, #20]
 8007116:	08d2      	lsrs	r2, r2, #3
 8007118:	4019      	ands	r1, r3
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	3208      	adds	r2, #8
 800711e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	68da      	ldr	r2, [r3, #12]
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	005b      	lsls	r3, r3, #1
 800712a:	2103      	movs	r1, #3
 800712c:	fa01 f303 	lsl.w	r3, r1, r3
 8007130:	43db      	mvns	r3, r3
 8007132:	401a      	ands	r2, r3
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	685a      	ldr	r2, [r3, #4]
 800713c:	2101      	movs	r1, #1
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	fa01 f303 	lsl.w	r3, r1, r3
 8007144:	43db      	mvns	r3, r3
 8007146:	401a      	ands	r2, r3
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	689a      	ldr	r2, [r3, #8]
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	005b      	lsls	r3, r3, #1
 8007154:	2103      	movs	r1, #3
 8007156:	fa01 f303 	lsl.w	r3, r1, r3
 800715a:	43db      	mvns	r3, r3
 800715c:	401a      	ands	r2, r3
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	3301      	adds	r3, #1
 8007166:	617b      	str	r3, [r7, #20]
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	2b0f      	cmp	r3, #15
 800716c:	f67f af40 	bls.w	8006ff0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8007170:	bf00      	nop
 8007172:	bf00      	nop
 8007174:	371c      	adds	r7, #28
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr
 800717e:	bf00      	nop
 8007180:	40013800 	.word	0x40013800
 8007184:	40020000 	.word	0x40020000
 8007188:	40020400 	.word	0x40020400
 800718c:	40020800 	.word	0x40020800
 8007190:	40020c00 	.word	0x40020c00
 8007194:	40021000 	.word	0x40021000
 8007198:	40013c00 	.word	0x40013c00

0800719c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800719c:	b480      	push	{r7}
 800719e:	b085      	sub	sp, #20
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	460b      	mov	r3, r1
 80071a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	691a      	ldr	r2, [r3, #16]
 80071ac:	887b      	ldrh	r3, [r7, #2]
 80071ae:	4013      	ands	r3, r2
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d002      	beq.n	80071ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80071b4:	2301      	movs	r3, #1
 80071b6:	73fb      	strb	r3, [r7, #15]
 80071b8:	e001      	b.n	80071be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80071ba:	2300      	movs	r3, #0
 80071bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80071be:	7bfb      	ldrb	r3, [r7, #15]
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3714      	adds	r7, #20
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr

080071cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	460b      	mov	r3, r1
 80071d6:	807b      	strh	r3, [r7, #2]
 80071d8:	4613      	mov	r3, r2
 80071da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80071dc:	787b      	ldrb	r3, [r7, #1]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d003      	beq.n	80071ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80071e2:	887a      	ldrh	r2, [r7, #2]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80071e8:	e003      	b.n	80071f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80071ea:	887b      	ldrh	r3, [r7, #2]
 80071ec:	041a      	lsls	r2, r3, #16
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	619a      	str	r2, [r3, #24]
}
 80071f2:	bf00      	nop
 80071f4:	370c      	adds	r7, #12
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr
	...

08007200 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d101      	bne.n	8007212 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	e12b      	b.n	800746a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007218:	b2db      	uxtb	r3, r3
 800721a:	2b00      	cmp	r3, #0
 800721c:	d106      	bne.n	800722c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f7fe ffd4 	bl	80061d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2224      	movs	r2, #36	; 0x24
 8007230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f022 0201 	bic.w	r2, r2, #1
 8007242:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007252:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007262:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007264:	f001 fbea 	bl	8008a3c <HAL_RCC_GetPCLK1Freq>
 8007268:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	4a81      	ldr	r2, [pc, #516]	; (8007474 <HAL_I2C_Init+0x274>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d807      	bhi.n	8007284 <HAL_I2C_Init+0x84>
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	4a80      	ldr	r2, [pc, #512]	; (8007478 <HAL_I2C_Init+0x278>)
 8007278:	4293      	cmp	r3, r2
 800727a:	bf94      	ite	ls
 800727c:	2301      	movls	r3, #1
 800727e:	2300      	movhi	r3, #0
 8007280:	b2db      	uxtb	r3, r3
 8007282:	e006      	b.n	8007292 <HAL_I2C_Init+0x92>
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	4a7d      	ldr	r2, [pc, #500]	; (800747c <HAL_I2C_Init+0x27c>)
 8007288:	4293      	cmp	r3, r2
 800728a:	bf94      	ite	ls
 800728c:	2301      	movls	r3, #1
 800728e:	2300      	movhi	r3, #0
 8007290:	b2db      	uxtb	r3, r3
 8007292:	2b00      	cmp	r3, #0
 8007294:	d001      	beq.n	800729a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	e0e7      	b.n	800746a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	4a78      	ldr	r2, [pc, #480]	; (8007480 <HAL_I2C_Init+0x280>)
 800729e:	fba2 2303 	umull	r2, r3, r2, r3
 80072a2:	0c9b      	lsrs	r3, r3, #18
 80072a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	68ba      	ldr	r2, [r7, #8]
 80072b6:	430a      	orrs	r2, r1
 80072b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	6a1b      	ldr	r3, [r3, #32]
 80072c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	4a6a      	ldr	r2, [pc, #424]	; (8007474 <HAL_I2C_Init+0x274>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d802      	bhi.n	80072d4 <HAL_I2C_Init+0xd4>
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	3301      	adds	r3, #1
 80072d2:	e009      	b.n	80072e8 <HAL_I2C_Init+0xe8>
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80072da:	fb02 f303 	mul.w	r3, r2, r3
 80072de:	4a69      	ldr	r2, [pc, #420]	; (8007484 <HAL_I2C_Init+0x284>)
 80072e0:	fba2 2303 	umull	r2, r3, r2, r3
 80072e4:	099b      	lsrs	r3, r3, #6
 80072e6:	3301      	adds	r3, #1
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	6812      	ldr	r2, [r2, #0]
 80072ec:	430b      	orrs	r3, r1
 80072ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	69db      	ldr	r3, [r3, #28]
 80072f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80072fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	495c      	ldr	r1, [pc, #368]	; (8007474 <HAL_I2C_Init+0x274>)
 8007304:	428b      	cmp	r3, r1
 8007306:	d819      	bhi.n	800733c <HAL_I2C_Init+0x13c>
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	1e59      	subs	r1, r3, #1
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	005b      	lsls	r3, r3, #1
 8007312:	fbb1 f3f3 	udiv	r3, r1, r3
 8007316:	1c59      	adds	r1, r3, #1
 8007318:	f640 73fc 	movw	r3, #4092	; 0xffc
 800731c:	400b      	ands	r3, r1
 800731e:	2b00      	cmp	r3, #0
 8007320:	d00a      	beq.n	8007338 <HAL_I2C_Init+0x138>
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	1e59      	subs	r1, r3, #1
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	005b      	lsls	r3, r3, #1
 800732c:	fbb1 f3f3 	udiv	r3, r1, r3
 8007330:	3301      	adds	r3, #1
 8007332:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007336:	e051      	b.n	80073dc <HAL_I2C_Init+0x1dc>
 8007338:	2304      	movs	r3, #4
 800733a:	e04f      	b.n	80073dc <HAL_I2C_Init+0x1dc>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d111      	bne.n	8007368 <HAL_I2C_Init+0x168>
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	1e58      	subs	r0, r3, #1
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6859      	ldr	r1, [r3, #4]
 800734c:	460b      	mov	r3, r1
 800734e:	005b      	lsls	r3, r3, #1
 8007350:	440b      	add	r3, r1
 8007352:	fbb0 f3f3 	udiv	r3, r0, r3
 8007356:	3301      	adds	r3, #1
 8007358:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800735c:	2b00      	cmp	r3, #0
 800735e:	bf0c      	ite	eq
 8007360:	2301      	moveq	r3, #1
 8007362:	2300      	movne	r3, #0
 8007364:	b2db      	uxtb	r3, r3
 8007366:	e012      	b.n	800738e <HAL_I2C_Init+0x18e>
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	1e58      	subs	r0, r3, #1
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6859      	ldr	r1, [r3, #4]
 8007370:	460b      	mov	r3, r1
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	440b      	add	r3, r1
 8007376:	0099      	lsls	r1, r3, #2
 8007378:	440b      	add	r3, r1
 800737a:	fbb0 f3f3 	udiv	r3, r0, r3
 800737e:	3301      	adds	r3, #1
 8007380:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007384:	2b00      	cmp	r3, #0
 8007386:	bf0c      	ite	eq
 8007388:	2301      	moveq	r3, #1
 800738a:	2300      	movne	r3, #0
 800738c:	b2db      	uxtb	r3, r3
 800738e:	2b00      	cmp	r3, #0
 8007390:	d001      	beq.n	8007396 <HAL_I2C_Init+0x196>
 8007392:	2301      	movs	r3, #1
 8007394:	e022      	b.n	80073dc <HAL_I2C_Init+0x1dc>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d10e      	bne.n	80073bc <HAL_I2C_Init+0x1bc>
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	1e58      	subs	r0, r3, #1
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6859      	ldr	r1, [r3, #4]
 80073a6:	460b      	mov	r3, r1
 80073a8:	005b      	lsls	r3, r3, #1
 80073aa:	440b      	add	r3, r1
 80073ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80073b0:	3301      	adds	r3, #1
 80073b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073ba:	e00f      	b.n	80073dc <HAL_I2C_Init+0x1dc>
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	1e58      	subs	r0, r3, #1
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6859      	ldr	r1, [r3, #4]
 80073c4:	460b      	mov	r3, r1
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	440b      	add	r3, r1
 80073ca:	0099      	lsls	r1, r3, #2
 80073cc:	440b      	add	r3, r1
 80073ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80073d2:	3301      	adds	r3, #1
 80073d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80073dc:	6879      	ldr	r1, [r7, #4]
 80073de:	6809      	ldr	r1, [r1, #0]
 80073e0:	4313      	orrs	r3, r2
 80073e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	69da      	ldr	r2, [r3, #28]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6a1b      	ldr	r3, [r3, #32]
 80073f6:	431a      	orrs	r2, r3
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	430a      	orrs	r2, r1
 80073fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800740a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800740e:	687a      	ldr	r2, [r7, #4]
 8007410:	6911      	ldr	r1, [r2, #16]
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	68d2      	ldr	r2, [r2, #12]
 8007416:	4311      	orrs	r1, r2
 8007418:	687a      	ldr	r2, [r7, #4]
 800741a:	6812      	ldr	r2, [r2, #0]
 800741c:	430b      	orrs	r3, r1
 800741e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	68db      	ldr	r3, [r3, #12]
 8007426:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	695a      	ldr	r2, [r3, #20]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	699b      	ldr	r3, [r3, #24]
 8007432:	431a      	orrs	r2, r3
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	430a      	orrs	r2, r1
 800743a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f042 0201 	orr.w	r2, r2, #1
 800744a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2200      	movs	r2, #0
 8007450:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2220      	movs	r2, #32
 8007456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2200      	movs	r2, #0
 800745e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007468:	2300      	movs	r3, #0
}
 800746a:	4618      	mov	r0, r3
 800746c:	3710      	adds	r7, #16
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
 8007472:	bf00      	nop
 8007474:	000186a0 	.word	0x000186a0
 8007478:	001e847f 	.word	0x001e847f
 800747c:	003d08ff 	.word	0x003d08ff
 8007480:	431bde83 	.word	0x431bde83
 8007484:	10624dd3 	.word	0x10624dd3

08007488 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b082      	sub	sp, #8
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d101      	bne.n	800749a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007496:	2301      	movs	r3, #1
 8007498:	e021      	b.n	80074de <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2224      	movs	r2, #36	; 0x24
 800749e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	681a      	ldr	r2, [r3, #0]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f022 0201 	bic.w	r2, r2, #1
 80074b0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f7fe ff1c 	bl	80062f0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2200      	movs	r2, #0
 80074bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2200      	movs	r2, #0
 80074c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2200      	movs	r2, #0
 80074ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2200      	movs	r2, #0
 80074d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074dc:	2300      	movs	r3, #0
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3708      	adds	r7, #8
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
	...

080074e8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b088      	sub	sp, #32
 80074ec:	af02      	add	r7, sp, #8
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	4608      	mov	r0, r1
 80074f2:	4611      	mov	r1, r2
 80074f4:	461a      	mov	r2, r3
 80074f6:	4603      	mov	r3, r0
 80074f8:	817b      	strh	r3, [r7, #10]
 80074fa:	460b      	mov	r3, r1
 80074fc:	813b      	strh	r3, [r7, #8]
 80074fe:	4613      	mov	r3, r2
 8007500:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007502:	f7ff fa0f 	bl	8006924 <HAL_GetTick>
 8007506:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800750e:	b2db      	uxtb	r3, r3
 8007510:	2b20      	cmp	r3, #32
 8007512:	f040 80d9 	bne.w	80076c8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	9300      	str	r3, [sp, #0]
 800751a:	2319      	movs	r3, #25
 800751c:	2201      	movs	r2, #1
 800751e:	496d      	ldr	r1, [pc, #436]	; (80076d4 <HAL_I2C_Mem_Write+0x1ec>)
 8007520:	68f8      	ldr	r0, [r7, #12]
 8007522:	f000 fc8d 	bl	8007e40 <I2C_WaitOnFlagUntilTimeout>
 8007526:	4603      	mov	r3, r0
 8007528:	2b00      	cmp	r3, #0
 800752a:	d001      	beq.n	8007530 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800752c:	2302      	movs	r3, #2
 800752e:	e0cc      	b.n	80076ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007536:	2b01      	cmp	r3, #1
 8007538:	d101      	bne.n	800753e <HAL_I2C_Mem_Write+0x56>
 800753a:	2302      	movs	r3, #2
 800753c:	e0c5      	b.n	80076ca <HAL_I2C_Mem_Write+0x1e2>
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2201      	movs	r2, #1
 8007542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f003 0301 	and.w	r3, r3, #1
 8007550:	2b01      	cmp	r3, #1
 8007552:	d007      	beq.n	8007564 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f042 0201 	orr.w	r2, r2, #1
 8007562:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	681a      	ldr	r2, [r3, #0]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007572:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2221      	movs	r2, #33	; 0x21
 8007578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2240      	movs	r2, #64	; 0x40
 8007580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2200      	movs	r2, #0
 8007588:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	6a3a      	ldr	r2, [r7, #32]
 800758e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007594:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800759a:	b29a      	uxth	r2, r3
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	4a4d      	ldr	r2, [pc, #308]	; (80076d8 <HAL_I2C_Mem_Write+0x1f0>)
 80075a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80075a6:	88f8      	ldrh	r0, [r7, #6]
 80075a8:	893a      	ldrh	r2, [r7, #8]
 80075aa:	8979      	ldrh	r1, [r7, #10]
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	9301      	str	r3, [sp, #4]
 80075b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b2:	9300      	str	r3, [sp, #0]
 80075b4:	4603      	mov	r3, r0
 80075b6:	68f8      	ldr	r0, [r7, #12]
 80075b8:	f000 fac4 	bl	8007b44 <I2C_RequestMemoryWrite>
 80075bc:	4603      	mov	r3, r0
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d052      	beq.n	8007668 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80075c2:	2301      	movs	r3, #1
 80075c4:	e081      	b.n	80076ca <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80075c6:	697a      	ldr	r2, [r7, #20]
 80075c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80075ca:	68f8      	ldr	r0, [r7, #12]
 80075cc:	f000 fd0e 	bl	8007fec <I2C_WaitOnTXEFlagUntilTimeout>
 80075d0:	4603      	mov	r3, r0
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d00d      	beq.n	80075f2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075da:	2b04      	cmp	r3, #4
 80075dc:	d107      	bne.n	80075ee <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	681a      	ldr	r2, [r3, #0]
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80075ee:	2301      	movs	r3, #1
 80075f0:	e06b      	b.n	80076ca <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f6:	781a      	ldrb	r2, [r3, #0]
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007602:	1c5a      	adds	r2, r3, #1
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800760c:	3b01      	subs	r3, #1
 800760e:	b29a      	uxth	r2, r3
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007618:	b29b      	uxth	r3, r3
 800761a:	3b01      	subs	r3, #1
 800761c:	b29a      	uxth	r2, r3
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	695b      	ldr	r3, [r3, #20]
 8007628:	f003 0304 	and.w	r3, r3, #4
 800762c:	2b04      	cmp	r3, #4
 800762e:	d11b      	bne.n	8007668 <HAL_I2C_Mem_Write+0x180>
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007634:	2b00      	cmp	r3, #0
 8007636:	d017      	beq.n	8007668 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763c:	781a      	ldrb	r2, [r3, #0]
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007648:	1c5a      	adds	r2, r3, #1
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007652:	3b01      	subs	r3, #1
 8007654:	b29a      	uxth	r2, r3
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800765e:	b29b      	uxth	r3, r3
 8007660:	3b01      	subs	r3, #1
 8007662:	b29a      	uxth	r2, r3
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800766c:	2b00      	cmp	r3, #0
 800766e:	d1aa      	bne.n	80075c6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007670:	697a      	ldr	r2, [r7, #20]
 8007672:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007674:	68f8      	ldr	r0, [r7, #12]
 8007676:	f000 fcfa 	bl	800806e <I2C_WaitOnBTFFlagUntilTimeout>
 800767a:	4603      	mov	r3, r0
 800767c:	2b00      	cmp	r3, #0
 800767e:	d00d      	beq.n	800769c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007684:	2b04      	cmp	r3, #4
 8007686:	d107      	bne.n	8007698 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	681a      	ldr	r2, [r3, #0]
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007696:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007698:	2301      	movs	r3, #1
 800769a:	e016      	b.n	80076ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	681a      	ldr	r2, [r3, #0]
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2220      	movs	r2, #32
 80076b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2200      	movs	r2, #0
 80076b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2200      	movs	r2, #0
 80076c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80076c4:	2300      	movs	r3, #0
 80076c6:	e000      	b.n	80076ca <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80076c8:	2302      	movs	r3, #2
  }
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3718      	adds	r7, #24
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
 80076d2:	bf00      	nop
 80076d4:	00100002 	.word	0x00100002
 80076d8:	ffff0000 	.word	0xffff0000

080076dc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b08c      	sub	sp, #48	; 0x30
 80076e0:	af02      	add	r7, sp, #8
 80076e2:	60f8      	str	r0, [r7, #12]
 80076e4:	4608      	mov	r0, r1
 80076e6:	4611      	mov	r1, r2
 80076e8:	461a      	mov	r2, r3
 80076ea:	4603      	mov	r3, r0
 80076ec:	817b      	strh	r3, [r7, #10]
 80076ee:	460b      	mov	r3, r1
 80076f0:	813b      	strh	r3, [r7, #8]
 80076f2:	4613      	mov	r3, r2
 80076f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80076f6:	f7ff f915 	bl	8006924 <HAL_GetTick>
 80076fa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007702:	b2db      	uxtb	r3, r3
 8007704:	2b20      	cmp	r3, #32
 8007706:	f040 8208 	bne.w	8007b1a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800770a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770c:	9300      	str	r3, [sp, #0]
 800770e:	2319      	movs	r3, #25
 8007710:	2201      	movs	r2, #1
 8007712:	497b      	ldr	r1, [pc, #492]	; (8007900 <HAL_I2C_Mem_Read+0x224>)
 8007714:	68f8      	ldr	r0, [r7, #12]
 8007716:	f000 fb93 	bl	8007e40 <I2C_WaitOnFlagUntilTimeout>
 800771a:	4603      	mov	r3, r0
 800771c:	2b00      	cmp	r3, #0
 800771e:	d001      	beq.n	8007724 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007720:	2302      	movs	r3, #2
 8007722:	e1fb      	b.n	8007b1c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800772a:	2b01      	cmp	r3, #1
 800772c:	d101      	bne.n	8007732 <HAL_I2C_Mem_Read+0x56>
 800772e:	2302      	movs	r3, #2
 8007730:	e1f4      	b.n	8007b1c <HAL_I2C_Mem_Read+0x440>
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2201      	movs	r2, #1
 8007736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f003 0301 	and.w	r3, r3, #1
 8007744:	2b01      	cmp	r3, #1
 8007746:	d007      	beq.n	8007758 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f042 0201 	orr.w	r2, r2, #1
 8007756:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007766:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2222      	movs	r2, #34	; 0x22
 800776c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2240      	movs	r2, #64	; 0x40
 8007774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2200      	movs	r2, #0
 800777c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007782:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007788:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800778e:	b29a      	uxth	r2, r3
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	4a5b      	ldr	r2, [pc, #364]	; (8007904 <HAL_I2C_Mem_Read+0x228>)
 8007798:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800779a:	88f8      	ldrh	r0, [r7, #6]
 800779c:	893a      	ldrh	r2, [r7, #8]
 800779e:	8979      	ldrh	r1, [r7, #10]
 80077a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a2:	9301      	str	r3, [sp, #4]
 80077a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a6:	9300      	str	r3, [sp, #0]
 80077a8:	4603      	mov	r3, r0
 80077aa:	68f8      	ldr	r0, [r7, #12]
 80077ac:	f000 fa60 	bl	8007c70 <I2C_RequestMemoryRead>
 80077b0:	4603      	mov	r3, r0
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d001      	beq.n	80077ba <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80077b6:	2301      	movs	r3, #1
 80077b8:	e1b0      	b.n	8007b1c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d113      	bne.n	80077ea <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077c2:	2300      	movs	r3, #0
 80077c4:	623b      	str	r3, [r7, #32]
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	695b      	ldr	r3, [r3, #20]
 80077cc:	623b      	str	r3, [r7, #32]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	699b      	ldr	r3, [r3, #24]
 80077d4:	623b      	str	r3, [r7, #32]
 80077d6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	681a      	ldr	r2, [r3, #0]
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077e6:	601a      	str	r2, [r3, #0]
 80077e8:	e184      	b.n	8007af4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d11b      	bne.n	800782a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	681a      	ldr	r2, [r3, #0]
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007800:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007802:	2300      	movs	r3, #0
 8007804:	61fb      	str	r3, [r7, #28]
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	695b      	ldr	r3, [r3, #20]
 800780c:	61fb      	str	r3, [r7, #28]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	699b      	ldr	r3, [r3, #24]
 8007814:	61fb      	str	r3, [r7, #28]
 8007816:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007826:	601a      	str	r2, [r3, #0]
 8007828:	e164      	b.n	8007af4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800782e:	2b02      	cmp	r3, #2
 8007830:	d11b      	bne.n	800786a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007840:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	681a      	ldr	r2, [r3, #0]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007850:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007852:	2300      	movs	r3, #0
 8007854:	61bb      	str	r3, [r7, #24]
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	695b      	ldr	r3, [r3, #20]
 800785c:	61bb      	str	r3, [r7, #24]
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	699b      	ldr	r3, [r3, #24]
 8007864:	61bb      	str	r3, [r7, #24]
 8007866:	69bb      	ldr	r3, [r7, #24]
 8007868:	e144      	b.n	8007af4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800786a:	2300      	movs	r3, #0
 800786c:	617b      	str	r3, [r7, #20]
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	695b      	ldr	r3, [r3, #20]
 8007874:	617b      	str	r3, [r7, #20]
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	699b      	ldr	r3, [r3, #24]
 800787c:	617b      	str	r3, [r7, #20]
 800787e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007880:	e138      	b.n	8007af4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007886:	2b03      	cmp	r3, #3
 8007888:	f200 80f1 	bhi.w	8007a6e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007890:	2b01      	cmp	r3, #1
 8007892:	d123      	bne.n	80078dc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007896:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007898:	68f8      	ldr	r0, [r7, #12]
 800789a:	f000 fc29 	bl	80080f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800789e:	4603      	mov	r3, r0
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d001      	beq.n	80078a8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80078a4:	2301      	movs	r3, #1
 80078a6:	e139      	b.n	8007b1c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	691a      	ldr	r2, [r3, #16]
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b2:	b2d2      	uxtb	r2, r2
 80078b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ba:	1c5a      	adds	r2, r3, #1
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078c4:	3b01      	subs	r3, #1
 80078c6:	b29a      	uxth	r2, r3
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	3b01      	subs	r3, #1
 80078d4:	b29a      	uxth	r2, r3
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80078da:	e10b      	b.n	8007af4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078e0:	2b02      	cmp	r3, #2
 80078e2:	d14e      	bne.n	8007982 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80078e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e6:	9300      	str	r3, [sp, #0]
 80078e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ea:	2200      	movs	r2, #0
 80078ec:	4906      	ldr	r1, [pc, #24]	; (8007908 <HAL_I2C_Mem_Read+0x22c>)
 80078ee:	68f8      	ldr	r0, [r7, #12]
 80078f0:	f000 faa6 	bl	8007e40 <I2C_WaitOnFlagUntilTimeout>
 80078f4:	4603      	mov	r3, r0
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d008      	beq.n	800790c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80078fa:	2301      	movs	r3, #1
 80078fc:	e10e      	b.n	8007b1c <HAL_I2C_Mem_Read+0x440>
 80078fe:	bf00      	nop
 8007900:	00100002 	.word	0x00100002
 8007904:	ffff0000 	.word	0xffff0000
 8007908:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	681a      	ldr	r2, [r3, #0]
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800791a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	691a      	ldr	r2, [r3, #16]
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007926:	b2d2      	uxtb	r2, r2
 8007928:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800792e:	1c5a      	adds	r2, r3, #1
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007938:	3b01      	subs	r3, #1
 800793a:	b29a      	uxth	r2, r3
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007944:	b29b      	uxth	r3, r3
 8007946:	3b01      	subs	r3, #1
 8007948:	b29a      	uxth	r2, r3
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	691a      	ldr	r2, [r3, #16]
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007958:	b2d2      	uxtb	r2, r2
 800795a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007960:	1c5a      	adds	r2, r3, #1
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800796a:	3b01      	subs	r3, #1
 800796c:	b29a      	uxth	r2, r3
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007976:	b29b      	uxth	r3, r3
 8007978:	3b01      	subs	r3, #1
 800797a:	b29a      	uxth	r2, r3
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007980:	e0b8      	b.n	8007af4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007984:	9300      	str	r3, [sp, #0]
 8007986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007988:	2200      	movs	r2, #0
 800798a:	4966      	ldr	r1, [pc, #408]	; (8007b24 <HAL_I2C_Mem_Read+0x448>)
 800798c:	68f8      	ldr	r0, [r7, #12]
 800798e:	f000 fa57 	bl	8007e40 <I2C_WaitOnFlagUntilTimeout>
 8007992:	4603      	mov	r3, r0
 8007994:	2b00      	cmp	r3, #0
 8007996:	d001      	beq.n	800799c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007998:	2301      	movs	r3, #1
 800799a:	e0bf      	b.n	8007b1c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	691a      	ldr	r2, [r3, #16]
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b6:	b2d2      	uxtb	r2, r2
 80079b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079be:	1c5a      	adds	r2, r3, #1
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079c8:	3b01      	subs	r3, #1
 80079ca:	b29a      	uxth	r2, r3
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	3b01      	subs	r3, #1
 80079d8:	b29a      	uxth	r2, r3
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80079de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e0:	9300      	str	r3, [sp, #0]
 80079e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e4:	2200      	movs	r2, #0
 80079e6:	494f      	ldr	r1, [pc, #316]	; (8007b24 <HAL_I2C_Mem_Read+0x448>)
 80079e8:	68f8      	ldr	r0, [r7, #12]
 80079ea:	f000 fa29 	bl	8007e40 <I2C_WaitOnFlagUntilTimeout>
 80079ee:	4603      	mov	r3, r0
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d001      	beq.n	80079f8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80079f4:	2301      	movs	r3, #1
 80079f6:	e091      	b.n	8007b1c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	681a      	ldr	r2, [r3, #0]
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	691a      	ldr	r2, [r3, #16]
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a12:	b2d2      	uxtb	r2, r2
 8007a14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a1a:	1c5a      	adds	r2, r3, #1
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a24:	3b01      	subs	r3, #1
 8007a26:	b29a      	uxth	r2, r3
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	3b01      	subs	r3, #1
 8007a34:	b29a      	uxth	r2, r3
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	691a      	ldr	r2, [r3, #16]
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a44:	b2d2      	uxtb	r2, r2
 8007a46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a4c:	1c5a      	adds	r2, r3, #1
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a56:	3b01      	subs	r3, #1
 8007a58:	b29a      	uxth	r2, r3
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	3b01      	subs	r3, #1
 8007a66:	b29a      	uxth	r2, r3
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007a6c:	e042      	b.n	8007af4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a70:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007a72:	68f8      	ldr	r0, [r7, #12]
 8007a74:	f000 fb3c 	bl	80080f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d001      	beq.n	8007a82 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	e04c      	b.n	8007b1c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	691a      	ldr	r2, [r3, #16]
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a8c:	b2d2      	uxtb	r2, r2
 8007a8e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a94:	1c5a      	adds	r2, r3, #1
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a9e:	3b01      	subs	r3, #1
 8007aa0:	b29a      	uxth	r2, r3
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	3b01      	subs	r3, #1
 8007aae:	b29a      	uxth	r2, r3
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	695b      	ldr	r3, [r3, #20]
 8007aba:	f003 0304 	and.w	r3, r3, #4
 8007abe:	2b04      	cmp	r3, #4
 8007ac0:	d118      	bne.n	8007af4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	691a      	ldr	r2, [r3, #16]
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007acc:	b2d2      	uxtb	r2, r2
 8007ace:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad4:	1c5a      	adds	r2, r3, #1
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ade:	3b01      	subs	r3, #1
 8007ae0:	b29a      	uxth	r2, r3
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	3b01      	subs	r3, #1
 8007aee:	b29a      	uxth	r2, r3
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	f47f aec2 	bne.w	8007882 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2220      	movs	r2, #32
 8007b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2200      	movs	r2, #0
 8007b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007b16:	2300      	movs	r3, #0
 8007b18:	e000      	b.n	8007b1c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007b1a:	2302      	movs	r3, #2
  }
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3728      	adds	r7, #40	; 0x28
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}
 8007b24:	00010004 	.word	0x00010004

08007b28 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b083      	sub	sp, #12
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b36:	b2db      	uxtb	r3, r3
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	370c      	adds	r7, #12
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr

08007b44 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b088      	sub	sp, #32
 8007b48:	af02      	add	r7, sp, #8
 8007b4a:	60f8      	str	r0, [r7, #12]
 8007b4c:	4608      	mov	r0, r1
 8007b4e:	4611      	mov	r1, r2
 8007b50:	461a      	mov	r2, r3
 8007b52:	4603      	mov	r3, r0
 8007b54:	817b      	strh	r3, [r7, #10]
 8007b56:	460b      	mov	r3, r1
 8007b58:	813b      	strh	r3, [r7, #8]
 8007b5a:	4613      	mov	r3, r2
 8007b5c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	681a      	ldr	r2, [r3, #0]
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b6c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b70:	9300      	str	r3, [sp, #0]
 8007b72:	6a3b      	ldr	r3, [r7, #32]
 8007b74:	2200      	movs	r2, #0
 8007b76:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007b7a:	68f8      	ldr	r0, [r7, #12]
 8007b7c:	f000 f960 	bl	8007e40 <I2C_WaitOnFlagUntilTimeout>
 8007b80:	4603      	mov	r3, r0
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d00d      	beq.n	8007ba2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b94:	d103      	bne.n	8007b9e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b9c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007b9e:	2303      	movs	r3, #3
 8007ba0:	e05f      	b.n	8007c62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007ba2:	897b      	ldrh	r3, [r7, #10]
 8007ba4:	b2db      	uxtb	r3, r3
 8007ba6:	461a      	mov	r2, r3
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007bb0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb4:	6a3a      	ldr	r2, [r7, #32]
 8007bb6:	492d      	ldr	r1, [pc, #180]	; (8007c6c <I2C_RequestMemoryWrite+0x128>)
 8007bb8:	68f8      	ldr	r0, [r7, #12]
 8007bba:	f000 f998 	bl	8007eee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d001      	beq.n	8007bc8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	e04c      	b.n	8007c62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bc8:	2300      	movs	r3, #0
 8007bca:	617b      	str	r3, [r7, #20]
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	695b      	ldr	r3, [r3, #20]
 8007bd2:	617b      	str	r3, [r7, #20]
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	699b      	ldr	r3, [r3, #24]
 8007bda:	617b      	str	r3, [r7, #20]
 8007bdc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007be0:	6a39      	ldr	r1, [r7, #32]
 8007be2:	68f8      	ldr	r0, [r7, #12]
 8007be4:	f000 fa02 	bl	8007fec <I2C_WaitOnTXEFlagUntilTimeout>
 8007be8:	4603      	mov	r3, r0
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d00d      	beq.n	8007c0a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bf2:	2b04      	cmp	r3, #4
 8007bf4:	d107      	bne.n	8007c06 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	681a      	ldr	r2, [r3, #0]
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c04:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007c06:	2301      	movs	r3, #1
 8007c08:	e02b      	b.n	8007c62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007c0a:	88fb      	ldrh	r3, [r7, #6]
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	d105      	bne.n	8007c1c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007c10:	893b      	ldrh	r3, [r7, #8]
 8007c12:	b2da      	uxtb	r2, r3
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	611a      	str	r2, [r3, #16]
 8007c1a:	e021      	b.n	8007c60 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007c1c:	893b      	ldrh	r3, [r7, #8]
 8007c1e:	0a1b      	lsrs	r3, r3, #8
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	b2da      	uxtb	r2, r3
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c2c:	6a39      	ldr	r1, [r7, #32]
 8007c2e:	68f8      	ldr	r0, [r7, #12]
 8007c30:	f000 f9dc 	bl	8007fec <I2C_WaitOnTXEFlagUntilTimeout>
 8007c34:	4603      	mov	r3, r0
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d00d      	beq.n	8007c56 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c3e:	2b04      	cmp	r3, #4
 8007c40:	d107      	bne.n	8007c52 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	681a      	ldr	r2, [r3, #0]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c50:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007c52:	2301      	movs	r3, #1
 8007c54:	e005      	b.n	8007c62 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007c56:	893b      	ldrh	r3, [r7, #8]
 8007c58:	b2da      	uxtb	r2, r3
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007c60:	2300      	movs	r3, #0
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3718      	adds	r7, #24
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}
 8007c6a:	bf00      	nop
 8007c6c:	00010002 	.word	0x00010002

08007c70 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b088      	sub	sp, #32
 8007c74:	af02      	add	r7, sp, #8
 8007c76:	60f8      	str	r0, [r7, #12]
 8007c78:	4608      	mov	r0, r1
 8007c7a:	4611      	mov	r1, r2
 8007c7c:	461a      	mov	r2, r3
 8007c7e:	4603      	mov	r3, r0
 8007c80:	817b      	strh	r3, [r7, #10]
 8007c82:	460b      	mov	r3, r1
 8007c84:	813b      	strh	r3, [r7, #8]
 8007c86:	4613      	mov	r3, r2
 8007c88:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	681a      	ldr	r2, [r3, #0]
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007c98:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	681a      	ldr	r2, [r3, #0]
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ca8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cac:	9300      	str	r3, [sp, #0]
 8007cae:	6a3b      	ldr	r3, [r7, #32]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007cb6:	68f8      	ldr	r0, [r7, #12]
 8007cb8:	f000 f8c2 	bl	8007e40 <I2C_WaitOnFlagUntilTimeout>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d00d      	beq.n	8007cde <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ccc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cd0:	d103      	bne.n	8007cda <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cd8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007cda:	2303      	movs	r3, #3
 8007cdc:	e0aa      	b.n	8007e34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007cde:	897b      	ldrh	r3, [r7, #10]
 8007ce0:	b2db      	uxtb	r3, r3
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007cec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf0:	6a3a      	ldr	r2, [r7, #32]
 8007cf2:	4952      	ldr	r1, [pc, #328]	; (8007e3c <I2C_RequestMemoryRead+0x1cc>)
 8007cf4:	68f8      	ldr	r0, [r7, #12]
 8007cf6:	f000 f8fa 	bl	8007eee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d001      	beq.n	8007d04 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007d00:	2301      	movs	r3, #1
 8007d02:	e097      	b.n	8007e34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d04:	2300      	movs	r3, #0
 8007d06:	617b      	str	r3, [r7, #20]
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	695b      	ldr	r3, [r3, #20]
 8007d0e:	617b      	str	r3, [r7, #20]
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	699b      	ldr	r3, [r3, #24]
 8007d16:	617b      	str	r3, [r7, #20]
 8007d18:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d1c:	6a39      	ldr	r1, [r7, #32]
 8007d1e:	68f8      	ldr	r0, [r7, #12]
 8007d20:	f000 f964 	bl	8007fec <I2C_WaitOnTXEFlagUntilTimeout>
 8007d24:	4603      	mov	r3, r0
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d00d      	beq.n	8007d46 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d2e:	2b04      	cmp	r3, #4
 8007d30:	d107      	bne.n	8007d42 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d40:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007d42:	2301      	movs	r3, #1
 8007d44:	e076      	b.n	8007e34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007d46:	88fb      	ldrh	r3, [r7, #6]
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d105      	bne.n	8007d58 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007d4c:	893b      	ldrh	r3, [r7, #8]
 8007d4e:	b2da      	uxtb	r2, r3
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	611a      	str	r2, [r3, #16]
 8007d56:	e021      	b.n	8007d9c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007d58:	893b      	ldrh	r3, [r7, #8]
 8007d5a:	0a1b      	lsrs	r3, r3, #8
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	b2da      	uxtb	r2, r3
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d68:	6a39      	ldr	r1, [r7, #32]
 8007d6a:	68f8      	ldr	r0, [r7, #12]
 8007d6c:	f000 f93e 	bl	8007fec <I2C_WaitOnTXEFlagUntilTimeout>
 8007d70:	4603      	mov	r3, r0
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d00d      	beq.n	8007d92 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d7a:	2b04      	cmp	r3, #4
 8007d7c:	d107      	bne.n	8007d8e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	681a      	ldr	r2, [r3, #0]
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d8c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	e050      	b.n	8007e34 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007d92:	893b      	ldrh	r3, [r7, #8]
 8007d94:	b2da      	uxtb	r2, r3
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d9e:	6a39      	ldr	r1, [r7, #32]
 8007da0:	68f8      	ldr	r0, [r7, #12]
 8007da2:	f000 f923 	bl	8007fec <I2C_WaitOnTXEFlagUntilTimeout>
 8007da6:	4603      	mov	r3, r0
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d00d      	beq.n	8007dc8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db0:	2b04      	cmp	r3, #4
 8007db2:	d107      	bne.n	8007dc4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	681a      	ldr	r2, [r3, #0]
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007dc2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	e035      	b.n	8007e34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007dd6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dda:	9300      	str	r3, [sp, #0]
 8007ddc:	6a3b      	ldr	r3, [r7, #32]
 8007dde:	2200      	movs	r2, #0
 8007de0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007de4:	68f8      	ldr	r0, [r7, #12]
 8007de6:	f000 f82b 	bl	8007e40 <I2C_WaitOnFlagUntilTimeout>
 8007dea:	4603      	mov	r3, r0
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d00d      	beq.n	8007e0c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dfe:	d103      	bne.n	8007e08 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e06:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007e08:	2303      	movs	r3, #3
 8007e0a:	e013      	b.n	8007e34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007e0c:	897b      	ldrh	r3, [r7, #10]
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	f043 0301 	orr.w	r3, r3, #1
 8007e14:	b2da      	uxtb	r2, r3
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e1e:	6a3a      	ldr	r2, [r7, #32]
 8007e20:	4906      	ldr	r1, [pc, #24]	; (8007e3c <I2C_RequestMemoryRead+0x1cc>)
 8007e22:	68f8      	ldr	r0, [r7, #12]
 8007e24:	f000 f863 	bl	8007eee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d001      	beq.n	8007e32 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	e000      	b.n	8007e34 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007e32:	2300      	movs	r3, #0
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3718      	adds	r7, #24
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}
 8007e3c:	00010002 	.word	0x00010002

08007e40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b084      	sub	sp, #16
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	60f8      	str	r0, [r7, #12]
 8007e48:	60b9      	str	r1, [r7, #8]
 8007e4a:	603b      	str	r3, [r7, #0]
 8007e4c:	4613      	mov	r3, r2
 8007e4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007e50:	e025      	b.n	8007e9e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e58:	d021      	beq.n	8007e9e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e5a:	f7fe fd63 	bl	8006924 <HAL_GetTick>
 8007e5e:	4602      	mov	r2, r0
 8007e60:	69bb      	ldr	r3, [r7, #24]
 8007e62:	1ad3      	subs	r3, r2, r3
 8007e64:	683a      	ldr	r2, [r7, #0]
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d302      	bcc.n	8007e70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d116      	bne.n	8007e9e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2200      	movs	r2, #0
 8007e74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2220      	movs	r2, #32
 8007e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2200      	movs	r2, #0
 8007e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e8a:	f043 0220 	orr.w	r2, r3, #32
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2200      	movs	r2, #0
 8007e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	e023      	b.n	8007ee6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	0c1b      	lsrs	r3, r3, #16
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	d10d      	bne.n	8007ec4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	695b      	ldr	r3, [r3, #20]
 8007eae:	43da      	mvns	r2, r3
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	4013      	ands	r3, r2
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	bf0c      	ite	eq
 8007eba:	2301      	moveq	r3, #1
 8007ebc:	2300      	movne	r3, #0
 8007ebe:	b2db      	uxtb	r3, r3
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	e00c      	b.n	8007ede <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	699b      	ldr	r3, [r3, #24]
 8007eca:	43da      	mvns	r2, r3
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	4013      	ands	r3, r2
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	bf0c      	ite	eq
 8007ed6:	2301      	moveq	r3, #1
 8007ed8:	2300      	movne	r3, #0
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	461a      	mov	r2, r3
 8007ede:	79fb      	ldrb	r3, [r7, #7]
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d0b6      	beq.n	8007e52 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007ee4:	2300      	movs	r3, #0
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3710      	adds	r7, #16
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}

08007eee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007eee:	b580      	push	{r7, lr}
 8007ef0:	b084      	sub	sp, #16
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	60f8      	str	r0, [r7, #12]
 8007ef6:	60b9      	str	r1, [r7, #8]
 8007ef8:	607a      	str	r2, [r7, #4]
 8007efa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007efc:	e051      	b.n	8007fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	695b      	ldr	r3, [r3, #20]
 8007f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f0c:	d123      	bne.n	8007f56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f1c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007f26:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2220      	movs	r2, #32
 8007f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f42:	f043 0204 	orr.w	r2, r3, #4
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007f52:	2301      	movs	r3, #1
 8007f54:	e046      	b.n	8007fe4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f5c:	d021      	beq.n	8007fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f5e:	f7fe fce1 	bl	8006924 <HAL_GetTick>
 8007f62:	4602      	mov	r2, r0
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	1ad3      	subs	r3, r2, r3
 8007f68:	687a      	ldr	r2, [r7, #4]
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d302      	bcc.n	8007f74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d116      	bne.n	8007fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2200      	movs	r2, #0
 8007f78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2220      	movs	r2, #32
 8007f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2200      	movs	r2, #0
 8007f86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f8e:	f043 0220 	orr.w	r2, r3, #32
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	e020      	b.n	8007fe4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	0c1b      	lsrs	r3, r3, #16
 8007fa6:	b2db      	uxtb	r3, r3
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	d10c      	bne.n	8007fc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	695b      	ldr	r3, [r3, #20]
 8007fb2:	43da      	mvns	r2, r3
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	4013      	ands	r3, r2
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	bf14      	ite	ne
 8007fbe:	2301      	movne	r3, #1
 8007fc0:	2300      	moveq	r3, #0
 8007fc2:	b2db      	uxtb	r3, r3
 8007fc4:	e00b      	b.n	8007fde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	699b      	ldr	r3, [r3, #24]
 8007fcc:	43da      	mvns	r2, r3
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	4013      	ands	r3, r2
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	bf14      	ite	ne
 8007fd8:	2301      	movne	r3, #1
 8007fda:	2300      	moveq	r3, #0
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d18d      	bne.n	8007efe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007fe2:	2300      	movs	r3, #0
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3710      	adds	r7, #16
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}

08007fec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b084      	sub	sp, #16
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	60f8      	str	r0, [r7, #12]
 8007ff4:	60b9      	str	r1, [r7, #8]
 8007ff6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007ff8:	e02d      	b.n	8008056 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007ffa:	68f8      	ldr	r0, [r7, #12]
 8007ffc:	f000 f8ce 	bl	800819c <I2C_IsAcknowledgeFailed>
 8008000:	4603      	mov	r3, r0
 8008002:	2b00      	cmp	r3, #0
 8008004:	d001      	beq.n	800800a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008006:	2301      	movs	r3, #1
 8008008:	e02d      	b.n	8008066 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008010:	d021      	beq.n	8008056 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008012:	f7fe fc87 	bl	8006924 <HAL_GetTick>
 8008016:	4602      	mov	r2, r0
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	1ad3      	subs	r3, r2, r3
 800801c:	68ba      	ldr	r2, [r7, #8]
 800801e:	429a      	cmp	r2, r3
 8008020:	d302      	bcc.n	8008028 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d116      	bne.n	8008056 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2200      	movs	r2, #0
 800802c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2220      	movs	r2, #32
 8008032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2200      	movs	r2, #0
 800803a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008042:	f043 0220 	orr.w	r2, r3, #32
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2200      	movs	r2, #0
 800804e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008052:	2301      	movs	r3, #1
 8008054:	e007      	b.n	8008066 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	695b      	ldr	r3, [r3, #20]
 800805c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008060:	2b80      	cmp	r3, #128	; 0x80
 8008062:	d1ca      	bne.n	8007ffa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008064:	2300      	movs	r3, #0
}
 8008066:	4618      	mov	r0, r3
 8008068:	3710      	adds	r7, #16
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}

0800806e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800806e:	b580      	push	{r7, lr}
 8008070:	b084      	sub	sp, #16
 8008072:	af00      	add	r7, sp, #0
 8008074:	60f8      	str	r0, [r7, #12]
 8008076:	60b9      	str	r1, [r7, #8]
 8008078:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800807a:	e02d      	b.n	80080d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800807c:	68f8      	ldr	r0, [r7, #12]
 800807e:	f000 f88d 	bl	800819c <I2C_IsAcknowledgeFailed>
 8008082:	4603      	mov	r3, r0
 8008084:	2b00      	cmp	r3, #0
 8008086:	d001      	beq.n	800808c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008088:	2301      	movs	r3, #1
 800808a:	e02d      	b.n	80080e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008092:	d021      	beq.n	80080d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008094:	f7fe fc46 	bl	8006924 <HAL_GetTick>
 8008098:	4602      	mov	r2, r0
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	1ad3      	subs	r3, r2, r3
 800809e:	68ba      	ldr	r2, [r7, #8]
 80080a0:	429a      	cmp	r2, r3
 80080a2:	d302      	bcc.n	80080aa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d116      	bne.n	80080d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2200      	movs	r2, #0
 80080ae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2220      	movs	r2, #32
 80080b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2200      	movs	r2, #0
 80080bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080c4:	f043 0220 	orr.w	r2, r3, #32
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	2200      	movs	r2, #0
 80080d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80080d4:	2301      	movs	r3, #1
 80080d6:	e007      	b.n	80080e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	695b      	ldr	r3, [r3, #20]
 80080de:	f003 0304 	and.w	r3, r3, #4
 80080e2:	2b04      	cmp	r3, #4
 80080e4:	d1ca      	bne.n	800807c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80080e6:	2300      	movs	r3, #0
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3710      	adds	r7, #16
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b084      	sub	sp, #16
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	60f8      	str	r0, [r7, #12]
 80080f8:	60b9      	str	r1, [r7, #8]
 80080fa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80080fc:	e042      	b.n	8008184 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	695b      	ldr	r3, [r3, #20]
 8008104:	f003 0310 	and.w	r3, r3, #16
 8008108:	2b10      	cmp	r3, #16
 800810a:	d119      	bne.n	8008140 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f06f 0210 	mvn.w	r2, #16
 8008114:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2200      	movs	r2, #0
 800811a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2220      	movs	r2, #32
 8008120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2200      	movs	r2, #0
 8008128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2200      	movs	r2, #0
 8008138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800813c:	2301      	movs	r3, #1
 800813e:	e029      	b.n	8008194 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008140:	f7fe fbf0 	bl	8006924 <HAL_GetTick>
 8008144:	4602      	mov	r2, r0
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	1ad3      	subs	r3, r2, r3
 800814a:	68ba      	ldr	r2, [r7, #8]
 800814c:	429a      	cmp	r2, r3
 800814e:	d302      	bcc.n	8008156 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d116      	bne.n	8008184 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2200      	movs	r2, #0
 800815a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2220      	movs	r2, #32
 8008160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2200      	movs	r2, #0
 8008168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008170:	f043 0220 	orr.w	r2, r3, #32
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	2200      	movs	r2, #0
 800817c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008180:	2301      	movs	r3, #1
 8008182:	e007      	b.n	8008194 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	695b      	ldr	r3, [r3, #20]
 800818a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800818e:	2b40      	cmp	r3, #64	; 0x40
 8008190:	d1b5      	bne.n	80080fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008192:	2300      	movs	r3, #0
}
 8008194:	4618      	mov	r0, r3
 8008196:	3710      	adds	r7, #16
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}

0800819c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800819c:	b480      	push	{r7}
 800819e:	b083      	sub	sp, #12
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	695b      	ldr	r3, [r3, #20]
 80081aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081b2:	d11b      	bne.n	80081ec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80081bc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2200      	movs	r2, #0
 80081c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2220      	movs	r2, #32
 80081c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2200      	movs	r2, #0
 80081d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081d8:	f043 0204 	orr.w	r2, r3, #4
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2200      	movs	r2, #0
 80081e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80081e8:	2301      	movs	r3, #1
 80081ea:	e000      	b.n	80081ee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80081ec:	2300      	movs	r3, #0
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	370c      	adds	r7, #12
 80081f2:	46bd      	mov	sp, r7
 80081f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f8:	4770      	bx	lr
	...

080081fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b086      	sub	sp, #24
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d101      	bne.n	800820e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800820a:	2301      	movs	r3, #1
 800820c:	e264      	b.n	80086d8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f003 0301 	and.w	r3, r3, #1
 8008216:	2b00      	cmp	r3, #0
 8008218:	d075      	beq.n	8008306 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800821a:	4ba3      	ldr	r3, [pc, #652]	; (80084a8 <HAL_RCC_OscConfig+0x2ac>)
 800821c:	689b      	ldr	r3, [r3, #8]
 800821e:	f003 030c 	and.w	r3, r3, #12
 8008222:	2b04      	cmp	r3, #4
 8008224:	d00c      	beq.n	8008240 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008226:	4ba0      	ldr	r3, [pc, #640]	; (80084a8 <HAL_RCC_OscConfig+0x2ac>)
 8008228:	689b      	ldr	r3, [r3, #8]
 800822a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800822e:	2b08      	cmp	r3, #8
 8008230:	d112      	bne.n	8008258 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008232:	4b9d      	ldr	r3, [pc, #628]	; (80084a8 <HAL_RCC_OscConfig+0x2ac>)
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800823a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800823e:	d10b      	bne.n	8008258 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008240:	4b99      	ldr	r3, [pc, #612]	; (80084a8 <HAL_RCC_OscConfig+0x2ac>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008248:	2b00      	cmp	r3, #0
 800824a:	d05b      	beq.n	8008304 <HAL_RCC_OscConfig+0x108>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	685b      	ldr	r3, [r3, #4]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d157      	bne.n	8008304 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008254:	2301      	movs	r3, #1
 8008256:	e23f      	b.n	80086d8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008260:	d106      	bne.n	8008270 <HAL_RCC_OscConfig+0x74>
 8008262:	4b91      	ldr	r3, [pc, #580]	; (80084a8 <HAL_RCC_OscConfig+0x2ac>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a90      	ldr	r2, [pc, #576]	; (80084a8 <HAL_RCC_OscConfig+0x2ac>)
 8008268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800826c:	6013      	str	r3, [r2, #0]
 800826e:	e01d      	b.n	80082ac <HAL_RCC_OscConfig+0xb0>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008278:	d10c      	bne.n	8008294 <HAL_RCC_OscConfig+0x98>
 800827a:	4b8b      	ldr	r3, [pc, #556]	; (80084a8 <HAL_RCC_OscConfig+0x2ac>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a8a      	ldr	r2, [pc, #552]	; (80084a8 <HAL_RCC_OscConfig+0x2ac>)
 8008280:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008284:	6013      	str	r3, [r2, #0]
 8008286:	4b88      	ldr	r3, [pc, #544]	; (80084a8 <HAL_RCC_OscConfig+0x2ac>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a87      	ldr	r2, [pc, #540]	; (80084a8 <HAL_RCC_OscConfig+0x2ac>)
 800828c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008290:	6013      	str	r3, [r2, #0]
 8008292:	e00b      	b.n	80082ac <HAL_RCC_OscConfig+0xb0>
 8008294:	4b84      	ldr	r3, [pc, #528]	; (80084a8 <HAL_RCC_OscConfig+0x2ac>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a83      	ldr	r2, [pc, #524]	; (80084a8 <HAL_RCC_OscConfig+0x2ac>)
 800829a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800829e:	6013      	str	r3, [r2, #0]
 80082a0:	4b81      	ldr	r3, [pc, #516]	; (80084a8 <HAL_RCC_OscConfig+0x2ac>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a80      	ldr	r2, [pc, #512]	; (80084a8 <HAL_RCC_OscConfig+0x2ac>)
 80082a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80082aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	685b      	ldr	r3, [r3, #4]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d013      	beq.n	80082dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082b4:	f7fe fb36 	bl	8006924 <HAL_GetTick>
 80082b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80082ba:	e008      	b.n	80082ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80082bc:	f7fe fb32 	bl	8006924 <HAL_GetTick>
 80082c0:	4602      	mov	r2, r0
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	1ad3      	subs	r3, r2, r3
 80082c6:	2b64      	cmp	r3, #100	; 0x64
 80082c8:	d901      	bls.n	80082ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80082ca:	2303      	movs	r3, #3
 80082cc:	e204      	b.n	80086d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80082ce:	4b76      	ldr	r3, [pc, #472]	; (80084a8 <HAL_RCC_OscConfig+0x2ac>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d0f0      	beq.n	80082bc <HAL_RCC_OscConfig+0xc0>
 80082da:	e014      	b.n	8008306 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082dc:	f7fe fb22 	bl	8006924 <HAL_GetTick>
 80082e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80082e2:	e008      	b.n	80082f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80082e4:	f7fe fb1e 	bl	8006924 <HAL_GetTick>
 80082e8:	4602      	mov	r2, r0
 80082ea:	693b      	ldr	r3, [r7, #16]
 80082ec:	1ad3      	subs	r3, r2, r3
 80082ee:	2b64      	cmp	r3, #100	; 0x64
 80082f0:	d901      	bls.n	80082f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80082f2:	2303      	movs	r3, #3
 80082f4:	e1f0      	b.n	80086d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80082f6:	4b6c      	ldr	r3, [pc, #432]	; (80084a8 <HAL_RCC_OscConfig+0x2ac>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d1f0      	bne.n	80082e4 <HAL_RCC_OscConfig+0xe8>
 8008302:	e000      	b.n	8008306 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008304:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f003 0302 	and.w	r3, r3, #2
 800830e:	2b00      	cmp	r3, #0
 8008310:	d063      	beq.n	80083da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008312:	4b65      	ldr	r3, [pc, #404]	; (80084a8 <HAL_RCC_OscConfig+0x2ac>)
 8008314:	689b      	ldr	r3, [r3, #8]
 8008316:	f003 030c 	and.w	r3, r3, #12
 800831a:	2b00      	cmp	r3, #0
 800831c:	d00b      	beq.n	8008336 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800831e:	4b62      	ldr	r3, [pc, #392]	; (80084a8 <HAL_RCC_OscConfig+0x2ac>)
 8008320:	689b      	ldr	r3, [r3, #8]
 8008322:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008326:	2b08      	cmp	r3, #8
 8008328:	d11c      	bne.n	8008364 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800832a:	4b5f      	ldr	r3, [pc, #380]	; (80084a8 <HAL_RCC_OscConfig+0x2ac>)
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008332:	2b00      	cmp	r3, #0
 8008334:	d116      	bne.n	8008364 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008336:	4b5c      	ldr	r3, [pc, #368]	; (80084a8 <HAL_RCC_OscConfig+0x2ac>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f003 0302 	and.w	r3, r3, #2
 800833e:	2b00      	cmp	r3, #0
 8008340:	d005      	beq.n	800834e <HAL_RCC_OscConfig+0x152>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	68db      	ldr	r3, [r3, #12]
 8008346:	2b01      	cmp	r3, #1
 8008348:	d001      	beq.n	800834e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800834a:	2301      	movs	r3, #1
 800834c:	e1c4      	b.n	80086d8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800834e:	4b56      	ldr	r3, [pc, #344]	; (80084a8 <HAL_RCC_OscConfig+0x2ac>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	691b      	ldr	r3, [r3, #16]
 800835a:	00db      	lsls	r3, r3, #3
 800835c:	4952      	ldr	r1, [pc, #328]	; (80084a8 <HAL_RCC_OscConfig+0x2ac>)
 800835e:	4313      	orrs	r3, r2
 8008360:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008362:	e03a      	b.n	80083da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	68db      	ldr	r3, [r3, #12]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d020      	beq.n	80083ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800836c:	4b4f      	ldr	r3, [pc, #316]	; (80084ac <HAL_RCC_OscConfig+0x2b0>)
 800836e:	2201      	movs	r2, #1
 8008370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008372:	f7fe fad7 	bl	8006924 <HAL_GetTick>
 8008376:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008378:	e008      	b.n	800838c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800837a:	f7fe fad3 	bl	8006924 <HAL_GetTick>
 800837e:	4602      	mov	r2, r0
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	1ad3      	subs	r3, r2, r3
 8008384:	2b02      	cmp	r3, #2
 8008386:	d901      	bls.n	800838c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008388:	2303      	movs	r3, #3
 800838a:	e1a5      	b.n	80086d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800838c:	4b46      	ldr	r3, [pc, #280]	; (80084a8 <HAL_RCC_OscConfig+0x2ac>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f003 0302 	and.w	r3, r3, #2
 8008394:	2b00      	cmp	r3, #0
 8008396:	d0f0      	beq.n	800837a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008398:	4b43      	ldr	r3, [pc, #268]	; (80084a8 <HAL_RCC_OscConfig+0x2ac>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	691b      	ldr	r3, [r3, #16]
 80083a4:	00db      	lsls	r3, r3, #3
 80083a6:	4940      	ldr	r1, [pc, #256]	; (80084a8 <HAL_RCC_OscConfig+0x2ac>)
 80083a8:	4313      	orrs	r3, r2
 80083aa:	600b      	str	r3, [r1, #0]
 80083ac:	e015      	b.n	80083da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80083ae:	4b3f      	ldr	r3, [pc, #252]	; (80084ac <HAL_RCC_OscConfig+0x2b0>)
 80083b0:	2200      	movs	r2, #0
 80083b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083b4:	f7fe fab6 	bl	8006924 <HAL_GetTick>
 80083b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80083ba:	e008      	b.n	80083ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80083bc:	f7fe fab2 	bl	8006924 <HAL_GetTick>
 80083c0:	4602      	mov	r2, r0
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	1ad3      	subs	r3, r2, r3
 80083c6:	2b02      	cmp	r3, #2
 80083c8:	d901      	bls.n	80083ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80083ca:	2303      	movs	r3, #3
 80083cc:	e184      	b.n	80086d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80083ce:	4b36      	ldr	r3, [pc, #216]	; (80084a8 <HAL_RCC_OscConfig+0x2ac>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f003 0302 	and.w	r3, r3, #2
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d1f0      	bne.n	80083bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f003 0308 	and.w	r3, r3, #8
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d030      	beq.n	8008448 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	695b      	ldr	r3, [r3, #20]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d016      	beq.n	800841c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80083ee:	4b30      	ldr	r3, [pc, #192]	; (80084b0 <HAL_RCC_OscConfig+0x2b4>)
 80083f0:	2201      	movs	r2, #1
 80083f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083f4:	f7fe fa96 	bl	8006924 <HAL_GetTick>
 80083f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80083fa:	e008      	b.n	800840e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80083fc:	f7fe fa92 	bl	8006924 <HAL_GetTick>
 8008400:	4602      	mov	r2, r0
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	1ad3      	subs	r3, r2, r3
 8008406:	2b02      	cmp	r3, #2
 8008408:	d901      	bls.n	800840e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800840a:	2303      	movs	r3, #3
 800840c:	e164      	b.n	80086d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800840e:	4b26      	ldr	r3, [pc, #152]	; (80084a8 <HAL_RCC_OscConfig+0x2ac>)
 8008410:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008412:	f003 0302 	and.w	r3, r3, #2
 8008416:	2b00      	cmp	r3, #0
 8008418:	d0f0      	beq.n	80083fc <HAL_RCC_OscConfig+0x200>
 800841a:	e015      	b.n	8008448 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800841c:	4b24      	ldr	r3, [pc, #144]	; (80084b0 <HAL_RCC_OscConfig+0x2b4>)
 800841e:	2200      	movs	r2, #0
 8008420:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008422:	f7fe fa7f 	bl	8006924 <HAL_GetTick>
 8008426:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008428:	e008      	b.n	800843c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800842a:	f7fe fa7b 	bl	8006924 <HAL_GetTick>
 800842e:	4602      	mov	r2, r0
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	1ad3      	subs	r3, r2, r3
 8008434:	2b02      	cmp	r3, #2
 8008436:	d901      	bls.n	800843c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008438:	2303      	movs	r3, #3
 800843a:	e14d      	b.n	80086d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800843c:	4b1a      	ldr	r3, [pc, #104]	; (80084a8 <HAL_RCC_OscConfig+0x2ac>)
 800843e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008440:	f003 0302 	and.w	r3, r3, #2
 8008444:	2b00      	cmp	r3, #0
 8008446:	d1f0      	bne.n	800842a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f003 0304 	and.w	r3, r3, #4
 8008450:	2b00      	cmp	r3, #0
 8008452:	f000 80a0 	beq.w	8008596 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008456:	2300      	movs	r3, #0
 8008458:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800845a:	4b13      	ldr	r3, [pc, #76]	; (80084a8 <HAL_RCC_OscConfig+0x2ac>)
 800845c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800845e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008462:	2b00      	cmp	r3, #0
 8008464:	d10f      	bne.n	8008486 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008466:	2300      	movs	r3, #0
 8008468:	60bb      	str	r3, [r7, #8]
 800846a:	4b0f      	ldr	r3, [pc, #60]	; (80084a8 <HAL_RCC_OscConfig+0x2ac>)
 800846c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800846e:	4a0e      	ldr	r2, [pc, #56]	; (80084a8 <HAL_RCC_OscConfig+0x2ac>)
 8008470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008474:	6413      	str	r3, [r2, #64]	; 0x40
 8008476:	4b0c      	ldr	r3, [pc, #48]	; (80084a8 <HAL_RCC_OscConfig+0x2ac>)
 8008478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800847a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800847e:	60bb      	str	r3, [r7, #8]
 8008480:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008482:	2301      	movs	r3, #1
 8008484:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008486:	4b0b      	ldr	r3, [pc, #44]	; (80084b4 <HAL_RCC_OscConfig+0x2b8>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800848e:	2b00      	cmp	r3, #0
 8008490:	d121      	bne.n	80084d6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008492:	4b08      	ldr	r3, [pc, #32]	; (80084b4 <HAL_RCC_OscConfig+0x2b8>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a07      	ldr	r2, [pc, #28]	; (80084b4 <HAL_RCC_OscConfig+0x2b8>)
 8008498:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800849c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800849e:	f7fe fa41 	bl	8006924 <HAL_GetTick>
 80084a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80084a4:	e011      	b.n	80084ca <HAL_RCC_OscConfig+0x2ce>
 80084a6:	bf00      	nop
 80084a8:	40023800 	.word	0x40023800
 80084ac:	42470000 	.word	0x42470000
 80084b0:	42470e80 	.word	0x42470e80
 80084b4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80084b8:	f7fe fa34 	bl	8006924 <HAL_GetTick>
 80084bc:	4602      	mov	r2, r0
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	1ad3      	subs	r3, r2, r3
 80084c2:	2b02      	cmp	r3, #2
 80084c4:	d901      	bls.n	80084ca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80084c6:	2303      	movs	r3, #3
 80084c8:	e106      	b.n	80086d8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80084ca:	4b85      	ldr	r3, [pc, #532]	; (80086e0 <HAL_RCC_OscConfig+0x4e4>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d0f0      	beq.n	80084b8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	689b      	ldr	r3, [r3, #8]
 80084da:	2b01      	cmp	r3, #1
 80084dc:	d106      	bne.n	80084ec <HAL_RCC_OscConfig+0x2f0>
 80084de:	4b81      	ldr	r3, [pc, #516]	; (80086e4 <HAL_RCC_OscConfig+0x4e8>)
 80084e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084e2:	4a80      	ldr	r2, [pc, #512]	; (80086e4 <HAL_RCC_OscConfig+0x4e8>)
 80084e4:	f043 0301 	orr.w	r3, r3, #1
 80084e8:	6713      	str	r3, [r2, #112]	; 0x70
 80084ea:	e01c      	b.n	8008526 <HAL_RCC_OscConfig+0x32a>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	689b      	ldr	r3, [r3, #8]
 80084f0:	2b05      	cmp	r3, #5
 80084f2:	d10c      	bne.n	800850e <HAL_RCC_OscConfig+0x312>
 80084f4:	4b7b      	ldr	r3, [pc, #492]	; (80086e4 <HAL_RCC_OscConfig+0x4e8>)
 80084f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084f8:	4a7a      	ldr	r2, [pc, #488]	; (80086e4 <HAL_RCC_OscConfig+0x4e8>)
 80084fa:	f043 0304 	orr.w	r3, r3, #4
 80084fe:	6713      	str	r3, [r2, #112]	; 0x70
 8008500:	4b78      	ldr	r3, [pc, #480]	; (80086e4 <HAL_RCC_OscConfig+0x4e8>)
 8008502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008504:	4a77      	ldr	r2, [pc, #476]	; (80086e4 <HAL_RCC_OscConfig+0x4e8>)
 8008506:	f043 0301 	orr.w	r3, r3, #1
 800850a:	6713      	str	r3, [r2, #112]	; 0x70
 800850c:	e00b      	b.n	8008526 <HAL_RCC_OscConfig+0x32a>
 800850e:	4b75      	ldr	r3, [pc, #468]	; (80086e4 <HAL_RCC_OscConfig+0x4e8>)
 8008510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008512:	4a74      	ldr	r2, [pc, #464]	; (80086e4 <HAL_RCC_OscConfig+0x4e8>)
 8008514:	f023 0301 	bic.w	r3, r3, #1
 8008518:	6713      	str	r3, [r2, #112]	; 0x70
 800851a:	4b72      	ldr	r3, [pc, #456]	; (80086e4 <HAL_RCC_OscConfig+0x4e8>)
 800851c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800851e:	4a71      	ldr	r2, [pc, #452]	; (80086e4 <HAL_RCC_OscConfig+0x4e8>)
 8008520:	f023 0304 	bic.w	r3, r3, #4
 8008524:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	689b      	ldr	r3, [r3, #8]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d015      	beq.n	800855a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800852e:	f7fe f9f9 	bl	8006924 <HAL_GetTick>
 8008532:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008534:	e00a      	b.n	800854c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008536:	f7fe f9f5 	bl	8006924 <HAL_GetTick>
 800853a:	4602      	mov	r2, r0
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	1ad3      	subs	r3, r2, r3
 8008540:	f241 3288 	movw	r2, #5000	; 0x1388
 8008544:	4293      	cmp	r3, r2
 8008546:	d901      	bls.n	800854c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8008548:	2303      	movs	r3, #3
 800854a:	e0c5      	b.n	80086d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800854c:	4b65      	ldr	r3, [pc, #404]	; (80086e4 <HAL_RCC_OscConfig+0x4e8>)
 800854e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008550:	f003 0302 	and.w	r3, r3, #2
 8008554:	2b00      	cmp	r3, #0
 8008556:	d0ee      	beq.n	8008536 <HAL_RCC_OscConfig+0x33a>
 8008558:	e014      	b.n	8008584 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800855a:	f7fe f9e3 	bl	8006924 <HAL_GetTick>
 800855e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008560:	e00a      	b.n	8008578 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008562:	f7fe f9df 	bl	8006924 <HAL_GetTick>
 8008566:	4602      	mov	r2, r0
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	1ad3      	subs	r3, r2, r3
 800856c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008570:	4293      	cmp	r3, r2
 8008572:	d901      	bls.n	8008578 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8008574:	2303      	movs	r3, #3
 8008576:	e0af      	b.n	80086d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008578:	4b5a      	ldr	r3, [pc, #360]	; (80086e4 <HAL_RCC_OscConfig+0x4e8>)
 800857a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800857c:	f003 0302 	and.w	r3, r3, #2
 8008580:	2b00      	cmp	r3, #0
 8008582:	d1ee      	bne.n	8008562 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008584:	7dfb      	ldrb	r3, [r7, #23]
 8008586:	2b01      	cmp	r3, #1
 8008588:	d105      	bne.n	8008596 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800858a:	4b56      	ldr	r3, [pc, #344]	; (80086e4 <HAL_RCC_OscConfig+0x4e8>)
 800858c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800858e:	4a55      	ldr	r2, [pc, #340]	; (80086e4 <HAL_RCC_OscConfig+0x4e8>)
 8008590:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008594:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	699b      	ldr	r3, [r3, #24]
 800859a:	2b00      	cmp	r3, #0
 800859c:	f000 809b 	beq.w	80086d6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80085a0:	4b50      	ldr	r3, [pc, #320]	; (80086e4 <HAL_RCC_OscConfig+0x4e8>)
 80085a2:	689b      	ldr	r3, [r3, #8]
 80085a4:	f003 030c 	and.w	r3, r3, #12
 80085a8:	2b08      	cmp	r3, #8
 80085aa:	d05c      	beq.n	8008666 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	699b      	ldr	r3, [r3, #24]
 80085b0:	2b02      	cmp	r3, #2
 80085b2:	d141      	bne.n	8008638 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80085b4:	4b4c      	ldr	r3, [pc, #304]	; (80086e8 <HAL_RCC_OscConfig+0x4ec>)
 80085b6:	2200      	movs	r2, #0
 80085b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085ba:	f7fe f9b3 	bl	8006924 <HAL_GetTick>
 80085be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80085c0:	e008      	b.n	80085d4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80085c2:	f7fe f9af 	bl	8006924 <HAL_GetTick>
 80085c6:	4602      	mov	r2, r0
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	1ad3      	subs	r3, r2, r3
 80085cc:	2b02      	cmp	r3, #2
 80085ce:	d901      	bls.n	80085d4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80085d0:	2303      	movs	r3, #3
 80085d2:	e081      	b.n	80086d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80085d4:	4b43      	ldr	r3, [pc, #268]	; (80086e4 <HAL_RCC_OscConfig+0x4e8>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d1f0      	bne.n	80085c2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	69da      	ldr	r2, [r3, #28]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6a1b      	ldr	r3, [r3, #32]
 80085e8:	431a      	orrs	r2, r3
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ee:	019b      	lsls	r3, r3, #6
 80085f0:	431a      	orrs	r2, r3
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085f6:	085b      	lsrs	r3, r3, #1
 80085f8:	3b01      	subs	r3, #1
 80085fa:	041b      	lsls	r3, r3, #16
 80085fc:	431a      	orrs	r2, r3
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008602:	061b      	lsls	r3, r3, #24
 8008604:	4937      	ldr	r1, [pc, #220]	; (80086e4 <HAL_RCC_OscConfig+0x4e8>)
 8008606:	4313      	orrs	r3, r2
 8008608:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800860a:	4b37      	ldr	r3, [pc, #220]	; (80086e8 <HAL_RCC_OscConfig+0x4ec>)
 800860c:	2201      	movs	r2, #1
 800860e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008610:	f7fe f988 	bl	8006924 <HAL_GetTick>
 8008614:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008616:	e008      	b.n	800862a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008618:	f7fe f984 	bl	8006924 <HAL_GetTick>
 800861c:	4602      	mov	r2, r0
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	1ad3      	subs	r3, r2, r3
 8008622:	2b02      	cmp	r3, #2
 8008624:	d901      	bls.n	800862a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8008626:	2303      	movs	r3, #3
 8008628:	e056      	b.n	80086d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800862a:	4b2e      	ldr	r3, [pc, #184]	; (80086e4 <HAL_RCC_OscConfig+0x4e8>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008632:	2b00      	cmp	r3, #0
 8008634:	d0f0      	beq.n	8008618 <HAL_RCC_OscConfig+0x41c>
 8008636:	e04e      	b.n	80086d6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008638:	4b2b      	ldr	r3, [pc, #172]	; (80086e8 <HAL_RCC_OscConfig+0x4ec>)
 800863a:	2200      	movs	r2, #0
 800863c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800863e:	f7fe f971 	bl	8006924 <HAL_GetTick>
 8008642:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008644:	e008      	b.n	8008658 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008646:	f7fe f96d 	bl	8006924 <HAL_GetTick>
 800864a:	4602      	mov	r2, r0
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	1ad3      	subs	r3, r2, r3
 8008650:	2b02      	cmp	r3, #2
 8008652:	d901      	bls.n	8008658 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8008654:	2303      	movs	r3, #3
 8008656:	e03f      	b.n	80086d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008658:	4b22      	ldr	r3, [pc, #136]	; (80086e4 <HAL_RCC_OscConfig+0x4e8>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008660:	2b00      	cmp	r3, #0
 8008662:	d1f0      	bne.n	8008646 <HAL_RCC_OscConfig+0x44a>
 8008664:	e037      	b.n	80086d6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	699b      	ldr	r3, [r3, #24]
 800866a:	2b01      	cmp	r3, #1
 800866c:	d101      	bne.n	8008672 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800866e:	2301      	movs	r3, #1
 8008670:	e032      	b.n	80086d8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008672:	4b1c      	ldr	r3, [pc, #112]	; (80086e4 <HAL_RCC_OscConfig+0x4e8>)
 8008674:	685b      	ldr	r3, [r3, #4]
 8008676:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	699b      	ldr	r3, [r3, #24]
 800867c:	2b01      	cmp	r3, #1
 800867e:	d028      	beq.n	80086d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800868a:	429a      	cmp	r2, r3
 800868c:	d121      	bne.n	80086d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008698:	429a      	cmp	r2, r3
 800869a:	d11a      	bne.n	80086d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800869c:	68fa      	ldr	r2, [r7, #12]
 800869e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80086a2:	4013      	ands	r3, r2
 80086a4:	687a      	ldr	r2, [r7, #4]
 80086a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80086a8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d111      	bne.n	80086d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086b8:	085b      	lsrs	r3, r3, #1
 80086ba:	3b01      	subs	r3, #1
 80086bc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80086be:	429a      	cmp	r2, r3
 80086c0:	d107      	bne.n	80086d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086cc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80086ce:	429a      	cmp	r2, r3
 80086d0:	d001      	beq.n	80086d6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80086d2:	2301      	movs	r3, #1
 80086d4:	e000      	b.n	80086d8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80086d6:	2300      	movs	r3, #0
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3718      	adds	r7, #24
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}
 80086e0:	40007000 	.word	0x40007000
 80086e4:	40023800 	.word	0x40023800
 80086e8:	42470060 	.word	0x42470060

080086ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b084      	sub	sp, #16
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d101      	bne.n	8008700 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80086fc:	2301      	movs	r3, #1
 80086fe:	e0cc      	b.n	800889a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008700:	4b68      	ldr	r3, [pc, #416]	; (80088a4 <HAL_RCC_ClockConfig+0x1b8>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f003 0307 	and.w	r3, r3, #7
 8008708:	683a      	ldr	r2, [r7, #0]
 800870a:	429a      	cmp	r2, r3
 800870c:	d90c      	bls.n	8008728 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800870e:	4b65      	ldr	r3, [pc, #404]	; (80088a4 <HAL_RCC_ClockConfig+0x1b8>)
 8008710:	683a      	ldr	r2, [r7, #0]
 8008712:	b2d2      	uxtb	r2, r2
 8008714:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008716:	4b63      	ldr	r3, [pc, #396]	; (80088a4 <HAL_RCC_ClockConfig+0x1b8>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f003 0307 	and.w	r3, r3, #7
 800871e:	683a      	ldr	r2, [r7, #0]
 8008720:	429a      	cmp	r2, r3
 8008722:	d001      	beq.n	8008728 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008724:	2301      	movs	r3, #1
 8008726:	e0b8      	b.n	800889a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f003 0302 	and.w	r3, r3, #2
 8008730:	2b00      	cmp	r3, #0
 8008732:	d020      	beq.n	8008776 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f003 0304 	and.w	r3, r3, #4
 800873c:	2b00      	cmp	r3, #0
 800873e:	d005      	beq.n	800874c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008740:	4b59      	ldr	r3, [pc, #356]	; (80088a8 <HAL_RCC_ClockConfig+0x1bc>)
 8008742:	689b      	ldr	r3, [r3, #8]
 8008744:	4a58      	ldr	r2, [pc, #352]	; (80088a8 <HAL_RCC_ClockConfig+0x1bc>)
 8008746:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800874a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f003 0308 	and.w	r3, r3, #8
 8008754:	2b00      	cmp	r3, #0
 8008756:	d005      	beq.n	8008764 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008758:	4b53      	ldr	r3, [pc, #332]	; (80088a8 <HAL_RCC_ClockConfig+0x1bc>)
 800875a:	689b      	ldr	r3, [r3, #8]
 800875c:	4a52      	ldr	r2, [pc, #328]	; (80088a8 <HAL_RCC_ClockConfig+0x1bc>)
 800875e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008762:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008764:	4b50      	ldr	r3, [pc, #320]	; (80088a8 <HAL_RCC_ClockConfig+0x1bc>)
 8008766:	689b      	ldr	r3, [r3, #8]
 8008768:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	689b      	ldr	r3, [r3, #8]
 8008770:	494d      	ldr	r1, [pc, #308]	; (80088a8 <HAL_RCC_ClockConfig+0x1bc>)
 8008772:	4313      	orrs	r3, r2
 8008774:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f003 0301 	and.w	r3, r3, #1
 800877e:	2b00      	cmp	r3, #0
 8008780:	d044      	beq.n	800880c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	2b01      	cmp	r3, #1
 8008788:	d107      	bne.n	800879a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800878a:	4b47      	ldr	r3, [pc, #284]	; (80088a8 <HAL_RCC_ClockConfig+0x1bc>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008792:	2b00      	cmp	r3, #0
 8008794:	d119      	bne.n	80087ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008796:	2301      	movs	r3, #1
 8008798:	e07f      	b.n	800889a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	2b02      	cmp	r3, #2
 80087a0:	d003      	beq.n	80087aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80087a6:	2b03      	cmp	r3, #3
 80087a8:	d107      	bne.n	80087ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80087aa:	4b3f      	ldr	r3, [pc, #252]	; (80088a8 <HAL_RCC_ClockConfig+0x1bc>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d109      	bne.n	80087ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80087b6:	2301      	movs	r3, #1
 80087b8:	e06f      	b.n	800889a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80087ba:	4b3b      	ldr	r3, [pc, #236]	; (80088a8 <HAL_RCC_ClockConfig+0x1bc>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f003 0302 	and.w	r3, r3, #2
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d101      	bne.n	80087ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80087c6:	2301      	movs	r3, #1
 80087c8:	e067      	b.n	800889a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80087ca:	4b37      	ldr	r3, [pc, #220]	; (80088a8 <HAL_RCC_ClockConfig+0x1bc>)
 80087cc:	689b      	ldr	r3, [r3, #8]
 80087ce:	f023 0203 	bic.w	r2, r3, #3
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	685b      	ldr	r3, [r3, #4]
 80087d6:	4934      	ldr	r1, [pc, #208]	; (80088a8 <HAL_RCC_ClockConfig+0x1bc>)
 80087d8:	4313      	orrs	r3, r2
 80087da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80087dc:	f7fe f8a2 	bl	8006924 <HAL_GetTick>
 80087e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80087e2:	e00a      	b.n	80087fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80087e4:	f7fe f89e 	bl	8006924 <HAL_GetTick>
 80087e8:	4602      	mov	r2, r0
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	1ad3      	subs	r3, r2, r3
 80087ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d901      	bls.n	80087fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80087f6:	2303      	movs	r3, #3
 80087f8:	e04f      	b.n	800889a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80087fa:	4b2b      	ldr	r3, [pc, #172]	; (80088a8 <HAL_RCC_ClockConfig+0x1bc>)
 80087fc:	689b      	ldr	r3, [r3, #8]
 80087fe:	f003 020c 	and.w	r2, r3, #12
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	685b      	ldr	r3, [r3, #4]
 8008806:	009b      	lsls	r3, r3, #2
 8008808:	429a      	cmp	r2, r3
 800880a:	d1eb      	bne.n	80087e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800880c:	4b25      	ldr	r3, [pc, #148]	; (80088a4 <HAL_RCC_ClockConfig+0x1b8>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f003 0307 	and.w	r3, r3, #7
 8008814:	683a      	ldr	r2, [r7, #0]
 8008816:	429a      	cmp	r2, r3
 8008818:	d20c      	bcs.n	8008834 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800881a:	4b22      	ldr	r3, [pc, #136]	; (80088a4 <HAL_RCC_ClockConfig+0x1b8>)
 800881c:	683a      	ldr	r2, [r7, #0]
 800881e:	b2d2      	uxtb	r2, r2
 8008820:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008822:	4b20      	ldr	r3, [pc, #128]	; (80088a4 <HAL_RCC_ClockConfig+0x1b8>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f003 0307 	and.w	r3, r3, #7
 800882a:	683a      	ldr	r2, [r7, #0]
 800882c:	429a      	cmp	r2, r3
 800882e:	d001      	beq.n	8008834 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008830:	2301      	movs	r3, #1
 8008832:	e032      	b.n	800889a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f003 0304 	and.w	r3, r3, #4
 800883c:	2b00      	cmp	r3, #0
 800883e:	d008      	beq.n	8008852 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008840:	4b19      	ldr	r3, [pc, #100]	; (80088a8 <HAL_RCC_ClockConfig+0x1bc>)
 8008842:	689b      	ldr	r3, [r3, #8]
 8008844:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	68db      	ldr	r3, [r3, #12]
 800884c:	4916      	ldr	r1, [pc, #88]	; (80088a8 <HAL_RCC_ClockConfig+0x1bc>)
 800884e:	4313      	orrs	r3, r2
 8008850:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f003 0308 	and.w	r3, r3, #8
 800885a:	2b00      	cmp	r3, #0
 800885c:	d009      	beq.n	8008872 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800885e:	4b12      	ldr	r3, [pc, #72]	; (80088a8 <HAL_RCC_ClockConfig+0x1bc>)
 8008860:	689b      	ldr	r3, [r3, #8]
 8008862:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	691b      	ldr	r3, [r3, #16]
 800886a:	00db      	lsls	r3, r3, #3
 800886c:	490e      	ldr	r1, [pc, #56]	; (80088a8 <HAL_RCC_ClockConfig+0x1bc>)
 800886e:	4313      	orrs	r3, r2
 8008870:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008872:	f000 f821 	bl	80088b8 <HAL_RCC_GetSysClockFreq>
 8008876:	4602      	mov	r2, r0
 8008878:	4b0b      	ldr	r3, [pc, #44]	; (80088a8 <HAL_RCC_ClockConfig+0x1bc>)
 800887a:	689b      	ldr	r3, [r3, #8]
 800887c:	091b      	lsrs	r3, r3, #4
 800887e:	f003 030f 	and.w	r3, r3, #15
 8008882:	490a      	ldr	r1, [pc, #40]	; (80088ac <HAL_RCC_ClockConfig+0x1c0>)
 8008884:	5ccb      	ldrb	r3, [r1, r3]
 8008886:	fa22 f303 	lsr.w	r3, r2, r3
 800888a:	4a09      	ldr	r2, [pc, #36]	; (80088b0 <HAL_RCC_ClockConfig+0x1c4>)
 800888c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800888e:	4b09      	ldr	r3, [pc, #36]	; (80088b4 <HAL_RCC_ClockConfig+0x1c8>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4618      	mov	r0, r3
 8008894:	f7fe f802 	bl	800689c <HAL_InitTick>

  return HAL_OK;
 8008898:	2300      	movs	r3, #0
}
 800889a:	4618      	mov	r0, r3
 800889c:	3710      	adds	r7, #16
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}
 80088a2:	bf00      	nop
 80088a4:	40023c00 	.word	0x40023c00
 80088a8:	40023800 	.word	0x40023800
 80088ac:	08011d90 	.word	0x08011d90
 80088b0:	20000030 	.word	0x20000030
 80088b4:	20000034 	.word	0x20000034

080088b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80088b8:	b5b0      	push	{r4, r5, r7, lr}
 80088ba:	b084      	sub	sp, #16
 80088bc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80088be:	2100      	movs	r1, #0
 80088c0:	6079      	str	r1, [r7, #4]
 80088c2:	2100      	movs	r1, #0
 80088c4:	60f9      	str	r1, [r7, #12]
 80088c6:	2100      	movs	r1, #0
 80088c8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80088ca:	2100      	movs	r1, #0
 80088cc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80088ce:	4952      	ldr	r1, [pc, #328]	; (8008a18 <HAL_RCC_GetSysClockFreq+0x160>)
 80088d0:	6889      	ldr	r1, [r1, #8]
 80088d2:	f001 010c 	and.w	r1, r1, #12
 80088d6:	2908      	cmp	r1, #8
 80088d8:	d00d      	beq.n	80088f6 <HAL_RCC_GetSysClockFreq+0x3e>
 80088da:	2908      	cmp	r1, #8
 80088dc:	f200 8094 	bhi.w	8008a08 <HAL_RCC_GetSysClockFreq+0x150>
 80088e0:	2900      	cmp	r1, #0
 80088e2:	d002      	beq.n	80088ea <HAL_RCC_GetSysClockFreq+0x32>
 80088e4:	2904      	cmp	r1, #4
 80088e6:	d003      	beq.n	80088f0 <HAL_RCC_GetSysClockFreq+0x38>
 80088e8:	e08e      	b.n	8008a08 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80088ea:	4b4c      	ldr	r3, [pc, #304]	; (8008a1c <HAL_RCC_GetSysClockFreq+0x164>)
 80088ec:	60bb      	str	r3, [r7, #8]
       break;
 80088ee:	e08e      	b.n	8008a0e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80088f0:	4b4b      	ldr	r3, [pc, #300]	; (8008a20 <HAL_RCC_GetSysClockFreq+0x168>)
 80088f2:	60bb      	str	r3, [r7, #8]
      break;
 80088f4:	e08b      	b.n	8008a0e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80088f6:	4948      	ldr	r1, [pc, #288]	; (8008a18 <HAL_RCC_GetSysClockFreq+0x160>)
 80088f8:	6849      	ldr	r1, [r1, #4]
 80088fa:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80088fe:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008900:	4945      	ldr	r1, [pc, #276]	; (8008a18 <HAL_RCC_GetSysClockFreq+0x160>)
 8008902:	6849      	ldr	r1, [r1, #4]
 8008904:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8008908:	2900      	cmp	r1, #0
 800890a:	d024      	beq.n	8008956 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800890c:	4942      	ldr	r1, [pc, #264]	; (8008a18 <HAL_RCC_GetSysClockFreq+0x160>)
 800890e:	6849      	ldr	r1, [r1, #4]
 8008910:	0989      	lsrs	r1, r1, #6
 8008912:	4608      	mov	r0, r1
 8008914:	f04f 0100 	mov.w	r1, #0
 8008918:	f240 14ff 	movw	r4, #511	; 0x1ff
 800891c:	f04f 0500 	mov.w	r5, #0
 8008920:	ea00 0204 	and.w	r2, r0, r4
 8008924:	ea01 0305 	and.w	r3, r1, r5
 8008928:	493d      	ldr	r1, [pc, #244]	; (8008a20 <HAL_RCC_GetSysClockFreq+0x168>)
 800892a:	fb01 f003 	mul.w	r0, r1, r3
 800892e:	2100      	movs	r1, #0
 8008930:	fb01 f102 	mul.w	r1, r1, r2
 8008934:	1844      	adds	r4, r0, r1
 8008936:	493a      	ldr	r1, [pc, #232]	; (8008a20 <HAL_RCC_GetSysClockFreq+0x168>)
 8008938:	fba2 0101 	umull	r0, r1, r2, r1
 800893c:	1863      	adds	r3, r4, r1
 800893e:	4619      	mov	r1, r3
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	461a      	mov	r2, r3
 8008944:	f04f 0300 	mov.w	r3, #0
 8008948:	f7f8 f9a6 	bl	8000c98 <__aeabi_uldivmod>
 800894c:	4602      	mov	r2, r0
 800894e:	460b      	mov	r3, r1
 8008950:	4613      	mov	r3, r2
 8008952:	60fb      	str	r3, [r7, #12]
 8008954:	e04a      	b.n	80089ec <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008956:	4b30      	ldr	r3, [pc, #192]	; (8008a18 <HAL_RCC_GetSysClockFreq+0x160>)
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	099b      	lsrs	r3, r3, #6
 800895c:	461a      	mov	r2, r3
 800895e:	f04f 0300 	mov.w	r3, #0
 8008962:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008966:	f04f 0100 	mov.w	r1, #0
 800896a:	ea02 0400 	and.w	r4, r2, r0
 800896e:	ea03 0501 	and.w	r5, r3, r1
 8008972:	4620      	mov	r0, r4
 8008974:	4629      	mov	r1, r5
 8008976:	f04f 0200 	mov.w	r2, #0
 800897a:	f04f 0300 	mov.w	r3, #0
 800897e:	014b      	lsls	r3, r1, #5
 8008980:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008984:	0142      	lsls	r2, r0, #5
 8008986:	4610      	mov	r0, r2
 8008988:	4619      	mov	r1, r3
 800898a:	1b00      	subs	r0, r0, r4
 800898c:	eb61 0105 	sbc.w	r1, r1, r5
 8008990:	f04f 0200 	mov.w	r2, #0
 8008994:	f04f 0300 	mov.w	r3, #0
 8008998:	018b      	lsls	r3, r1, #6
 800899a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800899e:	0182      	lsls	r2, r0, #6
 80089a0:	1a12      	subs	r2, r2, r0
 80089a2:	eb63 0301 	sbc.w	r3, r3, r1
 80089a6:	f04f 0000 	mov.w	r0, #0
 80089aa:	f04f 0100 	mov.w	r1, #0
 80089ae:	00d9      	lsls	r1, r3, #3
 80089b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80089b4:	00d0      	lsls	r0, r2, #3
 80089b6:	4602      	mov	r2, r0
 80089b8:	460b      	mov	r3, r1
 80089ba:	1912      	adds	r2, r2, r4
 80089bc:	eb45 0303 	adc.w	r3, r5, r3
 80089c0:	f04f 0000 	mov.w	r0, #0
 80089c4:	f04f 0100 	mov.w	r1, #0
 80089c8:	0299      	lsls	r1, r3, #10
 80089ca:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80089ce:	0290      	lsls	r0, r2, #10
 80089d0:	4602      	mov	r2, r0
 80089d2:	460b      	mov	r3, r1
 80089d4:	4610      	mov	r0, r2
 80089d6:	4619      	mov	r1, r3
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	461a      	mov	r2, r3
 80089dc:	f04f 0300 	mov.w	r3, #0
 80089e0:	f7f8 f95a 	bl	8000c98 <__aeabi_uldivmod>
 80089e4:	4602      	mov	r2, r0
 80089e6:	460b      	mov	r3, r1
 80089e8:	4613      	mov	r3, r2
 80089ea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80089ec:	4b0a      	ldr	r3, [pc, #40]	; (8008a18 <HAL_RCC_GetSysClockFreq+0x160>)
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	0c1b      	lsrs	r3, r3, #16
 80089f2:	f003 0303 	and.w	r3, r3, #3
 80089f6:	3301      	adds	r3, #1
 80089f8:	005b      	lsls	r3, r3, #1
 80089fa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80089fc:	68fa      	ldr	r2, [r7, #12]
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a04:	60bb      	str	r3, [r7, #8]
      break;
 8008a06:	e002      	b.n	8008a0e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008a08:	4b04      	ldr	r3, [pc, #16]	; (8008a1c <HAL_RCC_GetSysClockFreq+0x164>)
 8008a0a:	60bb      	str	r3, [r7, #8]
      break;
 8008a0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008a0e:	68bb      	ldr	r3, [r7, #8]
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3710      	adds	r7, #16
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bdb0      	pop	{r4, r5, r7, pc}
 8008a18:	40023800 	.word	0x40023800
 8008a1c:	00f42400 	.word	0x00f42400
 8008a20:	017d7840 	.word	0x017d7840

08008a24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008a24:	b480      	push	{r7}
 8008a26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008a28:	4b03      	ldr	r3, [pc, #12]	; (8008a38 <HAL_RCC_GetHCLKFreq+0x14>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a34:	4770      	bx	lr
 8008a36:	bf00      	nop
 8008a38:	20000030 	.word	0x20000030

08008a3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008a40:	f7ff fff0 	bl	8008a24 <HAL_RCC_GetHCLKFreq>
 8008a44:	4602      	mov	r2, r0
 8008a46:	4b05      	ldr	r3, [pc, #20]	; (8008a5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008a48:	689b      	ldr	r3, [r3, #8]
 8008a4a:	0a9b      	lsrs	r3, r3, #10
 8008a4c:	f003 0307 	and.w	r3, r3, #7
 8008a50:	4903      	ldr	r1, [pc, #12]	; (8008a60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008a52:	5ccb      	ldrb	r3, [r1, r3]
 8008a54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	bd80      	pop	{r7, pc}
 8008a5c:	40023800 	.word	0x40023800
 8008a60:	08011da0 	.word	0x08011da0

08008a64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008a68:	f7ff ffdc 	bl	8008a24 <HAL_RCC_GetHCLKFreq>
 8008a6c:	4602      	mov	r2, r0
 8008a6e:	4b05      	ldr	r3, [pc, #20]	; (8008a84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008a70:	689b      	ldr	r3, [r3, #8]
 8008a72:	0b5b      	lsrs	r3, r3, #13
 8008a74:	f003 0307 	and.w	r3, r3, #7
 8008a78:	4903      	ldr	r1, [pc, #12]	; (8008a88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008a7a:	5ccb      	ldrb	r3, [r1, r3]
 8008a7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	bd80      	pop	{r7, pc}
 8008a84:	40023800 	.word	0x40023800
 8008a88:	08011da0 	.word	0x08011da0

08008a8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b082      	sub	sp, #8
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d101      	bne.n	8008a9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	e07b      	b.n	8008b96 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d108      	bne.n	8008ab8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008aae:	d009      	beq.n	8008ac4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	61da      	str	r2, [r3, #28]
 8008ab6:	e005      	b.n	8008ac4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2200      	movs	r2, #0
 8008abc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008ad0:	b2db      	uxtb	r3, r3
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d106      	bne.n	8008ae4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f7fd fc40 	bl	8006364 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2202      	movs	r2, #2
 8008ae8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	681a      	ldr	r2, [r3, #0]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008afa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	689b      	ldr	r3, [r3, #8]
 8008b08:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008b0c:	431a      	orrs	r2, r3
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	68db      	ldr	r3, [r3, #12]
 8008b12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b16:	431a      	orrs	r2, r3
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	691b      	ldr	r3, [r3, #16]
 8008b1c:	f003 0302 	and.w	r3, r3, #2
 8008b20:	431a      	orrs	r2, r3
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	695b      	ldr	r3, [r3, #20]
 8008b26:	f003 0301 	and.w	r3, r3, #1
 8008b2a:	431a      	orrs	r2, r3
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	699b      	ldr	r3, [r3, #24]
 8008b30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b34:	431a      	orrs	r2, r3
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	69db      	ldr	r3, [r3, #28]
 8008b3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008b3e:	431a      	orrs	r2, r3
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6a1b      	ldr	r3, [r3, #32]
 8008b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b48:	ea42 0103 	orr.w	r1, r2, r3
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b50:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	430a      	orrs	r2, r1
 8008b5a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	699b      	ldr	r3, [r3, #24]
 8008b60:	0c1b      	lsrs	r3, r3, #16
 8008b62:	f003 0104 	and.w	r1, r3, #4
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b6a:	f003 0210 	and.w	r2, r3, #16
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	430a      	orrs	r2, r1
 8008b74:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	69da      	ldr	r2, [r3, #28]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008b84:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2201      	movs	r2, #1
 8008b90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008b94:	2300      	movs	r3, #0
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3708      	adds	r7, #8
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}

08008b9e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008b9e:	b580      	push	{r7, lr}
 8008ba0:	b08c      	sub	sp, #48	; 0x30
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	60f8      	str	r0, [r7, #12]
 8008ba6:	60b9      	str	r1, [r7, #8]
 8008ba8:	607a      	str	r2, [r7, #4]
 8008baa:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008bac:	2301      	movs	r3, #1
 8008bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008bbc:	2b01      	cmp	r3, #1
 8008bbe:	d101      	bne.n	8008bc4 <HAL_SPI_TransmitReceive+0x26>
 8008bc0:	2302      	movs	r3, #2
 8008bc2:	e18a      	b.n	8008eda <HAL_SPI_TransmitReceive+0x33c>
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008bcc:	f7fd feaa 	bl	8006924 <HAL_GetTick>
 8008bd0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008bd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008be2:	887b      	ldrh	r3, [r7, #2]
 8008be4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008be6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008bea:	2b01      	cmp	r3, #1
 8008bec:	d00f      	beq.n	8008c0e <HAL_SPI_TransmitReceive+0x70>
 8008bee:	69fb      	ldr	r3, [r7, #28]
 8008bf0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008bf4:	d107      	bne.n	8008c06 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	689b      	ldr	r3, [r3, #8]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d103      	bne.n	8008c06 <HAL_SPI_TransmitReceive+0x68>
 8008bfe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008c02:	2b04      	cmp	r3, #4
 8008c04:	d003      	beq.n	8008c0e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008c06:	2302      	movs	r3, #2
 8008c08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008c0c:	e15b      	b.n	8008ec6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d005      	beq.n	8008c20 <HAL_SPI_TransmitReceive+0x82>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d002      	beq.n	8008c20 <HAL_SPI_TransmitReceive+0x82>
 8008c1a:	887b      	ldrh	r3, [r7, #2]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d103      	bne.n	8008c28 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008c20:	2301      	movs	r3, #1
 8008c22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008c26:	e14e      	b.n	8008ec6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008c2e:	b2db      	uxtb	r3, r3
 8008c30:	2b04      	cmp	r3, #4
 8008c32:	d003      	beq.n	8008c3c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	2205      	movs	r2, #5
 8008c38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	687a      	ldr	r2, [r7, #4]
 8008c46:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	887a      	ldrh	r2, [r7, #2]
 8008c4c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	887a      	ldrh	r2, [r7, #2]
 8008c52:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	68ba      	ldr	r2, [r7, #8]
 8008c58:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	887a      	ldrh	r2, [r7, #2]
 8008c5e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	887a      	ldrh	r2, [r7, #2]
 8008c64:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c7c:	2b40      	cmp	r3, #64	; 0x40
 8008c7e:	d007      	beq.n	8008c90 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	681a      	ldr	r2, [r3, #0]
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c8e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	68db      	ldr	r3, [r3, #12]
 8008c94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c98:	d178      	bne.n	8008d8c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d002      	beq.n	8008ca8 <HAL_SPI_TransmitReceive+0x10a>
 8008ca2:	8b7b      	ldrh	r3, [r7, #26]
 8008ca4:	2b01      	cmp	r3, #1
 8008ca6:	d166      	bne.n	8008d76 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cac:	881a      	ldrh	r2, [r3, #0]
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cb8:	1c9a      	adds	r2, r3, #2
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008cc2:	b29b      	uxth	r3, r3
 8008cc4:	3b01      	subs	r3, #1
 8008cc6:	b29a      	uxth	r2, r3
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ccc:	e053      	b.n	8008d76 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	689b      	ldr	r3, [r3, #8]
 8008cd4:	f003 0302 	and.w	r3, r3, #2
 8008cd8:	2b02      	cmp	r3, #2
 8008cda:	d11b      	bne.n	8008d14 <HAL_SPI_TransmitReceive+0x176>
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ce0:	b29b      	uxth	r3, r3
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d016      	beq.n	8008d14 <HAL_SPI_TransmitReceive+0x176>
 8008ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ce8:	2b01      	cmp	r3, #1
 8008cea:	d113      	bne.n	8008d14 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cf0:	881a      	ldrh	r2, [r3, #0]
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cfc:	1c9a      	adds	r2, r3, #2
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d06:	b29b      	uxth	r3, r3
 8008d08:	3b01      	subs	r3, #1
 8008d0a:	b29a      	uxth	r2, r3
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008d10:	2300      	movs	r3, #0
 8008d12:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	689b      	ldr	r3, [r3, #8]
 8008d1a:	f003 0301 	and.w	r3, r3, #1
 8008d1e:	2b01      	cmp	r3, #1
 8008d20:	d119      	bne.n	8008d56 <HAL_SPI_TransmitReceive+0x1b8>
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d26:	b29b      	uxth	r3, r3
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d014      	beq.n	8008d56 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	68da      	ldr	r2, [r3, #12]
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d36:	b292      	uxth	r2, r2
 8008d38:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d3e:	1c9a      	adds	r2, r3, #2
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d48:	b29b      	uxth	r3, r3
 8008d4a:	3b01      	subs	r3, #1
 8008d4c:	b29a      	uxth	r2, r3
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008d52:	2301      	movs	r3, #1
 8008d54:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008d56:	f7fd fde5 	bl	8006924 <HAL_GetTick>
 8008d5a:	4602      	mov	r2, r0
 8008d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d5e:	1ad3      	subs	r3, r2, r3
 8008d60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d62:	429a      	cmp	r2, r3
 8008d64:	d807      	bhi.n	8008d76 <HAL_SPI_TransmitReceive+0x1d8>
 8008d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d6c:	d003      	beq.n	8008d76 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008d6e:	2303      	movs	r3, #3
 8008d70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008d74:	e0a7      	b.n	8008ec6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d7a:	b29b      	uxth	r3, r3
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d1a6      	bne.n	8008cce <HAL_SPI_TransmitReceive+0x130>
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d84:	b29b      	uxth	r3, r3
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d1a1      	bne.n	8008cce <HAL_SPI_TransmitReceive+0x130>
 8008d8a:	e07c      	b.n	8008e86 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d002      	beq.n	8008d9a <HAL_SPI_TransmitReceive+0x1fc>
 8008d94:	8b7b      	ldrh	r3, [r7, #26]
 8008d96:	2b01      	cmp	r3, #1
 8008d98:	d16b      	bne.n	8008e72 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	330c      	adds	r3, #12
 8008da4:	7812      	ldrb	r2, [r2, #0]
 8008da6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dac:	1c5a      	adds	r2, r3, #1
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008db6:	b29b      	uxth	r3, r3
 8008db8:	3b01      	subs	r3, #1
 8008dba:	b29a      	uxth	r2, r3
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008dc0:	e057      	b.n	8008e72 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	689b      	ldr	r3, [r3, #8]
 8008dc8:	f003 0302 	and.w	r3, r3, #2
 8008dcc:	2b02      	cmp	r3, #2
 8008dce:	d11c      	bne.n	8008e0a <HAL_SPI_TransmitReceive+0x26c>
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008dd4:	b29b      	uxth	r3, r3
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d017      	beq.n	8008e0a <HAL_SPI_TransmitReceive+0x26c>
 8008dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ddc:	2b01      	cmp	r3, #1
 8008dde:	d114      	bne.n	8008e0a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	330c      	adds	r3, #12
 8008dea:	7812      	ldrb	r2, [r2, #0]
 8008dec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008df2:	1c5a      	adds	r2, r3, #1
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008dfc:	b29b      	uxth	r3, r3
 8008dfe:	3b01      	subs	r3, #1
 8008e00:	b29a      	uxth	r2, r3
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008e06:	2300      	movs	r3, #0
 8008e08:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	689b      	ldr	r3, [r3, #8]
 8008e10:	f003 0301 	and.w	r3, r3, #1
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	d119      	bne.n	8008e4c <HAL_SPI_TransmitReceive+0x2ae>
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e1c:	b29b      	uxth	r3, r3
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d014      	beq.n	8008e4c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	68da      	ldr	r2, [r3, #12]
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e2c:	b2d2      	uxtb	r2, r2
 8008e2e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e34:	1c5a      	adds	r2, r3, #1
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e3e:	b29b      	uxth	r3, r3
 8008e40:	3b01      	subs	r3, #1
 8008e42:	b29a      	uxth	r2, r3
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008e48:	2301      	movs	r3, #1
 8008e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008e4c:	f7fd fd6a 	bl	8006924 <HAL_GetTick>
 8008e50:	4602      	mov	r2, r0
 8008e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e54:	1ad3      	subs	r3, r2, r3
 8008e56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	d803      	bhi.n	8008e64 <HAL_SPI_TransmitReceive+0x2c6>
 8008e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e62:	d102      	bne.n	8008e6a <HAL_SPI_TransmitReceive+0x2cc>
 8008e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d103      	bne.n	8008e72 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008e6a:	2303      	movs	r3, #3
 8008e6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008e70:	e029      	b.n	8008ec6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e76:	b29b      	uxth	r3, r3
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d1a2      	bne.n	8008dc2 <HAL_SPI_TransmitReceive+0x224>
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e80:	b29b      	uxth	r3, r3
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d19d      	bne.n	8008dc2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008e86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e88:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008e8a:	68f8      	ldr	r0, [r7, #12]
 8008e8c:	f000 f8b2 	bl	8008ff4 <SPI_EndRxTxTransaction>
 8008e90:	4603      	mov	r3, r0
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d006      	beq.n	8008ea4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008e96:	2301      	movs	r3, #1
 8008e98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	2220      	movs	r2, #32
 8008ea0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008ea2:	e010      	b.n	8008ec6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	689b      	ldr	r3, [r3, #8]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d10b      	bne.n	8008ec4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008eac:	2300      	movs	r3, #0
 8008eae:	617b      	str	r3, [r7, #20]
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	68db      	ldr	r3, [r3, #12]
 8008eb6:	617b      	str	r3, [r7, #20]
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	689b      	ldr	r3, [r3, #8]
 8008ebe:	617b      	str	r3, [r7, #20]
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	e000      	b.n	8008ec6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008ec4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2201      	movs	r2, #1
 8008eca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008ed6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3730      	adds	r7, #48	; 0x30
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
	...

08008ee4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b088      	sub	sp, #32
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	60f8      	str	r0, [r7, #12]
 8008eec:	60b9      	str	r1, [r7, #8]
 8008eee:	603b      	str	r3, [r7, #0]
 8008ef0:	4613      	mov	r3, r2
 8008ef2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008ef4:	f7fd fd16 	bl	8006924 <HAL_GetTick>
 8008ef8:	4602      	mov	r2, r0
 8008efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008efc:	1a9b      	subs	r3, r3, r2
 8008efe:	683a      	ldr	r2, [r7, #0]
 8008f00:	4413      	add	r3, r2
 8008f02:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008f04:	f7fd fd0e 	bl	8006924 <HAL_GetTick>
 8008f08:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008f0a:	4b39      	ldr	r3, [pc, #228]	; (8008ff0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	015b      	lsls	r3, r3, #5
 8008f10:	0d1b      	lsrs	r3, r3, #20
 8008f12:	69fa      	ldr	r2, [r7, #28]
 8008f14:	fb02 f303 	mul.w	r3, r2, r3
 8008f18:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008f1a:	e054      	b.n	8008fc6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f22:	d050      	beq.n	8008fc6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008f24:	f7fd fcfe 	bl	8006924 <HAL_GetTick>
 8008f28:	4602      	mov	r2, r0
 8008f2a:	69bb      	ldr	r3, [r7, #24]
 8008f2c:	1ad3      	subs	r3, r2, r3
 8008f2e:	69fa      	ldr	r2, [r7, #28]
 8008f30:	429a      	cmp	r2, r3
 8008f32:	d902      	bls.n	8008f3a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008f34:	69fb      	ldr	r3, [r7, #28]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d13d      	bne.n	8008fb6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	685a      	ldr	r2, [r3, #4]
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008f48:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	685b      	ldr	r3, [r3, #4]
 8008f4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f52:	d111      	bne.n	8008f78 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	689b      	ldr	r3, [r3, #8]
 8008f58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f5c:	d004      	beq.n	8008f68 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	689b      	ldr	r3, [r3, #8]
 8008f62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f66:	d107      	bne.n	8008f78 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	681a      	ldr	r2, [r3, #0]
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f76:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f80:	d10f      	bne.n	8008fa2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	681a      	ldr	r2, [r3, #0]
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008f90:	601a      	str	r2, [r3, #0]
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	681a      	ldr	r2, [r3, #0]
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008fa0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	2201      	movs	r2, #1
 8008fa6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	2200      	movs	r2, #0
 8008fae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008fb2:	2303      	movs	r3, #3
 8008fb4:	e017      	b.n	8008fe6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d101      	bne.n	8008fc0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008fc0:	697b      	ldr	r3, [r7, #20]
 8008fc2:	3b01      	subs	r3, #1
 8008fc4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	689a      	ldr	r2, [r3, #8]
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	4013      	ands	r3, r2
 8008fd0:	68ba      	ldr	r2, [r7, #8]
 8008fd2:	429a      	cmp	r2, r3
 8008fd4:	bf0c      	ite	eq
 8008fd6:	2301      	moveq	r3, #1
 8008fd8:	2300      	movne	r3, #0
 8008fda:	b2db      	uxtb	r3, r3
 8008fdc:	461a      	mov	r2, r3
 8008fde:	79fb      	ldrb	r3, [r7, #7]
 8008fe0:	429a      	cmp	r2, r3
 8008fe2:	d19b      	bne.n	8008f1c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008fe4:	2300      	movs	r3, #0
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3720      	adds	r7, #32
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}
 8008fee:	bf00      	nop
 8008ff0:	20000030 	.word	0x20000030

08008ff4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b088      	sub	sp, #32
 8008ff8:	af02      	add	r7, sp, #8
 8008ffa:	60f8      	str	r0, [r7, #12]
 8008ffc:	60b9      	str	r1, [r7, #8]
 8008ffe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009000:	4b1b      	ldr	r3, [pc, #108]	; (8009070 <SPI_EndRxTxTransaction+0x7c>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	4a1b      	ldr	r2, [pc, #108]	; (8009074 <SPI_EndRxTxTransaction+0x80>)
 8009006:	fba2 2303 	umull	r2, r3, r2, r3
 800900a:	0d5b      	lsrs	r3, r3, #21
 800900c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009010:	fb02 f303 	mul.w	r3, r2, r3
 8009014:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	685b      	ldr	r3, [r3, #4]
 800901a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800901e:	d112      	bne.n	8009046 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	9300      	str	r3, [sp, #0]
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	2200      	movs	r2, #0
 8009028:	2180      	movs	r1, #128	; 0x80
 800902a:	68f8      	ldr	r0, [r7, #12]
 800902c:	f7ff ff5a 	bl	8008ee4 <SPI_WaitFlagStateUntilTimeout>
 8009030:	4603      	mov	r3, r0
 8009032:	2b00      	cmp	r3, #0
 8009034:	d016      	beq.n	8009064 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800903a:	f043 0220 	orr.w	r2, r3, #32
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009042:	2303      	movs	r3, #3
 8009044:	e00f      	b.n	8009066 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d00a      	beq.n	8009062 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	3b01      	subs	r3, #1
 8009050:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	689b      	ldr	r3, [r3, #8]
 8009058:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800905c:	2b80      	cmp	r3, #128	; 0x80
 800905e:	d0f2      	beq.n	8009046 <SPI_EndRxTxTransaction+0x52>
 8009060:	e000      	b.n	8009064 <SPI_EndRxTxTransaction+0x70>
        break;
 8009062:	bf00      	nop
  }

  return HAL_OK;
 8009064:	2300      	movs	r3, #0
}
 8009066:	4618      	mov	r0, r3
 8009068:	3718      	adds	r7, #24
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}
 800906e:	bf00      	nop
 8009070:	20000030 	.word	0x20000030
 8009074:	165e9f81 	.word	0x165e9f81

08009078 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b082      	sub	sp, #8
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d101      	bne.n	800908a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009086:	2301      	movs	r3, #1
 8009088:	e041      	b.n	800910e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009090:	b2db      	uxtb	r3, r3
 8009092:	2b00      	cmp	r3, #0
 8009094:	d106      	bne.n	80090a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2200      	movs	r2, #0
 800909a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f7fd f9c8 	bl	8006434 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2202      	movs	r2, #2
 80090a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681a      	ldr	r2, [r3, #0]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	3304      	adds	r3, #4
 80090b4:	4619      	mov	r1, r3
 80090b6:	4610      	mov	r0, r2
 80090b8:	f000 f9a0 	bl	80093fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2201      	movs	r2, #1
 80090c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2201      	movs	r2, #1
 80090c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2201      	movs	r2, #1
 80090d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2201      	movs	r2, #1
 80090d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2201      	movs	r2, #1
 80090e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2201      	movs	r2, #1
 80090e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2201      	movs	r2, #1
 80090f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2201      	movs	r2, #1
 80090f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2201      	movs	r2, #1
 8009100:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2201      	movs	r2, #1
 8009108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800910c:	2300      	movs	r3, #0
}
 800910e:	4618      	mov	r0, r3
 8009110:	3708      	adds	r7, #8
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}
	...

08009118 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b084      	sub	sp, #16
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d109      	bne.n	800913c <HAL_TIM_PWM_Start+0x24>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800912e:	b2db      	uxtb	r3, r3
 8009130:	2b01      	cmp	r3, #1
 8009132:	bf14      	ite	ne
 8009134:	2301      	movne	r3, #1
 8009136:	2300      	moveq	r3, #0
 8009138:	b2db      	uxtb	r3, r3
 800913a:	e022      	b.n	8009182 <HAL_TIM_PWM_Start+0x6a>
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	2b04      	cmp	r3, #4
 8009140:	d109      	bne.n	8009156 <HAL_TIM_PWM_Start+0x3e>
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009148:	b2db      	uxtb	r3, r3
 800914a:	2b01      	cmp	r3, #1
 800914c:	bf14      	ite	ne
 800914e:	2301      	movne	r3, #1
 8009150:	2300      	moveq	r3, #0
 8009152:	b2db      	uxtb	r3, r3
 8009154:	e015      	b.n	8009182 <HAL_TIM_PWM_Start+0x6a>
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	2b08      	cmp	r3, #8
 800915a:	d109      	bne.n	8009170 <HAL_TIM_PWM_Start+0x58>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009162:	b2db      	uxtb	r3, r3
 8009164:	2b01      	cmp	r3, #1
 8009166:	bf14      	ite	ne
 8009168:	2301      	movne	r3, #1
 800916a:	2300      	moveq	r3, #0
 800916c:	b2db      	uxtb	r3, r3
 800916e:	e008      	b.n	8009182 <HAL_TIM_PWM_Start+0x6a>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009176:	b2db      	uxtb	r3, r3
 8009178:	2b01      	cmp	r3, #1
 800917a:	bf14      	ite	ne
 800917c:	2301      	movne	r3, #1
 800917e:	2300      	moveq	r3, #0
 8009180:	b2db      	uxtb	r3, r3
 8009182:	2b00      	cmp	r3, #0
 8009184:	d001      	beq.n	800918a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009186:	2301      	movs	r3, #1
 8009188:	e068      	b.n	800925c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d104      	bne.n	800919a <HAL_TIM_PWM_Start+0x82>
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2202      	movs	r2, #2
 8009194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009198:	e013      	b.n	80091c2 <HAL_TIM_PWM_Start+0xaa>
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	2b04      	cmp	r3, #4
 800919e:	d104      	bne.n	80091aa <HAL_TIM_PWM_Start+0x92>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2202      	movs	r2, #2
 80091a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80091a8:	e00b      	b.n	80091c2 <HAL_TIM_PWM_Start+0xaa>
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	2b08      	cmp	r3, #8
 80091ae:	d104      	bne.n	80091ba <HAL_TIM_PWM_Start+0xa2>
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2202      	movs	r2, #2
 80091b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80091b8:	e003      	b.n	80091c2 <HAL_TIM_PWM_Start+0xaa>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2202      	movs	r2, #2
 80091be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	2201      	movs	r2, #1
 80091c8:	6839      	ldr	r1, [r7, #0]
 80091ca:	4618      	mov	r0, r3
 80091cc:	f000 fb22 	bl	8009814 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	4a23      	ldr	r2, [pc, #140]	; (8009264 <HAL_TIM_PWM_Start+0x14c>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d107      	bne.n	80091ea <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80091e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	4a1d      	ldr	r2, [pc, #116]	; (8009264 <HAL_TIM_PWM_Start+0x14c>)
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d018      	beq.n	8009226 <HAL_TIM_PWM_Start+0x10e>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091fc:	d013      	beq.n	8009226 <HAL_TIM_PWM_Start+0x10e>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	4a19      	ldr	r2, [pc, #100]	; (8009268 <HAL_TIM_PWM_Start+0x150>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d00e      	beq.n	8009226 <HAL_TIM_PWM_Start+0x10e>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	4a17      	ldr	r2, [pc, #92]	; (800926c <HAL_TIM_PWM_Start+0x154>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d009      	beq.n	8009226 <HAL_TIM_PWM_Start+0x10e>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	4a16      	ldr	r2, [pc, #88]	; (8009270 <HAL_TIM_PWM_Start+0x158>)
 8009218:	4293      	cmp	r3, r2
 800921a:	d004      	beq.n	8009226 <HAL_TIM_PWM_Start+0x10e>
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4a14      	ldr	r2, [pc, #80]	; (8009274 <HAL_TIM_PWM_Start+0x15c>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d111      	bne.n	800924a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	689b      	ldr	r3, [r3, #8]
 800922c:	f003 0307 	and.w	r3, r3, #7
 8009230:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2b06      	cmp	r3, #6
 8009236:	d010      	beq.n	800925a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	681a      	ldr	r2, [r3, #0]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f042 0201 	orr.w	r2, r2, #1
 8009246:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009248:	e007      	b.n	800925a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	681a      	ldr	r2, [r3, #0]
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f042 0201 	orr.w	r2, r2, #1
 8009258:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800925a:	2300      	movs	r3, #0
}
 800925c:	4618      	mov	r0, r3
 800925e:	3710      	adds	r7, #16
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}
 8009264:	40010000 	.word	0x40010000
 8009268:	40000400 	.word	0x40000400
 800926c:	40000800 	.word	0x40000800
 8009270:	40000c00 	.word	0x40000c00
 8009274:	40014000 	.word	0x40014000

08009278 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b086      	sub	sp, #24
 800927c:	af00      	add	r7, sp, #0
 800927e:	60f8      	str	r0, [r7, #12]
 8009280:	60b9      	str	r1, [r7, #8]
 8009282:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009284:	2300      	movs	r3, #0
 8009286:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800928e:	2b01      	cmp	r3, #1
 8009290:	d101      	bne.n	8009296 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009292:	2302      	movs	r3, #2
 8009294:	e0ae      	b.n	80093f4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	2201      	movs	r2, #1
 800929a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2b0c      	cmp	r3, #12
 80092a2:	f200 809f 	bhi.w	80093e4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80092a6:	a201      	add	r2, pc, #4	; (adr r2, 80092ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80092a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ac:	080092e1 	.word	0x080092e1
 80092b0:	080093e5 	.word	0x080093e5
 80092b4:	080093e5 	.word	0x080093e5
 80092b8:	080093e5 	.word	0x080093e5
 80092bc:	08009321 	.word	0x08009321
 80092c0:	080093e5 	.word	0x080093e5
 80092c4:	080093e5 	.word	0x080093e5
 80092c8:	080093e5 	.word	0x080093e5
 80092cc:	08009363 	.word	0x08009363
 80092d0:	080093e5 	.word	0x080093e5
 80092d4:	080093e5 	.word	0x080093e5
 80092d8:	080093e5 	.word	0x080093e5
 80092dc:	080093a3 	.word	0x080093a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	68b9      	ldr	r1, [r7, #8]
 80092e6:	4618      	mov	r0, r3
 80092e8:	f000 f908 	bl	80094fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	699a      	ldr	r2, [r3, #24]
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f042 0208 	orr.w	r2, r2, #8
 80092fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	699a      	ldr	r2, [r3, #24]
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f022 0204 	bic.w	r2, r2, #4
 800930a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	6999      	ldr	r1, [r3, #24]
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	691a      	ldr	r2, [r3, #16]
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	430a      	orrs	r2, r1
 800931c:	619a      	str	r2, [r3, #24]
      break;
 800931e:	e064      	b.n	80093ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	68b9      	ldr	r1, [r7, #8]
 8009326:	4618      	mov	r0, r3
 8009328:	f000 f94e 	bl	80095c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	699a      	ldr	r2, [r3, #24]
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800933a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	699a      	ldr	r2, [r3, #24]
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800934a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	6999      	ldr	r1, [r3, #24]
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	691b      	ldr	r3, [r3, #16]
 8009356:	021a      	lsls	r2, r3, #8
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	430a      	orrs	r2, r1
 800935e:	619a      	str	r2, [r3, #24]
      break;
 8009360:	e043      	b.n	80093ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	68b9      	ldr	r1, [r7, #8]
 8009368:	4618      	mov	r0, r3
 800936a:	f000 f999 	bl	80096a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	69da      	ldr	r2, [r3, #28]
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f042 0208 	orr.w	r2, r2, #8
 800937c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	69da      	ldr	r2, [r3, #28]
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f022 0204 	bic.w	r2, r2, #4
 800938c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	69d9      	ldr	r1, [r3, #28]
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	691a      	ldr	r2, [r3, #16]
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	430a      	orrs	r2, r1
 800939e:	61da      	str	r2, [r3, #28]
      break;
 80093a0:	e023      	b.n	80093ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	68b9      	ldr	r1, [r7, #8]
 80093a8:	4618      	mov	r0, r3
 80093aa:	f000 f9e3 	bl	8009774 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	69da      	ldr	r2, [r3, #28]
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80093bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	69da      	ldr	r2, [r3, #28]
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80093cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	69d9      	ldr	r1, [r3, #28]
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	691b      	ldr	r3, [r3, #16]
 80093d8:	021a      	lsls	r2, r3, #8
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	430a      	orrs	r2, r1
 80093e0:	61da      	str	r2, [r3, #28]
      break;
 80093e2:	e002      	b.n	80093ea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80093e4:	2301      	movs	r3, #1
 80093e6:	75fb      	strb	r3, [r7, #23]
      break;
 80093e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	2200      	movs	r2, #0
 80093ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80093f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3718      	adds	r7, #24
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}

080093fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b085      	sub	sp, #20
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	4a34      	ldr	r2, [pc, #208]	; (80094e0 <TIM_Base_SetConfig+0xe4>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d00f      	beq.n	8009434 <TIM_Base_SetConfig+0x38>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800941a:	d00b      	beq.n	8009434 <TIM_Base_SetConfig+0x38>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	4a31      	ldr	r2, [pc, #196]	; (80094e4 <TIM_Base_SetConfig+0xe8>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d007      	beq.n	8009434 <TIM_Base_SetConfig+0x38>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	4a30      	ldr	r2, [pc, #192]	; (80094e8 <TIM_Base_SetConfig+0xec>)
 8009428:	4293      	cmp	r3, r2
 800942a:	d003      	beq.n	8009434 <TIM_Base_SetConfig+0x38>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	4a2f      	ldr	r2, [pc, #188]	; (80094ec <TIM_Base_SetConfig+0xf0>)
 8009430:	4293      	cmp	r3, r2
 8009432:	d108      	bne.n	8009446 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800943a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	68fa      	ldr	r2, [r7, #12]
 8009442:	4313      	orrs	r3, r2
 8009444:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	4a25      	ldr	r2, [pc, #148]	; (80094e0 <TIM_Base_SetConfig+0xe4>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d01b      	beq.n	8009486 <TIM_Base_SetConfig+0x8a>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009454:	d017      	beq.n	8009486 <TIM_Base_SetConfig+0x8a>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	4a22      	ldr	r2, [pc, #136]	; (80094e4 <TIM_Base_SetConfig+0xe8>)
 800945a:	4293      	cmp	r3, r2
 800945c:	d013      	beq.n	8009486 <TIM_Base_SetConfig+0x8a>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	4a21      	ldr	r2, [pc, #132]	; (80094e8 <TIM_Base_SetConfig+0xec>)
 8009462:	4293      	cmp	r3, r2
 8009464:	d00f      	beq.n	8009486 <TIM_Base_SetConfig+0x8a>
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	4a20      	ldr	r2, [pc, #128]	; (80094ec <TIM_Base_SetConfig+0xf0>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d00b      	beq.n	8009486 <TIM_Base_SetConfig+0x8a>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	4a1f      	ldr	r2, [pc, #124]	; (80094f0 <TIM_Base_SetConfig+0xf4>)
 8009472:	4293      	cmp	r3, r2
 8009474:	d007      	beq.n	8009486 <TIM_Base_SetConfig+0x8a>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	4a1e      	ldr	r2, [pc, #120]	; (80094f4 <TIM_Base_SetConfig+0xf8>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d003      	beq.n	8009486 <TIM_Base_SetConfig+0x8a>
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	4a1d      	ldr	r2, [pc, #116]	; (80094f8 <TIM_Base_SetConfig+0xfc>)
 8009482:	4293      	cmp	r3, r2
 8009484:	d108      	bne.n	8009498 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800948c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	68db      	ldr	r3, [r3, #12]
 8009492:	68fa      	ldr	r2, [r7, #12]
 8009494:	4313      	orrs	r3, r2
 8009496:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	695b      	ldr	r3, [r3, #20]
 80094a2:	4313      	orrs	r3, r2
 80094a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	68fa      	ldr	r2, [r7, #12]
 80094aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	689a      	ldr	r2, [r3, #8]
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	681a      	ldr	r2, [r3, #0]
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	4a08      	ldr	r2, [pc, #32]	; (80094e0 <TIM_Base_SetConfig+0xe4>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d103      	bne.n	80094cc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	691a      	ldr	r2, [r3, #16]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2201      	movs	r2, #1
 80094d0:	615a      	str	r2, [r3, #20]
}
 80094d2:	bf00      	nop
 80094d4:	3714      	adds	r7, #20
 80094d6:	46bd      	mov	sp, r7
 80094d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094dc:	4770      	bx	lr
 80094de:	bf00      	nop
 80094e0:	40010000 	.word	0x40010000
 80094e4:	40000400 	.word	0x40000400
 80094e8:	40000800 	.word	0x40000800
 80094ec:	40000c00 	.word	0x40000c00
 80094f0:	40014000 	.word	0x40014000
 80094f4:	40014400 	.word	0x40014400
 80094f8:	40014800 	.word	0x40014800

080094fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80094fc:	b480      	push	{r7}
 80094fe:	b087      	sub	sp, #28
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
 8009504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6a1b      	ldr	r3, [r3, #32]
 800950a:	f023 0201 	bic.w	r2, r3, #1
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6a1b      	ldr	r3, [r3, #32]
 8009516:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	685b      	ldr	r3, [r3, #4]
 800951c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	699b      	ldr	r3, [r3, #24]
 8009522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800952a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	f023 0303 	bic.w	r3, r3, #3
 8009532:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	68fa      	ldr	r2, [r7, #12]
 800953a:	4313      	orrs	r3, r2
 800953c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	f023 0302 	bic.w	r3, r3, #2
 8009544:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	689b      	ldr	r3, [r3, #8]
 800954a:	697a      	ldr	r2, [r7, #20]
 800954c:	4313      	orrs	r3, r2
 800954e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	4a1c      	ldr	r2, [pc, #112]	; (80095c4 <TIM_OC1_SetConfig+0xc8>)
 8009554:	4293      	cmp	r3, r2
 8009556:	d10c      	bne.n	8009572 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	f023 0308 	bic.w	r3, r3, #8
 800955e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	68db      	ldr	r3, [r3, #12]
 8009564:	697a      	ldr	r2, [r7, #20]
 8009566:	4313      	orrs	r3, r2
 8009568:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	f023 0304 	bic.w	r3, r3, #4
 8009570:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	4a13      	ldr	r2, [pc, #76]	; (80095c4 <TIM_OC1_SetConfig+0xc8>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d111      	bne.n	800959e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800957a:	693b      	ldr	r3, [r7, #16]
 800957c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009580:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009582:	693b      	ldr	r3, [r7, #16]
 8009584:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009588:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	695b      	ldr	r3, [r3, #20]
 800958e:	693a      	ldr	r2, [r7, #16]
 8009590:	4313      	orrs	r3, r2
 8009592:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	699b      	ldr	r3, [r3, #24]
 8009598:	693a      	ldr	r2, [r7, #16]
 800959a:	4313      	orrs	r3, r2
 800959c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	693a      	ldr	r2, [r7, #16]
 80095a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	68fa      	ldr	r2, [r7, #12]
 80095a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	685a      	ldr	r2, [r3, #4]
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	697a      	ldr	r2, [r7, #20]
 80095b6:	621a      	str	r2, [r3, #32]
}
 80095b8:	bf00      	nop
 80095ba:	371c      	adds	r7, #28
 80095bc:	46bd      	mov	sp, r7
 80095be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c2:	4770      	bx	lr
 80095c4:	40010000 	.word	0x40010000

080095c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b087      	sub	sp, #28
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
 80095d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6a1b      	ldr	r3, [r3, #32]
 80095d6:	f023 0210 	bic.w	r2, r3, #16
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6a1b      	ldr	r3, [r3, #32]
 80095e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	685b      	ldr	r3, [r3, #4]
 80095e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	699b      	ldr	r3, [r3, #24]
 80095ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	021b      	lsls	r3, r3, #8
 8009606:	68fa      	ldr	r2, [r7, #12]
 8009608:	4313      	orrs	r3, r2
 800960a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	f023 0320 	bic.w	r3, r3, #32
 8009612:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	689b      	ldr	r3, [r3, #8]
 8009618:	011b      	lsls	r3, r3, #4
 800961a:	697a      	ldr	r2, [r7, #20]
 800961c:	4313      	orrs	r3, r2
 800961e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	4a1e      	ldr	r2, [pc, #120]	; (800969c <TIM_OC2_SetConfig+0xd4>)
 8009624:	4293      	cmp	r3, r2
 8009626:	d10d      	bne.n	8009644 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009628:	697b      	ldr	r3, [r7, #20]
 800962a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800962e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	68db      	ldr	r3, [r3, #12]
 8009634:	011b      	lsls	r3, r3, #4
 8009636:	697a      	ldr	r2, [r7, #20]
 8009638:	4313      	orrs	r3, r2
 800963a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009642:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	4a15      	ldr	r2, [pc, #84]	; (800969c <TIM_OC2_SetConfig+0xd4>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d113      	bne.n	8009674 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009652:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800965a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	695b      	ldr	r3, [r3, #20]
 8009660:	009b      	lsls	r3, r3, #2
 8009662:	693a      	ldr	r2, [r7, #16]
 8009664:	4313      	orrs	r3, r2
 8009666:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	699b      	ldr	r3, [r3, #24]
 800966c:	009b      	lsls	r3, r3, #2
 800966e:	693a      	ldr	r2, [r7, #16]
 8009670:	4313      	orrs	r3, r2
 8009672:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	693a      	ldr	r2, [r7, #16]
 8009678:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	68fa      	ldr	r2, [r7, #12]
 800967e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	685a      	ldr	r2, [r3, #4]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	697a      	ldr	r2, [r7, #20]
 800968c:	621a      	str	r2, [r3, #32]
}
 800968e:	bf00      	nop
 8009690:	371c      	adds	r7, #28
 8009692:	46bd      	mov	sp, r7
 8009694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009698:	4770      	bx	lr
 800969a:	bf00      	nop
 800969c:	40010000 	.word	0x40010000

080096a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80096a0:	b480      	push	{r7}
 80096a2:	b087      	sub	sp, #28
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6a1b      	ldr	r3, [r3, #32]
 80096ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6a1b      	ldr	r3, [r3, #32]
 80096ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	685b      	ldr	r3, [r3, #4]
 80096c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	69db      	ldr	r3, [r3, #28]
 80096c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	f023 0303 	bic.w	r3, r3, #3
 80096d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	68fa      	ldr	r2, [r7, #12]
 80096de:	4313      	orrs	r3, r2
 80096e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80096e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	689b      	ldr	r3, [r3, #8]
 80096ee:	021b      	lsls	r3, r3, #8
 80096f0:	697a      	ldr	r2, [r7, #20]
 80096f2:	4313      	orrs	r3, r2
 80096f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	4a1d      	ldr	r2, [pc, #116]	; (8009770 <TIM_OC3_SetConfig+0xd0>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d10d      	bne.n	800971a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009704:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	68db      	ldr	r3, [r3, #12]
 800970a:	021b      	lsls	r3, r3, #8
 800970c:	697a      	ldr	r2, [r7, #20]
 800970e:	4313      	orrs	r3, r2
 8009710:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009718:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	4a14      	ldr	r2, [pc, #80]	; (8009770 <TIM_OC3_SetConfig+0xd0>)
 800971e:	4293      	cmp	r3, r2
 8009720:	d113      	bne.n	800974a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009722:	693b      	ldr	r3, [r7, #16]
 8009724:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009728:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009730:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	695b      	ldr	r3, [r3, #20]
 8009736:	011b      	lsls	r3, r3, #4
 8009738:	693a      	ldr	r2, [r7, #16]
 800973a:	4313      	orrs	r3, r2
 800973c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	699b      	ldr	r3, [r3, #24]
 8009742:	011b      	lsls	r3, r3, #4
 8009744:	693a      	ldr	r2, [r7, #16]
 8009746:	4313      	orrs	r3, r2
 8009748:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	693a      	ldr	r2, [r7, #16]
 800974e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	68fa      	ldr	r2, [r7, #12]
 8009754:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	685a      	ldr	r2, [r3, #4]
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	697a      	ldr	r2, [r7, #20]
 8009762:	621a      	str	r2, [r3, #32]
}
 8009764:	bf00      	nop
 8009766:	371c      	adds	r7, #28
 8009768:	46bd      	mov	sp, r7
 800976a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976e:	4770      	bx	lr
 8009770:	40010000 	.word	0x40010000

08009774 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009774:	b480      	push	{r7}
 8009776:	b087      	sub	sp, #28
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
 800977c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6a1b      	ldr	r3, [r3, #32]
 8009782:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6a1b      	ldr	r3, [r3, #32]
 800978e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	685b      	ldr	r3, [r3, #4]
 8009794:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	69db      	ldr	r3, [r3, #28]
 800979a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80097aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	021b      	lsls	r3, r3, #8
 80097b2:	68fa      	ldr	r2, [r7, #12]
 80097b4:	4313      	orrs	r3, r2
 80097b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80097be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	689b      	ldr	r3, [r3, #8]
 80097c4:	031b      	lsls	r3, r3, #12
 80097c6:	693a      	ldr	r2, [r7, #16]
 80097c8:	4313      	orrs	r3, r2
 80097ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	4a10      	ldr	r2, [pc, #64]	; (8009810 <TIM_OC4_SetConfig+0x9c>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d109      	bne.n	80097e8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80097d4:	697b      	ldr	r3, [r7, #20]
 80097d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80097da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	695b      	ldr	r3, [r3, #20]
 80097e0:	019b      	lsls	r3, r3, #6
 80097e2:	697a      	ldr	r2, [r7, #20]
 80097e4:	4313      	orrs	r3, r2
 80097e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	697a      	ldr	r2, [r7, #20]
 80097ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	68fa      	ldr	r2, [r7, #12]
 80097f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	685a      	ldr	r2, [r3, #4]
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	693a      	ldr	r2, [r7, #16]
 8009800:	621a      	str	r2, [r3, #32]
}
 8009802:	bf00      	nop
 8009804:	371c      	adds	r7, #28
 8009806:	46bd      	mov	sp, r7
 8009808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980c:	4770      	bx	lr
 800980e:	bf00      	nop
 8009810:	40010000 	.word	0x40010000

08009814 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009814:	b480      	push	{r7}
 8009816:	b087      	sub	sp, #28
 8009818:	af00      	add	r7, sp, #0
 800981a:	60f8      	str	r0, [r7, #12]
 800981c:	60b9      	str	r1, [r7, #8]
 800981e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	f003 031f 	and.w	r3, r3, #31
 8009826:	2201      	movs	r2, #1
 8009828:	fa02 f303 	lsl.w	r3, r2, r3
 800982c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	6a1a      	ldr	r2, [r3, #32]
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	43db      	mvns	r3, r3
 8009836:	401a      	ands	r2, r3
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	6a1a      	ldr	r2, [r3, #32]
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	f003 031f 	and.w	r3, r3, #31
 8009846:	6879      	ldr	r1, [r7, #4]
 8009848:	fa01 f303 	lsl.w	r3, r1, r3
 800984c:	431a      	orrs	r2, r3
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	621a      	str	r2, [r3, #32]
}
 8009852:	bf00      	nop
 8009854:	371c      	adds	r7, #28
 8009856:	46bd      	mov	sp, r7
 8009858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985c:	4770      	bx	lr
	...

08009860 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009860:	b480      	push	{r7}
 8009862:	b085      	sub	sp, #20
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
 8009868:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009870:	2b01      	cmp	r3, #1
 8009872:	d101      	bne.n	8009878 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009874:	2302      	movs	r3, #2
 8009876:	e050      	b.n	800991a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2201      	movs	r2, #1
 800987c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2202      	movs	r2, #2
 8009884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	685b      	ldr	r3, [r3, #4]
 800988e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	689b      	ldr	r3, [r3, #8]
 8009896:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800989e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	68fa      	ldr	r2, [r7, #12]
 80098a6:	4313      	orrs	r3, r2
 80098a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	68fa      	ldr	r2, [r7, #12]
 80098b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	4a1c      	ldr	r2, [pc, #112]	; (8009928 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80098b8:	4293      	cmp	r3, r2
 80098ba:	d018      	beq.n	80098ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098c4:	d013      	beq.n	80098ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	4a18      	ldr	r2, [pc, #96]	; (800992c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d00e      	beq.n	80098ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	4a16      	ldr	r2, [pc, #88]	; (8009930 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d009      	beq.n	80098ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	4a15      	ldr	r2, [pc, #84]	; (8009934 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80098e0:	4293      	cmp	r3, r2
 80098e2:	d004      	beq.n	80098ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	4a13      	ldr	r2, [pc, #76]	; (8009938 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80098ea:	4293      	cmp	r3, r2
 80098ec:	d10c      	bne.n	8009908 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80098f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	685b      	ldr	r3, [r3, #4]
 80098fa:	68ba      	ldr	r2, [r7, #8]
 80098fc:	4313      	orrs	r3, r2
 80098fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	68ba      	ldr	r2, [r7, #8]
 8009906:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2201      	movs	r2, #1
 800990c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2200      	movs	r2, #0
 8009914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009918:	2300      	movs	r3, #0
}
 800991a:	4618      	mov	r0, r3
 800991c:	3714      	adds	r7, #20
 800991e:	46bd      	mov	sp, r7
 8009920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009924:	4770      	bx	lr
 8009926:	bf00      	nop
 8009928:	40010000 	.word	0x40010000
 800992c:	40000400 	.word	0x40000400
 8009930:	40000800 	.word	0x40000800
 8009934:	40000c00 	.word	0x40000c00
 8009938:	40014000 	.word	0x40014000

0800993c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b082      	sub	sp, #8
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d101      	bne.n	800994e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800994a:	2301      	movs	r3, #1
 800994c:	e03f      	b.n	80099ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009954:	b2db      	uxtb	r3, r3
 8009956:	2b00      	cmp	r3, #0
 8009958:	d106      	bne.n	8009968 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2200      	movs	r2, #0
 800995e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f7fc fdbe 	bl	80064e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2224      	movs	r2, #36	; 0x24
 800996c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	68da      	ldr	r2, [r3, #12]
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800997e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f000 fce5 	bl	800a350 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	691a      	ldr	r2, [r3, #16]
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009994:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	695a      	ldr	r2, [r3, #20]
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80099a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	68da      	ldr	r2, [r3, #12]
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80099b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2200      	movs	r2, #0
 80099ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2220      	movs	r2, #32
 80099c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2220      	movs	r2, #32
 80099c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80099cc:	2300      	movs	r3, #0
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	3708      	adds	r7, #8
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}

080099d6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80099d6:	b580      	push	{r7, lr}
 80099d8:	b084      	sub	sp, #16
 80099da:	af00      	add	r7, sp, #0
 80099dc:	60f8      	str	r0, [r7, #12]
 80099de:	60b9      	str	r1, [r7, #8]
 80099e0:	4613      	mov	r3, r2
 80099e2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80099ea:	b2db      	uxtb	r3, r3
 80099ec:	2b20      	cmp	r3, #32
 80099ee:	d11d      	bne.n	8009a2c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d002      	beq.n	80099fc <HAL_UART_Receive_IT+0x26>
 80099f6:	88fb      	ldrh	r3, [r7, #6]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d101      	bne.n	8009a00 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80099fc:	2301      	movs	r3, #1
 80099fe:	e016      	b.n	8009a2e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a06:	2b01      	cmp	r3, #1
 8009a08:	d101      	bne.n	8009a0e <HAL_UART_Receive_IT+0x38>
 8009a0a:	2302      	movs	r3, #2
 8009a0c:	e00f      	b.n	8009a2e <HAL_UART_Receive_IT+0x58>
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	2201      	movs	r2, #1
 8009a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009a1c:	88fb      	ldrh	r3, [r7, #6]
 8009a1e:	461a      	mov	r2, r3
 8009a20:	68b9      	ldr	r1, [r7, #8]
 8009a22:	68f8      	ldr	r0, [r7, #12]
 8009a24:	f000 fac0 	bl	8009fa8 <UART_Start_Receive_IT>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	e000      	b.n	8009a2e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009a2c:	2302      	movs	r3, #2
  }
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3710      	adds	r7, #16
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}
	...

08009a38 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b0ba      	sub	sp, #232	; 0xe8
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	68db      	ldr	r3, [r3, #12]
 8009a50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	695b      	ldr	r3, [r3, #20]
 8009a5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009a64:	2300      	movs	r3, #0
 8009a66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009a6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a6e:	f003 030f 	and.w	r3, r3, #15
 8009a72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009a76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d10f      	bne.n	8009a9e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a82:	f003 0320 	and.w	r3, r3, #32
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d009      	beq.n	8009a9e <HAL_UART_IRQHandler+0x66>
 8009a8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a8e:	f003 0320 	and.w	r3, r3, #32
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d003      	beq.n	8009a9e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f000 fb9f 	bl	800a1da <UART_Receive_IT>
      return;
 8009a9c:	e256      	b.n	8009f4c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009a9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	f000 80de 	beq.w	8009c64 <HAL_UART_IRQHandler+0x22c>
 8009aa8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009aac:	f003 0301 	and.w	r3, r3, #1
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d106      	bne.n	8009ac2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009ab4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ab8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	f000 80d1 	beq.w	8009c64 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ac6:	f003 0301 	and.w	r3, r3, #1
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d00b      	beq.n	8009ae6 <HAL_UART_IRQHandler+0xae>
 8009ace:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d005      	beq.n	8009ae6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ade:	f043 0201 	orr.w	r2, r3, #1
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009aea:	f003 0304 	and.w	r3, r3, #4
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d00b      	beq.n	8009b0a <HAL_UART_IRQHandler+0xd2>
 8009af2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009af6:	f003 0301 	and.w	r3, r3, #1
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d005      	beq.n	8009b0a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b02:	f043 0202 	orr.w	r2, r3, #2
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b0e:	f003 0302 	and.w	r3, r3, #2
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d00b      	beq.n	8009b2e <HAL_UART_IRQHandler+0xf6>
 8009b16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009b1a:	f003 0301 	and.w	r3, r3, #1
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d005      	beq.n	8009b2e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b26:	f043 0204 	orr.w	r2, r3, #4
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b32:	f003 0308 	and.w	r3, r3, #8
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d011      	beq.n	8009b5e <HAL_UART_IRQHandler+0x126>
 8009b3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b3e:	f003 0320 	and.w	r3, r3, #32
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d105      	bne.n	8009b52 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009b46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009b4a:	f003 0301 	and.w	r3, r3, #1
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d005      	beq.n	8009b5e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b56:	f043 0208 	orr.w	r2, r3, #8
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	f000 81ed 	beq.w	8009f42 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009b68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b6c:	f003 0320 	and.w	r3, r3, #32
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d008      	beq.n	8009b86 <HAL_UART_IRQHandler+0x14e>
 8009b74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b78:	f003 0320 	and.w	r3, r3, #32
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d002      	beq.n	8009b86 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f000 fb2a 	bl	800a1da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	695b      	ldr	r3, [r3, #20]
 8009b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b90:	2b40      	cmp	r3, #64	; 0x40
 8009b92:	bf0c      	ite	eq
 8009b94:	2301      	moveq	r3, #1
 8009b96:	2300      	movne	r3, #0
 8009b98:	b2db      	uxtb	r3, r3
 8009b9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ba2:	f003 0308 	and.w	r3, r3, #8
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d103      	bne.n	8009bb2 <HAL_UART_IRQHandler+0x17a>
 8009baa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d04f      	beq.n	8009c52 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f000 fa32 	bl	800a01c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	695b      	ldr	r3, [r3, #20]
 8009bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bc2:	2b40      	cmp	r3, #64	; 0x40
 8009bc4:	d141      	bne.n	8009c4a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	3314      	adds	r3, #20
 8009bcc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009bd4:	e853 3f00 	ldrex	r3, [r3]
 8009bd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009bdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009be0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009be4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	3314      	adds	r3, #20
 8009bee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009bf2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009bf6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bfa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009bfe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009c02:	e841 2300 	strex	r3, r2, [r1]
 8009c06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009c0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d1d9      	bne.n	8009bc6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d013      	beq.n	8009c42 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c1e:	4a7d      	ldr	r2, [pc, #500]	; (8009e14 <HAL_UART_IRQHandler+0x3dc>)
 8009c20:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c26:	4618      	mov	r0, r3
 8009c28:	f7fd f82d 	bl	8006c86 <HAL_DMA_Abort_IT>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d016      	beq.n	8009c60 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c38:	687a      	ldr	r2, [r7, #4]
 8009c3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009c3c:	4610      	mov	r0, r2
 8009c3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c40:	e00e      	b.n	8009c60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f000 f99a 	bl	8009f7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c48:	e00a      	b.n	8009c60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f000 f996 	bl	8009f7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c50:	e006      	b.n	8009c60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f000 f992 	bl	8009f7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009c5e:	e170      	b.n	8009f42 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c60:	bf00      	nop
    return;
 8009c62:	e16e      	b.n	8009f42 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c68:	2b01      	cmp	r3, #1
 8009c6a:	f040 814a 	bne.w	8009f02 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c72:	f003 0310 	and.w	r3, r3, #16
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	f000 8143 	beq.w	8009f02 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009c7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c80:	f003 0310 	and.w	r3, r3, #16
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	f000 813c 	beq.w	8009f02 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	60bb      	str	r3, [r7, #8]
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	60bb      	str	r3, [r7, #8]
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	685b      	ldr	r3, [r3, #4]
 8009c9c:	60bb      	str	r3, [r7, #8]
 8009c9e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	695b      	ldr	r3, [r3, #20]
 8009ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009caa:	2b40      	cmp	r3, #64	; 0x40
 8009cac:	f040 80b4 	bne.w	8009e18 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	685b      	ldr	r3, [r3, #4]
 8009cb8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009cbc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	f000 8140 	beq.w	8009f46 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009cca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009cce:	429a      	cmp	r2, r3
 8009cd0:	f080 8139 	bcs.w	8009f46 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009cda:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ce0:	69db      	ldr	r3, [r3, #28]
 8009ce2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ce6:	f000 8088 	beq.w	8009dfa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	330c      	adds	r3, #12
 8009cf0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cf4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009cf8:	e853 3f00 	ldrex	r3, [r3]
 8009cfc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009d00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009d04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	330c      	adds	r3, #12
 8009d12:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009d16:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009d1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009d22:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009d26:	e841 2300 	strex	r3, r2, [r1]
 8009d2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009d2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d1d9      	bne.n	8009cea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	3314      	adds	r3, #20
 8009d3c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009d40:	e853 3f00 	ldrex	r3, [r3]
 8009d44:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009d46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d48:	f023 0301 	bic.w	r3, r3, #1
 8009d4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	3314      	adds	r3, #20
 8009d56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009d5a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009d5e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d60:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009d62:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009d66:	e841 2300 	strex	r3, r2, [r1]
 8009d6a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009d6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d1e1      	bne.n	8009d36 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	3314      	adds	r3, #20
 8009d78:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009d7c:	e853 3f00 	ldrex	r3, [r3]
 8009d80:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009d82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	3314      	adds	r3, #20
 8009d92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009d96:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009d98:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d9a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009d9c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009d9e:	e841 2300 	strex	r3, r2, [r1]
 8009da2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009da4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d1e3      	bne.n	8009d72 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2220      	movs	r2, #32
 8009dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2200      	movs	r2, #0
 8009db6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	330c      	adds	r3, #12
 8009dbe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009dc2:	e853 3f00 	ldrex	r3, [r3]
 8009dc6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009dc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009dca:	f023 0310 	bic.w	r3, r3, #16
 8009dce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	330c      	adds	r3, #12
 8009dd8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009ddc:	65ba      	str	r2, [r7, #88]	; 0x58
 8009dde:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009de0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009de2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009de4:	e841 2300 	strex	r3, r2, [r1]
 8009de8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009dea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d1e3      	bne.n	8009db8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009df4:	4618      	mov	r0, r3
 8009df6:	f7fc fed6 	bl	8006ba6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009e02:	b29b      	uxth	r3, r3
 8009e04:	1ad3      	subs	r3, r2, r3
 8009e06:	b29b      	uxth	r3, r3
 8009e08:	4619      	mov	r1, r3
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f000 f8c0 	bl	8009f90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009e10:	e099      	b.n	8009f46 <HAL_UART_IRQHandler+0x50e>
 8009e12:	bf00      	nop
 8009e14:	0800a0e3 	.word	0x0800a0e3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009e20:	b29b      	uxth	r3, r3
 8009e22:	1ad3      	subs	r3, r2, r3
 8009e24:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009e2c:	b29b      	uxth	r3, r3
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	f000 808b 	beq.w	8009f4a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009e34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	f000 8086 	beq.w	8009f4a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	330c      	adds	r3, #12
 8009e44:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e48:	e853 3f00 	ldrex	r3, [r3]
 8009e4c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009e54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	330c      	adds	r3, #12
 8009e5e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009e62:	647a      	str	r2, [r7, #68]	; 0x44
 8009e64:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e66:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009e68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009e6a:	e841 2300 	strex	r3, r2, [r1]
 8009e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009e70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d1e3      	bne.n	8009e3e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	3314      	adds	r3, #20
 8009e7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e80:	e853 3f00 	ldrex	r3, [r3]
 8009e84:	623b      	str	r3, [r7, #32]
   return(result);
 8009e86:	6a3b      	ldr	r3, [r7, #32]
 8009e88:	f023 0301 	bic.w	r3, r3, #1
 8009e8c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	3314      	adds	r3, #20
 8009e96:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009e9a:	633a      	str	r2, [r7, #48]	; 0x30
 8009e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009ea0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ea2:	e841 2300 	strex	r3, r2, [r1]
 8009ea6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d1e3      	bne.n	8009e76 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2220      	movs	r2, #32
 8009eb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2200      	movs	r2, #0
 8009eba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	330c      	adds	r3, #12
 8009ec2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ec4:	693b      	ldr	r3, [r7, #16]
 8009ec6:	e853 3f00 	ldrex	r3, [r3]
 8009eca:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	f023 0310 	bic.w	r3, r3, #16
 8009ed2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	330c      	adds	r3, #12
 8009edc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009ee0:	61fa      	str	r2, [r7, #28]
 8009ee2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ee4:	69b9      	ldr	r1, [r7, #24]
 8009ee6:	69fa      	ldr	r2, [r7, #28]
 8009ee8:	e841 2300 	strex	r3, r2, [r1]
 8009eec:	617b      	str	r3, [r7, #20]
   return(result);
 8009eee:	697b      	ldr	r3, [r7, #20]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d1e3      	bne.n	8009ebc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009ef4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009ef8:	4619      	mov	r1, r3
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f000 f848 	bl	8009f90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009f00:	e023      	b.n	8009f4a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d009      	beq.n	8009f22 <HAL_UART_IRQHandler+0x4ea>
 8009f0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d003      	beq.n	8009f22 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f000 f8f5 	bl	800a10a <UART_Transmit_IT>
    return;
 8009f20:	e014      	b.n	8009f4c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d00e      	beq.n	8009f4c <HAL_UART_IRQHandler+0x514>
 8009f2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d008      	beq.n	8009f4c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f000 f935 	bl	800a1aa <UART_EndTransmit_IT>
    return;
 8009f40:	e004      	b.n	8009f4c <HAL_UART_IRQHandler+0x514>
    return;
 8009f42:	bf00      	nop
 8009f44:	e002      	b.n	8009f4c <HAL_UART_IRQHandler+0x514>
      return;
 8009f46:	bf00      	nop
 8009f48:	e000      	b.n	8009f4c <HAL_UART_IRQHandler+0x514>
      return;
 8009f4a:	bf00      	nop
  }
}
 8009f4c:	37e8      	adds	r7, #232	; 0xe8
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}
 8009f52:	bf00      	nop

08009f54 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009f54:	b480      	push	{r7}
 8009f56:	b083      	sub	sp, #12
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009f5c:	bf00      	nop
 8009f5e:	370c      	adds	r7, #12
 8009f60:	46bd      	mov	sp, r7
 8009f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f66:	4770      	bx	lr

08009f68 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b083      	sub	sp, #12
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009f70:	bf00      	nop
 8009f72:	370c      	adds	r7, #12
 8009f74:	46bd      	mov	sp, r7
 8009f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7a:	4770      	bx	lr

08009f7c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009f7c:	b480      	push	{r7}
 8009f7e:	b083      	sub	sp, #12
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009f84:	bf00      	nop
 8009f86:	370c      	adds	r7, #12
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8e:	4770      	bx	lr

08009f90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009f90:	b480      	push	{r7}
 8009f92:	b083      	sub	sp, #12
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
 8009f98:	460b      	mov	r3, r1
 8009f9a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009f9c:	bf00      	nop
 8009f9e:	370c      	adds	r7, #12
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa6:	4770      	bx	lr

08009fa8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b085      	sub	sp, #20
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	60f8      	str	r0, [r7, #12]
 8009fb0:	60b9      	str	r1, [r7, #8]
 8009fb2:	4613      	mov	r3, r2
 8009fb4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	68ba      	ldr	r2, [r7, #8]
 8009fba:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	88fa      	ldrh	r2, [r7, #6]
 8009fc0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	88fa      	ldrh	r2, [r7, #6]
 8009fc6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	2222      	movs	r2, #34	; 0x22
 8009fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	68da      	ldr	r2, [r3, #12]
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009fec:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	695a      	ldr	r2, [r3, #20]
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f042 0201 	orr.w	r2, r2, #1
 8009ffc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	68da      	ldr	r2, [r3, #12]
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f042 0220 	orr.w	r2, r2, #32
 800a00c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a00e:	2300      	movs	r3, #0
}
 800a010:	4618      	mov	r0, r3
 800a012:	3714      	adds	r7, #20
 800a014:	46bd      	mov	sp, r7
 800a016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01a:	4770      	bx	lr

0800a01c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a01c:	b480      	push	{r7}
 800a01e:	b095      	sub	sp, #84	; 0x54
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	330c      	adds	r3, #12
 800a02a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a02c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a02e:	e853 3f00 	ldrex	r3, [r3]
 800a032:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a036:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a03a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	330c      	adds	r3, #12
 800a042:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a044:	643a      	str	r2, [r7, #64]	; 0x40
 800a046:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a048:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a04a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a04c:	e841 2300 	strex	r3, r2, [r1]
 800a050:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a054:	2b00      	cmp	r3, #0
 800a056:	d1e5      	bne.n	800a024 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	3314      	adds	r3, #20
 800a05e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a060:	6a3b      	ldr	r3, [r7, #32]
 800a062:	e853 3f00 	ldrex	r3, [r3]
 800a066:	61fb      	str	r3, [r7, #28]
   return(result);
 800a068:	69fb      	ldr	r3, [r7, #28]
 800a06a:	f023 0301 	bic.w	r3, r3, #1
 800a06e:	64bb      	str	r3, [r7, #72]	; 0x48
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	3314      	adds	r3, #20
 800a076:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a078:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a07a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a07c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a07e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a080:	e841 2300 	strex	r3, r2, [r1]
 800a084:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d1e5      	bne.n	800a058 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a090:	2b01      	cmp	r3, #1
 800a092:	d119      	bne.n	800a0c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	330c      	adds	r3, #12
 800a09a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	e853 3f00 	ldrex	r3, [r3]
 800a0a2:	60bb      	str	r3, [r7, #8]
   return(result);
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	f023 0310 	bic.w	r3, r3, #16
 800a0aa:	647b      	str	r3, [r7, #68]	; 0x44
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	330c      	adds	r3, #12
 800a0b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a0b4:	61ba      	str	r2, [r7, #24]
 800a0b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0b8:	6979      	ldr	r1, [r7, #20]
 800a0ba:	69ba      	ldr	r2, [r7, #24]
 800a0bc:	e841 2300 	strex	r3, r2, [r1]
 800a0c0:	613b      	str	r3, [r7, #16]
   return(result);
 800a0c2:	693b      	ldr	r3, [r7, #16]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d1e5      	bne.n	800a094 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2220      	movs	r2, #32
 800a0cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a0d6:	bf00      	nop
 800a0d8:	3754      	adds	r7, #84	; 0x54
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e0:	4770      	bx	lr

0800a0e2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a0e2:	b580      	push	{r7, lr}
 800a0e4:	b084      	sub	sp, #16
 800a0e6:	af00      	add	r7, sp, #0
 800a0e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a0fc:	68f8      	ldr	r0, [r7, #12]
 800a0fe:	f7ff ff3d 	bl	8009f7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a102:	bf00      	nop
 800a104:	3710      	adds	r7, #16
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}

0800a10a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a10a:	b480      	push	{r7}
 800a10c:	b085      	sub	sp, #20
 800a10e:	af00      	add	r7, sp, #0
 800a110:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a118:	b2db      	uxtb	r3, r3
 800a11a:	2b21      	cmp	r3, #33	; 0x21
 800a11c:	d13e      	bne.n	800a19c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	689b      	ldr	r3, [r3, #8]
 800a122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a126:	d114      	bne.n	800a152 <UART_Transmit_IT+0x48>
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	691b      	ldr	r3, [r3, #16]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d110      	bne.n	800a152 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6a1b      	ldr	r3, [r3, #32]
 800a134:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	881b      	ldrh	r3, [r3, #0]
 800a13a:	461a      	mov	r2, r3
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a144:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6a1b      	ldr	r3, [r3, #32]
 800a14a:	1c9a      	adds	r2, r3, #2
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	621a      	str	r2, [r3, #32]
 800a150:	e008      	b.n	800a164 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6a1b      	ldr	r3, [r3, #32]
 800a156:	1c59      	adds	r1, r3, #1
 800a158:	687a      	ldr	r2, [r7, #4]
 800a15a:	6211      	str	r1, [r2, #32]
 800a15c:	781a      	ldrb	r2, [r3, #0]
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a168:	b29b      	uxth	r3, r3
 800a16a:	3b01      	subs	r3, #1
 800a16c:	b29b      	uxth	r3, r3
 800a16e:	687a      	ldr	r2, [r7, #4]
 800a170:	4619      	mov	r1, r3
 800a172:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a174:	2b00      	cmp	r3, #0
 800a176:	d10f      	bne.n	800a198 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	68da      	ldr	r2, [r3, #12]
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a186:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	68da      	ldr	r2, [r3, #12]
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a196:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a198:	2300      	movs	r3, #0
 800a19a:	e000      	b.n	800a19e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a19c:	2302      	movs	r3, #2
  }
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3714      	adds	r7, #20
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a8:	4770      	bx	lr

0800a1aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a1aa:	b580      	push	{r7, lr}
 800a1ac:	b082      	sub	sp, #8
 800a1ae:	af00      	add	r7, sp, #0
 800a1b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	68da      	ldr	r2, [r3, #12]
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a1c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2220      	movs	r2, #32
 800a1c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f7ff fec2 	bl	8009f54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a1d0:	2300      	movs	r3, #0
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3708      	adds	r7, #8
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}

0800a1da <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a1da:	b580      	push	{r7, lr}
 800a1dc:	b08c      	sub	sp, #48	; 0x30
 800a1de:	af00      	add	r7, sp, #0
 800a1e0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a1e8:	b2db      	uxtb	r3, r3
 800a1ea:	2b22      	cmp	r3, #34	; 0x22
 800a1ec:	f040 80ab 	bne.w	800a346 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	689b      	ldr	r3, [r3, #8]
 800a1f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1f8:	d117      	bne.n	800a22a <UART_Receive_IT+0x50>
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	691b      	ldr	r3, [r3, #16]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d113      	bne.n	800a22a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a202:	2300      	movs	r3, #0
 800a204:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a20a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	685b      	ldr	r3, [r3, #4]
 800a212:	b29b      	uxth	r3, r3
 800a214:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a218:	b29a      	uxth	r2, r3
 800a21a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a21c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a222:	1c9a      	adds	r2, r3, #2
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	629a      	str	r2, [r3, #40]	; 0x28
 800a228:	e026      	b.n	800a278 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a22e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a230:	2300      	movs	r3, #0
 800a232:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	689b      	ldr	r3, [r3, #8]
 800a238:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a23c:	d007      	beq.n	800a24e <UART_Receive_IT+0x74>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	689b      	ldr	r3, [r3, #8]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d10a      	bne.n	800a25c <UART_Receive_IT+0x82>
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	691b      	ldr	r3, [r3, #16]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d106      	bne.n	800a25c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	685b      	ldr	r3, [r3, #4]
 800a254:	b2da      	uxtb	r2, r3
 800a256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a258:	701a      	strb	r2, [r3, #0]
 800a25a:	e008      	b.n	800a26e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	685b      	ldr	r3, [r3, #4]
 800a262:	b2db      	uxtb	r3, r3
 800a264:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a268:	b2da      	uxtb	r2, r3
 800a26a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a26c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a272:	1c5a      	adds	r2, r3, #1
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a27c:	b29b      	uxth	r3, r3
 800a27e:	3b01      	subs	r3, #1
 800a280:	b29b      	uxth	r3, r3
 800a282:	687a      	ldr	r2, [r7, #4]
 800a284:	4619      	mov	r1, r3
 800a286:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d15a      	bne.n	800a342 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	68da      	ldr	r2, [r3, #12]
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	f022 0220 	bic.w	r2, r2, #32
 800a29a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	68da      	ldr	r2, [r3, #12]
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a2aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	695a      	ldr	r2, [r3, #20]
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f022 0201 	bic.w	r2, r2, #1
 800a2ba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2220      	movs	r2, #32
 800a2c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2c8:	2b01      	cmp	r3, #1
 800a2ca:	d135      	bne.n	800a338 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	330c      	adds	r3, #12
 800a2d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	e853 3f00 	ldrex	r3, [r3]
 800a2e0:	613b      	str	r3, [r7, #16]
   return(result);
 800a2e2:	693b      	ldr	r3, [r7, #16]
 800a2e4:	f023 0310 	bic.w	r3, r3, #16
 800a2e8:	627b      	str	r3, [r7, #36]	; 0x24
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	330c      	adds	r3, #12
 800a2f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2f2:	623a      	str	r2, [r7, #32]
 800a2f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2f6:	69f9      	ldr	r1, [r7, #28]
 800a2f8:	6a3a      	ldr	r2, [r7, #32]
 800a2fa:	e841 2300 	strex	r3, r2, [r1]
 800a2fe:	61bb      	str	r3, [r7, #24]
   return(result);
 800a300:	69bb      	ldr	r3, [r7, #24]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d1e5      	bne.n	800a2d2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	f003 0310 	and.w	r3, r3, #16
 800a310:	2b10      	cmp	r3, #16
 800a312:	d10a      	bne.n	800a32a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a314:	2300      	movs	r3, #0
 800a316:	60fb      	str	r3, [r7, #12]
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	60fb      	str	r3, [r7, #12]
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	685b      	ldr	r3, [r3, #4]
 800a326:	60fb      	str	r3, [r7, #12]
 800a328:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a32e:	4619      	mov	r1, r3
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	f7ff fe2d 	bl	8009f90 <HAL_UARTEx_RxEventCallback>
 800a336:	e002      	b.n	800a33e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f7ff fe15 	bl	8009f68 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a33e:	2300      	movs	r3, #0
 800a340:	e002      	b.n	800a348 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a342:	2300      	movs	r3, #0
 800a344:	e000      	b.n	800a348 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a346:	2302      	movs	r3, #2
  }
}
 800a348:	4618      	mov	r0, r3
 800a34a:	3730      	adds	r7, #48	; 0x30
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}

0800a350 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a354:	b09f      	sub	sp, #124	; 0x7c
 800a356:	af00      	add	r7, sp, #0
 800a358:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a35a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	691b      	ldr	r3, [r3, #16]
 800a360:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a364:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a366:	68d9      	ldr	r1, [r3, #12]
 800a368:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a36a:	681a      	ldr	r2, [r3, #0]
 800a36c:	ea40 0301 	orr.w	r3, r0, r1
 800a370:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a372:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a374:	689a      	ldr	r2, [r3, #8]
 800a376:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a378:	691b      	ldr	r3, [r3, #16]
 800a37a:	431a      	orrs	r2, r3
 800a37c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a37e:	695b      	ldr	r3, [r3, #20]
 800a380:	431a      	orrs	r2, r3
 800a382:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a384:	69db      	ldr	r3, [r3, #28]
 800a386:	4313      	orrs	r3, r2
 800a388:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800a38a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	68db      	ldr	r3, [r3, #12]
 800a390:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a394:	f021 010c 	bic.w	r1, r1, #12
 800a398:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a39a:	681a      	ldr	r2, [r3, #0]
 800a39c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a39e:	430b      	orrs	r3, r1
 800a3a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a3a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	695b      	ldr	r3, [r3, #20]
 800a3a8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a3ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3ae:	6999      	ldr	r1, [r3, #24]
 800a3b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3b2:	681a      	ldr	r2, [r3, #0]
 800a3b4:	ea40 0301 	orr.w	r3, r0, r1
 800a3b8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a3ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3bc:	681a      	ldr	r2, [r3, #0]
 800a3be:	4bc5      	ldr	r3, [pc, #788]	; (800a6d4 <UART_SetConfig+0x384>)
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	d004      	beq.n	800a3ce <UART_SetConfig+0x7e>
 800a3c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3c6:	681a      	ldr	r2, [r3, #0]
 800a3c8:	4bc3      	ldr	r3, [pc, #780]	; (800a6d8 <UART_SetConfig+0x388>)
 800a3ca:	429a      	cmp	r2, r3
 800a3cc:	d103      	bne.n	800a3d6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a3ce:	f7fe fb49 	bl	8008a64 <HAL_RCC_GetPCLK2Freq>
 800a3d2:	6778      	str	r0, [r7, #116]	; 0x74
 800a3d4:	e002      	b.n	800a3dc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a3d6:	f7fe fb31 	bl	8008a3c <HAL_RCC_GetPCLK1Freq>
 800a3da:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a3dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3de:	69db      	ldr	r3, [r3, #28]
 800a3e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a3e4:	f040 80b6 	bne.w	800a554 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a3e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a3ea:	461c      	mov	r4, r3
 800a3ec:	f04f 0500 	mov.w	r5, #0
 800a3f0:	4622      	mov	r2, r4
 800a3f2:	462b      	mov	r3, r5
 800a3f4:	1891      	adds	r1, r2, r2
 800a3f6:	6439      	str	r1, [r7, #64]	; 0x40
 800a3f8:	415b      	adcs	r3, r3
 800a3fa:	647b      	str	r3, [r7, #68]	; 0x44
 800a3fc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a400:	1912      	adds	r2, r2, r4
 800a402:	eb45 0303 	adc.w	r3, r5, r3
 800a406:	f04f 0000 	mov.w	r0, #0
 800a40a:	f04f 0100 	mov.w	r1, #0
 800a40e:	00d9      	lsls	r1, r3, #3
 800a410:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a414:	00d0      	lsls	r0, r2, #3
 800a416:	4602      	mov	r2, r0
 800a418:	460b      	mov	r3, r1
 800a41a:	1911      	adds	r1, r2, r4
 800a41c:	6639      	str	r1, [r7, #96]	; 0x60
 800a41e:	416b      	adcs	r3, r5
 800a420:	667b      	str	r3, [r7, #100]	; 0x64
 800a422:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a424:	685b      	ldr	r3, [r3, #4]
 800a426:	461a      	mov	r2, r3
 800a428:	f04f 0300 	mov.w	r3, #0
 800a42c:	1891      	adds	r1, r2, r2
 800a42e:	63b9      	str	r1, [r7, #56]	; 0x38
 800a430:	415b      	adcs	r3, r3
 800a432:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a434:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a438:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800a43c:	f7f6 fc2c 	bl	8000c98 <__aeabi_uldivmod>
 800a440:	4602      	mov	r2, r0
 800a442:	460b      	mov	r3, r1
 800a444:	4ba5      	ldr	r3, [pc, #660]	; (800a6dc <UART_SetConfig+0x38c>)
 800a446:	fba3 2302 	umull	r2, r3, r3, r2
 800a44a:	095b      	lsrs	r3, r3, #5
 800a44c:	011e      	lsls	r6, r3, #4
 800a44e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a450:	461c      	mov	r4, r3
 800a452:	f04f 0500 	mov.w	r5, #0
 800a456:	4622      	mov	r2, r4
 800a458:	462b      	mov	r3, r5
 800a45a:	1891      	adds	r1, r2, r2
 800a45c:	6339      	str	r1, [r7, #48]	; 0x30
 800a45e:	415b      	adcs	r3, r3
 800a460:	637b      	str	r3, [r7, #52]	; 0x34
 800a462:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a466:	1912      	adds	r2, r2, r4
 800a468:	eb45 0303 	adc.w	r3, r5, r3
 800a46c:	f04f 0000 	mov.w	r0, #0
 800a470:	f04f 0100 	mov.w	r1, #0
 800a474:	00d9      	lsls	r1, r3, #3
 800a476:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a47a:	00d0      	lsls	r0, r2, #3
 800a47c:	4602      	mov	r2, r0
 800a47e:	460b      	mov	r3, r1
 800a480:	1911      	adds	r1, r2, r4
 800a482:	65b9      	str	r1, [r7, #88]	; 0x58
 800a484:	416b      	adcs	r3, r5
 800a486:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a48a:	685b      	ldr	r3, [r3, #4]
 800a48c:	461a      	mov	r2, r3
 800a48e:	f04f 0300 	mov.w	r3, #0
 800a492:	1891      	adds	r1, r2, r2
 800a494:	62b9      	str	r1, [r7, #40]	; 0x28
 800a496:	415b      	adcs	r3, r3
 800a498:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a49a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a49e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800a4a2:	f7f6 fbf9 	bl	8000c98 <__aeabi_uldivmod>
 800a4a6:	4602      	mov	r2, r0
 800a4a8:	460b      	mov	r3, r1
 800a4aa:	4b8c      	ldr	r3, [pc, #560]	; (800a6dc <UART_SetConfig+0x38c>)
 800a4ac:	fba3 1302 	umull	r1, r3, r3, r2
 800a4b0:	095b      	lsrs	r3, r3, #5
 800a4b2:	2164      	movs	r1, #100	; 0x64
 800a4b4:	fb01 f303 	mul.w	r3, r1, r3
 800a4b8:	1ad3      	subs	r3, r2, r3
 800a4ba:	00db      	lsls	r3, r3, #3
 800a4bc:	3332      	adds	r3, #50	; 0x32
 800a4be:	4a87      	ldr	r2, [pc, #540]	; (800a6dc <UART_SetConfig+0x38c>)
 800a4c0:	fba2 2303 	umull	r2, r3, r2, r3
 800a4c4:	095b      	lsrs	r3, r3, #5
 800a4c6:	005b      	lsls	r3, r3, #1
 800a4c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a4cc:	441e      	add	r6, r3
 800a4ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f04f 0100 	mov.w	r1, #0
 800a4d6:	4602      	mov	r2, r0
 800a4d8:	460b      	mov	r3, r1
 800a4da:	1894      	adds	r4, r2, r2
 800a4dc:	623c      	str	r4, [r7, #32]
 800a4de:	415b      	adcs	r3, r3
 800a4e0:	627b      	str	r3, [r7, #36]	; 0x24
 800a4e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a4e6:	1812      	adds	r2, r2, r0
 800a4e8:	eb41 0303 	adc.w	r3, r1, r3
 800a4ec:	f04f 0400 	mov.w	r4, #0
 800a4f0:	f04f 0500 	mov.w	r5, #0
 800a4f4:	00dd      	lsls	r5, r3, #3
 800a4f6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a4fa:	00d4      	lsls	r4, r2, #3
 800a4fc:	4622      	mov	r2, r4
 800a4fe:	462b      	mov	r3, r5
 800a500:	1814      	adds	r4, r2, r0
 800a502:	653c      	str	r4, [r7, #80]	; 0x50
 800a504:	414b      	adcs	r3, r1
 800a506:	657b      	str	r3, [r7, #84]	; 0x54
 800a508:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a50a:	685b      	ldr	r3, [r3, #4]
 800a50c:	461a      	mov	r2, r3
 800a50e:	f04f 0300 	mov.w	r3, #0
 800a512:	1891      	adds	r1, r2, r2
 800a514:	61b9      	str	r1, [r7, #24]
 800a516:	415b      	adcs	r3, r3
 800a518:	61fb      	str	r3, [r7, #28]
 800a51a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a51e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800a522:	f7f6 fbb9 	bl	8000c98 <__aeabi_uldivmod>
 800a526:	4602      	mov	r2, r0
 800a528:	460b      	mov	r3, r1
 800a52a:	4b6c      	ldr	r3, [pc, #432]	; (800a6dc <UART_SetConfig+0x38c>)
 800a52c:	fba3 1302 	umull	r1, r3, r3, r2
 800a530:	095b      	lsrs	r3, r3, #5
 800a532:	2164      	movs	r1, #100	; 0x64
 800a534:	fb01 f303 	mul.w	r3, r1, r3
 800a538:	1ad3      	subs	r3, r2, r3
 800a53a:	00db      	lsls	r3, r3, #3
 800a53c:	3332      	adds	r3, #50	; 0x32
 800a53e:	4a67      	ldr	r2, [pc, #412]	; (800a6dc <UART_SetConfig+0x38c>)
 800a540:	fba2 2303 	umull	r2, r3, r2, r3
 800a544:	095b      	lsrs	r3, r3, #5
 800a546:	f003 0207 	and.w	r2, r3, #7
 800a54a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	4432      	add	r2, r6
 800a550:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a552:	e0b9      	b.n	800a6c8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a554:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a556:	461c      	mov	r4, r3
 800a558:	f04f 0500 	mov.w	r5, #0
 800a55c:	4622      	mov	r2, r4
 800a55e:	462b      	mov	r3, r5
 800a560:	1891      	adds	r1, r2, r2
 800a562:	6139      	str	r1, [r7, #16]
 800a564:	415b      	adcs	r3, r3
 800a566:	617b      	str	r3, [r7, #20]
 800a568:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a56c:	1912      	adds	r2, r2, r4
 800a56e:	eb45 0303 	adc.w	r3, r5, r3
 800a572:	f04f 0000 	mov.w	r0, #0
 800a576:	f04f 0100 	mov.w	r1, #0
 800a57a:	00d9      	lsls	r1, r3, #3
 800a57c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a580:	00d0      	lsls	r0, r2, #3
 800a582:	4602      	mov	r2, r0
 800a584:	460b      	mov	r3, r1
 800a586:	eb12 0804 	adds.w	r8, r2, r4
 800a58a:	eb43 0905 	adc.w	r9, r3, r5
 800a58e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a590:	685b      	ldr	r3, [r3, #4]
 800a592:	4618      	mov	r0, r3
 800a594:	f04f 0100 	mov.w	r1, #0
 800a598:	f04f 0200 	mov.w	r2, #0
 800a59c:	f04f 0300 	mov.w	r3, #0
 800a5a0:	008b      	lsls	r3, r1, #2
 800a5a2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a5a6:	0082      	lsls	r2, r0, #2
 800a5a8:	4640      	mov	r0, r8
 800a5aa:	4649      	mov	r1, r9
 800a5ac:	f7f6 fb74 	bl	8000c98 <__aeabi_uldivmod>
 800a5b0:	4602      	mov	r2, r0
 800a5b2:	460b      	mov	r3, r1
 800a5b4:	4b49      	ldr	r3, [pc, #292]	; (800a6dc <UART_SetConfig+0x38c>)
 800a5b6:	fba3 2302 	umull	r2, r3, r3, r2
 800a5ba:	095b      	lsrs	r3, r3, #5
 800a5bc:	011e      	lsls	r6, r3, #4
 800a5be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f04f 0100 	mov.w	r1, #0
 800a5c6:	4602      	mov	r2, r0
 800a5c8:	460b      	mov	r3, r1
 800a5ca:	1894      	adds	r4, r2, r2
 800a5cc:	60bc      	str	r4, [r7, #8]
 800a5ce:	415b      	adcs	r3, r3
 800a5d0:	60fb      	str	r3, [r7, #12]
 800a5d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a5d6:	1812      	adds	r2, r2, r0
 800a5d8:	eb41 0303 	adc.w	r3, r1, r3
 800a5dc:	f04f 0400 	mov.w	r4, #0
 800a5e0:	f04f 0500 	mov.w	r5, #0
 800a5e4:	00dd      	lsls	r5, r3, #3
 800a5e6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a5ea:	00d4      	lsls	r4, r2, #3
 800a5ec:	4622      	mov	r2, r4
 800a5ee:	462b      	mov	r3, r5
 800a5f0:	1814      	adds	r4, r2, r0
 800a5f2:	64bc      	str	r4, [r7, #72]	; 0x48
 800a5f4:	414b      	adcs	r3, r1
 800a5f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a5f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5fa:	685b      	ldr	r3, [r3, #4]
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f04f 0100 	mov.w	r1, #0
 800a602:	f04f 0200 	mov.w	r2, #0
 800a606:	f04f 0300 	mov.w	r3, #0
 800a60a:	008b      	lsls	r3, r1, #2
 800a60c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a610:	0082      	lsls	r2, r0, #2
 800a612:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800a616:	f7f6 fb3f 	bl	8000c98 <__aeabi_uldivmod>
 800a61a:	4602      	mov	r2, r0
 800a61c:	460b      	mov	r3, r1
 800a61e:	4b2f      	ldr	r3, [pc, #188]	; (800a6dc <UART_SetConfig+0x38c>)
 800a620:	fba3 1302 	umull	r1, r3, r3, r2
 800a624:	095b      	lsrs	r3, r3, #5
 800a626:	2164      	movs	r1, #100	; 0x64
 800a628:	fb01 f303 	mul.w	r3, r1, r3
 800a62c:	1ad3      	subs	r3, r2, r3
 800a62e:	011b      	lsls	r3, r3, #4
 800a630:	3332      	adds	r3, #50	; 0x32
 800a632:	4a2a      	ldr	r2, [pc, #168]	; (800a6dc <UART_SetConfig+0x38c>)
 800a634:	fba2 2303 	umull	r2, r3, r2, r3
 800a638:	095b      	lsrs	r3, r3, #5
 800a63a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a63e:	441e      	add	r6, r3
 800a640:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a642:	4618      	mov	r0, r3
 800a644:	f04f 0100 	mov.w	r1, #0
 800a648:	4602      	mov	r2, r0
 800a64a:	460b      	mov	r3, r1
 800a64c:	1894      	adds	r4, r2, r2
 800a64e:	603c      	str	r4, [r7, #0]
 800a650:	415b      	adcs	r3, r3
 800a652:	607b      	str	r3, [r7, #4]
 800a654:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a658:	1812      	adds	r2, r2, r0
 800a65a:	eb41 0303 	adc.w	r3, r1, r3
 800a65e:	f04f 0400 	mov.w	r4, #0
 800a662:	f04f 0500 	mov.w	r5, #0
 800a666:	00dd      	lsls	r5, r3, #3
 800a668:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a66c:	00d4      	lsls	r4, r2, #3
 800a66e:	4622      	mov	r2, r4
 800a670:	462b      	mov	r3, r5
 800a672:	eb12 0a00 	adds.w	sl, r2, r0
 800a676:	eb43 0b01 	adc.w	fp, r3, r1
 800a67a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a67c:	685b      	ldr	r3, [r3, #4]
 800a67e:	4618      	mov	r0, r3
 800a680:	f04f 0100 	mov.w	r1, #0
 800a684:	f04f 0200 	mov.w	r2, #0
 800a688:	f04f 0300 	mov.w	r3, #0
 800a68c:	008b      	lsls	r3, r1, #2
 800a68e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a692:	0082      	lsls	r2, r0, #2
 800a694:	4650      	mov	r0, sl
 800a696:	4659      	mov	r1, fp
 800a698:	f7f6 fafe 	bl	8000c98 <__aeabi_uldivmod>
 800a69c:	4602      	mov	r2, r0
 800a69e:	460b      	mov	r3, r1
 800a6a0:	4b0e      	ldr	r3, [pc, #56]	; (800a6dc <UART_SetConfig+0x38c>)
 800a6a2:	fba3 1302 	umull	r1, r3, r3, r2
 800a6a6:	095b      	lsrs	r3, r3, #5
 800a6a8:	2164      	movs	r1, #100	; 0x64
 800a6aa:	fb01 f303 	mul.w	r3, r1, r3
 800a6ae:	1ad3      	subs	r3, r2, r3
 800a6b0:	011b      	lsls	r3, r3, #4
 800a6b2:	3332      	adds	r3, #50	; 0x32
 800a6b4:	4a09      	ldr	r2, [pc, #36]	; (800a6dc <UART_SetConfig+0x38c>)
 800a6b6:	fba2 2303 	umull	r2, r3, r2, r3
 800a6ba:	095b      	lsrs	r3, r3, #5
 800a6bc:	f003 020f 	and.w	r2, r3, #15
 800a6c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	4432      	add	r2, r6
 800a6c6:	609a      	str	r2, [r3, #8]
}
 800a6c8:	bf00      	nop
 800a6ca:	377c      	adds	r7, #124	; 0x7c
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6d2:	bf00      	nop
 800a6d4:	40011000 	.word	0x40011000
 800a6d8:	40011400 	.word	0x40011400
 800a6dc:	51eb851f 	.word	0x51eb851f

0800a6e0 <__errno>:
 800a6e0:	4b01      	ldr	r3, [pc, #4]	; (800a6e8 <__errno+0x8>)
 800a6e2:	6818      	ldr	r0, [r3, #0]
 800a6e4:	4770      	bx	lr
 800a6e6:	bf00      	nop
 800a6e8:	2000003c 	.word	0x2000003c

0800a6ec <__libc_init_array>:
 800a6ec:	b570      	push	{r4, r5, r6, lr}
 800a6ee:	4d0d      	ldr	r5, [pc, #52]	; (800a724 <__libc_init_array+0x38>)
 800a6f0:	4c0d      	ldr	r4, [pc, #52]	; (800a728 <__libc_init_array+0x3c>)
 800a6f2:	1b64      	subs	r4, r4, r5
 800a6f4:	10a4      	asrs	r4, r4, #2
 800a6f6:	2600      	movs	r6, #0
 800a6f8:	42a6      	cmp	r6, r4
 800a6fa:	d109      	bne.n	800a710 <__libc_init_array+0x24>
 800a6fc:	4d0b      	ldr	r5, [pc, #44]	; (800a72c <__libc_init_array+0x40>)
 800a6fe:	4c0c      	ldr	r4, [pc, #48]	; (800a730 <__libc_init_array+0x44>)
 800a700:	f005 f880 	bl	800f804 <_init>
 800a704:	1b64      	subs	r4, r4, r5
 800a706:	10a4      	asrs	r4, r4, #2
 800a708:	2600      	movs	r6, #0
 800a70a:	42a6      	cmp	r6, r4
 800a70c:	d105      	bne.n	800a71a <__libc_init_array+0x2e>
 800a70e:	bd70      	pop	{r4, r5, r6, pc}
 800a710:	f855 3b04 	ldr.w	r3, [r5], #4
 800a714:	4798      	blx	r3
 800a716:	3601      	adds	r6, #1
 800a718:	e7ee      	b.n	800a6f8 <__libc_init_array+0xc>
 800a71a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a71e:	4798      	blx	r3
 800a720:	3601      	adds	r6, #1
 800a722:	e7f2      	b.n	800a70a <__libc_init_array+0x1e>
 800a724:	0801227c 	.word	0x0801227c
 800a728:	0801227c 	.word	0x0801227c
 800a72c:	0801227c 	.word	0x0801227c
 800a730:	08012280 	.word	0x08012280

0800a734 <malloc>:
 800a734:	4b02      	ldr	r3, [pc, #8]	; (800a740 <malloc+0xc>)
 800a736:	4601      	mov	r1, r0
 800a738:	6818      	ldr	r0, [r3, #0]
 800a73a:	f000 b85b 	b.w	800a7f4 <_malloc_r>
 800a73e:	bf00      	nop
 800a740:	2000003c 	.word	0x2000003c

0800a744 <memset>:
 800a744:	4402      	add	r2, r0
 800a746:	4603      	mov	r3, r0
 800a748:	4293      	cmp	r3, r2
 800a74a:	d100      	bne.n	800a74e <memset+0xa>
 800a74c:	4770      	bx	lr
 800a74e:	f803 1b01 	strb.w	r1, [r3], #1
 800a752:	e7f9      	b.n	800a748 <memset+0x4>

0800a754 <_free_r>:
 800a754:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a756:	2900      	cmp	r1, #0
 800a758:	d048      	beq.n	800a7ec <_free_r+0x98>
 800a75a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a75e:	9001      	str	r0, [sp, #4]
 800a760:	2b00      	cmp	r3, #0
 800a762:	f1a1 0404 	sub.w	r4, r1, #4
 800a766:	bfb8      	it	lt
 800a768:	18e4      	addlt	r4, r4, r3
 800a76a:	f003 f8c3 	bl	800d8f4 <__malloc_lock>
 800a76e:	4a20      	ldr	r2, [pc, #128]	; (800a7f0 <_free_r+0x9c>)
 800a770:	9801      	ldr	r0, [sp, #4]
 800a772:	6813      	ldr	r3, [r2, #0]
 800a774:	4615      	mov	r5, r2
 800a776:	b933      	cbnz	r3, 800a786 <_free_r+0x32>
 800a778:	6063      	str	r3, [r4, #4]
 800a77a:	6014      	str	r4, [r2, #0]
 800a77c:	b003      	add	sp, #12
 800a77e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a782:	f003 b8bd 	b.w	800d900 <__malloc_unlock>
 800a786:	42a3      	cmp	r3, r4
 800a788:	d90b      	bls.n	800a7a2 <_free_r+0x4e>
 800a78a:	6821      	ldr	r1, [r4, #0]
 800a78c:	1862      	adds	r2, r4, r1
 800a78e:	4293      	cmp	r3, r2
 800a790:	bf04      	itt	eq
 800a792:	681a      	ldreq	r2, [r3, #0]
 800a794:	685b      	ldreq	r3, [r3, #4]
 800a796:	6063      	str	r3, [r4, #4]
 800a798:	bf04      	itt	eq
 800a79a:	1852      	addeq	r2, r2, r1
 800a79c:	6022      	streq	r2, [r4, #0]
 800a79e:	602c      	str	r4, [r5, #0]
 800a7a0:	e7ec      	b.n	800a77c <_free_r+0x28>
 800a7a2:	461a      	mov	r2, r3
 800a7a4:	685b      	ldr	r3, [r3, #4]
 800a7a6:	b10b      	cbz	r3, 800a7ac <_free_r+0x58>
 800a7a8:	42a3      	cmp	r3, r4
 800a7aa:	d9fa      	bls.n	800a7a2 <_free_r+0x4e>
 800a7ac:	6811      	ldr	r1, [r2, #0]
 800a7ae:	1855      	adds	r5, r2, r1
 800a7b0:	42a5      	cmp	r5, r4
 800a7b2:	d10b      	bne.n	800a7cc <_free_r+0x78>
 800a7b4:	6824      	ldr	r4, [r4, #0]
 800a7b6:	4421      	add	r1, r4
 800a7b8:	1854      	adds	r4, r2, r1
 800a7ba:	42a3      	cmp	r3, r4
 800a7bc:	6011      	str	r1, [r2, #0]
 800a7be:	d1dd      	bne.n	800a77c <_free_r+0x28>
 800a7c0:	681c      	ldr	r4, [r3, #0]
 800a7c2:	685b      	ldr	r3, [r3, #4]
 800a7c4:	6053      	str	r3, [r2, #4]
 800a7c6:	4421      	add	r1, r4
 800a7c8:	6011      	str	r1, [r2, #0]
 800a7ca:	e7d7      	b.n	800a77c <_free_r+0x28>
 800a7cc:	d902      	bls.n	800a7d4 <_free_r+0x80>
 800a7ce:	230c      	movs	r3, #12
 800a7d0:	6003      	str	r3, [r0, #0]
 800a7d2:	e7d3      	b.n	800a77c <_free_r+0x28>
 800a7d4:	6825      	ldr	r5, [r4, #0]
 800a7d6:	1961      	adds	r1, r4, r5
 800a7d8:	428b      	cmp	r3, r1
 800a7da:	bf04      	itt	eq
 800a7dc:	6819      	ldreq	r1, [r3, #0]
 800a7de:	685b      	ldreq	r3, [r3, #4]
 800a7e0:	6063      	str	r3, [r4, #4]
 800a7e2:	bf04      	itt	eq
 800a7e4:	1949      	addeq	r1, r1, r5
 800a7e6:	6021      	streq	r1, [r4, #0]
 800a7e8:	6054      	str	r4, [r2, #4]
 800a7ea:	e7c7      	b.n	800a77c <_free_r+0x28>
 800a7ec:	b003      	add	sp, #12
 800a7ee:	bd30      	pop	{r4, r5, pc}
 800a7f0:	20001998 	.word	0x20001998

0800a7f4 <_malloc_r>:
 800a7f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7f6:	1ccd      	adds	r5, r1, #3
 800a7f8:	f025 0503 	bic.w	r5, r5, #3
 800a7fc:	3508      	adds	r5, #8
 800a7fe:	2d0c      	cmp	r5, #12
 800a800:	bf38      	it	cc
 800a802:	250c      	movcc	r5, #12
 800a804:	2d00      	cmp	r5, #0
 800a806:	4606      	mov	r6, r0
 800a808:	db01      	blt.n	800a80e <_malloc_r+0x1a>
 800a80a:	42a9      	cmp	r1, r5
 800a80c:	d903      	bls.n	800a816 <_malloc_r+0x22>
 800a80e:	230c      	movs	r3, #12
 800a810:	6033      	str	r3, [r6, #0]
 800a812:	2000      	movs	r0, #0
 800a814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a816:	f003 f86d 	bl	800d8f4 <__malloc_lock>
 800a81a:	4921      	ldr	r1, [pc, #132]	; (800a8a0 <_malloc_r+0xac>)
 800a81c:	680a      	ldr	r2, [r1, #0]
 800a81e:	4614      	mov	r4, r2
 800a820:	b99c      	cbnz	r4, 800a84a <_malloc_r+0x56>
 800a822:	4f20      	ldr	r7, [pc, #128]	; (800a8a4 <_malloc_r+0xb0>)
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	b923      	cbnz	r3, 800a832 <_malloc_r+0x3e>
 800a828:	4621      	mov	r1, r4
 800a82a:	4630      	mov	r0, r6
 800a82c:	f000 feb6 	bl	800b59c <_sbrk_r>
 800a830:	6038      	str	r0, [r7, #0]
 800a832:	4629      	mov	r1, r5
 800a834:	4630      	mov	r0, r6
 800a836:	f000 feb1 	bl	800b59c <_sbrk_r>
 800a83a:	1c43      	adds	r3, r0, #1
 800a83c:	d123      	bne.n	800a886 <_malloc_r+0x92>
 800a83e:	230c      	movs	r3, #12
 800a840:	6033      	str	r3, [r6, #0]
 800a842:	4630      	mov	r0, r6
 800a844:	f003 f85c 	bl	800d900 <__malloc_unlock>
 800a848:	e7e3      	b.n	800a812 <_malloc_r+0x1e>
 800a84a:	6823      	ldr	r3, [r4, #0]
 800a84c:	1b5b      	subs	r3, r3, r5
 800a84e:	d417      	bmi.n	800a880 <_malloc_r+0x8c>
 800a850:	2b0b      	cmp	r3, #11
 800a852:	d903      	bls.n	800a85c <_malloc_r+0x68>
 800a854:	6023      	str	r3, [r4, #0]
 800a856:	441c      	add	r4, r3
 800a858:	6025      	str	r5, [r4, #0]
 800a85a:	e004      	b.n	800a866 <_malloc_r+0x72>
 800a85c:	6863      	ldr	r3, [r4, #4]
 800a85e:	42a2      	cmp	r2, r4
 800a860:	bf0c      	ite	eq
 800a862:	600b      	streq	r3, [r1, #0]
 800a864:	6053      	strne	r3, [r2, #4]
 800a866:	4630      	mov	r0, r6
 800a868:	f003 f84a 	bl	800d900 <__malloc_unlock>
 800a86c:	f104 000b 	add.w	r0, r4, #11
 800a870:	1d23      	adds	r3, r4, #4
 800a872:	f020 0007 	bic.w	r0, r0, #7
 800a876:	1ac2      	subs	r2, r0, r3
 800a878:	d0cc      	beq.n	800a814 <_malloc_r+0x20>
 800a87a:	1a1b      	subs	r3, r3, r0
 800a87c:	50a3      	str	r3, [r4, r2]
 800a87e:	e7c9      	b.n	800a814 <_malloc_r+0x20>
 800a880:	4622      	mov	r2, r4
 800a882:	6864      	ldr	r4, [r4, #4]
 800a884:	e7cc      	b.n	800a820 <_malloc_r+0x2c>
 800a886:	1cc4      	adds	r4, r0, #3
 800a888:	f024 0403 	bic.w	r4, r4, #3
 800a88c:	42a0      	cmp	r0, r4
 800a88e:	d0e3      	beq.n	800a858 <_malloc_r+0x64>
 800a890:	1a21      	subs	r1, r4, r0
 800a892:	4630      	mov	r0, r6
 800a894:	f000 fe82 	bl	800b59c <_sbrk_r>
 800a898:	3001      	adds	r0, #1
 800a89a:	d1dd      	bne.n	800a858 <_malloc_r+0x64>
 800a89c:	e7cf      	b.n	800a83e <_malloc_r+0x4a>
 800a89e:	bf00      	nop
 800a8a0:	20001998 	.word	0x20001998
 800a8a4:	2000199c 	.word	0x2000199c

0800a8a8 <__cvt>:
 800a8a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a8ac:	ec55 4b10 	vmov	r4, r5, d0
 800a8b0:	2d00      	cmp	r5, #0
 800a8b2:	460e      	mov	r6, r1
 800a8b4:	4619      	mov	r1, r3
 800a8b6:	462b      	mov	r3, r5
 800a8b8:	bfbb      	ittet	lt
 800a8ba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a8be:	461d      	movlt	r5, r3
 800a8c0:	2300      	movge	r3, #0
 800a8c2:	232d      	movlt	r3, #45	; 0x2d
 800a8c4:	700b      	strb	r3, [r1, #0]
 800a8c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a8c8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a8cc:	4691      	mov	r9, r2
 800a8ce:	f023 0820 	bic.w	r8, r3, #32
 800a8d2:	bfbc      	itt	lt
 800a8d4:	4622      	movlt	r2, r4
 800a8d6:	4614      	movlt	r4, r2
 800a8d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a8dc:	d005      	beq.n	800a8ea <__cvt+0x42>
 800a8de:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a8e2:	d100      	bne.n	800a8e6 <__cvt+0x3e>
 800a8e4:	3601      	adds	r6, #1
 800a8e6:	2102      	movs	r1, #2
 800a8e8:	e000      	b.n	800a8ec <__cvt+0x44>
 800a8ea:	2103      	movs	r1, #3
 800a8ec:	ab03      	add	r3, sp, #12
 800a8ee:	9301      	str	r3, [sp, #4]
 800a8f0:	ab02      	add	r3, sp, #8
 800a8f2:	9300      	str	r3, [sp, #0]
 800a8f4:	ec45 4b10 	vmov	d0, r4, r5
 800a8f8:	4653      	mov	r3, sl
 800a8fa:	4632      	mov	r2, r6
 800a8fc:	f001 fe68 	bl	800c5d0 <_dtoa_r>
 800a900:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a904:	4607      	mov	r7, r0
 800a906:	d102      	bne.n	800a90e <__cvt+0x66>
 800a908:	f019 0f01 	tst.w	r9, #1
 800a90c:	d022      	beq.n	800a954 <__cvt+0xac>
 800a90e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a912:	eb07 0906 	add.w	r9, r7, r6
 800a916:	d110      	bne.n	800a93a <__cvt+0x92>
 800a918:	783b      	ldrb	r3, [r7, #0]
 800a91a:	2b30      	cmp	r3, #48	; 0x30
 800a91c:	d10a      	bne.n	800a934 <__cvt+0x8c>
 800a91e:	2200      	movs	r2, #0
 800a920:	2300      	movs	r3, #0
 800a922:	4620      	mov	r0, r4
 800a924:	4629      	mov	r1, r5
 800a926:	f7f6 f8d7 	bl	8000ad8 <__aeabi_dcmpeq>
 800a92a:	b918      	cbnz	r0, 800a934 <__cvt+0x8c>
 800a92c:	f1c6 0601 	rsb	r6, r6, #1
 800a930:	f8ca 6000 	str.w	r6, [sl]
 800a934:	f8da 3000 	ldr.w	r3, [sl]
 800a938:	4499      	add	r9, r3
 800a93a:	2200      	movs	r2, #0
 800a93c:	2300      	movs	r3, #0
 800a93e:	4620      	mov	r0, r4
 800a940:	4629      	mov	r1, r5
 800a942:	f7f6 f8c9 	bl	8000ad8 <__aeabi_dcmpeq>
 800a946:	b108      	cbz	r0, 800a94c <__cvt+0xa4>
 800a948:	f8cd 900c 	str.w	r9, [sp, #12]
 800a94c:	2230      	movs	r2, #48	; 0x30
 800a94e:	9b03      	ldr	r3, [sp, #12]
 800a950:	454b      	cmp	r3, r9
 800a952:	d307      	bcc.n	800a964 <__cvt+0xbc>
 800a954:	9b03      	ldr	r3, [sp, #12]
 800a956:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a958:	1bdb      	subs	r3, r3, r7
 800a95a:	4638      	mov	r0, r7
 800a95c:	6013      	str	r3, [r2, #0]
 800a95e:	b004      	add	sp, #16
 800a960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a964:	1c59      	adds	r1, r3, #1
 800a966:	9103      	str	r1, [sp, #12]
 800a968:	701a      	strb	r2, [r3, #0]
 800a96a:	e7f0      	b.n	800a94e <__cvt+0xa6>

0800a96c <__exponent>:
 800a96c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a96e:	4603      	mov	r3, r0
 800a970:	2900      	cmp	r1, #0
 800a972:	bfb8      	it	lt
 800a974:	4249      	neglt	r1, r1
 800a976:	f803 2b02 	strb.w	r2, [r3], #2
 800a97a:	bfb4      	ite	lt
 800a97c:	222d      	movlt	r2, #45	; 0x2d
 800a97e:	222b      	movge	r2, #43	; 0x2b
 800a980:	2909      	cmp	r1, #9
 800a982:	7042      	strb	r2, [r0, #1]
 800a984:	dd2a      	ble.n	800a9dc <__exponent+0x70>
 800a986:	f10d 0407 	add.w	r4, sp, #7
 800a98a:	46a4      	mov	ip, r4
 800a98c:	270a      	movs	r7, #10
 800a98e:	46a6      	mov	lr, r4
 800a990:	460a      	mov	r2, r1
 800a992:	fb91 f6f7 	sdiv	r6, r1, r7
 800a996:	fb07 1516 	mls	r5, r7, r6, r1
 800a99a:	3530      	adds	r5, #48	; 0x30
 800a99c:	2a63      	cmp	r2, #99	; 0x63
 800a99e:	f104 34ff 	add.w	r4, r4, #4294967295
 800a9a2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a9a6:	4631      	mov	r1, r6
 800a9a8:	dcf1      	bgt.n	800a98e <__exponent+0x22>
 800a9aa:	3130      	adds	r1, #48	; 0x30
 800a9ac:	f1ae 0502 	sub.w	r5, lr, #2
 800a9b0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a9b4:	1c44      	adds	r4, r0, #1
 800a9b6:	4629      	mov	r1, r5
 800a9b8:	4561      	cmp	r1, ip
 800a9ba:	d30a      	bcc.n	800a9d2 <__exponent+0x66>
 800a9bc:	f10d 0209 	add.w	r2, sp, #9
 800a9c0:	eba2 020e 	sub.w	r2, r2, lr
 800a9c4:	4565      	cmp	r5, ip
 800a9c6:	bf88      	it	hi
 800a9c8:	2200      	movhi	r2, #0
 800a9ca:	4413      	add	r3, r2
 800a9cc:	1a18      	subs	r0, r3, r0
 800a9ce:	b003      	add	sp, #12
 800a9d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a9d6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a9da:	e7ed      	b.n	800a9b8 <__exponent+0x4c>
 800a9dc:	2330      	movs	r3, #48	; 0x30
 800a9de:	3130      	adds	r1, #48	; 0x30
 800a9e0:	7083      	strb	r3, [r0, #2]
 800a9e2:	70c1      	strb	r1, [r0, #3]
 800a9e4:	1d03      	adds	r3, r0, #4
 800a9e6:	e7f1      	b.n	800a9cc <__exponent+0x60>

0800a9e8 <_printf_float>:
 800a9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9ec:	ed2d 8b02 	vpush	{d8}
 800a9f0:	b08d      	sub	sp, #52	; 0x34
 800a9f2:	460c      	mov	r4, r1
 800a9f4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a9f8:	4616      	mov	r6, r2
 800a9fa:	461f      	mov	r7, r3
 800a9fc:	4605      	mov	r5, r0
 800a9fe:	f002 ff43 	bl	800d888 <_localeconv_r>
 800aa02:	f8d0 a000 	ldr.w	sl, [r0]
 800aa06:	4650      	mov	r0, sl
 800aa08:	f7f5 fbea 	bl	80001e0 <strlen>
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	930a      	str	r3, [sp, #40]	; 0x28
 800aa10:	6823      	ldr	r3, [r4, #0]
 800aa12:	9305      	str	r3, [sp, #20]
 800aa14:	f8d8 3000 	ldr.w	r3, [r8]
 800aa18:	f894 b018 	ldrb.w	fp, [r4, #24]
 800aa1c:	3307      	adds	r3, #7
 800aa1e:	f023 0307 	bic.w	r3, r3, #7
 800aa22:	f103 0208 	add.w	r2, r3, #8
 800aa26:	f8c8 2000 	str.w	r2, [r8]
 800aa2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa2e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800aa32:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800aa36:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800aa3a:	9307      	str	r3, [sp, #28]
 800aa3c:	f8cd 8018 	str.w	r8, [sp, #24]
 800aa40:	ee08 0a10 	vmov	s16, r0
 800aa44:	4b9f      	ldr	r3, [pc, #636]	; (800acc4 <_printf_float+0x2dc>)
 800aa46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa4a:	f04f 32ff 	mov.w	r2, #4294967295
 800aa4e:	f7f6 f875 	bl	8000b3c <__aeabi_dcmpun>
 800aa52:	bb88      	cbnz	r0, 800aab8 <_printf_float+0xd0>
 800aa54:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa58:	4b9a      	ldr	r3, [pc, #616]	; (800acc4 <_printf_float+0x2dc>)
 800aa5a:	f04f 32ff 	mov.w	r2, #4294967295
 800aa5e:	f7f6 f84f 	bl	8000b00 <__aeabi_dcmple>
 800aa62:	bb48      	cbnz	r0, 800aab8 <_printf_float+0xd0>
 800aa64:	2200      	movs	r2, #0
 800aa66:	2300      	movs	r3, #0
 800aa68:	4640      	mov	r0, r8
 800aa6a:	4649      	mov	r1, r9
 800aa6c:	f7f6 f83e 	bl	8000aec <__aeabi_dcmplt>
 800aa70:	b110      	cbz	r0, 800aa78 <_printf_float+0x90>
 800aa72:	232d      	movs	r3, #45	; 0x2d
 800aa74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa78:	4b93      	ldr	r3, [pc, #588]	; (800acc8 <_printf_float+0x2e0>)
 800aa7a:	4894      	ldr	r0, [pc, #592]	; (800accc <_printf_float+0x2e4>)
 800aa7c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800aa80:	bf94      	ite	ls
 800aa82:	4698      	movls	r8, r3
 800aa84:	4680      	movhi	r8, r0
 800aa86:	2303      	movs	r3, #3
 800aa88:	6123      	str	r3, [r4, #16]
 800aa8a:	9b05      	ldr	r3, [sp, #20]
 800aa8c:	f023 0204 	bic.w	r2, r3, #4
 800aa90:	6022      	str	r2, [r4, #0]
 800aa92:	f04f 0900 	mov.w	r9, #0
 800aa96:	9700      	str	r7, [sp, #0]
 800aa98:	4633      	mov	r3, r6
 800aa9a:	aa0b      	add	r2, sp, #44	; 0x2c
 800aa9c:	4621      	mov	r1, r4
 800aa9e:	4628      	mov	r0, r5
 800aaa0:	f000 f9d8 	bl	800ae54 <_printf_common>
 800aaa4:	3001      	adds	r0, #1
 800aaa6:	f040 8090 	bne.w	800abca <_printf_float+0x1e2>
 800aaaa:	f04f 30ff 	mov.w	r0, #4294967295
 800aaae:	b00d      	add	sp, #52	; 0x34
 800aab0:	ecbd 8b02 	vpop	{d8}
 800aab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aab8:	4642      	mov	r2, r8
 800aaba:	464b      	mov	r3, r9
 800aabc:	4640      	mov	r0, r8
 800aabe:	4649      	mov	r1, r9
 800aac0:	f7f6 f83c 	bl	8000b3c <__aeabi_dcmpun>
 800aac4:	b140      	cbz	r0, 800aad8 <_printf_float+0xf0>
 800aac6:	464b      	mov	r3, r9
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	bfbc      	itt	lt
 800aacc:	232d      	movlt	r3, #45	; 0x2d
 800aace:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800aad2:	487f      	ldr	r0, [pc, #508]	; (800acd0 <_printf_float+0x2e8>)
 800aad4:	4b7f      	ldr	r3, [pc, #508]	; (800acd4 <_printf_float+0x2ec>)
 800aad6:	e7d1      	b.n	800aa7c <_printf_float+0x94>
 800aad8:	6863      	ldr	r3, [r4, #4]
 800aada:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800aade:	9206      	str	r2, [sp, #24]
 800aae0:	1c5a      	adds	r2, r3, #1
 800aae2:	d13f      	bne.n	800ab64 <_printf_float+0x17c>
 800aae4:	2306      	movs	r3, #6
 800aae6:	6063      	str	r3, [r4, #4]
 800aae8:	9b05      	ldr	r3, [sp, #20]
 800aaea:	6861      	ldr	r1, [r4, #4]
 800aaec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	9303      	str	r3, [sp, #12]
 800aaf4:	ab0a      	add	r3, sp, #40	; 0x28
 800aaf6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800aafa:	ab09      	add	r3, sp, #36	; 0x24
 800aafc:	ec49 8b10 	vmov	d0, r8, r9
 800ab00:	9300      	str	r3, [sp, #0]
 800ab02:	6022      	str	r2, [r4, #0]
 800ab04:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ab08:	4628      	mov	r0, r5
 800ab0a:	f7ff fecd 	bl	800a8a8 <__cvt>
 800ab0e:	9b06      	ldr	r3, [sp, #24]
 800ab10:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ab12:	2b47      	cmp	r3, #71	; 0x47
 800ab14:	4680      	mov	r8, r0
 800ab16:	d108      	bne.n	800ab2a <_printf_float+0x142>
 800ab18:	1cc8      	adds	r0, r1, #3
 800ab1a:	db02      	blt.n	800ab22 <_printf_float+0x13a>
 800ab1c:	6863      	ldr	r3, [r4, #4]
 800ab1e:	4299      	cmp	r1, r3
 800ab20:	dd41      	ble.n	800aba6 <_printf_float+0x1be>
 800ab22:	f1ab 0b02 	sub.w	fp, fp, #2
 800ab26:	fa5f fb8b 	uxtb.w	fp, fp
 800ab2a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ab2e:	d820      	bhi.n	800ab72 <_printf_float+0x18a>
 800ab30:	3901      	subs	r1, #1
 800ab32:	465a      	mov	r2, fp
 800ab34:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ab38:	9109      	str	r1, [sp, #36]	; 0x24
 800ab3a:	f7ff ff17 	bl	800a96c <__exponent>
 800ab3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab40:	1813      	adds	r3, r2, r0
 800ab42:	2a01      	cmp	r2, #1
 800ab44:	4681      	mov	r9, r0
 800ab46:	6123      	str	r3, [r4, #16]
 800ab48:	dc02      	bgt.n	800ab50 <_printf_float+0x168>
 800ab4a:	6822      	ldr	r2, [r4, #0]
 800ab4c:	07d2      	lsls	r2, r2, #31
 800ab4e:	d501      	bpl.n	800ab54 <_printf_float+0x16c>
 800ab50:	3301      	adds	r3, #1
 800ab52:	6123      	str	r3, [r4, #16]
 800ab54:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d09c      	beq.n	800aa96 <_printf_float+0xae>
 800ab5c:	232d      	movs	r3, #45	; 0x2d
 800ab5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab62:	e798      	b.n	800aa96 <_printf_float+0xae>
 800ab64:	9a06      	ldr	r2, [sp, #24]
 800ab66:	2a47      	cmp	r2, #71	; 0x47
 800ab68:	d1be      	bne.n	800aae8 <_printf_float+0x100>
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d1bc      	bne.n	800aae8 <_printf_float+0x100>
 800ab6e:	2301      	movs	r3, #1
 800ab70:	e7b9      	b.n	800aae6 <_printf_float+0xfe>
 800ab72:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ab76:	d118      	bne.n	800abaa <_printf_float+0x1c2>
 800ab78:	2900      	cmp	r1, #0
 800ab7a:	6863      	ldr	r3, [r4, #4]
 800ab7c:	dd0b      	ble.n	800ab96 <_printf_float+0x1ae>
 800ab7e:	6121      	str	r1, [r4, #16]
 800ab80:	b913      	cbnz	r3, 800ab88 <_printf_float+0x1a0>
 800ab82:	6822      	ldr	r2, [r4, #0]
 800ab84:	07d0      	lsls	r0, r2, #31
 800ab86:	d502      	bpl.n	800ab8e <_printf_float+0x1a6>
 800ab88:	3301      	adds	r3, #1
 800ab8a:	440b      	add	r3, r1
 800ab8c:	6123      	str	r3, [r4, #16]
 800ab8e:	65a1      	str	r1, [r4, #88]	; 0x58
 800ab90:	f04f 0900 	mov.w	r9, #0
 800ab94:	e7de      	b.n	800ab54 <_printf_float+0x16c>
 800ab96:	b913      	cbnz	r3, 800ab9e <_printf_float+0x1b6>
 800ab98:	6822      	ldr	r2, [r4, #0]
 800ab9a:	07d2      	lsls	r2, r2, #31
 800ab9c:	d501      	bpl.n	800aba2 <_printf_float+0x1ba>
 800ab9e:	3302      	adds	r3, #2
 800aba0:	e7f4      	b.n	800ab8c <_printf_float+0x1a4>
 800aba2:	2301      	movs	r3, #1
 800aba4:	e7f2      	b.n	800ab8c <_printf_float+0x1a4>
 800aba6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800abaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abac:	4299      	cmp	r1, r3
 800abae:	db05      	blt.n	800abbc <_printf_float+0x1d4>
 800abb0:	6823      	ldr	r3, [r4, #0]
 800abb2:	6121      	str	r1, [r4, #16]
 800abb4:	07d8      	lsls	r0, r3, #31
 800abb6:	d5ea      	bpl.n	800ab8e <_printf_float+0x1a6>
 800abb8:	1c4b      	adds	r3, r1, #1
 800abba:	e7e7      	b.n	800ab8c <_printf_float+0x1a4>
 800abbc:	2900      	cmp	r1, #0
 800abbe:	bfd4      	ite	le
 800abc0:	f1c1 0202 	rsble	r2, r1, #2
 800abc4:	2201      	movgt	r2, #1
 800abc6:	4413      	add	r3, r2
 800abc8:	e7e0      	b.n	800ab8c <_printf_float+0x1a4>
 800abca:	6823      	ldr	r3, [r4, #0]
 800abcc:	055a      	lsls	r2, r3, #21
 800abce:	d407      	bmi.n	800abe0 <_printf_float+0x1f8>
 800abd0:	6923      	ldr	r3, [r4, #16]
 800abd2:	4642      	mov	r2, r8
 800abd4:	4631      	mov	r1, r6
 800abd6:	4628      	mov	r0, r5
 800abd8:	47b8      	blx	r7
 800abda:	3001      	adds	r0, #1
 800abdc:	d12c      	bne.n	800ac38 <_printf_float+0x250>
 800abde:	e764      	b.n	800aaaa <_printf_float+0xc2>
 800abe0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800abe4:	f240 80e0 	bls.w	800ada8 <_printf_float+0x3c0>
 800abe8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800abec:	2200      	movs	r2, #0
 800abee:	2300      	movs	r3, #0
 800abf0:	f7f5 ff72 	bl	8000ad8 <__aeabi_dcmpeq>
 800abf4:	2800      	cmp	r0, #0
 800abf6:	d034      	beq.n	800ac62 <_printf_float+0x27a>
 800abf8:	4a37      	ldr	r2, [pc, #220]	; (800acd8 <_printf_float+0x2f0>)
 800abfa:	2301      	movs	r3, #1
 800abfc:	4631      	mov	r1, r6
 800abfe:	4628      	mov	r0, r5
 800ac00:	47b8      	blx	r7
 800ac02:	3001      	adds	r0, #1
 800ac04:	f43f af51 	beq.w	800aaaa <_printf_float+0xc2>
 800ac08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ac0c:	429a      	cmp	r2, r3
 800ac0e:	db02      	blt.n	800ac16 <_printf_float+0x22e>
 800ac10:	6823      	ldr	r3, [r4, #0]
 800ac12:	07d8      	lsls	r0, r3, #31
 800ac14:	d510      	bpl.n	800ac38 <_printf_float+0x250>
 800ac16:	ee18 3a10 	vmov	r3, s16
 800ac1a:	4652      	mov	r2, sl
 800ac1c:	4631      	mov	r1, r6
 800ac1e:	4628      	mov	r0, r5
 800ac20:	47b8      	blx	r7
 800ac22:	3001      	adds	r0, #1
 800ac24:	f43f af41 	beq.w	800aaaa <_printf_float+0xc2>
 800ac28:	f04f 0800 	mov.w	r8, #0
 800ac2c:	f104 091a 	add.w	r9, r4, #26
 800ac30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac32:	3b01      	subs	r3, #1
 800ac34:	4543      	cmp	r3, r8
 800ac36:	dc09      	bgt.n	800ac4c <_printf_float+0x264>
 800ac38:	6823      	ldr	r3, [r4, #0]
 800ac3a:	079b      	lsls	r3, r3, #30
 800ac3c:	f100 8105 	bmi.w	800ae4a <_printf_float+0x462>
 800ac40:	68e0      	ldr	r0, [r4, #12]
 800ac42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac44:	4298      	cmp	r0, r3
 800ac46:	bfb8      	it	lt
 800ac48:	4618      	movlt	r0, r3
 800ac4a:	e730      	b.n	800aaae <_printf_float+0xc6>
 800ac4c:	2301      	movs	r3, #1
 800ac4e:	464a      	mov	r2, r9
 800ac50:	4631      	mov	r1, r6
 800ac52:	4628      	mov	r0, r5
 800ac54:	47b8      	blx	r7
 800ac56:	3001      	adds	r0, #1
 800ac58:	f43f af27 	beq.w	800aaaa <_printf_float+0xc2>
 800ac5c:	f108 0801 	add.w	r8, r8, #1
 800ac60:	e7e6      	b.n	800ac30 <_printf_float+0x248>
 800ac62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	dc39      	bgt.n	800acdc <_printf_float+0x2f4>
 800ac68:	4a1b      	ldr	r2, [pc, #108]	; (800acd8 <_printf_float+0x2f0>)
 800ac6a:	2301      	movs	r3, #1
 800ac6c:	4631      	mov	r1, r6
 800ac6e:	4628      	mov	r0, r5
 800ac70:	47b8      	blx	r7
 800ac72:	3001      	adds	r0, #1
 800ac74:	f43f af19 	beq.w	800aaaa <_printf_float+0xc2>
 800ac78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ac7c:	4313      	orrs	r3, r2
 800ac7e:	d102      	bne.n	800ac86 <_printf_float+0x29e>
 800ac80:	6823      	ldr	r3, [r4, #0]
 800ac82:	07d9      	lsls	r1, r3, #31
 800ac84:	d5d8      	bpl.n	800ac38 <_printf_float+0x250>
 800ac86:	ee18 3a10 	vmov	r3, s16
 800ac8a:	4652      	mov	r2, sl
 800ac8c:	4631      	mov	r1, r6
 800ac8e:	4628      	mov	r0, r5
 800ac90:	47b8      	blx	r7
 800ac92:	3001      	adds	r0, #1
 800ac94:	f43f af09 	beq.w	800aaaa <_printf_float+0xc2>
 800ac98:	f04f 0900 	mov.w	r9, #0
 800ac9c:	f104 0a1a 	add.w	sl, r4, #26
 800aca0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aca2:	425b      	negs	r3, r3
 800aca4:	454b      	cmp	r3, r9
 800aca6:	dc01      	bgt.n	800acac <_printf_float+0x2c4>
 800aca8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acaa:	e792      	b.n	800abd2 <_printf_float+0x1ea>
 800acac:	2301      	movs	r3, #1
 800acae:	4652      	mov	r2, sl
 800acb0:	4631      	mov	r1, r6
 800acb2:	4628      	mov	r0, r5
 800acb4:	47b8      	blx	r7
 800acb6:	3001      	adds	r0, #1
 800acb8:	f43f aef7 	beq.w	800aaaa <_printf_float+0xc2>
 800acbc:	f109 0901 	add.w	r9, r9, #1
 800acc0:	e7ee      	b.n	800aca0 <_printf_float+0x2b8>
 800acc2:	bf00      	nop
 800acc4:	7fefffff 	.word	0x7fefffff
 800acc8:	08011dac 	.word	0x08011dac
 800accc:	08011db0 	.word	0x08011db0
 800acd0:	08011db8 	.word	0x08011db8
 800acd4:	08011db4 	.word	0x08011db4
 800acd8:	080121c1 	.word	0x080121c1
 800acdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800acde:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ace0:	429a      	cmp	r2, r3
 800ace2:	bfa8      	it	ge
 800ace4:	461a      	movge	r2, r3
 800ace6:	2a00      	cmp	r2, #0
 800ace8:	4691      	mov	r9, r2
 800acea:	dc37      	bgt.n	800ad5c <_printf_float+0x374>
 800acec:	f04f 0b00 	mov.w	fp, #0
 800acf0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800acf4:	f104 021a 	add.w	r2, r4, #26
 800acf8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800acfa:	9305      	str	r3, [sp, #20]
 800acfc:	eba3 0309 	sub.w	r3, r3, r9
 800ad00:	455b      	cmp	r3, fp
 800ad02:	dc33      	bgt.n	800ad6c <_printf_float+0x384>
 800ad04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ad08:	429a      	cmp	r2, r3
 800ad0a:	db3b      	blt.n	800ad84 <_printf_float+0x39c>
 800ad0c:	6823      	ldr	r3, [r4, #0]
 800ad0e:	07da      	lsls	r2, r3, #31
 800ad10:	d438      	bmi.n	800ad84 <_printf_float+0x39c>
 800ad12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad14:	9b05      	ldr	r3, [sp, #20]
 800ad16:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ad18:	1ad3      	subs	r3, r2, r3
 800ad1a:	eba2 0901 	sub.w	r9, r2, r1
 800ad1e:	4599      	cmp	r9, r3
 800ad20:	bfa8      	it	ge
 800ad22:	4699      	movge	r9, r3
 800ad24:	f1b9 0f00 	cmp.w	r9, #0
 800ad28:	dc35      	bgt.n	800ad96 <_printf_float+0x3ae>
 800ad2a:	f04f 0800 	mov.w	r8, #0
 800ad2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ad32:	f104 0a1a 	add.w	sl, r4, #26
 800ad36:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ad3a:	1a9b      	subs	r3, r3, r2
 800ad3c:	eba3 0309 	sub.w	r3, r3, r9
 800ad40:	4543      	cmp	r3, r8
 800ad42:	f77f af79 	ble.w	800ac38 <_printf_float+0x250>
 800ad46:	2301      	movs	r3, #1
 800ad48:	4652      	mov	r2, sl
 800ad4a:	4631      	mov	r1, r6
 800ad4c:	4628      	mov	r0, r5
 800ad4e:	47b8      	blx	r7
 800ad50:	3001      	adds	r0, #1
 800ad52:	f43f aeaa 	beq.w	800aaaa <_printf_float+0xc2>
 800ad56:	f108 0801 	add.w	r8, r8, #1
 800ad5a:	e7ec      	b.n	800ad36 <_printf_float+0x34e>
 800ad5c:	4613      	mov	r3, r2
 800ad5e:	4631      	mov	r1, r6
 800ad60:	4642      	mov	r2, r8
 800ad62:	4628      	mov	r0, r5
 800ad64:	47b8      	blx	r7
 800ad66:	3001      	adds	r0, #1
 800ad68:	d1c0      	bne.n	800acec <_printf_float+0x304>
 800ad6a:	e69e      	b.n	800aaaa <_printf_float+0xc2>
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	4631      	mov	r1, r6
 800ad70:	4628      	mov	r0, r5
 800ad72:	9205      	str	r2, [sp, #20]
 800ad74:	47b8      	blx	r7
 800ad76:	3001      	adds	r0, #1
 800ad78:	f43f ae97 	beq.w	800aaaa <_printf_float+0xc2>
 800ad7c:	9a05      	ldr	r2, [sp, #20]
 800ad7e:	f10b 0b01 	add.w	fp, fp, #1
 800ad82:	e7b9      	b.n	800acf8 <_printf_float+0x310>
 800ad84:	ee18 3a10 	vmov	r3, s16
 800ad88:	4652      	mov	r2, sl
 800ad8a:	4631      	mov	r1, r6
 800ad8c:	4628      	mov	r0, r5
 800ad8e:	47b8      	blx	r7
 800ad90:	3001      	adds	r0, #1
 800ad92:	d1be      	bne.n	800ad12 <_printf_float+0x32a>
 800ad94:	e689      	b.n	800aaaa <_printf_float+0xc2>
 800ad96:	9a05      	ldr	r2, [sp, #20]
 800ad98:	464b      	mov	r3, r9
 800ad9a:	4442      	add	r2, r8
 800ad9c:	4631      	mov	r1, r6
 800ad9e:	4628      	mov	r0, r5
 800ada0:	47b8      	blx	r7
 800ada2:	3001      	adds	r0, #1
 800ada4:	d1c1      	bne.n	800ad2a <_printf_float+0x342>
 800ada6:	e680      	b.n	800aaaa <_printf_float+0xc2>
 800ada8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800adaa:	2a01      	cmp	r2, #1
 800adac:	dc01      	bgt.n	800adb2 <_printf_float+0x3ca>
 800adae:	07db      	lsls	r3, r3, #31
 800adb0:	d538      	bpl.n	800ae24 <_printf_float+0x43c>
 800adb2:	2301      	movs	r3, #1
 800adb4:	4642      	mov	r2, r8
 800adb6:	4631      	mov	r1, r6
 800adb8:	4628      	mov	r0, r5
 800adba:	47b8      	blx	r7
 800adbc:	3001      	adds	r0, #1
 800adbe:	f43f ae74 	beq.w	800aaaa <_printf_float+0xc2>
 800adc2:	ee18 3a10 	vmov	r3, s16
 800adc6:	4652      	mov	r2, sl
 800adc8:	4631      	mov	r1, r6
 800adca:	4628      	mov	r0, r5
 800adcc:	47b8      	blx	r7
 800adce:	3001      	adds	r0, #1
 800add0:	f43f ae6b 	beq.w	800aaaa <_printf_float+0xc2>
 800add4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800add8:	2200      	movs	r2, #0
 800adda:	2300      	movs	r3, #0
 800addc:	f7f5 fe7c 	bl	8000ad8 <__aeabi_dcmpeq>
 800ade0:	b9d8      	cbnz	r0, 800ae1a <_printf_float+0x432>
 800ade2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ade4:	f108 0201 	add.w	r2, r8, #1
 800ade8:	3b01      	subs	r3, #1
 800adea:	4631      	mov	r1, r6
 800adec:	4628      	mov	r0, r5
 800adee:	47b8      	blx	r7
 800adf0:	3001      	adds	r0, #1
 800adf2:	d10e      	bne.n	800ae12 <_printf_float+0x42a>
 800adf4:	e659      	b.n	800aaaa <_printf_float+0xc2>
 800adf6:	2301      	movs	r3, #1
 800adf8:	4652      	mov	r2, sl
 800adfa:	4631      	mov	r1, r6
 800adfc:	4628      	mov	r0, r5
 800adfe:	47b8      	blx	r7
 800ae00:	3001      	adds	r0, #1
 800ae02:	f43f ae52 	beq.w	800aaaa <_printf_float+0xc2>
 800ae06:	f108 0801 	add.w	r8, r8, #1
 800ae0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae0c:	3b01      	subs	r3, #1
 800ae0e:	4543      	cmp	r3, r8
 800ae10:	dcf1      	bgt.n	800adf6 <_printf_float+0x40e>
 800ae12:	464b      	mov	r3, r9
 800ae14:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ae18:	e6dc      	b.n	800abd4 <_printf_float+0x1ec>
 800ae1a:	f04f 0800 	mov.w	r8, #0
 800ae1e:	f104 0a1a 	add.w	sl, r4, #26
 800ae22:	e7f2      	b.n	800ae0a <_printf_float+0x422>
 800ae24:	2301      	movs	r3, #1
 800ae26:	4642      	mov	r2, r8
 800ae28:	e7df      	b.n	800adea <_printf_float+0x402>
 800ae2a:	2301      	movs	r3, #1
 800ae2c:	464a      	mov	r2, r9
 800ae2e:	4631      	mov	r1, r6
 800ae30:	4628      	mov	r0, r5
 800ae32:	47b8      	blx	r7
 800ae34:	3001      	adds	r0, #1
 800ae36:	f43f ae38 	beq.w	800aaaa <_printf_float+0xc2>
 800ae3a:	f108 0801 	add.w	r8, r8, #1
 800ae3e:	68e3      	ldr	r3, [r4, #12]
 800ae40:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ae42:	1a5b      	subs	r3, r3, r1
 800ae44:	4543      	cmp	r3, r8
 800ae46:	dcf0      	bgt.n	800ae2a <_printf_float+0x442>
 800ae48:	e6fa      	b.n	800ac40 <_printf_float+0x258>
 800ae4a:	f04f 0800 	mov.w	r8, #0
 800ae4e:	f104 0919 	add.w	r9, r4, #25
 800ae52:	e7f4      	b.n	800ae3e <_printf_float+0x456>

0800ae54 <_printf_common>:
 800ae54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae58:	4616      	mov	r6, r2
 800ae5a:	4699      	mov	r9, r3
 800ae5c:	688a      	ldr	r2, [r1, #8]
 800ae5e:	690b      	ldr	r3, [r1, #16]
 800ae60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ae64:	4293      	cmp	r3, r2
 800ae66:	bfb8      	it	lt
 800ae68:	4613      	movlt	r3, r2
 800ae6a:	6033      	str	r3, [r6, #0]
 800ae6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ae70:	4607      	mov	r7, r0
 800ae72:	460c      	mov	r4, r1
 800ae74:	b10a      	cbz	r2, 800ae7a <_printf_common+0x26>
 800ae76:	3301      	adds	r3, #1
 800ae78:	6033      	str	r3, [r6, #0]
 800ae7a:	6823      	ldr	r3, [r4, #0]
 800ae7c:	0699      	lsls	r1, r3, #26
 800ae7e:	bf42      	ittt	mi
 800ae80:	6833      	ldrmi	r3, [r6, #0]
 800ae82:	3302      	addmi	r3, #2
 800ae84:	6033      	strmi	r3, [r6, #0]
 800ae86:	6825      	ldr	r5, [r4, #0]
 800ae88:	f015 0506 	ands.w	r5, r5, #6
 800ae8c:	d106      	bne.n	800ae9c <_printf_common+0x48>
 800ae8e:	f104 0a19 	add.w	sl, r4, #25
 800ae92:	68e3      	ldr	r3, [r4, #12]
 800ae94:	6832      	ldr	r2, [r6, #0]
 800ae96:	1a9b      	subs	r3, r3, r2
 800ae98:	42ab      	cmp	r3, r5
 800ae9a:	dc26      	bgt.n	800aeea <_printf_common+0x96>
 800ae9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aea0:	1e13      	subs	r3, r2, #0
 800aea2:	6822      	ldr	r2, [r4, #0]
 800aea4:	bf18      	it	ne
 800aea6:	2301      	movne	r3, #1
 800aea8:	0692      	lsls	r2, r2, #26
 800aeaa:	d42b      	bmi.n	800af04 <_printf_common+0xb0>
 800aeac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aeb0:	4649      	mov	r1, r9
 800aeb2:	4638      	mov	r0, r7
 800aeb4:	47c0      	blx	r8
 800aeb6:	3001      	adds	r0, #1
 800aeb8:	d01e      	beq.n	800aef8 <_printf_common+0xa4>
 800aeba:	6823      	ldr	r3, [r4, #0]
 800aebc:	68e5      	ldr	r5, [r4, #12]
 800aebe:	6832      	ldr	r2, [r6, #0]
 800aec0:	f003 0306 	and.w	r3, r3, #6
 800aec4:	2b04      	cmp	r3, #4
 800aec6:	bf08      	it	eq
 800aec8:	1aad      	subeq	r5, r5, r2
 800aeca:	68a3      	ldr	r3, [r4, #8]
 800aecc:	6922      	ldr	r2, [r4, #16]
 800aece:	bf0c      	ite	eq
 800aed0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aed4:	2500      	movne	r5, #0
 800aed6:	4293      	cmp	r3, r2
 800aed8:	bfc4      	itt	gt
 800aeda:	1a9b      	subgt	r3, r3, r2
 800aedc:	18ed      	addgt	r5, r5, r3
 800aede:	2600      	movs	r6, #0
 800aee0:	341a      	adds	r4, #26
 800aee2:	42b5      	cmp	r5, r6
 800aee4:	d11a      	bne.n	800af1c <_printf_common+0xc8>
 800aee6:	2000      	movs	r0, #0
 800aee8:	e008      	b.n	800aefc <_printf_common+0xa8>
 800aeea:	2301      	movs	r3, #1
 800aeec:	4652      	mov	r2, sl
 800aeee:	4649      	mov	r1, r9
 800aef0:	4638      	mov	r0, r7
 800aef2:	47c0      	blx	r8
 800aef4:	3001      	adds	r0, #1
 800aef6:	d103      	bne.n	800af00 <_printf_common+0xac>
 800aef8:	f04f 30ff 	mov.w	r0, #4294967295
 800aefc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af00:	3501      	adds	r5, #1
 800af02:	e7c6      	b.n	800ae92 <_printf_common+0x3e>
 800af04:	18e1      	adds	r1, r4, r3
 800af06:	1c5a      	adds	r2, r3, #1
 800af08:	2030      	movs	r0, #48	; 0x30
 800af0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800af0e:	4422      	add	r2, r4
 800af10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800af14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800af18:	3302      	adds	r3, #2
 800af1a:	e7c7      	b.n	800aeac <_printf_common+0x58>
 800af1c:	2301      	movs	r3, #1
 800af1e:	4622      	mov	r2, r4
 800af20:	4649      	mov	r1, r9
 800af22:	4638      	mov	r0, r7
 800af24:	47c0      	blx	r8
 800af26:	3001      	adds	r0, #1
 800af28:	d0e6      	beq.n	800aef8 <_printf_common+0xa4>
 800af2a:	3601      	adds	r6, #1
 800af2c:	e7d9      	b.n	800aee2 <_printf_common+0x8e>
	...

0800af30 <_printf_i>:
 800af30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af34:	460c      	mov	r4, r1
 800af36:	4691      	mov	r9, r2
 800af38:	7e27      	ldrb	r7, [r4, #24]
 800af3a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800af3c:	2f78      	cmp	r7, #120	; 0x78
 800af3e:	4680      	mov	r8, r0
 800af40:	469a      	mov	sl, r3
 800af42:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800af46:	d807      	bhi.n	800af58 <_printf_i+0x28>
 800af48:	2f62      	cmp	r7, #98	; 0x62
 800af4a:	d80a      	bhi.n	800af62 <_printf_i+0x32>
 800af4c:	2f00      	cmp	r7, #0
 800af4e:	f000 80d8 	beq.w	800b102 <_printf_i+0x1d2>
 800af52:	2f58      	cmp	r7, #88	; 0x58
 800af54:	f000 80a3 	beq.w	800b09e <_printf_i+0x16e>
 800af58:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800af5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800af60:	e03a      	b.n	800afd8 <_printf_i+0xa8>
 800af62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800af66:	2b15      	cmp	r3, #21
 800af68:	d8f6      	bhi.n	800af58 <_printf_i+0x28>
 800af6a:	a001      	add	r0, pc, #4	; (adr r0, 800af70 <_printf_i+0x40>)
 800af6c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800af70:	0800afc9 	.word	0x0800afc9
 800af74:	0800afdd 	.word	0x0800afdd
 800af78:	0800af59 	.word	0x0800af59
 800af7c:	0800af59 	.word	0x0800af59
 800af80:	0800af59 	.word	0x0800af59
 800af84:	0800af59 	.word	0x0800af59
 800af88:	0800afdd 	.word	0x0800afdd
 800af8c:	0800af59 	.word	0x0800af59
 800af90:	0800af59 	.word	0x0800af59
 800af94:	0800af59 	.word	0x0800af59
 800af98:	0800af59 	.word	0x0800af59
 800af9c:	0800b0e9 	.word	0x0800b0e9
 800afa0:	0800b00d 	.word	0x0800b00d
 800afa4:	0800b0cb 	.word	0x0800b0cb
 800afa8:	0800af59 	.word	0x0800af59
 800afac:	0800af59 	.word	0x0800af59
 800afb0:	0800b10b 	.word	0x0800b10b
 800afb4:	0800af59 	.word	0x0800af59
 800afb8:	0800b00d 	.word	0x0800b00d
 800afbc:	0800af59 	.word	0x0800af59
 800afc0:	0800af59 	.word	0x0800af59
 800afc4:	0800b0d3 	.word	0x0800b0d3
 800afc8:	680b      	ldr	r3, [r1, #0]
 800afca:	1d1a      	adds	r2, r3, #4
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	600a      	str	r2, [r1, #0]
 800afd0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800afd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800afd8:	2301      	movs	r3, #1
 800afda:	e0a3      	b.n	800b124 <_printf_i+0x1f4>
 800afdc:	6825      	ldr	r5, [r4, #0]
 800afde:	6808      	ldr	r0, [r1, #0]
 800afe0:	062e      	lsls	r6, r5, #24
 800afe2:	f100 0304 	add.w	r3, r0, #4
 800afe6:	d50a      	bpl.n	800affe <_printf_i+0xce>
 800afe8:	6805      	ldr	r5, [r0, #0]
 800afea:	600b      	str	r3, [r1, #0]
 800afec:	2d00      	cmp	r5, #0
 800afee:	da03      	bge.n	800aff8 <_printf_i+0xc8>
 800aff0:	232d      	movs	r3, #45	; 0x2d
 800aff2:	426d      	negs	r5, r5
 800aff4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aff8:	485e      	ldr	r0, [pc, #376]	; (800b174 <_printf_i+0x244>)
 800affa:	230a      	movs	r3, #10
 800affc:	e019      	b.n	800b032 <_printf_i+0x102>
 800affe:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b002:	6805      	ldr	r5, [r0, #0]
 800b004:	600b      	str	r3, [r1, #0]
 800b006:	bf18      	it	ne
 800b008:	b22d      	sxthne	r5, r5
 800b00a:	e7ef      	b.n	800afec <_printf_i+0xbc>
 800b00c:	680b      	ldr	r3, [r1, #0]
 800b00e:	6825      	ldr	r5, [r4, #0]
 800b010:	1d18      	adds	r0, r3, #4
 800b012:	6008      	str	r0, [r1, #0]
 800b014:	0628      	lsls	r0, r5, #24
 800b016:	d501      	bpl.n	800b01c <_printf_i+0xec>
 800b018:	681d      	ldr	r5, [r3, #0]
 800b01a:	e002      	b.n	800b022 <_printf_i+0xf2>
 800b01c:	0669      	lsls	r1, r5, #25
 800b01e:	d5fb      	bpl.n	800b018 <_printf_i+0xe8>
 800b020:	881d      	ldrh	r5, [r3, #0]
 800b022:	4854      	ldr	r0, [pc, #336]	; (800b174 <_printf_i+0x244>)
 800b024:	2f6f      	cmp	r7, #111	; 0x6f
 800b026:	bf0c      	ite	eq
 800b028:	2308      	moveq	r3, #8
 800b02a:	230a      	movne	r3, #10
 800b02c:	2100      	movs	r1, #0
 800b02e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b032:	6866      	ldr	r6, [r4, #4]
 800b034:	60a6      	str	r6, [r4, #8]
 800b036:	2e00      	cmp	r6, #0
 800b038:	bfa2      	ittt	ge
 800b03a:	6821      	ldrge	r1, [r4, #0]
 800b03c:	f021 0104 	bicge.w	r1, r1, #4
 800b040:	6021      	strge	r1, [r4, #0]
 800b042:	b90d      	cbnz	r5, 800b048 <_printf_i+0x118>
 800b044:	2e00      	cmp	r6, #0
 800b046:	d04d      	beq.n	800b0e4 <_printf_i+0x1b4>
 800b048:	4616      	mov	r6, r2
 800b04a:	fbb5 f1f3 	udiv	r1, r5, r3
 800b04e:	fb03 5711 	mls	r7, r3, r1, r5
 800b052:	5dc7      	ldrb	r7, [r0, r7]
 800b054:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b058:	462f      	mov	r7, r5
 800b05a:	42bb      	cmp	r3, r7
 800b05c:	460d      	mov	r5, r1
 800b05e:	d9f4      	bls.n	800b04a <_printf_i+0x11a>
 800b060:	2b08      	cmp	r3, #8
 800b062:	d10b      	bne.n	800b07c <_printf_i+0x14c>
 800b064:	6823      	ldr	r3, [r4, #0]
 800b066:	07df      	lsls	r7, r3, #31
 800b068:	d508      	bpl.n	800b07c <_printf_i+0x14c>
 800b06a:	6923      	ldr	r3, [r4, #16]
 800b06c:	6861      	ldr	r1, [r4, #4]
 800b06e:	4299      	cmp	r1, r3
 800b070:	bfde      	ittt	le
 800b072:	2330      	movle	r3, #48	; 0x30
 800b074:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b078:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b07c:	1b92      	subs	r2, r2, r6
 800b07e:	6122      	str	r2, [r4, #16]
 800b080:	f8cd a000 	str.w	sl, [sp]
 800b084:	464b      	mov	r3, r9
 800b086:	aa03      	add	r2, sp, #12
 800b088:	4621      	mov	r1, r4
 800b08a:	4640      	mov	r0, r8
 800b08c:	f7ff fee2 	bl	800ae54 <_printf_common>
 800b090:	3001      	adds	r0, #1
 800b092:	d14c      	bne.n	800b12e <_printf_i+0x1fe>
 800b094:	f04f 30ff 	mov.w	r0, #4294967295
 800b098:	b004      	add	sp, #16
 800b09a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b09e:	4835      	ldr	r0, [pc, #212]	; (800b174 <_printf_i+0x244>)
 800b0a0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b0a4:	6823      	ldr	r3, [r4, #0]
 800b0a6:	680e      	ldr	r6, [r1, #0]
 800b0a8:	061f      	lsls	r7, r3, #24
 800b0aa:	f856 5b04 	ldr.w	r5, [r6], #4
 800b0ae:	600e      	str	r6, [r1, #0]
 800b0b0:	d514      	bpl.n	800b0dc <_printf_i+0x1ac>
 800b0b2:	07d9      	lsls	r1, r3, #31
 800b0b4:	bf44      	itt	mi
 800b0b6:	f043 0320 	orrmi.w	r3, r3, #32
 800b0ba:	6023      	strmi	r3, [r4, #0]
 800b0bc:	b91d      	cbnz	r5, 800b0c6 <_printf_i+0x196>
 800b0be:	6823      	ldr	r3, [r4, #0]
 800b0c0:	f023 0320 	bic.w	r3, r3, #32
 800b0c4:	6023      	str	r3, [r4, #0]
 800b0c6:	2310      	movs	r3, #16
 800b0c8:	e7b0      	b.n	800b02c <_printf_i+0xfc>
 800b0ca:	6823      	ldr	r3, [r4, #0]
 800b0cc:	f043 0320 	orr.w	r3, r3, #32
 800b0d0:	6023      	str	r3, [r4, #0]
 800b0d2:	2378      	movs	r3, #120	; 0x78
 800b0d4:	4828      	ldr	r0, [pc, #160]	; (800b178 <_printf_i+0x248>)
 800b0d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b0da:	e7e3      	b.n	800b0a4 <_printf_i+0x174>
 800b0dc:	065e      	lsls	r6, r3, #25
 800b0de:	bf48      	it	mi
 800b0e0:	b2ad      	uxthmi	r5, r5
 800b0e2:	e7e6      	b.n	800b0b2 <_printf_i+0x182>
 800b0e4:	4616      	mov	r6, r2
 800b0e6:	e7bb      	b.n	800b060 <_printf_i+0x130>
 800b0e8:	680b      	ldr	r3, [r1, #0]
 800b0ea:	6826      	ldr	r6, [r4, #0]
 800b0ec:	6960      	ldr	r0, [r4, #20]
 800b0ee:	1d1d      	adds	r5, r3, #4
 800b0f0:	600d      	str	r5, [r1, #0]
 800b0f2:	0635      	lsls	r5, r6, #24
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	d501      	bpl.n	800b0fc <_printf_i+0x1cc>
 800b0f8:	6018      	str	r0, [r3, #0]
 800b0fa:	e002      	b.n	800b102 <_printf_i+0x1d2>
 800b0fc:	0671      	lsls	r1, r6, #25
 800b0fe:	d5fb      	bpl.n	800b0f8 <_printf_i+0x1c8>
 800b100:	8018      	strh	r0, [r3, #0]
 800b102:	2300      	movs	r3, #0
 800b104:	6123      	str	r3, [r4, #16]
 800b106:	4616      	mov	r6, r2
 800b108:	e7ba      	b.n	800b080 <_printf_i+0x150>
 800b10a:	680b      	ldr	r3, [r1, #0]
 800b10c:	1d1a      	adds	r2, r3, #4
 800b10e:	600a      	str	r2, [r1, #0]
 800b110:	681e      	ldr	r6, [r3, #0]
 800b112:	6862      	ldr	r2, [r4, #4]
 800b114:	2100      	movs	r1, #0
 800b116:	4630      	mov	r0, r6
 800b118:	f7f5 f86a 	bl	80001f0 <memchr>
 800b11c:	b108      	cbz	r0, 800b122 <_printf_i+0x1f2>
 800b11e:	1b80      	subs	r0, r0, r6
 800b120:	6060      	str	r0, [r4, #4]
 800b122:	6863      	ldr	r3, [r4, #4]
 800b124:	6123      	str	r3, [r4, #16]
 800b126:	2300      	movs	r3, #0
 800b128:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b12c:	e7a8      	b.n	800b080 <_printf_i+0x150>
 800b12e:	6923      	ldr	r3, [r4, #16]
 800b130:	4632      	mov	r2, r6
 800b132:	4649      	mov	r1, r9
 800b134:	4640      	mov	r0, r8
 800b136:	47d0      	blx	sl
 800b138:	3001      	adds	r0, #1
 800b13a:	d0ab      	beq.n	800b094 <_printf_i+0x164>
 800b13c:	6823      	ldr	r3, [r4, #0]
 800b13e:	079b      	lsls	r3, r3, #30
 800b140:	d413      	bmi.n	800b16a <_printf_i+0x23a>
 800b142:	68e0      	ldr	r0, [r4, #12]
 800b144:	9b03      	ldr	r3, [sp, #12]
 800b146:	4298      	cmp	r0, r3
 800b148:	bfb8      	it	lt
 800b14a:	4618      	movlt	r0, r3
 800b14c:	e7a4      	b.n	800b098 <_printf_i+0x168>
 800b14e:	2301      	movs	r3, #1
 800b150:	4632      	mov	r2, r6
 800b152:	4649      	mov	r1, r9
 800b154:	4640      	mov	r0, r8
 800b156:	47d0      	blx	sl
 800b158:	3001      	adds	r0, #1
 800b15a:	d09b      	beq.n	800b094 <_printf_i+0x164>
 800b15c:	3501      	adds	r5, #1
 800b15e:	68e3      	ldr	r3, [r4, #12]
 800b160:	9903      	ldr	r1, [sp, #12]
 800b162:	1a5b      	subs	r3, r3, r1
 800b164:	42ab      	cmp	r3, r5
 800b166:	dcf2      	bgt.n	800b14e <_printf_i+0x21e>
 800b168:	e7eb      	b.n	800b142 <_printf_i+0x212>
 800b16a:	2500      	movs	r5, #0
 800b16c:	f104 0619 	add.w	r6, r4, #25
 800b170:	e7f5      	b.n	800b15e <_printf_i+0x22e>
 800b172:	bf00      	nop
 800b174:	08011dbc 	.word	0x08011dbc
 800b178:	08011dcd 	.word	0x08011dcd

0800b17c <_scanf_float>:
 800b17c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b180:	b087      	sub	sp, #28
 800b182:	4617      	mov	r7, r2
 800b184:	9303      	str	r3, [sp, #12]
 800b186:	688b      	ldr	r3, [r1, #8]
 800b188:	1e5a      	subs	r2, r3, #1
 800b18a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b18e:	bf83      	ittte	hi
 800b190:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b194:	195b      	addhi	r3, r3, r5
 800b196:	9302      	strhi	r3, [sp, #8]
 800b198:	2300      	movls	r3, #0
 800b19a:	bf86      	itte	hi
 800b19c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b1a0:	608b      	strhi	r3, [r1, #8]
 800b1a2:	9302      	strls	r3, [sp, #8]
 800b1a4:	680b      	ldr	r3, [r1, #0]
 800b1a6:	468b      	mov	fp, r1
 800b1a8:	2500      	movs	r5, #0
 800b1aa:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b1ae:	f84b 3b1c 	str.w	r3, [fp], #28
 800b1b2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b1b6:	4680      	mov	r8, r0
 800b1b8:	460c      	mov	r4, r1
 800b1ba:	465e      	mov	r6, fp
 800b1bc:	46aa      	mov	sl, r5
 800b1be:	46a9      	mov	r9, r5
 800b1c0:	9501      	str	r5, [sp, #4]
 800b1c2:	68a2      	ldr	r2, [r4, #8]
 800b1c4:	b152      	cbz	r2, 800b1dc <_scanf_float+0x60>
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	781b      	ldrb	r3, [r3, #0]
 800b1ca:	2b4e      	cmp	r3, #78	; 0x4e
 800b1cc:	d864      	bhi.n	800b298 <_scanf_float+0x11c>
 800b1ce:	2b40      	cmp	r3, #64	; 0x40
 800b1d0:	d83c      	bhi.n	800b24c <_scanf_float+0xd0>
 800b1d2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800b1d6:	b2c8      	uxtb	r0, r1
 800b1d8:	280e      	cmp	r0, #14
 800b1da:	d93a      	bls.n	800b252 <_scanf_float+0xd6>
 800b1dc:	f1b9 0f00 	cmp.w	r9, #0
 800b1e0:	d003      	beq.n	800b1ea <_scanf_float+0x6e>
 800b1e2:	6823      	ldr	r3, [r4, #0]
 800b1e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b1e8:	6023      	str	r3, [r4, #0]
 800b1ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b1ee:	f1ba 0f01 	cmp.w	sl, #1
 800b1f2:	f200 8113 	bhi.w	800b41c <_scanf_float+0x2a0>
 800b1f6:	455e      	cmp	r6, fp
 800b1f8:	f200 8105 	bhi.w	800b406 <_scanf_float+0x28a>
 800b1fc:	2501      	movs	r5, #1
 800b1fe:	4628      	mov	r0, r5
 800b200:	b007      	add	sp, #28
 800b202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b206:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800b20a:	2a0d      	cmp	r2, #13
 800b20c:	d8e6      	bhi.n	800b1dc <_scanf_float+0x60>
 800b20e:	a101      	add	r1, pc, #4	; (adr r1, 800b214 <_scanf_float+0x98>)
 800b210:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b214:	0800b353 	.word	0x0800b353
 800b218:	0800b1dd 	.word	0x0800b1dd
 800b21c:	0800b1dd 	.word	0x0800b1dd
 800b220:	0800b1dd 	.word	0x0800b1dd
 800b224:	0800b3b3 	.word	0x0800b3b3
 800b228:	0800b38b 	.word	0x0800b38b
 800b22c:	0800b1dd 	.word	0x0800b1dd
 800b230:	0800b1dd 	.word	0x0800b1dd
 800b234:	0800b361 	.word	0x0800b361
 800b238:	0800b1dd 	.word	0x0800b1dd
 800b23c:	0800b1dd 	.word	0x0800b1dd
 800b240:	0800b1dd 	.word	0x0800b1dd
 800b244:	0800b1dd 	.word	0x0800b1dd
 800b248:	0800b319 	.word	0x0800b319
 800b24c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800b250:	e7db      	b.n	800b20a <_scanf_float+0x8e>
 800b252:	290e      	cmp	r1, #14
 800b254:	d8c2      	bhi.n	800b1dc <_scanf_float+0x60>
 800b256:	a001      	add	r0, pc, #4	; (adr r0, 800b25c <_scanf_float+0xe0>)
 800b258:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b25c:	0800b30b 	.word	0x0800b30b
 800b260:	0800b1dd 	.word	0x0800b1dd
 800b264:	0800b30b 	.word	0x0800b30b
 800b268:	0800b39f 	.word	0x0800b39f
 800b26c:	0800b1dd 	.word	0x0800b1dd
 800b270:	0800b2b9 	.word	0x0800b2b9
 800b274:	0800b2f5 	.word	0x0800b2f5
 800b278:	0800b2f5 	.word	0x0800b2f5
 800b27c:	0800b2f5 	.word	0x0800b2f5
 800b280:	0800b2f5 	.word	0x0800b2f5
 800b284:	0800b2f5 	.word	0x0800b2f5
 800b288:	0800b2f5 	.word	0x0800b2f5
 800b28c:	0800b2f5 	.word	0x0800b2f5
 800b290:	0800b2f5 	.word	0x0800b2f5
 800b294:	0800b2f5 	.word	0x0800b2f5
 800b298:	2b6e      	cmp	r3, #110	; 0x6e
 800b29a:	d809      	bhi.n	800b2b0 <_scanf_float+0x134>
 800b29c:	2b60      	cmp	r3, #96	; 0x60
 800b29e:	d8b2      	bhi.n	800b206 <_scanf_float+0x8a>
 800b2a0:	2b54      	cmp	r3, #84	; 0x54
 800b2a2:	d077      	beq.n	800b394 <_scanf_float+0x218>
 800b2a4:	2b59      	cmp	r3, #89	; 0x59
 800b2a6:	d199      	bne.n	800b1dc <_scanf_float+0x60>
 800b2a8:	2d07      	cmp	r5, #7
 800b2aa:	d197      	bne.n	800b1dc <_scanf_float+0x60>
 800b2ac:	2508      	movs	r5, #8
 800b2ae:	e029      	b.n	800b304 <_scanf_float+0x188>
 800b2b0:	2b74      	cmp	r3, #116	; 0x74
 800b2b2:	d06f      	beq.n	800b394 <_scanf_float+0x218>
 800b2b4:	2b79      	cmp	r3, #121	; 0x79
 800b2b6:	e7f6      	b.n	800b2a6 <_scanf_float+0x12a>
 800b2b8:	6821      	ldr	r1, [r4, #0]
 800b2ba:	05c8      	lsls	r0, r1, #23
 800b2bc:	d51a      	bpl.n	800b2f4 <_scanf_float+0x178>
 800b2be:	9b02      	ldr	r3, [sp, #8]
 800b2c0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b2c4:	6021      	str	r1, [r4, #0]
 800b2c6:	f109 0901 	add.w	r9, r9, #1
 800b2ca:	b11b      	cbz	r3, 800b2d4 <_scanf_float+0x158>
 800b2cc:	3b01      	subs	r3, #1
 800b2ce:	3201      	adds	r2, #1
 800b2d0:	9302      	str	r3, [sp, #8]
 800b2d2:	60a2      	str	r2, [r4, #8]
 800b2d4:	68a3      	ldr	r3, [r4, #8]
 800b2d6:	3b01      	subs	r3, #1
 800b2d8:	60a3      	str	r3, [r4, #8]
 800b2da:	6923      	ldr	r3, [r4, #16]
 800b2dc:	3301      	adds	r3, #1
 800b2de:	6123      	str	r3, [r4, #16]
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	3b01      	subs	r3, #1
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	607b      	str	r3, [r7, #4]
 800b2e8:	f340 8084 	ble.w	800b3f4 <_scanf_float+0x278>
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	3301      	adds	r3, #1
 800b2f0:	603b      	str	r3, [r7, #0]
 800b2f2:	e766      	b.n	800b1c2 <_scanf_float+0x46>
 800b2f4:	eb1a 0f05 	cmn.w	sl, r5
 800b2f8:	f47f af70 	bne.w	800b1dc <_scanf_float+0x60>
 800b2fc:	6822      	ldr	r2, [r4, #0]
 800b2fe:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800b302:	6022      	str	r2, [r4, #0]
 800b304:	f806 3b01 	strb.w	r3, [r6], #1
 800b308:	e7e4      	b.n	800b2d4 <_scanf_float+0x158>
 800b30a:	6822      	ldr	r2, [r4, #0]
 800b30c:	0610      	lsls	r0, r2, #24
 800b30e:	f57f af65 	bpl.w	800b1dc <_scanf_float+0x60>
 800b312:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b316:	e7f4      	b.n	800b302 <_scanf_float+0x186>
 800b318:	f1ba 0f00 	cmp.w	sl, #0
 800b31c:	d10e      	bne.n	800b33c <_scanf_float+0x1c0>
 800b31e:	f1b9 0f00 	cmp.w	r9, #0
 800b322:	d10e      	bne.n	800b342 <_scanf_float+0x1c6>
 800b324:	6822      	ldr	r2, [r4, #0]
 800b326:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b32a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b32e:	d108      	bne.n	800b342 <_scanf_float+0x1c6>
 800b330:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b334:	6022      	str	r2, [r4, #0]
 800b336:	f04f 0a01 	mov.w	sl, #1
 800b33a:	e7e3      	b.n	800b304 <_scanf_float+0x188>
 800b33c:	f1ba 0f02 	cmp.w	sl, #2
 800b340:	d055      	beq.n	800b3ee <_scanf_float+0x272>
 800b342:	2d01      	cmp	r5, #1
 800b344:	d002      	beq.n	800b34c <_scanf_float+0x1d0>
 800b346:	2d04      	cmp	r5, #4
 800b348:	f47f af48 	bne.w	800b1dc <_scanf_float+0x60>
 800b34c:	3501      	adds	r5, #1
 800b34e:	b2ed      	uxtb	r5, r5
 800b350:	e7d8      	b.n	800b304 <_scanf_float+0x188>
 800b352:	f1ba 0f01 	cmp.w	sl, #1
 800b356:	f47f af41 	bne.w	800b1dc <_scanf_float+0x60>
 800b35a:	f04f 0a02 	mov.w	sl, #2
 800b35e:	e7d1      	b.n	800b304 <_scanf_float+0x188>
 800b360:	b97d      	cbnz	r5, 800b382 <_scanf_float+0x206>
 800b362:	f1b9 0f00 	cmp.w	r9, #0
 800b366:	f47f af3c 	bne.w	800b1e2 <_scanf_float+0x66>
 800b36a:	6822      	ldr	r2, [r4, #0]
 800b36c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b370:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b374:	f47f af39 	bne.w	800b1ea <_scanf_float+0x6e>
 800b378:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b37c:	6022      	str	r2, [r4, #0]
 800b37e:	2501      	movs	r5, #1
 800b380:	e7c0      	b.n	800b304 <_scanf_float+0x188>
 800b382:	2d03      	cmp	r5, #3
 800b384:	d0e2      	beq.n	800b34c <_scanf_float+0x1d0>
 800b386:	2d05      	cmp	r5, #5
 800b388:	e7de      	b.n	800b348 <_scanf_float+0x1cc>
 800b38a:	2d02      	cmp	r5, #2
 800b38c:	f47f af26 	bne.w	800b1dc <_scanf_float+0x60>
 800b390:	2503      	movs	r5, #3
 800b392:	e7b7      	b.n	800b304 <_scanf_float+0x188>
 800b394:	2d06      	cmp	r5, #6
 800b396:	f47f af21 	bne.w	800b1dc <_scanf_float+0x60>
 800b39a:	2507      	movs	r5, #7
 800b39c:	e7b2      	b.n	800b304 <_scanf_float+0x188>
 800b39e:	6822      	ldr	r2, [r4, #0]
 800b3a0:	0591      	lsls	r1, r2, #22
 800b3a2:	f57f af1b 	bpl.w	800b1dc <_scanf_float+0x60>
 800b3a6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800b3aa:	6022      	str	r2, [r4, #0]
 800b3ac:	f8cd 9004 	str.w	r9, [sp, #4]
 800b3b0:	e7a8      	b.n	800b304 <_scanf_float+0x188>
 800b3b2:	6822      	ldr	r2, [r4, #0]
 800b3b4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800b3b8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b3bc:	d006      	beq.n	800b3cc <_scanf_float+0x250>
 800b3be:	0550      	lsls	r0, r2, #21
 800b3c0:	f57f af0c 	bpl.w	800b1dc <_scanf_float+0x60>
 800b3c4:	f1b9 0f00 	cmp.w	r9, #0
 800b3c8:	f43f af0f 	beq.w	800b1ea <_scanf_float+0x6e>
 800b3cc:	0591      	lsls	r1, r2, #22
 800b3ce:	bf58      	it	pl
 800b3d0:	9901      	ldrpl	r1, [sp, #4]
 800b3d2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b3d6:	bf58      	it	pl
 800b3d8:	eba9 0101 	subpl.w	r1, r9, r1
 800b3dc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800b3e0:	bf58      	it	pl
 800b3e2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b3e6:	6022      	str	r2, [r4, #0]
 800b3e8:	f04f 0900 	mov.w	r9, #0
 800b3ec:	e78a      	b.n	800b304 <_scanf_float+0x188>
 800b3ee:	f04f 0a03 	mov.w	sl, #3
 800b3f2:	e787      	b.n	800b304 <_scanf_float+0x188>
 800b3f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b3f8:	4639      	mov	r1, r7
 800b3fa:	4640      	mov	r0, r8
 800b3fc:	4798      	blx	r3
 800b3fe:	2800      	cmp	r0, #0
 800b400:	f43f aedf 	beq.w	800b1c2 <_scanf_float+0x46>
 800b404:	e6ea      	b.n	800b1dc <_scanf_float+0x60>
 800b406:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b40a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b40e:	463a      	mov	r2, r7
 800b410:	4640      	mov	r0, r8
 800b412:	4798      	blx	r3
 800b414:	6923      	ldr	r3, [r4, #16]
 800b416:	3b01      	subs	r3, #1
 800b418:	6123      	str	r3, [r4, #16]
 800b41a:	e6ec      	b.n	800b1f6 <_scanf_float+0x7a>
 800b41c:	1e6b      	subs	r3, r5, #1
 800b41e:	2b06      	cmp	r3, #6
 800b420:	d825      	bhi.n	800b46e <_scanf_float+0x2f2>
 800b422:	2d02      	cmp	r5, #2
 800b424:	d836      	bhi.n	800b494 <_scanf_float+0x318>
 800b426:	455e      	cmp	r6, fp
 800b428:	f67f aee8 	bls.w	800b1fc <_scanf_float+0x80>
 800b42c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b430:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b434:	463a      	mov	r2, r7
 800b436:	4640      	mov	r0, r8
 800b438:	4798      	blx	r3
 800b43a:	6923      	ldr	r3, [r4, #16]
 800b43c:	3b01      	subs	r3, #1
 800b43e:	6123      	str	r3, [r4, #16]
 800b440:	e7f1      	b.n	800b426 <_scanf_float+0x2aa>
 800b442:	9802      	ldr	r0, [sp, #8]
 800b444:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b448:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800b44c:	9002      	str	r0, [sp, #8]
 800b44e:	463a      	mov	r2, r7
 800b450:	4640      	mov	r0, r8
 800b452:	4798      	blx	r3
 800b454:	6923      	ldr	r3, [r4, #16]
 800b456:	3b01      	subs	r3, #1
 800b458:	6123      	str	r3, [r4, #16]
 800b45a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b45e:	fa5f fa8a 	uxtb.w	sl, sl
 800b462:	f1ba 0f02 	cmp.w	sl, #2
 800b466:	d1ec      	bne.n	800b442 <_scanf_float+0x2c6>
 800b468:	3d03      	subs	r5, #3
 800b46a:	b2ed      	uxtb	r5, r5
 800b46c:	1b76      	subs	r6, r6, r5
 800b46e:	6823      	ldr	r3, [r4, #0]
 800b470:	05da      	lsls	r2, r3, #23
 800b472:	d52f      	bpl.n	800b4d4 <_scanf_float+0x358>
 800b474:	055b      	lsls	r3, r3, #21
 800b476:	d510      	bpl.n	800b49a <_scanf_float+0x31e>
 800b478:	455e      	cmp	r6, fp
 800b47a:	f67f aebf 	bls.w	800b1fc <_scanf_float+0x80>
 800b47e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b482:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b486:	463a      	mov	r2, r7
 800b488:	4640      	mov	r0, r8
 800b48a:	4798      	blx	r3
 800b48c:	6923      	ldr	r3, [r4, #16]
 800b48e:	3b01      	subs	r3, #1
 800b490:	6123      	str	r3, [r4, #16]
 800b492:	e7f1      	b.n	800b478 <_scanf_float+0x2fc>
 800b494:	46aa      	mov	sl, r5
 800b496:	9602      	str	r6, [sp, #8]
 800b498:	e7df      	b.n	800b45a <_scanf_float+0x2de>
 800b49a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b49e:	6923      	ldr	r3, [r4, #16]
 800b4a0:	2965      	cmp	r1, #101	; 0x65
 800b4a2:	f103 33ff 	add.w	r3, r3, #4294967295
 800b4a6:	f106 35ff 	add.w	r5, r6, #4294967295
 800b4aa:	6123      	str	r3, [r4, #16]
 800b4ac:	d00c      	beq.n	800b4c8 <_scanf_float+0x34c>
 800b4ae:	2945      	cmp	r1, #69	; 0x45
 800b4b0:	d00a      	beq.n	800b4c8 <_scanf_float+0x34c>
 800b4b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b4b6:	463a      	mov	r2, r7
 800b4b8:	4640      	mov	r0, r8
 800b4ba:	4798      	blx	r3
 800b4bc:	6923      	ldr	r3, [r4, #16]
 800b4be:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b4c2:	3b01      	subs	r3, #1
 800b4c4:	1eb5      	subs	r5, r6, #2
 800b4c6:	6123      	str	r3, [r4, #16]
 800b4c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b4cc:	463a      	mov	r2, r7
 800b4ce:	4640      	mov	r0, r8
 800b4d0:	4798      	blx	r3
 800b4d2:	462e      	mov	r6, r5
 800b4d4:	6825      	ldr	r5, [r4, #0]
 800b4d6:	f015 0510 	ands.w	r5, r5, #16
 800b4da:	d158      	bne.n	800b58e <_scanf_float+0x412>
 800b4dc:	7035      	strb	r5, [r6, #0]
 800b4de:	6823      	ldr	r3, [r4, #0]
 800b4e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b4e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b4e8:	d11c      	bne.n	800b524 <_scanf_float+0x3a8>
 800b4ea:	9b01      	ldr	r3, [sp, #4]
 800b4ec:	454b      	cmp	r3, r9
 800b4ee:	eba3 0209 	sub.w	r2, r3, r9
 800b4f2:	d124      	bne.n	800b53e <_scanf_float+0x3c2>
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	4659      	mov	r1, fp
 800b4f8:	4640      	mov	r0, r8
 800b4fa:	f000 ff2f 	bl	800c35c <_strtod_r>
 800b4fe:	9b03      	ldr	r3, [sp, #12]
 800b500:	6821      	ldr	r1, [r4, #0]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	f011 0f02 	tst.w	r1, #2
 800b508:	ec57 6b10 	vmov	r6, r7, d0
 800b50c:	f103 0204 	add.w	r2, r3, #4
 800b510:	d020      	beq.n	800b554 <_scanf_float+0x3d8>
 800b512:	9903      	ldr	r1, [sp, #12]
 800b514:	600a      	str	r2, [r1, #0]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	e9c3 6700 	strd	r6, r7, [r3]
 800b51c:	68e3      	ldr	r3, [r4, #12]
 800b51e:	3301      	adds	r3, #1
 800b520:	60e3      	str	r3, [r4, #12]
 800b522:	e66c      	b.n	800b1fe <_scanf_float+0x82>
 800b524:	9b04      	ldr	r3, [sp, #16]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d0e4      	beq.n	800b4f4 <_scanf_float+0x378>
 800b52a:	9905      	ldr	r1, [sp, #20]
 800b52c:	230a      	movs	r3, #10
 800b52e:	462a      	mov	r2, r5
 800b530:	3101      	adds	r1, #1
 800b532:	4640      	mov	r0, r8
 800b534:	f000 ff9c 	bl	800c470 <_strtol_r>
 800b538:	9b04      	ldr	r3, [sp, #16]
 800b53a:	9e05      	ldr	r6, [sp, #20]
 800b53c:	1ac2      	subs	r2, r0, r3
 800b53e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b542:	429e      	cmp	r6, r3
 800b544:	bf28      	it	cs
 800b546:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800b54a:	4912      	ldr	r1, [pc, #72]	; (800b594 <_scanf_float+0x418>)
 800b54c:	4630      	mov	r0, r6
 800b54e:	f000 f83b 	bl	800b5c8 <siprintf>
 800b552:	e7cf      	b.n	800b4f4 <_scanf_float+0x378>
 800b554:	f011 0f04 	tst.w	r1, #4
 800b558:	9903      	ldr	r1, [sp, #12]
 800b55a:	600a      	str	r2, [r1, #0]
 800b55c:	d1db      	bne.n	800b516 <_scanf_float+0x39a>
 800b55e:	f8d3 8000 	ldr.w	r8, [r3]
 800b562:	ee10 2a10 	vmov	r2, s0
 800b566:	ee10 0a10 	vmov	r0, s0
 800b56a:	463b      	mov	r3, r7
 800b56c:	4639      	mov	r1, r7
 800b56e:	f7f5 fae5 	bl	8000b3c <__aeabi_dcmpun>
 800b572:	b128      	cbz	r0, 800b580 <_scanf_float+0x404>
 800b574:	4808      	ldr	r0, [pc, #32]	; (800b598 <_scanf_float+0x41c>)
 800b576:	f000 f821 	bl	800b5bc <nanf>
 800b57a:	ed88 0a00 	vstr	s0, [r8]
 800b57e:	e7cd      	b.n	800b51c <_scanf_float+0x3a0>
 800b580:	4630      	mov	r0, r6
 800b582:	4639      	mov	r1, r7
 800b584:	f7f5 fb38 	bl	8000bf8 <__aeabi_d2f>
 800b588:	f8c8 0000 	str.w	r0, [r8]
 800b58c:	e7c6      	b.n	800b51c <_scanf_float+0x3a0>
 800b58e:	2500      	movs	r5, #0
 800b590:	e635      	b.n	800b1fe <_scanf_float+0x82>
 800b592:	bf00      	nop
 800b594:	08011dde 	.word	0x08011dde
 800b598:	08012213 	.word	0x08012213

0800b59c <_sbrk_r>:
 800b59c:	b538      	push	{r3, r4, r5, lr}
 800b59e:	4d06      	ldr	r5, [pc, #24]	; (800b5b8 <_sbrk_r+0x1c>)
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	4604      	mov	r4, r0
 800b5a4:	4608      	mov	r0, r1
 800b5a6:	602b      	str	r3, [r5, #0]
 800b5a8:	f7fb f8e4 	bl	8006774 <_sbrk>
 800b5ac:	1c43      	adds	r3, r0, #1
 800b5ae:	d102      	bne.n	800b5b6 <_sbrk_r+0x1a>
 800b5b0:	682b      	ldr	r3, [r5, #0]
 800b5b2:	b103      	cbz	r3, 800b5b6 <_sbrk_r+0x1a>
 800b5b4:	6023      	str	r3, [r4, #0]
 800b5b6:	bd38      	pop	{r3, r4, r5, pc}
 800b5b8:	20001fd4 	.word	0x20001fd4

0800b5bc <nanf>:
 800b5bc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b5c4 <nanf+0x8>
 800b5c0:	4770      	bx	lr
 800b5c2:	bf00      	nop
 800b5c4:	7fc00000 	.word	0x7fc00000

0800b5c8 <siprintf>:
 800b5c8:	b40e      	push	{r1, r2, r3}
 800b5ca:	b500      	push	{lr}
 800b5cc:	b09c      	sub	sp, #112	; 0x70
 800b5ce:	ab1d      	add	r3, sp, #116	; 0x74
 800b5d0:	9002      	str	r0, [sp, #8]
 800b5d2:	9006      	str	r0, [sp, #24]
 800b5d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b5d8:	4809      	ldr	r0, [pc, #36]	; (800b600 <siprintf+0x38>)
 800b5da:	9107      	str	r1, [sp, #28]
 800b5dc:	9104      	str	r1, [sp, #16]
 800b5de:	4909      	ldr	r1, [pc, #36]	; (800b604 <siprintf+0x3c>)
 800b5e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5e4:	9105      	str	r1, [sp, #20]
 800b5e6:	6800      	ldr	r0, [r0, #0]
 800b5e8:	9301      	str	r3, [sp, #4]
 800b5ea:	a902      	add	r1, sp, #8
 800b5ec:	f002 feb4 	bl	800e358 <_svfiprintf_r>
 800b5f0:	9b02      	ldr	r3, [sp, #8]
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	701a      	strb	r2, [r3, #0]
 800b5f6:	b01c      	add	sp, #112	; 0x70
 800b5f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b5fc:	b003      	add	sp, #12
 800b5fe:	4770      	bx	lr
 800b600:	2000003c 	.word	0x2000003c
 800b604:	ffff0208 	.word	0xffff0208

0800b608 <siscanf>:
 800b608:	b40e      	push	{r1, r2, r3}
 800b60a:	b510      	push	{r4, lr}
 800b60c:	b09f      	sub	sp, #124	; 0x7c
 800b60e:	ac21      	add	r4, sp, #132	; 0x84
 800b610:	f44f 7101 	mov.w	r1, #516	; 0x204
 800b614:	f854 2b04 	ldr.w	r2, [r4], #4
 800b618:	9201      	str	r2, [sp, #4]
 800b61a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800b61e:	9004      	str	r0, [sp, #16]
 800b620:	9008      	str	r0, [sp, #32]
 800b622:	f7f4 fddd 	bl	80001e0 <strlen>
 800b626:	4b0c      	ldr	r3, [pc, #48]	; (800b658 <siscanf+0x50>)
 800b628:	9005      	str	r0, [sp, #20]
 800b62a:	9009      	str	r0, [sp, #36]	; 0x24
 800b62c:	930d      	str	r3, [sp, #52]	; 0x34
 800b62e:	480b      	ldr	r0, [pc, #44]	; (800b65c <siscanf+0x54>)
 800b630:	9a01      	ldr	r2, [sp, #4]
 800b632:	6800      	ldr	r0, [r0, #0]
 800b634:	9403      	str	r4, [sp, #12]
 800b636:	2300      	movs	r3, #0
 800b638:	9311      	str	r3, [sp, #68]	; 0x44
 800b63a:	9316      	str	r3, [sp, #88]	; 0x58
 800b63c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b640:	f8ad 301e 	strh.w	r3, [sp, #30]
 800b644:	a904      	add	r1, sp, #16
 800b646:	4623      	mov	r3, r4
 800b648:	f002 ffe0 	bl	800e60c <__ssvfiscanf_r>
 800b64c:	b01f      	add	sp, #124	; 0x7c
 800b64e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b652:	b003      	add	sp, #12
 800b654:	4770      	bx	lr
 800b656:	bf00      	nop
 800b658:	0800b683 	.word	0x0800b683
 800b65c:	2000003c 	.word	0x2000003c

0800b660 <__sread>:
 800b660:	b510      	push	{r4, lr}
 800b662:	460c      	mov	r4, r1
 800b664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b668:	f003 fa94 	bl	800eb94 <_read_r>
 800b66c:	2800      	cmp	r0, #0
 800b66e:	bfab      	itete	ge
 800b670:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b672:	89a3      	ldrhlt	r3, [r4, #12]
 800b674:	181b      	addge	r3, r3, r0
 800b676:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b67a:	bfac      	ite	ge
 800b67c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b67e:	81a3      	strhlt	r3, [r4, #12]
 800b680:	bd10      	pop	{r4, pc}

0800b682 <__seofread>:
 800b682:	2000      	movs	r0, #0
 800b684:	4770      	bx	lr

0800b686 <__swrite>:
 800b686:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b68a:	461f      	mov	r7, r3
 800b68c:	898b      	ldrh	r3, [r1, #12]
 800b68e:	05db      	lsls	r3, r3, #23
 800b690:	4605      	mov	r5, r0
 800b692:	460c      	mov	r4, r1
 800b694:	4616      	mov	r6, r2
 800b696:	d505      	bpl.n	800b6a4 <__swrite+0x1e>
 800b698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b69c:	2302      	movs	r3, #2
 800b69e:	2200      	movs	r2, #0
 800b6a0:	f002 f8f6 	bl	800d890 <_lseek_r>
 800b6a4:	89a3      	ldrh	r3, [r4, #12]
 800b6a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b6aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b6ae:	81a3      	strh	r3, [r4, #12]
 800b6b0:	4632      	mov	r2, r6
 800b6b2:	463b      	mov	r3, r7
 800b6b4:	4628      	mov	r0, r5
 800b6b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b6ba:	f000 bedb 	b.w	800c474 <_write_r>

0800b6be <__sseek>:
 800b6be:	b510      	push	{r4, lr}
 800b6c0:	460c      	mov	r4, r1
 800b6c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6c6:	f002 f8e3 	bl	800d890 <_lseek_r>
 800b6ca:	1c43      	adds	r3, r0, #1
 800b6cc:	89a3      	ldrh	r3, [r4, #12]
 800b6ce:	bf15      	itete	ne
 800b6d0:	6560      	strne	r0, [r4, #84]	; 0x54
 800b6d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b6d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b6da:	81a3      	strheq	r3, [r4, #12]
 800b6dc:	bf18      	it	ne
 800b6de:	81a3      	strhne	r3, [r4, #12]
 800b6e0:	bd10      	pop	{r4, pc}

0800b6e2 <__sclose>:
 800b6e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6e6:	f000 bed7 	b.w	800c498 <_close_r>

0800b6ea <strncmp>:
 800b6ea:	b510      	push	{r4, lr}
 800b6ec:	b16a      	cbz	r2, 800b70a <strncmp+0x20>
 800b6ee:	3901      	subs	r1, #1
 800b6f0:	1884      	adds	r4, r0, r2
 800b6f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b6f6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b6fa:	4293      	cmp	r3, r2
 800b6fc:	d103      	bne.n	800b706 <strncmp+0x1c>
 800b6fe:	42a0      	cmp	r0, r4
 800b700:	d001      	beq.n	800b706 <strncmp+0x1c>
 800b702:	2b00      	cmp	r3, #0
 800b704:	d1f5      	bne.n	800b6f2 <strncmp+0x8>
 800b706:	1a98      	subs	r0, r3, r2
 800b708:	bd10      	pop	{r4, pc}
 800b70a:	4610      	mov	r0, r2
 800b70c:	e7fc      	b.n	800b708 <strncmp+0x1e>

0800b70e <sulp>:
 800b70e:	b570      	push	{r4, r5, r6, lr}
 800b710:	4604      	mov	r4, r0
 800b712:	460d      	mov	r5, r1
 800b714:	ec45 4b10 	vmov	d0, r4, r5
 800b718:	4616      	mov	r6, r2
 800b71a:	f002 fc63 	bl	800dfe4 <__ulp>
 800b71e:	ec51 0b10 	vmov	r0, r1, d0
 800b722:	b17e      	cbz	r6, 800b744 <sulp+0x36>
 800b724:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b728:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	dd09      	ble.n	800b744 <sulp+0x36>
 800b730:	051b      	lsls	r3, r3, #20
 800b732:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b736:	2400      	movs	r4, #0
 800b738:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b73c:	4622      	mov	r2, r4
 800b73e:	462b      	mov	r3, r5
 800b740:	f7f4 ff62 	bl	8000608 <__aeabi_dmul>
 800b744:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b748 <_strtod_l>:
 800b748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b74c:	b0a3      	sub	sp, #140	; 0x8c
 800b74e:	461f      	mov	r7, r3
 800b750:	2300      	movs	r3, #0
 800b752:	931e      	str	r3, [sp, #120]	; 0x78
 800b754:	4ba4      	ldr	r3, [pc, #656]	; (800b9e8 <_strtod_l+0x2a0>)
 800b756:	9219      	str	r2, [sp, #100]	; 0x64
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	9307      	str	r3, [sp, #28]
 800b75c:	4604      	mov	r4, r0
 800b75e:	4618      	mov	r0, r3
 800b760:	4688      	mov	r8, r1
 800b762:	f7f4 fd3d 	bl	80001e0 <strlen>
 800b766:	f04f 0a00 	mov.w	sl, #0
 800b76a:	4605      	mov	r5, r0
 800b76c:	f04f 0b00 	mov.w	fp, #0
 800b770:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800b774:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b776:	781a      	ldrb	r2, [r3, #0]
 800b778:	2a2b      	cmp	r2, #43	; 0x2b
 800b77a:	d04c      	beq.n	800b816 <_strtod_l+0xce>
 800b77c:	d839      	bhi.n	800b7f2 <_strtod_l+0xaa>
 800b77e:	2a0d      	cmp	r2, #13
 800b780:	d832      	bhi.n	800b7e8 <_strtod_l+0xa0>
 800b782:	2a08      	cmp	r2, #8
 800b784:	d832      	bhi.n	800b7ec <_strtod_l+0xa4>
 800b786:	2a00      	cmp	r2, #0
 800b788:	d03c      	beq.n	800b804 <_strtod_l+0xbc>
 800b78a:	2300      	movs	r3, #0
 800b78c:	930e      	str	r3, [sp, #56]	; 0x38
 800b78e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800b790:	7833      	ldrb	r3, [r6, #0]
 800b792:	2b30      	cmp	r3, #48	; 0x30
 800b794:	f040 80b4 	bne.w	800b900 <_strtod_l+0x1b8>
 800b798:	7873      	ldrb	r3, [r6, #1]
 800b79a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b79e:	2b58      	cmp	r3, #88	; 0x58
 800b7a0:	d16c      	bne.n	800b87c <_strtod_l+0x134>
 800b7a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b7a4:	9301      	str	r3, [sp, #4]
 800b7a6:	ab1e      	add	r3, sp, #120	; 0x78
 800b7a8:	9702      	str	r7, [sp, #8]
 800b7aa:	9300      	str	r3, [sp, #0]
 800b7ac:	4a8f      	ldr	r2, [pc, #572]	; (800b9ec <_strtod_l+0x2a4>)
 800b7ae:	ab1f      	add	r3, sp, #124	; 0x7c
 800b7b0:	a91d      	add	r1, sp, #116	; 0x74
 800b7b2:	4620      	mov	r0, r4
 800b7b4:	f001 fd60 	bl	800d278 <__gethex>
 800b7b8:	f010 0707 	ands.w	r7, r0, #7
 800b7bc:	4605      	mov	r5, r0
 800b7be:	d005      	beq.n	800b7cc <_strtod_l+0x84>
 800b7c0:	2f06      	cmp	r7, #6
 800b7c2:	d12a      	bne.n	800b81a <_strtod_l+0xd2>
 800b7c4:	3601      	adds	r6, #1
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	961d      	str	r6, [sp, #116]	; 0x74
 800b7ca:	930e      	str	r3, [sp, #56]	; 0x38
 800b7cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	f040 8596 	bne.w	800c300 <_strtod_l+0xbb8>
 800b7d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b7d6:	b1db      	cbz	r3, 800b810 <_strtod_l+0xc8>
 800b7d8:	4652      	mov	r2, sl
 800b7da:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b7de:	ec43 2b10 	vmov	d0, r2, r3
 800b7e2:	b023      	add	sp, #140	; 0x8c
 800b7e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7e8:	2a20      	cmp	r2, #32
 800b7ea:	d1ce      	bne.n	800b78a <_strtod_l+0x42>
 800b7ec:	3301      	adds	r3, #1
 800b7ee:	931d      	str	r3, [sp, #116]	; 0x74
 800b7f0:	e7c0      	b.n	800b774 <_strtod_l+0x2c>
 800b7f2:	2a2d      	cmp	r2, #45	; 0x2d
 800b7f4:	d1c9      	bne.n	800b78a <_strtod_l+0x42>
 800b7f6:	2201      	movs	r2, #1
 800b7f8:	920e      	str	r2, [sp, #56]	; 0x38
 800b7fa:	1c5a      	adds	r2, r3, #1
 800b7fc:	921d      	str	r2, [sp, #116]	; 0x74
 800b7fe:	785b      	ldrb	r3, [r3, #1]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d1c4      	bne.n	800b78e <_strtod_l+0x46>
 800b804:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b806:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	f040 8576 	bne.w	800c2fc <_strtod_l+0xbb4>
 800b810:	4652      	mov	r2, sl
 800b812:	465b      	mov	r3, fp
 800b814:	e7e3      	b.n	800b7de <_strtod_l+0x96>
 800b816:	2200      	movs	r2, #0
 800b818:	e7ee      	b.n	800b7f8 <_strtod_l+0xb0>
 800b81a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b81c:	b13a      	cbz	r2, 800b82e <_strtod_l+0xe6>
 800b81e:	2135      	movs	r1, #53	; 0x35
 800b820:	a820      	add	r0, sp, #128	; 0x80
 800b822:	f002 fcea 	bl	800e1fa <__copybits>
 800b826:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b828:	4620      	mov	r0, r4
 800b82a:	f002 f8af 	bl	800d98c <_Bfree>
 800b82e:	3f01      	subs	r7, #1
 800b830:	2f05      	cmp	r7, #5
 800b832:	d807      	bhi.n	800b844 <_strtod_l+0xfc>
 800b834:	e8df f007 	tbb	[pc, r7]
 800b838:	1d180b0e 	.word	0x1d180b0e
 800b83c:	030e      	.short	0x030e
 800b83e:	f04f 0b00 	mov.w	fp, #0
 800b842:	46da      	mov	sl, fp
 800b844:	0728      	lsls	r0, r5, #28
 800b846:	d5c1      	bpl.n	800b7cc <_strtod_l+0x84>
 800b848:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800b84c:	e7be      	b.n	800b7cc <_strtod_l+0x84>
 800b84e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800b852:	e7f7      	b.n	800b844 <_strtod_l+0xfc>
 800b854:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800b858:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800b85a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b85e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b862:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b866:	e7ed      	b.n	800b844 <_strtod_l+0xfc>
 800b868:	f8df b184 	ldr.w	fp, [pc, #388]	; 800b9f0 <_strtod_l+0x2a8>
 800b86c:	f04f 0a00 	mov.w	sl, #0
 800b870:	e7e8      	b.n	800b844 <_strtod_l+0xfc>
 800b872:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800b876:	f04f 3aff 	mov.w	sl, #4294967295
 800b87a:	e7e3      	b.n	800b844 <_strtod_l+0xfc>
 800b87c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b87e:	1c5a      	adds	r2, r3, #1
 800b880:	921d      	str	r2, [sp, #116]	; 0x74
 800b882:	785b      	ldrb	r3, [r3, #1]
 800b884:	2b30      	cmp	r3, #48	; 0x30
 800b886:	d0f9      	beq.n	800b87c <_strtod_l+0x134>
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d09f      	beq.n	800b7cc <_strtod_l+0x84>
 800b88c:	2301      	movs	r3, #1
 800b88e:	f04f 0900 	mov.w	r9, #0
 800b892:	9304      	str	r3, [sp, #16]
 800b894:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b896:	930a      	str	r3, [sp, #40]	; 0x28
 800b898:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800b89c:	464f      	mov	r7, r9
 800b89e:	220a      	movs	r2, #10
 800b8a0:	981d      	ldr	r0, [sp, #116]	; 0x74
 800b8a2:	7806      	ldrb	r6, [r0, #0]
 800b8a4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b8a8:	b2d9      	uxtb	r1, r3
 800b8aa:	2909      	cmp	r1, #9
 800b8ac:	d92a      	bls.n	800b904 <_strtod_l+0x1bc>
 800b8ae:	9907      	ldr	r1, [sp, #28]
 800b8b0:	462a      	mov	r2, r5
 800b8b2:	f7ff ff1a 	bl	800b6ea <strncmp>
 800b8b6:	b398      	cbz	r0, 800b920 <_strtod_l+0x1d8>
 800b8b8:	2000      	movs	r0, #0
 800b8ba:	4633      	mov	r3, r6
 800b8bc:	463d      	mov	r5, r7
 800b8be:	9007      	str	r0, [sp, #28]
 800b8c0:	4602      	mov	r2, r0
 800b8c2:	2b65      	cmp	r3, #101	; 0x65
 800b8c4:	d001      	beq.n	800b8ca <_strtod_l+0x182>
 800b8c6:	2b45      	cmp	r3, #69	; 0x45
 800b8c8:	d118      	bne.n	800b8fc <_strtod_l+0x1b4>
 800b8ca:	b91d      	cbnz	r5, 800b8d4 <_strtod_l+0x18c>
 800b8cc:	9b04      	ldr	r3, [sp, #16]
 800b8ce:	4303      	orrs	r3, r0
 800b8d0:	d098      	beq.n	800b804 <_strtod_l+0xbc>
 800b8d2:	2500      	movs	r5, #0
 800b8d4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800b8d8:	f108 0301 	add.w	r3, r8, #1
 800b8dc:	931d      	str	r3, [sp, #116]	; 0x74
 800b8de:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b8e2:	2b2b      	cmp	r3, #43	; 0x2b
 800b8e4:	d075      	beq.n	800b9d2 <_strtod_l+0x28a>
 800b8e6:	2b2d      	cmp	r3, #45	; 0x2d
 800b8e8:	d07b      	beq.n	800b9e2 <_strtod_l+0x29a>
 800b8ea:	f04f 0c00 	mov.w	ip, #0
 800b8ee:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800b8f2:	2909      	cmp	r1, #9
 800b8f4:	f240 8082 	bls.w	800b9fc <_strtod_l+0x2b4>
 800b8f8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800b8fc:	2600      	movs	r6, #0
 800b8fe:	e09d      	b.n	800ba3c <_strtod_l+0x2f4>
 800b900:	2300      	movs	r3, #0
 800b902:	e7c4      	b.n	800b88e <_strtod_l+0x146>
 800b904:	2f08      	cmp	r7, #8
 800b906:	bfd8      	it	le
 800b908:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800b90a:	f100 0001 	add.w	r0, r0, #1
 800b90e:	bfda      	itte	le
 800b910:	fb02 3301 	mlale	r3, r2, r1, r3
 800b914:	9309      	strle	r3, [sp, #36]	; 0x24
 800b916:	fb02 3909 	mlagt	r9, r2, r9, r3
 800b91a:	3701      	adds	r7, #1
 800b91c:	901d      	str	r0, [sp, #116]	; 0x74
 800b91e:	e7bf      	b.n	800b8a0 <_strtod_l+0x158>
 800b920:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b922:	195a      	adds	r2, r3, r5
 800b924:	921d      	str	r2, [sp, #116]	; 0x74
 800b926:	5d5b      	ldrb	r3, [r3, r5]
 800b928:	2f00      	cmp	r7, #0
 800b92a:	d037      	beq.n	800b99c <_strtod_l+0x254>
 800b92c:	9007      	str	r0, [sp, #28]
 800b92e:	463d      	mov	r5, r7
 800b930:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800b934:	2a09      	cmp	r2, #9
 800b936:	d912      	bls.n	800b95e <_strtod_l+0x216>
 800b938:	2201      	movs	r2, #1
 800b93a:	e7c2      	b.n	800b8c2 <_strtod_l+0x17a>
 800b93c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b93e:	1c5a      	adds	r2, r3, #1
 800b940:	921d      	str	r2, [sp, #116]	; 0x74
 800b942:	785b      	ldrb	r3, [r3, #1]
 800b944:	3001      	adds	r0, #1
 800b946:	2b30      	cmp	r3, #48	; 0x30
 800b948:	d0f8      	beq.n	800b93c <_strtod_l+0x1f4>
 800b94a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800b94e:	2a08      	cmp	r2, #8
 800b950:	f200 84db 	bhi.w	800c30a <_strtod_l+0xbc2>
 800b954:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800b956:	9007      	str	r0, [sp, #28]
 800b958:	2000      	movs	r0, #0
 800b95a:	920a      	str	r2, [sp, #40]	; 0x28
 800b95c:	4605      	mov	r5, r0
 800b95e:	3b30      	subs	r3, #48	; 0x30
 800b960:	f100 0201 	add.w	r2, r0, #1
 800b964:	d014      	beq.n	800b990 <_strtod_l+0x248>
 800b966:	9907      	ldr	r1, [sp, #28]
 800b968:	4411      	add	r1, r2
 800b96a:	9107      	str	r1, [sp, #28]
 800b96c:	462a      	mov	r2, r5
 800b96e:	eb00 0e05 	add.w	lr, r0, r5
 800b972:	210a      	movs	r1, #10
 800b974:	4572      	cmp	r2, lr
 800b976:	d113      	bne.n	800b9a0 <_strtod_l+0x258>
 800b978:	182a      	adds	r2, r5, r0
 800b97a:	2a08      	cmp	r2, #8
 800b97c:	f105 0501 	add.w	r5, r5, #1
 800b980:	4405      	add	r5, r0
 800b982:	dc1c      	bgt.n	800b9be <_strtod_l+0x276>
 800b984:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b986:	220a      	movs	r2, #10
 800b988:	fb02 3301 	mla	r3, r2, r1, r3
 800b98c:	9309      	str	r3, [sp, #36]	; 0x24
 800b98e:	2200      	movs	r2, #0
 800b990:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b992:	1c59      	adds	r1, r3, #1
 800b994:	911d      	str	r1, [sp, #116]	; 0x74
 800b996:	785b      	ldrb	r3, [r3, #1]
 800b998:	4610      	mov	r0, r2
 800b99a:	e7c9      	b.n	800b930 <_strtod_l+0x1e8>
 800b99c:	4638      	mov	r0, r7
 800b99e:	e7d2      	b.n	800b946 <_strtod_l+0x1fe>
 800b9a0:	2a08      	cmp	r2, #8
 800b9a2:	dc04      	bgt.n	800b9ae <_strtod_l+0x266>
 800b9a4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b9a6:	434e      	muls	r6, r1
 800b9a8:	9609      	str	r6, [sp, #36]	; 0x24
 800b9aa:	3201      	adds	r2, #1
 800b9ac:	e7e2      	b.n	800b974 <_strtod_l+0x22c>
 800b9ae:	f102 0c01 	add.w	ip, r2, #1
 800b9b2:	f1bc 0f10 	cmp.w	ip, #16
 800b9b6:	bfd8      	it	le
 800b9b8:	fb01 f909 	mulle.w	r9, r1, r9
 800b9bc:	e7f5      	b.n	800b9aa <_strtod_l+0x262>
 800b9be:	2d10      	cmp	r5, #16
 800b9c0:	bfdc      	itt	le
 800b9c2:	220a      	movle	r2, #10
 800b9c4:	fb02 3909 	mlale	r9, r2, r9, r3
 800b9c8:	e7e1      	b.n	800b98e <_strtod_l+0x246>
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	9307      	str	r3, [sp, #28]
 800b9ce:	2201      	movs	r2, #1
 800b9d0:	e77c      	b.n	800b8cc <_strtod_l+0x184>
 800b9d2:	f04f 0c00 	mov.w	ip, #0
 800b9d6:	f108 0302 	add.w	r3, r8, #2
 800b9da:	931d      	str	r3, [sp, #116]	; 0x74
 800b9dc:	f898 3002 	ldrb.w	r3, [r8, #2]
 800b9e0:	e785      	b.n	800b8ee <_strtod_l+0x1a6>
 800b9e2:	f04f 0c01 	mov.w	ip, #1
 800b9e6:	e7f6      	b.n	800b9d6 <_strtod_l+0x28e>
 800b9e8:	08012038 	.word	0x08012038
 800b9ec:	08011de4 	.word	0x08011de4
 800b9f0:	7ff00000 	.word	0x7ff00000
 800b9f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b9f6:	1c59      	adds	r1, r3, #1
 800b9f8:	911d      	str	r1, [sp, #116]	; 0x74
 800b9fa:	785b      	ldrb	r3, [r3, #1]
 800b9fc:	2b30      	cmp	r3, #48	; 0x30
 800b9fe:	d0f9      	beq.n	800b9f4 <_strtod_l+0x2ac>
 800ba00:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800ba04:	2908      	cmp	r1, #8
 800ba06:	f63f af79 	bhi.w	800b8fc <_strtod_l+0x1b4>
 800ba0a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800ba0e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ba10:	9308      	str	r3, [sp, #32]
 800ba12:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ba14:	1c59      	adds	r1, r3, #1
 800ba16:	911d      	str	r1, [sp, #116]	; 0x74
 800ba18:	785b      	ldrb	r3, [r3, #1]
 800ba1a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800ba1e:	2e09      	cmp	r6, #9
 800ba20:	d937      	bls.n	800ba92 <_strtod_l+0x34a>
 800ba22:	9e08      	ldr	r6, [sp, #32]
 800ba24:	1b89      	subs	r1, r1, r6
 800ba26:	2908      	cmp	r1, #8
 800ba28:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800ba2c:	dc02      	bgt.n	800ba34 <_strtod_l+0x2ec>
 800ba2e:	4576      	cmp	r6, lr
 800ba30:	bfa8      	it	ge
 800ba32:	4676      	movge	r6, lr
 800ba34:	f1bc 0f00 	cmp.w	ip, #0
 800ba38:	d000      	beq.n	800ba3c <_strtod_l+0x2f4>
 800ba3a:	4276      	negs	r6, r6
 800ba3c:	2d00      	cmp	r5, #0
 800ba3e:	d14f      	bne.n	800bae0 <_strtod_l+0x398>
 800ba40:	9904      	ldr	r1, [sp, #16]
 800ba42:	4301      	orrs	r1, r0
 800ba44:	f47f aec2 	bne.w	800b7cc <_strtod_l+0x84>
 800ba48:	2a00      	cmp	r2, #0
 800ba4a:	f47f aedb 	bne.w	800b804 <_strtod_l+0xbc>
 800ba4e:	2b69      	cmp	r3, #105	; 0x69
 800ba50:	d027      	beq.n	800baa2 <_strtod_l+0x35a>
 800ba52:	dc24      	bgt.n	800ba9e <_strtod_l+0x356>
 800ba54:	2b49      	cmp	r3, #73	; 0x49
 800ba56:	d024      	beq.n	800baa2 <_strtod_l+0x35a>
 800ba58:	2b4e      	cmp	r3, #78	; 0x4e
 800ba5a:	f47f aed3 	bne.w	800b804 <_strtod_l+0xbc>
 800ba5e:	499e      	ldr	r1, [pc, #632]	; (800bcd8 <_strtod_l+0x590>)
 800ba60:	a81d      	add	r0, sp, #116	; 0x74
 800ba62:	f001 fe61 	bl	800d728 <__match>
 800ba66:	2800      	cmp	r0, #0
 800ba68:	f43f aecc 	beq.w	800b804 <_strtod_l+0xbc>
 800ba6c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ba6e:	781b      	ldrb	r3, [r3, #0]
 800ba70:	2b28      	cmp	r3, #40	; 0x28
 800ba72:	d12d      	bne.n	800bad0 <_strtod_l+0x388>
 800ba74:	4999      	ldr	r1, [pc, #612]	; (800bcdc <_strtod_l+0x594>)
 800ba76:	aa20      	add	r2, sp, #128	; 0x80
 800ba78:	a81d      	add	r0, sp, #116	; 0x74
 800ba7a:	f001 fe69 	bl	800d750 <__hexnan>
 800ba7e:	2805      	cmp	r0, #5
 800ba80:	d126      	bne.n	800bad0 <_strtod_l+0x388>
 800ba82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ba84:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800ba88:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800ba8c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800ba90:	e69c      	b.n	800b7cc <_strtod_l+0x84>
 800ba92:	210a      	movs	r1, #10
 800ba94:	fb01 3e0e 	mla	lr, r1, lr, r3
 800ba98:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800ba9c:	e7b9      	b.n	800ba12 <_strtod_l+0x2ca>
 800ba9e:	2b6e      	cmp	r3, #110	; 0x6e
 800baa0:	e7db      	b.n	800ba5a <_strtod_l+0x312>
 800baa2:	498f      	ldr	r1, [pc, #572]	; (800bce0 <_strtod_l+0x598>)
 800baa4:	a81d      	add	r0, sp, #116	; 0x74
 800baa6:	f001 fe3f 	bl	800d728 <__match>
 800baaa:	2800      	cmp	r0, #0
 800baac:	f43f aeaa 	beq.w	800b804 <_strtod_l+0xbc>
 800bab0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bab2:	498c      	ldr	r1, [pc, #560]	; (800bce4 <_strtod_l+0x59c>)
 800bab4:	3b01      	subs	r3, #1
 800bab6:	a81d      	add	r0, sp, #116	; 0x74
 800bab8:	931d      	str	r3, [sp, #116]	; 0x74
 800baba:	f001 fe35 	bl	800d728 <__match>
 800babe:	b910      	cbnz	r0, 800bac6 <_strtod_l+0x37e>
 800bac0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bac2:	3301      	adds	r3, #1
 800bac4:	931d      	str	r3, [sp, #116]	; 0x74
 800bac6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800bcf4 <_strtod_l+0x5ac>
 800baca:	f04f 0a00 	mov.w	sl, #0
 800bace:	e67d      	b.n	800b7cc <_strtod_l+0x84>
 800bad0:	4885      	ldr	r0, [pc, #532]	; (800bce8 <_strtod_l+0x5a0>)
 800bad2:	f003 f871 	bl	800ebb8 <nan>
 800bad6:	ed8d 0b04 	vstr	d0, [sp, #16]
 800bada:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800bade:	e675      	b.n	800b7cc <_strtod_l+0x84>
 800bae0:	9b07      	ldr	r3, [sp, #28]
 800bae2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bae4:	1af3      	subs	r3, r6, r3
 800bae6:	2f00      	cmp	r7, #0
 800bae8:	bf08      	it	eq
 800baea:	462f      	moveq	r7, r5
 800baec:	2d10      	cmp	r5, #16
 800baee:	9308      	str	r3, [sp, #32]
 800baf0:	46a8      	mov	r8, r5
 800baf2:	bfa8      	it	ge
 800baf4:	f04f 0810 	movge.w	r8, #16
 800baf8:	f7f4 fd0c 	bl	8000514 <__aeabi_ui2d>
 800bafc:	2d09      	cmp	r5, #9
 800bafe:	4682      	mov	sl, r0
 800bb00:	468b      	mov	fp, r1
 800bb02:	dd13      	ble.n	800bb2c <_strtod_l+0x3e4>
 800bb04:	4b79      	ldr	r3, [pc, #484]	; (800bcec <_strtod_l+0x5a4>)
 800bb06:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800bb0a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800bb0e:	f7f4 fd7b 	bl	8000608 <__aeabi_dmul>
 800bb12:	4682      	mov	sl, r0
 800bb14:	4648      	mov	r0, r9
 800bb16:	468b      	mov	fp, r1
 800bb18:	f7f4 fcfc 	bl	8000514 <__aeabi_ui2d>
 800bb1c:	4602      	mov	r2, r0
 800bb1e:	460b      	mov	r3, r1
 800bb20:	4650      	mov	r0, sl
 800bb22:	4659      	mov	r1, fp
 800bb24:	f7f4 fbba 	bl	800029c <__adddf3>
 800bb28:	4682      	mov	sl, r0
 800bb2a:	468b      	mov	fp, r1
 800bb2c:	2d0f      	cmp	r5, #15
 800bb2e:	dc38      	bgt.n	800bba2 <_strtod_l+0x45a>
 800bb30:	9b08      	ldr	r3, [sp, #32]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	f43f ae4a 	beq.w	800b7cc <_strtod_l+0x84>
 800bb38:	dd24      	ble.n	800bb84 <_strtod_l+0x43c>
 800bb3a:	2b16      	cmp	r3, #22
 800bb3c:	dc0b      	bgt.n	800bb56 <_strtod_l+0x40e>
 800bb3e:	4d6b      	ldr	r5, [pc, #428]	; (800bcec <_strtod_l+0x5a4>)
 800bb40:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800bb44:	e9d5 0100 	ldrd	r0, r1, [r5]
 800bb48:	4652      	mov	r2, sl
 800bb4a:	465b      	mov	r3, fp
 800bb4c:	f7f4 fd5c 	bl	8000608 <__aeabi_dmul>
 800bb50:	4682      	mov	sl, r0
 800bb52:	468b      	mov	fp, r1
 800bb54:	e63a      	b.n	800b7cc <_strtod_l+0x84>
 800bb56:	9a08      	ldr	r2, [sp, #32]
 800bb58:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800bb5c:	4293      	cmp	r3, r2
 800bb5e:	db20      	blt.n	800bba2 <_strtod_l+0x45a>
 800bb60:	4c62      	ldr	r4, [pc, #392]	; (800bcec <_strtod_l+0x5a4>)
 800bb62:	f1c5 050f 	rsb	r5, r5, #15
 800bb66:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800bb6a:	4652      	mov	r2, sl
 800bb6c:	465b      	mov	r3, fp
 800bb6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb72:	f7f4 fd49 	bl	8000608 <__aeabi_dmul>
 800bb76:	9b08      	ldr	r3, [sp, #32]
 800bb78:	1b5d      	subs	r5, r3, r5
 800bb7a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800bb7e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800bb82:	e7e3      	b.n	800bb4c <_strtod_l+0x404>
 800bb84:	9b08      	ldr	r3, [sp, #32]
 800bb86:	3316      	adds	r3, #22
 800bb88:	db0b      	blt.n	800bba2 <_strtod_l+0x45a>
 800bb8a:	9b07      	ldr	r3, [sp, #28]
 800bb8c:	4a57      	ldr	r2, [pc, #348]	; (800bcec <_strtod_l+0x5a4>)
 800bb8e:	1b9e      	subs	r6, r3, r6
 800bb90:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800bb94:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bb98:	4650      	mov	r0, sl
 800bb9a:	4659      	mov	r1, fp
 800bb9c:	f7f4 fe5e 	bl	800085c <__aeabi_ddiv>
 800bba0:	e7d6      	b.n	800bb50 <_strtod_l+0x408>
 800bba2:	9b08      	ldr	r3, [sp, #32]
 800bba4:	eba5 0808 	sub.w	r8, r5, r8
 800bba8:	4498      	add	r8, r3
 800bbaa:	f1b8 0f00 	cmp.w	r8, #0
 800bbae:	dd71      	ble.n	800bc94 <_strtod_l+0x54c>
 800bbb0:	f018 030f 	ands.w	r3, r8, #15
 800bbb4:	d00a      	beq.n	800bbcc <_strtod_l+0x484>
 800bbb6:	494d      	ldr	r1, [pc, #308]	; (800bcec <_strtod_l+0x5a4>)
 800bbb8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bbbc:	4652      	mov	r2, sl
 800bbbe:	465b      	mov	r3, fp
 800bbc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bbc4:	f7f4 fd20 	bl	8000608 <__aeabi_dmul>
 800bbc8:	4682      	mov	sl, r0
 800bbca:	468b      	mov	fp, r1
 800bbcc:	f038 080f 	bics.w	r8, r8, #15
 800bbd0:	d04d      	beq.n	800bc6e <_strtod_l+0x526>
 800bbd2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800bbd6:	dd22      	ble.n	800bc1e <_strtod_l+0x4d6>
 800bbd8:	2500      	movs	r5, #0
 800bbda:	462e      	mov	r6, r5
 800bbdc:	9509      	str	r5, [sp, #36]	; 0x24
 800bbde:	9507      	str	r5, [sp, #28]
 800bbe0:	2322      	movs	r3, #34	; 0x22
 800bbe2:	f8df b110 	ldr.w	fp, [pc, #272]	; 800bcf4 <_strtod_l+0x5ac>
 800bbe6:	6023      	str	r3, [r4, #0]
 800bbe8:	f04f 0a00 	mov.w	sl, #0
 800bbec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	f43f adec 	beq.w	800b7cc <_strtod_l+0x84>
 800bbf4:	991e      	ldr	r1, [sp, #120]	; 0x78
 800bbf6:	4620      	mov	r0, r4
 800bbf8:	f001 fec8 	bl	800d98c <_Bfree>
 800bbfc:	9907      	ldr	r1, [sp, #28]
 800bbfe:	4620      	mov	r0, r4
 800bc00:	f001 fec4 	bl	800d98c <_Bfree>
 800bc04:	4631      	mov	r1, r6
 800bc06:	4620      	mov	r0, r4
 800bc08:	f001 fec0 	bl	800d98c <_Bfree>
 800bc0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bc0e:	4620      	mov	r0, r4
 800bc10:	f001 febc 	bl	800d98c <_Bfree>
 800bc14:	4629      	mov	r1, r5
 800bc16:	4620      	mov	r0, r4
 800bc18:	f001 feb8 	bl	800d98c <_Bfree>
 800bc1c:	e5d6      	b.n	800b7cc <_strtod_l+0x84>
 800bc1e:	2300      	movs	r3, #0
 800bc20:	ea4f 1828 	mov.w	r8, r8, asr #4
 800bc24:	4650      	mov	r0, sl
 800bc26:	4659      	mov	r1, fp
 800bc28:	4699      	mov	r9, r3
 800bc2a:	f1b8 0f01 	cmp.w	r8, #1
 800bc2e:	dc21      	bgt.n	800bc74 <_strtod_l+0x52c>
 800bc30:	b10b      	cbz	r3, 800bc36 <_strtod_l+0x4ee>
 800bc32:	4682      	mov	sl, r0
 800bc34:	468b      	mov	fp, r1
 800bc36:	4b2e      	ldr	r3, [pc, #184]	; (800bcf0 <_strtod_l+0x5a8>)
 800bc38:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800bc3c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800bc40:	4652      	mov	r2, sl
 800bc42:	465b      	mov	r3, fp
 800bc44:	e9d9 0100 	ldrd	r0, r1, [r9]
 800bc48:	f7f4 fcde 	bl	8000608 <__aeabi_dmul>
 800bc4c:	4b29      	ldr	r3, [pc, #164]	; (800bcf4 <_strtod_l+0x5ac>)
 800bc4e:	460a      	mov	r2, r1
 800bc50:	400b      	ands	r3, r1
 800bc52:	4929      	ldr	r1, [pc, #164]	; (800bcf8 <_strtod_l+0x5b0>)
 800bc54:	428b      	cmp	r3, r1
 800bc56:	4682      	mov	sl, r0
 800bc58:	d8be      	bhi.n	800bbd8 <_strtod_l+0x490>
 800bc5a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800bc5e:	428b      	cmp	r3, r1
 800bc60:	bf86      	itte	hi
 800bc62:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800bcfc <_strtod_l+0x5b4>
 800bc66:	f04f 3aff 	movhi.w	sl, #4294967295
 800bc6a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800bc6e:	2300      	movs	r3, #0
 800bc70:	9304      	str	r3, [sp, #16]
 800bc72:	e081      	b.n	800bd78 <_strtod_l+0x630>
 800bc74:	f018 0f01 	tst.w	r8, #1
 800bc78:	d007      	beq.n	800bc8a <_strtod_l+0x542>
 800bc7a:	4b1d      	ldr	r3, [pc, #116]	; (800bcf0 <_strtod_l+0x5a8>)
 800bc7c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800bc80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc84:	f7f4 fcc0 	bl	8000608 <__aeabi_dmul>
 800bc88:	2301      	movs	r3, #1
 800bc8a:	f109 0901 	add.w	r9, r9, #1
 800bc8e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800bc92:	e7ca      	b.n	800bc2a <_strtod_l+0x4e2>
 800bc94:	d0eb      	beq.n	800bc6e <_strtod_l+0x526>
 800bc96:	f1c8 0800 	rsb	r8, r8, #0
 800bc9a:	f018 020f 	ands.w	r2, r8, #15
 800bc9e:	d00a      	beq.n	800bcb6 <_strtod_l+0x56e>
 800bca0:	4b12      	ldr	r3, [pc, #72]	; (800bcec <_strtod_l+0x5a4>)
 800bca2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bca6:	4650      	mov	r0, sl
 800bca8:	4659      	mov	r1, fp
 800bcaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcae:	f7f4 fdd5 	bl	800085c <__aeabi_ddiv>
 800bcb2:	4682      	mov	sl, r0
 800bcb4:	468b      	mov	fp, r1
 800bcb6:	ea5f 1828 	movs.w	r8, r8, asr #4
 800bcba:	d0d8      	beq.n	800bc6e <_strtod_l+0x526>
 800bcbc:	f1b8 0f1f 	cmp.w	r8, #31
 800bcc0:	dd1e      	ble.n	800bd00 <_strtod_l+0x5b8>
 800bcc2:	2500      	movs	r5, #0
 800bcc4:	462e      	mov	r6, r5
 800bcc6:	9509      	str	r5, [sp, #36]	; 0x24
 800bcc8:	9507      	str	r5, [sp, #28]
 800bcca:	2322      	movs	r3, #34	; 0x22
 800bccc:	f04f 0a00 	mov.w	sl, #0
 800bcd0:	f04f 0b00 	mov.w	fp, #0
 800bcd4:	6023      	str	r3, [r4, #0]
 800bcd6:	e789      	b.n	800bbec <_strtod_l+0x4a4>
 800bcd8:	08011db9 	.word	0x08011db9
 800bcdc:	08011df8 	.word	0x08011df8
 800bce0:	08011db1 	.word	0x08011db1
 800bce4:	08011f3c 	.word	0x08011f3c
 800bce8:	08012213 	.word	0x08012213
 800bcec:	080120d8 	.word	0x080120d8
 800bcf0:	080120b0 	.word	0x080120b0
 800bcf4:	7ff00000 	.word	0x7ff00000
 800bcf8:	7ca00000 	.word	0x7ca00000
 800bcfc:	7fefffff 	.word	0x7fefffff
 800bd00:	f018 0310 	ands.w	r3, r8, #16
 800bd04:	bf18      	it	ne
 800bd06:	236a      	movne	r3, #106	; 0x6a
 800bd08:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800c0c0 <_strtod_l+0x978>
 800bd0c:	9304      	str	r3, [sp, #16]
 800bd0e:	4650      	mov	r0, sl
 800bd10:	4659      	mov	r1, fp
 800bd12:	2300      	movs	r3, #0
 800bd14:	f018 0f01 	tst.w	r8, #1
 800bd18:	d004      	beq.n	800bd24 <_strtod_l+0x5dc>
 800bd1a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800bd1e:	f7f4 fc73 	bl	8000608 <__aeabi_dmul>
 800bd22:	2301      	movs	r3, #1
 800bd24:	ea5f 0868 	movs.w	r8, r8, asr #1
 800bd28:	f109 0908 	add.w	r9, r9, #8
 800bd2c:	d1f2      	bne.n	800bd14 <_strtod_l+0x5cc>
 800bd2e:	b10b      	cbz	r3, 800bd34 <_strtod_l+0x5ec>
 800bd30:	4682      	mov	sl, r0
 800bd32:	468b      	mov	fp, r1
 800bd34:	9b04      	ldr	r3, [sp, #16]
 800bd36:	b1bb      	cbz	r3, 800bd68 <_strtod_l+0x620>
 800bd38:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800bd3c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	4659      	mov	r1, fp
 800bd44:	dd10      	ble.n	800bd68 <_strtod_l+0x620>
 800bd46:	2b1f      	cmp	r3, #31
 800bd48:	f340 8128 	ble.w	800bf9c <_strtod_l+0x854>
 800bd4c:	2b34      	cmp	r3, #52	; 0x34
 800bd4e:	bfde      	ittt	le
 800bd50:	3b20      	suble	r3, #32
 800bd52:	f04f 32ff 	movle.w	r2, #4294967295
 800bd56:	fa02 f303 	lslle.w	r3, r2, r3
 800bd5a:	f04f 0a00 	mov.w	sl, #0
 800bd5e:	bfcc      	ite	gt
 800bd60:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800bd64:	ea03 0b01 	andle.w	fp, r3, r1
 800bd68:	2200      	movs	r2, #0
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	4650      	mov	r0, sl
 800bd6e:	4659      	mov	r1, fp
 800bd70:	f7f4 feb2 	bl	8000ad8 <__aeabi_dcmpeq>
 800bd74:	2800      	cmp	r0, #0
 800bd76:	d1a4      	bne.n	800bcc2 <_strtod_l+0x57a>
 800bd78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd7a:	9300      	str	r3, [sp, #0]
 800bd7c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bd7e:	462b      	mov	r3, r5
 800bd80:	463a      	mov	r2, r7
 800bd82:	4620      	mov	r0, r4
 800bd84:	f001 fe6e 	bl	800da64 <__s2b>
 800bd88:	9009      	str	r0, [sp, #36]	; 0x24
 800bd8a:	2800      	cmp	r0, #0
 800bd8c:	f43f af24 	beq.w	800bbd8 <_strtod_l+0x490>
 800bd90:	9b07      	ldr	r3, [sp, #28]
 800bd92:	1b9e      	subs	r6, r3, r6
 800bd94:	9b08      	ldr	r3, [sp, #32]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	bfb4      	ite	lt
 800bd9a:	4633      	movlt	r3, r6
 800bd9c:	2300      	movge	r3, #0
 800bd9e:	9310      	str	r3, [sp, #64]	; 0x40
 800bda0:	9b08      	ldr	r3, [sp, #32]
 800bda2:	2500      	movs	r5, #0
 800bda4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800bda8:	9318      	str	r3, [sp, #96]	; 0x60
 800bdaa:	462e      	mov	r6, r5
 800bdac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdae:	4620      	mov	r0, r4
 800bdb0:	6859      	ldr	r1, [r3, #4]
 800bdb2:	f001 fdab 	bl	800d90c <_Balloc>
 800bdb6:	9007      	str	r0, [sp, #28]
 800bdb8:	2800      	cmp	r0, #0
 800bdba:	f43f af11 	beq.w	800bbe0 <_strtod_l+0x498>
 800bdbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdc0:	691a      	ldr	r2, [r3, #16]
 800bdc2:	3202      	adds	r2, #2
 800bdc4:	f103 010c 	add.w	r1, r3, #12
 800bdc8:	0092      	lsls	r2, r2, #2
 800bdca:	300c      	adds	r0, #12
 800bdcc:	f001 fd84 	bl	800d8d8 <memcpy>
 800bdd0:	ec4b ab10 	vmov	d0, sl, fp
 800bdd4:	aa20      	add	r2, sp, #128	; 0x80
 800bdd6:	a91f      	add	r1, sp, #124	; 0x7c
 800bdd8:	4620      	mov	r0, r4
 800bdda:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800bdde:	f002 f97d 	bl	800e0dc <__d2b>
 800bde2:	901e      	str	r0, [sp, #120]	; 0x78
 800bde4:	2800      	cmp	r0, #0
 800bde6:	f43f aefb 	beq.w	800bbe0 <_strtod_l+0x498>
 800bdea:	2101      	movs	r1, #1
 800bdec:	4620      	mov	r0, r4
 800bdee:	f001 fed3 	bl	800db98 <__i2b>
 800bdf2:	4606      	mov	r6, r0
 800bdf4:	2800      	cmp	r0, #0
 800bdf6:	f43f aef3 	beq.w	800bbe0 <_strtod_l+0x498>
 800bdfa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bdfc:	9904      	ldr	r1, [sp, #16]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	bfab      	itete	ge
 800be02:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800be04:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800be06:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800be08:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800be0c:	bfac      	ite	ge
 800be0e:	eb03 0902 	addge.w	r9, r3, r2
 800be12:	1ad7      	sublt	r7, r2, r3
 800be14:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800be16:	eba3 0801 	sub.w	r8, r3, r1
 800be1a:	4490      	add	r8, r2
 800be1c:	4ba3      	ldr	r3, [pc, #652]	; (800c0ac <_strtod_l+0x964>)
 800be1e:	f108 38ff 	add.w	r8, r8, #4294967295
 800be22:	4598      	cmp	r8, r3
 800be24:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800be28:	f280 80cc 	bge.w	800bfc4 <_strtod_l+0x87c>
 800be2c:	eba3 0308 	sub.w	r3, r3, r8
 800be30:	2b1f      	cmp	r3, #31
 800be32:	eba2 0203 	sub.w	r2, r2, r3
 800be36:	f04f 0101 	mov.w	r1, #1
 800be3a:	f300 80b6 	bgt.w	800bfaa <_strtod_l+0x862>
 800be3e:	fa01 f303 	lsl.w	r3, r1, r3
 800be42:	9311      	str	r3, [sp, #68]	; 0x44
 800be44:	2300      	movs	r3, #0
 800be46:	930c      	str	r3, [sp, #48]	; 0x30
 800be48:	eb09 0802 	add.w	r8, r9, r2
 800be4c:	9b04      	ldr	r3, [sp, #16]
 800be4e:	45c1      	cmp	r9, r8
 800be50:	4417      	add	r7, r2
 800be52:	441f      	add	r7, r3
 800be54:	464b      	mov	r3, r9
 800be56:	bfa8      	it	ge
 800be58:	4643      	movge	r3, r8
 800be5a:	42bb      	cmp	r3, r7
 800be5c:	bfa8      	it	ge
 800be5e:	463b      	movge	r3, r7
 800be60:	2b00      	cmp	r3, #0
 800be62:	bfc2      	ittt	gt
 800be64:	eba8 0803 	subgt.w	r8, r8, r3
 800be68:	1aff      	subgt	r7, r7, r3
 800be6a:	eba9 0903 	subgt.w	r9, r9, r3
 800be6e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800be70:	2b00      	cmp	r3, #0
 800be72:	dd17      	ble.n	800bea4 <_strtod_l+0x75c>
 800be74:	4631      	mov	r1, r6
 800be76:	461a      	mov	r2, r3
 800be78:	4620      	mov	r0, r4
 800be7a:	f001 ff49 	bl	800dd10 <__pow5mult>
 800be7e:	4606      	mov	r6, r0
 800be80:	2800      	cmp	r0, #0
 800be82:	f43f aead 	beq.w	800bbe0 <_strtod_l+0x498>
 800be86:	4601      	mov	r1, r0
 800be88:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800be8a:	4620      	mov	r0, r4
 800be8c:	f001 fe9a 	bl	800dbc4 <__multiply>
 800be90:	900f      	str	r0, [sp, #60]	; 0x3c
 800be92:	2800      	cmp	r0, #0
 800be94:	f43f aea4 	beq.w	800bbe0 <_strtod_l+0x498>
 800be98:	991e      	ldr	r1, [sp, #120]	; 0x78
 800be9a:	4620      	mov	r0, r4
 800be9c:	f001 fd76 	bl	800d98c <_Bfree>
 800bea0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bea2:	931e      	str	r3, [sp, #120]	; 0x78
 800bea4:	f1b8 0f00 	cmp.w	r8, #0
 800bea8:	f300 8091 	bgt.w	800bfce <_strtod_l+0x886>
 800beac:	9b08      	ldr	r3, [sp, #32]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	dd08      	ble.n	800bec4 <_strtod_l+0x77c>
 800beb2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800beb4:	9907      	ldr	r1, [sp, #28]
 800beb6:	4620      	mov	r0, r4
 800beb8:	f001 ff2a 	bl	800dd10 <__pow5mult>
 800bebc:	9007      	str	r0, [sp, #28]
 800bebe:	2800      	cmp	r0, #0
 800bec0:	f43f ae8e 	beq.w	800bbe0 <_strtod_l+0x498>
 800bec4:	2f00      	cmp	r7, #0
 800bec6:	dd08      	ble.n	800beda <_strtod_l+0x792>
 800bec8:	9907      	ldr	r1, [sp, #28]
 800beca:	463a      	mov	r2, r7
 800becc:	4620      	mov	r0, r4
 800bece:	f001 ff79 	bl	800ddc4 <__lshift>
 800bed2:	9007      	str	r0, [sp, #28]
 800bed4:	2800      	cmp	r0, #0
 800bed6:	f43f ae83 	beq.w	800bbe0 <_strtod_l+0x498>
 800beda:	f1b9 0f00 	cmp.w	r9, #0
 800bede:	dd08      	ble.n	800bef2 <_strtod_l+0x7aa>
 800bee0:	4631      	mov	r1, r6
 800bee2:	464a      	mov	r2, r9
 800bee4:	4620      	mov	r0, r4
 800bee6:	f001 ff6d 	bl	800ddc4 <__lshift>
 800beea:	4606      	mov	r6, r0
 800beec:	2800      	cmp	r0, #0
 800beee:	f43f ae77 	beq.w	800bbe0 <_strtod_l+0x498>
 800bef2:	9a07      	ldr	r2, [sp, #28]
 800bef4:	991e      	ldr	r1, [sp, #120]	; 0x78
 800bef6:	4620      	mov	r0, r4
 800bef8:	f001 ffec 	bl	800ded4 <__mdiff>
 800befc:	4605      	mov	r5, r0
 800befe:	2800      	cmp	r0, #0
 800bf00:	f43f ae6e 	beq.w	800bbe0 <_strtod_l+0x498>
 800bf04:	68c3      	ldr	r3, [r0, #12]
 800bf06:	930f      	str	r3, [sp, #60]	; 0x3c
 800bf08:	2300      	movs	r3, #0
 800bf0a:	60c3      	str	r3, [r0, #12]
 800bf0c:	4631      	mov	r1, r6
 800bf0e:	f001 ffc5 	bl	800de9c <__mcmp>
 800bf12:	2800      	cmp	r0, #0
 800bf14:	da65      	bge.n	800bfe2 <_strtod_l+0x89a>
 800bf16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bf18:	ea53 030a 	orrs.w	r3, r3, sl
 800bf1c:	f040 8087 	bne.w	800c02e <_strtod_l+0x8e6>
 800bf20:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	f040 8082 	bne.w	800c02e <_strtod_l+0x8e6>
 800bf2a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bf2e:	0d1b      	lsrs	r3, r3, #20
 800bf30:	051b      	lsls	r3, r3, #20
 800bf32:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800bf36:	d97a      	bls.n	800c02e <_strtod_l+0x8e6>
 800bf38:	696b      	ldr	r3, [r5, #20]
 800bf3a:	b913      	cbnz	r3, 800bf42 <_strtod_l+0x7fa>
 800bf3c:	692b      	ldr	r3, [r5, #16]
 800bf3e:	2b01      	cmp	r3, #1
 800bf40:	dd75      	ble.n	800c02e <_strtod_l+0x8e6>
 800bf42:	4629      	mov	r1, r5
 800bf44:	2201      	movs	r2, #1
 800bf46:	4620      	mov	r0, r4
 800bf48:	f001 ff3c 	bl	800ddc4 <__lshift>
 800bf4c:	4631      	mov	r1, r6
 800bf4e:	4605      	mov	r5, r0
 800bf50:	f001 ffa4 	bl	800de9c <__mcmp>
 800bf54:	2800      	cmp	r0, #0
 800bf56:	dd6a      	ble.n	800c02e <_strtod_l+0x8e6>
 800bf58:	9904      	ldr	r1, [sp, #16]
 800bf5a:	4a55      	ldr	r2, [pc, #340]	; (800c0b0 <_strtod_l+0x968>)
 800bf5c:	465b      	mov	r3, fp
 800bf5e:	2900      	cmp	r1, #0
 800bf60:	f000 8085 	beq.w	800c06e <_strtod_l+0x926>
 800bf64:	ea02 010b 	and.w	r1, r2, fp
 800bf68:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800bf6c:	dc7f      	bgt.n	800c06e <_strtod_l+0x926>
 800bf6e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800bf72:	f77f aeaa 	ble.w	800bcca <_strtod_l+0x582>
 800bf76:	4a4f      	ldr	r2, [pc, #316]	; (800c0b4 <_strtod_l+0x96c>)
 800bf78:	2300      	movs	r3, #0
 800bf7a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800bf7e:	4650      	mov	r0, sl
 800bf80:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800bf84:	4659      	mov	r1, fp
 800bf86:	f7f4 fb3f 	bl	8000608 <__aeabi_dmul>
 800bf8a:	460b      	mov	r3, r1
 800bf8c:	4303      	orrs	r3, r0
 800bf8e:	bf08      	it	eq
 800bf90:	2322      	moveq	r3, #34	; 0x22
 800bf92:	4682      	mov	sl, r0
 800bf94:	468b      	mov	fp, r1
 800bf96:	bf08      	it	eq
 800bf98:	6023      	streq	r3, [r4, #0]
 800bf9a:	e62b      	b.n	800bbf4 <_strtod_l+0x4ac>
 800bf9c:	f04f 32ff 	mov.w	r2, #4294967295
 800bfa0:	fa02 f303 	lsl.w	r3, r2, r3
 800bfa4:	ea03 0a0a 	and.w	sl, r3, sl
 800bfa8:	e6de      	b.n	800bd68 <_strtod_l+0x620>
 800bfaa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800bfae:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800bfb2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800bfb6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800bfba:	fa01 f308 	lsl.w	r3, r1, r8
 800bfbe:	930c      	str	r3, [sp, #48]	; 0x30
 800bfc0:	9111      	str	r1, [sp, #68]	; 0x44
 800bfc2:	e741      	b.n	800be48 <_strtod_l+0x700>
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	930c      	str	r3, [sp, #48]	; 0x30
 800bfc8:	2301      	movs	r3, #1
 800bfca:	9311      	str	r3, [sp, #68]	; 0x44
 800bfcc:	e73c      	b.n	800be48 <_strtod_l+0x700>
 800bfce:	991e      	ldr	r1, [sp, #120]	; 0x78
 800bfd0:	4642      	mov	r2, r8
 800bfd2:	4620      	mov	r0, r4
 800bfd4:	f001 fef6 	bl	800ddc4 <__lshift>
 800bfd8:	901e      	str	r0, [sp, #120]	; 0x78
 800bfda:	2800      	cmp	r0, #0
 800bfdc:	f47f af66 	bne.w	800beac <_strtod_l+0x764>
 800bfe0:	e5fe      	b.n	800bbe0 <_strtod_l+0x498>
 800bfe2:	465f      	mov	r7, fp
 800bfe4:	d16e      	bne.n	800c0c4 <_strtod_l+0x97c>
 800bfe6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bfe8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bfec:	b342      	cbz	r2, 800c040 <_strtod_l+0x8f8>
 800bfee:	4a32      	ldr	r2, [pc, #200]	; (800c0b8 <_strtod_l+0x970>)
 800bff0:	4293      	cmp	r3, r2
 800bff2:	d128      	bne.n	800c046 <_strtod_l+0x8fe>
 800bff4:	9b04      	ldr	r3, [sp, #16]
 800bff6:	4650      	mov	r0, sl
 800bff8:	b1eb      	cbz	r3, 800c036 <_strtod_l+0x8ee>
 800bffa:	4a2d      	ldr	r2, [pc, #180]	; (800c0b0 <_strtod_l+0x968>)
 800bffc:	403a      	ands	r2, r7
 800bffe:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800c002:	f04f 31ff 	mov.w	r1, #4294967295
 800c006:	d819      	bhi.n	800c03c <_strtod_l+0x8f4>
 800c008:	0d12      	lsrs	r2, r2, #20
 800c00a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c00e:	fa01 f303 	lsl.w	r3, r1, r3
 800c012:	4298      	cmp	r0, r3
 800c014:	d117      	bne.n	800c046 <_strtod_l+0x8fe>
 800c016:	4b29      	ldr	r3, [pc, #164]	; (800c0bc <_strtod_l+0x974>)
 800c018:	429f      	cmp	r7, r3
 800c01a:	d102      	bne.n	800c022 <_strtod_l+0x8da>
 800c01c:	3001      	adds	r0, #1
 800c01e:	f43f addf 	beq.w	800bbe0 <_strtod_l+0x498>
 800c022:	4b23      	ldr	r3, [pc, #140]	; (800c0b0 <_strtod_l+0x968>)
 800c024:	403b      	ands	r3, r7
 800c026:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800c02a:	f04f 0a00 	mov.w	sl, #0
 800c02e:	9b04      	ldr	r3, [sp, #16]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d1a0      	bne.n	800bf76 <_strtod_l+0x82e>
 800c034:	e5de      	b.n	800bbf4 <_strtod_l+0x4ac>
 800c036:	f04f 33ff 	mov.w	r3, #4294967295
 800c03a:	e7ea      	b.n	800c012 <_strtod_l+0x8ca>
 800c03c:	460b      	mov	r3, r1
 800c03e:	e7e8      	b.n	800c012 <_strtod_l+0x8ca>
 800c040:	ea53 030a 	orrs.w	r3, r3, sl
 800c044:	d088      	beq.n	800bf58 <_strtod_l+0x810>
 800c046:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c048:	b1db      	cbz	r3, 800c082 <_strtod_l+0x93a>
 800c04a:	423b      	tst	r3, r7
 800c04c:	d0ef      	beq.n	800c02e <_strtod_l+0x8e6>
 800c04e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c050:	9a04      	ldr	r2, [sp, #16]
 800c052:	4650      	mov	r0, sl
 800c054:	4659      	mov	r1, fp
 800c056:	b1c3      	cbz	r3, 800c08a <_strtod_l+0x942>
 800c058:	f7ff fb59 	bl	800b70e <sulp>
 800c05c:	4602      	mov	r2, r0
 800c05e:	460b      	mov	r3, r1
 800c060:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c064:	f7f4 f91a 	bl	800029c <__adddf3>
 800c068:	4682      	mov	sl, r0
 800c06a:	468b      	mov	fp, r1
 800c06c:	e7df      	b.n	800c02e <_strtod_l+0x8e6>
 800c06e:	4013      	ands	r3, r2
 800c070:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c074:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c078:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c07c:	f04f 3aff 	mov.w	sl, #4294967295
 800c080:	e7d5      	b.n	800c02e <_strtod_l+0x8e6>
 800c082:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c084:	ea13 0f0a 	tst.w	r3, sl
 800c088:	e7e0      	b.n	800c04c <_strtod_l+0x904>
 800c08a:	f7ff fb40 	bl	800b70e <sulp>
 800c08e:	4602      	mov	r2, r0
 800c090:	460b      	mov	r3, r1
 800c092:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c096:	f7f4 f8ff 	bl	8000298 <__aeabi_dsub>
 800c09a:	2200      	movs	r2, #0
 800c09c:	2300      	movs	r3, #0
 800c09e:	4682      	mov	sl, r0
 800c0a0:	468b      	mov	fp, r1
 800c0a2:	f7f4 fd19 	bl	8000ad8 <__aeabi_dcmpeq>
 800c0a6:	2800      	cmp	r0, #0
 800c0a8:	d0c1      	beq.n	800c02e <_strtod_l+0x8e6>
 800c0aa:	e60e      	b.n	800bcca <_strtod_l+0x582>
 800c0ac:	fffffc02 	.word	0xfffffc02
 800c0b0:	7ff00000 	.word	0x7ff00000
 800c0b4:	39500000 	.word	0x39500000
 800c0b8:	000fffff 	.word	0x000fffff
 800c0bc:	7fefffff 	.word	0x7fefffff
 800c0c0:	08011e10 	.word	0x08011e10
 800c0c4:	4631      	mov	r1, r6
 800c0c6:	4628      	mov	r0, r5
 800c0c8:	f002 f864 	bl	800e194 <__ratio>
 800c0cc:	ec59 8b10 	vmov	r8, r9, d0
 800c0d0:	ee10 0a10 	vmov	r0, s0
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c0da:	4649      	mov	r1, r9
 800c0dc:	f7f4 fd10 	bl	8000b00 <__aeabi_dcmple>
 800c0e0:	2800      	cmp	r0, #0
 800c0e2:	d07c      	beq.n	800c1de <_strtod_l+0xa96>
 800c0e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d04c      	beq.n	800c184 <_strtod_l+0xa3c>
 800c0ea:	4b95      	ldr	r3, [pc, #596]	; (800c340 <_strtod_l+0xbf8>)
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800c0f2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800c340 <_strtod_l+0xbf8>
 800c0f6:	f04f 0800 	mov.w	r8, #0
 800c0fa:	4b92      	ldr	r3, [pc, #584]	; (800c344 <_strtod_l+0xbfc>)
 800c0fc:	403b      	ands	r3, r7
 800c0fe:	9311      	str	r3, [sp, #68]	; 0x44
 800c100:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c102:	4b91      	ldr	r3, [pc, #580]	; (800c348 <_strtod_l+0xc00>)
 800c104:	429a      	cmp	r2, r3
 800c106:	f040 80b2 	bne.w	800c26e <_strtod_l+0xb26>
 800c10a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c10e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c112:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800c116:	ec4b ab10 	vmov	d0, sl, fp
 800c11a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800c11e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c122:	f001 ff5f 	bl	800dfe4 <__ulp>
 800c126:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c12a:	ec53 2b10 	vmov	r2, r3, d0
 800c12e:	f7f4 fa6b 	bl	8000608 <__aeabi_dmul>
 800c132:	4652      	mov	r2, sl
 800c134:	465b      	mov	r3, fp
 800c136:	f7f4 f8b1 	bl	800029c <__adddf3>
 800c13a:	460b      	mov	r3, r1
 800c13c:	4981      	ldr	r1, [pc, #516]	; (800c344 <_strtod_l+0xbfc>)
 800c13e:	4a83      	ldr	r2, [pc, #524]	; (800c34c <_strtod_l+0xc04>)
 800c140:	4019      	ands	r1, r3
 800c142:	4291      	cmp	r1, r2
 800c144:	4682      	mov	sl, r0
 800c146:	d95e      	bls.n	800c206 <_strtod_l+0xabe>
 800c148:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c14a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c14e:	4293      	cmp	r3, r2
 800c150:	d103      	bne.n	800c15a <_strtod_l+0xa12>
 800c152:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c154:	3301      	adds	r3, #1
 800c156:	f43f ad43 	beq.w	800bbe0 <_strtod_l+0x498>
 800c15a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800c358 <_strtod_l+0xc10>
 800c15e:	f04f 3aff 	mov.w	sl, #4294967295
 800c162:	991e      	ldr	r1, [sp, #120]	; 0x78
 800c164:	4620      	mov	r0, r4
 800c166:	f001 fc11 	bl	800d98c <_Bfree>
 800c16a:	9907      	ldr	r1, [sp, #28]
 800c16c:	4620      	mov	r0, r4
 800c16e:	f001 fc0d 	bl	800d98c <_Bfree>
 800c172:	4631      	mov	r1, r6
 800c174:	4620      	mov	r0, r4
 800c176:	f001 fc09 	bl	800d98c <_Bfree>
 800c17a:	4629      	mov	r1, r5
 800c17c:	4620      	mov	r0, r4
 800c17e:	f001 fc05 	bl	800d98c <_Bfree>
 800c182:	e613      	b.n	800bdac <_strtod_l+0x664>
 800c184:	f1ba 0f00 	cmp.w	sl, #0
 800c188:	d11b      	bne.n	800c1c2 <_strtod_l+0xa7a>
 800c18a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c18e:	b9f3      	cbnz	r3, 800c1ce <_strtod_l+0xa86>
 800c190:	4b6b      	ldr	r3, [pc, #428]	; (800c340 <_strtod_l+0xbf8>)
 800c192:	2200      	movs	r2, #0
 800c194:	4640      	mov	r0, r8
 800c196:	4649      	mov	r1, r9
 800c198:	f7f4 fca8 	bl	8000aec <__aeabi_dcmplt>
 800c19c:	b9d0      	cbnz	r0, 800c1d4 <_strtod_l+0xa8c>
 800c19e:	4640      	mov	r0, r8
 800c1a0:	4649      	mov	r1, r9
 800c1a2:	4b6b      	ldr	r3, [pc, #428]	; (800c350 <_strtod_l+0xc08>)
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	f7f4 fa2f 	bl	8000608 <__aeabi_dmul>
 800c1aa:	4680      	mov	r8, r0
 800c1ac:	4689      	mov	r9, r1
 800c1ae:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c1b2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800c1b6:	931b      	str	r3, [sp, #108]	; 0x6c
 800c1b8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800c1bc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800c1c0:	e79b      	b.n	800c0fa <_strtod_l+0x9b2>
 800c1c2:	f1ba 0f01 	cmp.w	sl, #1
 800c1c6:	d102      	bne.n	800c1ce <_strtod_l+0xa86>
 800c1c8:	2f00      	cmp	r7, #0
 800c1ca:	f43f ad7e 	beq.w	800bcca <_strtod_l+0x582>
 800c1ce:	4b61      	ldr	r3, [pc, #388]	; (800c354 <_strtod_l+0xc0c>)
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	e78c      	b.n	800c0ee <_strtod_l+0x9a6>
 800c1d4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800c350 <_strtod_l+0xc08>
 800c1d8:	f04f 0800 	mov.w	r8, #0
 800c1dc:	e7e7      	b.n	800c1ae <_strtod_l+0xa66>
 800c1de:	4b5c      	ldr	r3, [pc, #368]	; (800c350 <_strtod_l+0xc08>)
 800c1e0:	4640      	mov	r0, r8
 800c1e2:	4649      	mov	r1, r9
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	f7f4 fa0f 	bl	8000608 <__aeabi_dmul>
 800c1ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c1ec:	4680      	mov	r8, r0
 800c1ee:	4689      	mov	r9, r1
 800c1f0:	b933      	cbnz	r3, 800c200 <_strtod_l+0xab8>
 800c1f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c1f6:	9012      	str	r0, [sp, #72]	; 0x48
 800c1f8:	9313      	str	r3, [sp, #76]	; 0x4c
 800c1fa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800c1fe:	e7dd      	b.n	800c1bc <_strtod_l+0xa74>
 800c200:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800c204:	e7f9      	b.n	800c1fa <_strtod_l+0xab2>
 800c206:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800c20a:	9b04      	ldr	r3, [sp, #16]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d1a8      	bne.n	800c162 <_strtod_l+0xa1a>
 800c210:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c214:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c216:	0d1b      	lsrs	r3, r3, #20
 800c218:	051b      	lsls	r3, r3, #20
 800c21a:	429a      	cmp	r2, r3
 800c21c:	d1a1      	bne.n	800c162 <_strtod_l+0xa1a>
 800c21e:	4640      	mov	r0, r8
 800c220:	4649      	mov	r1, r9
 800c222:	f7f4 fd51 	bl	8000cc8 <__aeabi_d2lz>
 800c226:	f7f4 f9c1 	bl	80005ac <__aeabi_l2d>
 800c22a:	4602      	mov	r2, r0
 800c22c:	460b      	mov	r3, r1
 800c22e:	4640      	mov	r0, r8
 800c230:	4649      	mov	r1, r9
 800c232:	f7f4 f831 	bl	8000298 <__aeabi_dsub>
 800c236:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c238:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c23c:	ea43 030a 	orr.w	r3, r3, sl
 800c240:	4313      	orrs	r3, r2
 800c242:	4680      	mov	r8, r0
 800c244:	4689      	mov	r9, r1
 800c246:	d053      	beq.n	800c2f0 <_strtod_l+0xba8>
 800c248:	a335      	add	r3, pc, #212	; (adr r3, 800c320 <_strtod_l+0xbd8>)
 800c24a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c24e:	f7f4 fc4d 	bl	8000aec <__aeabi_dcmplt>
 800c252:	2800      	cmp	r0, #0
 800c254:	f47f acce 	bne.w	800bbf4 <_strtod_l+0x4ac>
 800c258:	a333      	add	r3, pc, #204	; (adr r3, 800c328 <_strtod_l+0xbe0>)
 800c25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c25e:	4640      	mov	r0, r8
 800c260:	4649      	mov	r1, r9
 800c262:	f7f4 fc61 	bl	8000b28 <__aeabi_dcmpgt>
 800c266:	2800      	cmp	r0, #0
 800c268:	f43f af7b 	beq.w	800c162 <_strtod_l+0xa1a>
 800c26c:	e4c2      	b.n	800bbf4 <_strtod_l+0x4ac>
 800c26e:	9b04      	ldr	r3, [sp, #16]
 800c270:	b333      	cbz	r3, 800c2c0 <_strtod_l+0xb78>
 800c272:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c274:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c278:	d822      	bhi.n	800c2c0 <_strtod_l+0xb78>
 800c27a:	a32d      	add	r3, pc, #180	; (adr r3, 800c330 <_strtod_l+0xbe8>)
 800c27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c280:	4640      	mov	r0, r8
 800c282:	4649      	mov	r1, r9
 800c284:	f7f4 fc3c 	bl	8000b00 <__aeabi_dcmple>
 800c288:	b1a0      	cbz	r0, 800c2b4 <_strtod_l+0xb6c>
 800c28a:	4649      	mov	r1, r9
 800c28c:	4640      	mov	r0, r8
 800c28e:	f7f4 fc93 	bl	8000bb8 <__aeabi_d2uiz>
 800c292:	2801      	cmp	r0, #1
 800c294:	bf38      	it	cc
 800c296:	2001      	movcc	r0, #1
 800c298:	f7f4 f93c 	bl	8000514 <__aeabi_ui2d>
 800c29c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c29e:	4680      	mov	r8, r0
 800c2a0:	4689      	mov	r9, r1
 800c2a2:	bb13      	cbnz	r3, 800c2ea <_strtod_l+0xba2>
 800c2a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c2a8:	9014      	str	r0, [sp, #80]	; 0x50
 800c2aa:	9315      	str	r3, [sp, #84]	; 0x54
 800c2ac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c2b0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800c2b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c2b6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c2b8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c2bc:	1a9b      	subs	r3, r3, r2
 800c2be:	930d      	str	r3, [sp, #52]	; 0x34
 800c2c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c2c4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800c2c8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c2cc:	f001 fe8a 	bl	800dfe4 <__ulp>
 800c2d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c2d4:	ec53 2b10 	vmov	r2, r3, d0
 800c2d8:	f7f4 f996 	bl	8000608 <__aeabi_dmul>
 800c2dc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c2e0:	f7f3 ffdc 	bl	800029c <__adddf3>
 800c2e4:	4682      	mov	sl, r0
 800c2e6:	468b      	mov	fp, r1
 800c2e8:	e78f      	b.n	800c20a <_strtod_l+0xac2>
 800c2ea:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800c2ee:	e7dd      	b.n	800c2ac <_strtod_l+0xb64>
 800c2f0:	a311      	add	r3, pc, #68	; (adr r3, 800c338 <_strtod_l+0xbf0>)
 800c2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2f6:	f7f4 fbf9 	bl	8000aec <__aeabi_dcmplt>
 800c2fa:	e7b4      	b.n	800c266 <_strtod_l+0xb1e>
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	930e      	str	r3, [sp, #56]	; 0x38
 800c300:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c302:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c304:	6013      	str	r3, [r2, #0]
 800c306:	f7ff ba65 	b.w	800b7d4 <_strtod_l+0x8c>
 800c30a:	2b65      	cmp	r3, #101	; 0x65
 800c30c:	f43f ab5d 	beq.w	800b9ca <_strtod_l+0x282>
 800c310:	2b45      	cmp	r3, #69	; 0x45
 800c312:	f43f ab5a 	beq.w	800b9ca <_strtod_l+0x282>
 800c316:	2201      	movs	r2, #1
 800c318:	f7ff bb92 	b.w	800ba40 <_strtod_l+0x2f8>
 800c31c:	f3af 8000 	nop.w
 800c320:	94a03595 	.word	0x94a03595
 800c324:	3fdfffff 	.word	0x3fdfffff
 800c328:	35afe535 	.word	0x35afe535
 800c32c:	3fe00000 	.word	0x3fe00000
 800c330:	ffc00000 	.word	0xffc00000
 800c334:	41dfffff 	.word	0x41dfffff
 800c338:	94a03595 	.word	0x94a03595
 800c33c:	3fcfffff 	.word	0x3fcfffff
 800c340:	3ff00000 	.word	0x3ff00000
 800c344:	7ff00000 	.word	0x7ff00000
 800c348:	7fe00000 	.word	0x7fe00000
 800c34c:	7c9fffff 	.word	0x7c9fffff
 800c350:	3fe00000 	.word	0x3fe00000
 800c354:	bff00000 	.word	0xbff00000
 800c358:	7fefffff 	.word	0x7fefffff

0800c35c <_strtod_r>:
 800c35c:	4b01      	ldr	r3, [pc, #4]	; (800c364 <_strtod_r+0x8>)
 800c35e:	f7ff b9f3 	b.w	800b748 <_strtod_l>
 800c362:	bf00      	nop
 800c364:	200000a4 	.word	0x200000a4

0800c368 <_strtol_l.isra.0>:
 800c368:	2b01      	cmp	r3, #1
 800c36a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c36e:	d001      	beq.n	800c374 <_strtol_l.isra.0+0xc>
 800c370:	2b24      	cmp	r3, #36	; 0x24
 800c372:	d906      	bls.n	800c382 <_strtol_l.isra.0+0x1a>
 800c374:	f7fe f9b4 	bl	800a6e0 <__errno>
 800c378:	2316      	movs	r3, #22
 800c37a:	6003      	str	r3, [r0, #0]
 800c37c:	2000      	movs	r0, #0
 800c37e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c382:	4f3a      	ldr	r7, [pc, #232]	; (800c46c <_strtol_l.isra.0+0x104>)
 800c384:	468e      	mov	lr, r1
 800c386:	4676      	mov	r6, lr
 800c388:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800c38c:	5de5      	ldrb	r5, [r4, r7]
 800c38e:	f015 0508 	ands.w	r5, r5, #8
 800c392:	d1f8      	bne.n	800c386 <_strtol_l.isra.0+0x1e>
 800c394:	2c2d      	cmp	r4, #45	; 0x2d
 800c396:	d134      	bne.n	800c402 <_strtol_l.isra.0+0x9a>
 800c398:	f89e 4000 	ldrb.w	r4, [lr]
 800c39c:	f04f 0801 	mov.w	r8, #1
 800c3a0:	f106 0e02 	add.w	lr, r6, #2
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d05c      	beq.n	800c462 <_strtol_l.isra.0+0xfa>
 800c3a8:	2b10      	cmp	r3, #16
 800c3aa:	d10c      	bne.n	800c3c6 <_strtol_l.isra.0+0x5e>
 800c3ac:	2c30      	cmp	r4, #48	; 0x30
 800c3ae:	d10a      	bne.n	800c3c6 <_strtol_l.isra.0+0x5e>
 800c3b0:	f89e 4000 	ldrb.w	r4, [lr]
 800c3b4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c3b8:	2c58      	cmp	r4, #88	; 0x58
 800c3ba:	d14d      	bne.n	800c458 <_strtol_l.isra.0+0xf0>
 800c3bc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800c3c0:	2310      	movs	r3, #16
 800c3c2:	f10e 0e02 	add.w	lr, lr, #2
 800c3c6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800c3ca:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c3ce:	2600      	movs	r6, #0
 800c3d0:	fbbc f9f3 	udiv	r9, ip, r3
 800c3d4:	4635      	mov	r5, r6
 800c3d6:	fb03 ca19 	mls	sl, r3, r9, ip
 800c3da:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800c3de:	2f09      	cmp	r7, #9
 800c3e0:	d818      	bhi.n	800c414 <_strtol_l.isra.0+0xac>
 800c3e2:	463c      	mov	r4, r7
 800c3e4:	42a3      	cmp	r3, r4
 800c3e6:	dd24      	ble.n	800c432 <_strtol_l.isra.0+0xca>
 800c3e8:	2e00      	cmp	r6, #0
 800c3ea:	db1f      	blt.n	800c42c <_strtol_l.isra.0+0xc4>
 800c3ec:	45a9      	cmp	r9, r5
 800c3ee:	d31d      	bcc.n	800c42c <_strtol_l.isra.0+0xc4>
 800c3f0:	d101      	bne.n	800c3f6 <_strtol_l.isra.0+0x8e>
 800c3f2:	45a2      	cmp	sl, r4
 800c3f4:	db1a      	blt.n	800c42c <_strtol_l.isra.0+0xc4>
 800c3f6:	fb05 4503 	mla	r5, r5, r3, r4
 800c3fa:	2601      	movs	r6, #1
 800c3fc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800c400:	e7eb      	b.n	800c3da <_strtol_l.isra.0+0x72>
 800c402:	2c2b      	cmp	r4, #43	; 0x2b
 800c404:	bf08      	it	eq
 800c406:	f89e 4000 	ldrbeq.w	r4, [lr]
 800c40a:	46a8      	mov	r8, r5
 800c40c:	bf08      	it	eq
 800c40e:	f106 0e02 	addeq.w	lr, r6, #2
 800c412:	e7c7      	b.n	800c3a4 <_strtol_l.isra.0+0x3c>
 800c414:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800c418:	2f19      	cmp	r7, #25
 800c41a:	d801      	bhi.n	800c420 <_strtol_l.isra.0+0xb8>
 800c41c:	3c37      	subs	r4, #55	; 0x37
 800c41e:	e7e1      	b.n	800c3e4 <_strtol_l.isra.0+0x7c>
 800c420:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800c424:	2f19      	cmp	r7, #25
 800c426:	d804      	bhi.n	800c432 <_strtol_l.isra.0+0xca>
 800c428:	3c57      	subs	r4, #87	; 0x57
 800c42a:	e7db      	b.n	800c3e4 <_strtol_l.isra.0+0x7c>
 800c42c:	f04f 36ff 	mov.w	r6, #4294967295
 800c430:	e7e4      	b.n	800c3fc <_strtol_l.isra.0+0x94>
 800c432:	2e00      	cmp	r6, #0
 800c434:	da05      	bge.n	800c442 <_strtol_l.isra.0+0xda>
 800c436:	2322      	movs	r3, #34	; 0x22
 800c438:	6003      	str	r3, [r0, #0]
 800c43a:	4665      	mov	r5, ip
 800c43c:	b942      	cbnz	r2, 800c450 <_strtol_l.isra.0+0xe8>
 800c43e:	4628      	mov	r0, r5
 800c440:	e79d      	b.n	800c37e <_strtol_l.isra.0+0x16>
 800c442:	f1b8 0f00 	cmp.w	r8, #0
 800c446:	d000      	beq.n	800c44a <_strtol_l.isra.0+0xe2>
 800c448:	426d      	negs	r5, r5
 800c44a:	2a00      	cmp	r2, #0
 800c44c:	d0f7      	beq.n	800c43e <_strtol_l.isra.0+0xd6>
 800c44e:	b10e      	cbz	r6, 800c454 <_strtol_l.isra.0+0xec>
 800c450:	f10e 31ff 	add.w	r1, lr, #4294967295
 800c454:	6011      	str	r1, [r2, #0]
 800c456:	e7f2      	b.n	800c43e <_strtol_l.isra.0+0xd6>
 800c458:	2430      	movs	r4, #48	; 0x30
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d1b3      	bne.n	800c3c6 <_strtol_l.isra.0+0x5e>
 800c45e:	2308      	movs	r3, #8
 800c460:	e7b1      	b.n	800c3c6 <_strtol_l.isra.0+0x5e>
 800c462:	2c30      	cmp	r4, #48	; 0x30
 800c464:	d0a4      	beq.n	800c3b0 <_strtol_l.isra.0+0x48>
 800c466:	230a      	movs	r3, #10
 800c468:	e7ad      	b.n	800c3c6 <_strtol_l.isra.0+0x5e>
 800c46a:	bf00      	nop
 800c46c:	08011e39 	.word	0x08011e39

0800c470 <_strtol_r>:
 800c470:	f7ff bf7a 	b.w	800c368 <_strtol_l.isra.0>

0800c474 <_write_r>:
 800c474:	b538      	push	{r3, r4, r5, lr}
 800c476:	4d07      	ldr	r5, [pc, #28]	; (800c494 <_write_r+0x20>)
 800c478:	4604      	mov	r4, r0
 800c47a:	4608      	mov	r0, r1
 800c47c:	4611      	mov	r1, r2
 800c47e:	2200      	movs	r2, #0
 800c480:	602a      	str	r2, [r5, #0]
 800c482:	461a      	mov	r2, r3
 800c484:	f7fa f925 	bl	80066d2 <_write>
 800c488:	1c43      	adds	r3, r0, #1
 800c48a:	d102      	bne.n	800c492 <_write_r+0x1e>
 800c48c:	682b      	ldr	r3, [r5, #0]
 800c48e:	b103      	cbz	r3, 800c492 <_write_r+0x1e>
 800c490:	6023      	str	r3, [r4, #0]
 800c492:	bd38      	pop	{r3, r4, r5, pc}
 800c494:	20001fd4 	.word	0x20001fd4

0800c498 <_close_r>:
 800c498:	b538      	push	{r3, r4, r5, lr}
 800c49a:	4d06      	ldr	r5, [pc, #24]	; (800c4b4 <_close_r+0x1c>)
 800c49c:	2300      	movs	r3, #0
 800c49e:	4604      	mov	r4, r0
 800c4a0:	4608      	mov	r0, r1
 800c4a2:	602b      	str	r3, [r5, #0]
 800c4a4:	f7fa f931 	bl	800670a <_close>
 800c4a8:	1c43      	adds	r3, r0, #1
 800c4aa:	d102      	bne.n	800c4b2 <_close_r+0x1a>
 800c4ac:	682b      	ldr	r3, [r5, #0]
 800c4ae:	b103      	cbz	r3, 800c4b2 <_close_r+0x1a>
 800c4b0:	6023      	str	r3, [r4, #0]
 800c4b2:	bd38      	pop	{r3, r4, r5, pc}
 800c4b4:	20001fd4 	.word	0x20001fd4

0800c4b8 <quorem>:
 800c4b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4bc:	6903      	ldr	r3, [r0, #16]
 800c4be:	690c      	ldr	r4, [r1, #16]
 800c4c0:	42a3      	cmp	r3, r4
 800c4c2:	4607      	mov	r7, r0
 800c4c4:	f2c0 8081 	blt.w	800c5ca <quorem+0x112>
 800c4c8:	3c01      	subs	r4, #1
 800c4ca:	f101 0814 	add.w	r8, r1, #20
 800c4ce:	f100 0514 	add.w	r5, r0, #20
 800c4d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c4d6:	9301      	str	r3, [sp, #4]
 800c4d8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c4dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c4e0:	3301      	adds	r3, #1
 800c4e2:	429a      	cmp	r2, r3
 800c4e4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c4e8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c4ec:	fbb2 f6f3 	udiv	r6, r2, r3
 800c4f0:	d331      	bcc.n	800c556 <quorem+0x9e>
 800c4f2:	f04f 0e00 	mov.w	lr, #0
 800c4f6:	4640      	mov	r0, r8
 800c4f8:	46ac      	mov	ip, r5
 800c4fa:	46f2      	mov	sl, lr
 800c4fc:	f850 2b04 	ldr.w	r2, [r0], #4
 800c500:	b293      	uxth	r3, r2
 800c502:	fb06 e303 	mla	r3, r6, r3, lr
 800c506:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c50a:	b29b      	uxth	r3, r3
 800c50c:	ebaa 0303 	sub.w	r3, sl, r3
 800c510:	0c12      	lsrs	r2, r2, #16
 800c512:	f8dc a000 	ldr.w	sl, [ip]
 800c516:	fb06 e202 	mla	r2, r6, r2, lr
 800c51a:	fa13 f38a 	uxtah	r3, r3, sl
 800c51e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c522:	fa1f fa82 	uxth.w	sl, r2
 800c526:	f8dc 2000 	ldr.w	r2, [ip]
 800c52a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800c52e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c532:	b29b      	uxth	r3, r3
 800c534:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c538:	4581      	cmp	r9, r0
 800c53a:	f84c 3b04 	str.w	r3, [ip], #4
 800c53e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c542:	d2db      	bcs.n	800c4fc <quorem+0x44>
 800c544:	f855 300b 	ldr.w	r3, [r5, fp]
 800c548:	b92b      	cbnz	r3, 800c556 <quorem+0x9e>
 800c54a:	9b01      	ldr	r3, [sp, #4]
 800c54c:	3b04      	subs	r3, #4
 800c54e:	429d      	cmp	r5, r3
 800c550:	461a      	mov	r2, r3
 800c552:	d32e      	bcc.n	800c5b2 <quorem+0xfa>
 800c554:	613c      	str	r4, [r7, #16]
 800c556:	4638      	mov	r0, r7
 800c558:	f001 fca0 	bl	800de9c <__mcmp>
 800c55c:	2800      	cmp	r0, #0
 800c55e:	db24      	blt.n	800c5aa <quorem+0xf2>
 800c560:	3601      	adds	r6, #1
 800c562:	4628      	mov	r0, r5
 800c564:	f04f 0c00 	mov.w	ip, #0
 800c568:	f858 2b04 	ldr.w	r2, [r8], #4
 800c56c:	f8d0 e000 	ldr.w	lr, [r0]
 800c570:	b293      	uxth	r3, r2
 800c572:	ebac 0303 	sub.w	r3, ip, r3
 800c576:	0c12      	lsrs	r2, r2, #16
 800c578:	fa13 f38e 	uxtah	r3, r3, lr
 800c57c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c580:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c584:	b29b      	uxth	r3, r3
 800c586:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c58a:	45c1      	cmp	r9, r8
 800c58c:	f840 3b04 	str.w	r3, [r0], #4
 800c590:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c594:	d2e8      	bcs.n	800c568 <quorem+0xb0>
 800c596:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c59a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c59e:	b922      	cbnz	r2, 800c5aa <quorem+0xf2>
 800c5a0:	3b04      	subs	r3, #4
 800c5a2:	429d      	cmp	r5, r3
 800c5a4:	461a      	mov	r2, r3
 800c5a6:	d30a      	bcc.n	800c5be <quorem+0x106>
 800c5a8:	613c      	str	r4, [r7, #16]
 800c5aa:	4630      	mov	r0, r6
 800c5ac:	b003      	add	sp, #12
 800c5ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5b2:	6812      	ldr	r2, [r2, #0]
 800c5b4:	3b04      	subs	r3, #4
 800c5b6:	2a00      	cmp	r2, #0
 800c5b8:	d1cc      	bne.n	800c554 <quorem+0x9c>
 800c5ba:	3c01      	subs	r4, #1
 800c5bc:	e7c7      	b.n	800c54e <quorem+0x96>
 800c5be:	6812      	ldr	r2, [r2, #0]
 800c5c0:	3b04      	subs	r3, #4
 800c5c2:	2a00      	cmp	r2, #0
 800c5c4:	d1f0      	bne.n	800c5a8 <quorem+0xf0>
 800c5c6:	3c01      	subs	r4, #1
 800c5c8:	e7eb      	b.n	800c5a2 <quorem+0xea>
 800c5ca:	2000      	movs	r0, #0
 800c5cc:	e7ee      	b.n	800c5ac <quorem+0xf4>
	...

0800c5d0 <_dtoa_r>:
 800c5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5d4:	ed2d 8b02 	vpush	{d8}
 800c5d8:	ec57 6b10 	vmov	r6, r7, d0
 800c5dc:	b095      	sub	sp, #84	; 0x54
 800c5de:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c5e0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c5e4:	9105      	str	r1, [sp, #20]
 800c5e6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800c5ea:	4604      	mov	r4, r0
 800c5ec:	9209      	str	r2, [sp, #36]	; 0x24
 800c5ee:	930f      	str	r3, [sp, #60]	; 0x3c
 800c5f0:	b975      	cbnz	r5, 800c610 <_dtoa_r+0x40>
 800c5f2:	2010      	movs	r0, #16
 800c5f4:	f7fe f89e 	bl	800a734 <malloc>
 800c5f8:	4602      	mov	r2, r0
 800c5fa:	6260      	str	r0, [r4, #36]	; 0x24
 800c5fc:	b920      	cbnz	r0, 800c608 <_dtoa_r+0x38>
 800c5fe:	4bb2      	ldr	r3, [pc, #712]	; (800c8c8 <_dtoa_r+0x2f8>)
 800c600:	21ea      	movs	r1, #234	; 0xea
 800c602:	48b2      	ldr	r0, [pc, #712]	; (800c8cc <_dtoa_r+0x2fc>)
 800c604:	f002 fbe0 	bl	800edc8 <__assert_func>
 800c608:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c60c:	6005      	str	r5, [r0, #0]
 800c60e:	60c5      	str	r5, [r0, #12]
 800c610:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c612:	6819      	ldr	r1, [r3, #0]
 800c614:	b151      	cbz	r1, 800c62c <_dtoa_r+0x5c>
 800c616:	685a      	ldr	r2, [r3, #4]
 800c618:	604a      	str	r2, [r1, #4]
 800c61a:	2301      	movs	r3, #1
 800c61c:	4093      	lsls	r3, r2
 800c61e:	608b      	str	r3, [r1, #8]
 800c620:	4620      	mov	r0, r4
 800c622:	f001 f9b3 	bl	800d98c <_Bfree>
 800c626:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c628:	2200      	movs	r2, #0
 800c62a:	601a      	str	r2, [r3, #0]
 800c62c:	1e3b      	subs	r3, r7, #0
 800c62e:	bfb9      	ittee	lt
 800c630:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c634:	9303      	strlt	r3, [sp, #12]
 800c636:	2300      	movge	r3, #0
 800c638:	f8c8 3000 	strge.w	r3, [r8]
 800c63c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800c640:	4ba3      	ldr	r3, [pc, #652]	; (800c8d0 <_dtoa_r+0x300>)
 800c642:	bfbc      	itt	lt
 800c644:	2201      	movlt	r2, #1
 800c646:	f8c8 2000 	strlt.w	r2, [r8]
 800c64a:	ea33 0309 	bics.w	r3, r3, r9
 800c64e:	d11b      	bne.n	800c688 <_dtoa_r+0xb8>
 800c650:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c652:	f242 730f 	movw	r3, #9999	; 0x270f
 800c656:	6013      	str	r3, [r2, #0]
 800c658:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c65c:	4333      	orrs	r3, r6
 800c65e:	f000 857a 	beq.w	800d156 <_dtoa_r+0xb86>
 800c662:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c664:	b963      	cbnz	r3, 800c680 <_dtoa_r+0xb0>
 800c666:	4b9b      	ldr	r3, [pc, #620]	; (800c8d4 <_dtoa_r+0x304>)
 800c668:	e024      	b.n	800c6b4 <_dtoa_r+0xe4>
 800c66a:	4b9b      	ldr	r3, [pc, #620]	; (800c8d8 <_dtoa_r+0x308>)
 800c66c:	9300      	str	r3, [sp, #0]
 800c66e:	3308      	adds	r3, #8
 800c670:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c672:	6013      	str	r3, [r2, #0]
 800c674:	9800      	ldr	r0, [sp, #0]
 800c676:	b015      	add	sp, #84	; 0x54
 800c678:	ecbd 8b02 	vpop	{d8}
 800c67c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c680:	4b94      	ldr	r3, [pc, #592]	; (800c8d4 <_dtoa_r+0x304>)
 800c682:	9300      	str	r3, [sp, #0]
 800c684:	3303      	adds	r3, #3
 800c686:	e7f3      	b.n	800c670 <_dtoa_r+0xa0>
 800c688:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c68c:	2200      	movs	r2, #0
 800c68e:	ec51 0b17 	vmov	r0, r1, d7
 800c692:	2300      	movs	r3, #0
 800c694:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800c698:	f7f4 fa1e 	bl	8000ad8 <__aeabi_dcmpeq>
 800c69c:	4680      	mov	r8, r0
 800c69e:	b158      	cbz	r0, 800c6b8 <_dtoa_r+0xe8>
 800c6a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c6a2:	2301      	movs	r3, #1
 800c6a4:	6013      	str	r3, [r2, #0]
 800c6a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	f000 8551 	beq.w	800d150 <_dtoa_r+0xb80>
 800c6ae:	488b      	ldr	r0, [pc, #556]	; (800c8dc <_dtoa_r+0x30c>)
 800c6b0:	6018      	str	r0, [r3, #0]
 800c6b2:	1e43      	subs	r3, r0, #1
 800c6b4:	9300      	str	r3, [sp, #0]
 800c6b6:	e7dd      	b.n	800c674 <_dtoa_r+0xa4>
 800c6b8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800c6bc:	aa12      	add	r2, sp, #72	; 0x48
 800c6be:	a913      	add	r1, sp, #76	; 0x4c
 800c6c0:	4620      	mov	r0, r4
 800c6c2:	f001 fd0b 	bl	800e0dc <__d2b>
 800c6c6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c6ca:	4683      	mov	fp, r0
 800c6cc:	2d00      	cmp	r5, #0
 800c6ce:	d07c      	beq.n	800c7ca <_dtoa_r+0x1fa>
 800c6d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c6d2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800c6d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c6da:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800c6de:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c6e2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c6e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c6ea:	4b7d      	ldr	r3, [pc, #500]	; (800c8e0 <_dtoa_r+0x310>)
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	4630      	mov	r0, r6
 800c6f0:	4639      	mov	r1, r7
 800c6f2:	f7f3 fdd1 	bl	8000298 <__aeabi_dsub>
 800c6f6:	a36e      	add	r3, pc, #440	; (adr r3, 800c8b0 <_dtoa_r+0x2e0>)
 800c6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6fc:	f7f3 ff84 	bl	8000608 <__aeabi_dmul>
 800c700:	a36d      	add	r3, pc, #436	; (adr r3, 800c8b8 <_dtoa_r+0x2e8>)
 800c702:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c706:	f7f3 fdc9 	bl	800029c <__adddf3>
 800c70a:	4606      	mov	r6, r0
 800c70c:	4628      	mov	r0, r5
 800c70e:	460f      	mov	r7, r1
 800c710:	f7f3 ff10 	bl	8000534 <__aeabi_i2d>
 800c714:	a36a      	add	r3, pc, #424	; (adr r3, 800c8c0 <_dtoa_r+0x2f0>)
 800c716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c71a:	f7f3 ff75 	bl	8000608 <__aeabi_dmul>
 800c71e:	4602      	mov	r2, r0
 800c720:	460b      	mov	r3, r1
 800c722:	4630      	mov	r0, r6
 800c724:	4639      	mov	r1, r7
 800c726:	f7f3 fdb9 	bl	800029c <__adddf3>
 800c72a:	4606      	mov	r6, r0
 800c72c:	460f      	mov	r7, r1
 800c72e:	f7f4 fa1b 	bl	8000b68 <__aeabi_d2iz>
 800c732:	2200      	movs	r2, #0
 800c734:	4682      	mov	sl, r0
 800c736:	2300      	movs	r3, #0
 800c738:	4630      	mov	r0, r6
 800c73a:	4639      	mov	r1, r7
 800c73c:	f7f4 f9d6 	bl	8000aec <__aeabi_dcmplt>
 800c740:	b148      	cbz	r0, 800c756 <_dtoa_r+0x186>
 800c742:	4650      	mov	r0, sl
 800c744:	f7f3 fef6 	bl	8000534 <__aeabi_i2d>
 800c748:	4632      	mov	r2, r6
 800c74a:	463b      	mov	r3, r7
 800c74c:	f7f4 f9c4 	bl	8000ad8 <__aeabi_dcmpeq>
 800c750:	b908      	cbnz	r0, 800c756 <_dtoa_r+0x186>
 800c752:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c756:	f1ba 0f16 	cmp.w	sl, #22
 800c75a:	d854      	bhi.n	800c806 <_dtoa_r+0x236>
 800c75c:	4b61      	ldr	r3, [pc, #388]	; (800c8e4 <_dtoa_r+0x314>)
 800c75e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c762:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c766:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c76a:	f7f4 f9bf 	bl	8000aec <__aeabi_dcmplt>
 800c76e:	2800      	cmp	r0, #0
 800c770:	d04b      	beq.n	800c80a <_dtoa_r+0x23a>
 800c772:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c776:	2300      	movs	r3, #0
 800c778:	930e      	str	r3, [sp, #56]	; 0x38
 800c77a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c77c:	1b5d      	subs	r5, r3, r5
 800c77e:	1e6b      	subs	r3, r5, #1
 800c780:	9304      	str	r3, [sp, #16]
 800c782:	bf43      	ittte	mi
 800c784:	2300      	movmi	r3, #0
 800c786:	f1c5 0801 	rsbmi	r8, r5, #1
 800c78a:	9304      	strmi	r3, [sp, #16]
 800c78c:	f04f 0800 	movpl.w	r8, #0
 800c790:	f1ba 0f00 	cmp.w	sl, #0
 800c794:	db3b      	blt.n	800c80e <_dtoa_r+0x23e>
 800c796:	9b04      	ldr	r3, [sp, #16]
 800c798:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800c79c:	4453      	add	r3, sl
 800c79e:	9304      	str	r3, [sp, #16]
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	9306      	str	r3, [sp, #24]
 800c7a4:	9b05      	ldr	r3, [sp, #20]
 800c7a6:	2b09      	cmp	r3, #9
 800c7a8:	d869      	bhi.n	800c87e <_dtoa_r+0x2ae>
 800c7aa:	2b05      	cmp	r3, #5
 800c7ac:	bfc4      	itt	gt
 800c7ae:	3b04      	subgt	r3, #4
 800c7b0:	9305      	strgt	r3, [sp, #20]
 800c7b2:	9b05      	ldr	r3, [sp, #20]
 800c7b4:	f1a3 0302 	sub.w	r3, r3, #2
 800c7b8:	bfcc      	ite	gt
 800c7ba:	2500      	movgt	r5, #0
 800c7bc:	2501      	movle	r5, #1
 800c7be:	2b03      	cmp	r3, #3
 800c7c0:	d869      	bhi.n	800c896 <_dtoa_r+0x2c6>
 800c7c2:	e8df f003 	tbb	[pc, r3]
 800c7c6:	4e2c      	.short	0x4e2c
 800c7c8:	5a4c      	.short	0x5a4c
 800c7ca:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800c7ce:	441d      	add	r5, r3
 800c7d0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c7d4:	2b20      	cmp	r3, #32
 800c7d6:	bfc1      	itttt	gt
 800c7d8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c7dc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c7e0:	fa09 f303 	lslgt.w	r3, r9, r3
 800c7e4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c7e8:	bfda      	itte	le
 800c7ea:	f1c3 0320 	rsble	r3, r3, #32
 800c7ee:	fa06 f003 	lslle.w	r0, r6, r3
 800c7f2:	4318      	orrgt	r0, r3
 800c7f4:	f7f3 fe8e 	bl	8000514 <__aeabi_ui2d>
 800c7f8:	2301      	movs	r3, #1
 800c7fa:	4606      	mov	r6, r0
 800c7fc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c800:	3d01      	subs	r5, #1
 800c802:	9310      	str	r3, [sp, #64]	; 0x40
 800c804:	e771      	b.n	800c6ea <_dtoa_r+0x11a>
 800c806:	2301      	movs	r3, #1
 800c808:	e7b6      	b.n	800c778 <_dtoa_r+0x1a8>
 800c80a:	900e      	str	r0, [sp, #56]	; 0x38
 800c80c:	e7b5      	b.n	800c77a <_dtoa_r+0x1aa>
 800c80e:	f1ca 0300 	rsb	r3, sl, #0
 800c812:	9306      	str	r3, [sp, #24]
 800c814:	2300      	movs	r3, #0
 800c816:	eba8 080a 	sub.w	r8, r8, sl
 800c81a:	930d      	str	r3, [sp, #52]	; 0x34
 800c81c:	e7c2      	b.n	800c7a4 <_dtoa_r+0x1d4>
 800c81e:	2300      	movs	r3, #0
 800c820:	9308      	str	r3, [sp, #32]
 800c822:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c824:	2b00      	cmp	r3, #0
 800c826:	dc39      	bgt.n	800c89c <_dtoa_r+0x2cc>
 800c828:	f04f 0901 	mov.w	r9, #1
 800c82c:	f8cd 9004 	str.w	r9, [sp, #4]
 800c830:	464b      	mov	r3, r9
 800c832:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800c836:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c838:	2200      	movs	r2, #0
 800c83a:	6042      	str	r2, [r0, #4]
 800c83c:	2204      	movs	r2, #4
 800c83e:	f102 0614 	add.w	r6, r2, #20
 800c842:	429e      	cmp	r6, r3
 800c844:	6841      	ldr	r1, [r0, #4]
 800c846:	d92f      	bls.n	800c8a8 <_dtoa_r+0x2d8>
 800c848:	4620      	mov	r0, r4
 800c84a:	f001 f85f 	bl	800d90c <_Balloc>
 800c84e:	9000      	str	r0, [sp, #0]
 800c850:	2800      	cmp	r0, #0
 800c852:	d14b      	bne.n	800c8ec <_dtoa_r+0x31c>
 800c854:	4b24      	ldr	r3, [pc, #144]	; (800c8e8 <_dtoa_r+0x318>)
 800c856:	4602      	mov	r2, r0
 800c858:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c85c:	e6d1      	b.n	800c602 <_dtoa_r+0x32>
 800c85e:	2301      	movs	r3, #1
 800c860:	e7de      	b.n	800c820 <_dtoa_r+0x250>
 800c862:	2300      	movs	r3, #0
 800c864:	9308      	str	r3, [sp, #32]
 800c866:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c868:	eb0a 0903 	add.w	r9, sl, r3
 800c86c:	f109 0301 	add.w	r3, r9, #1
 800c870:	2b01      	cmp	r3, #1
 800c872:	9301      	str	r3, [sp, #4]
 800c874:	bfb8      	it	lt
 800c876:	2301      	movlt	r3, #1
 800c878:	e7dd      	b.n	800c836 <_dtoa_r+0x266>
 800c87a:	2301      	movs	r3, #1
 800c87c:	e7f2      	b.n	800c864 <_dtoa_r+0x294>
 800c87e:	2501      	movs	r5, #1
 800c880:	2300      	movs	r3, #0
 800c882:	9305      	str	r3, [sp, #20]
 800c884:	9508      	str	r5, [sp, #32]
 800c886:	f04f 39ff 	mov.w	r9, #4294967295
 800c88a:	2200      	movs	r2, #0
 800c88c:	f8cd 9004 	str.w	r9, [sp, #4]
 800c890:	2312      	movs	r3, #18
 800c892:	9209      	str	r2, [sp, #36]	; 0x24
 800c894:	e7cf      	b.n	800c836 <_dtoa_r+0x266>
 800c896:	2301      	movs	r3, #1
 800c898:	9308      	str	r3, [sp, #32]
 800c89a:	e7f4      	b.n	800c886 <_dtoa_r+0x2b6>
 800c89c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800c8a0:	f8cd 9004 	str.w	r9, [sp, #4]
 800c8a4:	464b      	mov	r3, r9
 800c8a6:	e7c6      	b.n	800c836 <_dtoa_r+0x266>
 800c8a8:	3101      	adds	r1, #1
 800c8aa:	6041      	str	r1, [r0, #4]
 800c8ac:	0052      	lsls	r2, r2, #1
 800c8ae:	e7c6      	b.n	800c83e <_dtoa_r+0x26e>
 800c8b0:	636f4361 	.word	0x636f4361
 800c8b4:	3fd287a7 	.word	0x3fd287a7
 800c8b8:	8b60c8b3 	.word	0x8b60c8b3
 800c8bc:	3fc68a28 	.word	0x3fc68a28
 800c8c0:	509f79fb 	.word	0x509f79fb
 800c8c4:	3fd34413 	.word	0x3fd34413
 800c8c8:	08011f46 	.word	0x08011f46
 800c8cc:	08011f5d 	.word	0x08011f5d
 800c8d0:	7ff00000 	.word	0x7ff00000
 800c8d4:	08011f42 	.word	0x08011f42
 800c8d8:	08011f39 	.word	0x08011f39
 800c8dc:	080121c2 	.word	0x080121c2
 800c8e0:	3ff80000 	.word	0x3ff80000
 800c8e4:	080120d8 	.word	0x080120d8
 800c8e8:	08011fbc 	.word	0x08011fbc
 800c8ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c8ee:	9a00      	ldr	r2, [sp, #0]
 800c8f0:	601a      	str	r2, [r3, #0]
 800c8f2:	9b01      	ldr	r3, [sp, #4]
 800c8f4:	2b0e      	cmp	r3, #14
 800c8f6:	f200 80ad 	bhi.w	800ca54 <_dtoa_r+0x484>
 800c8fa:	2d00      	cmp	r5, #0
 800c8fc:	f000 80aa 	beq.w	800ca54 <_dtoa_r+0x484>
 800c900:	f1ba 0f00 	cmp.w	sl, #0
 800c904:	dd36      	ble.n	800c974 <_dtoa_r+0x3a4>
 800c906:	4ac3      	ldr	r2, [pc, #780]	; (800cc14 <_dtoa_r+0x644>)
 800c908:	f00a 030f 	and.w	r3, sl, #15
 800c90c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c910:	ed93 7b00 	vldr	d7, [r3]
 800c914:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800c918:	ea4f 172a 	mov.w	r7, sl, asr #4
 800c91c:	eeb0 8a47 	vmov.f32	s16, s14
 800c920:	eef0 8a67 	vmov.f32	s17, s15
 800c924:	d016      	beq.n	800c954 <_dtoa_r+0x384>
 800c926:	4bbc      	ldr	r3, [pc, #752]	; (800cc18 <_dtoa_r+0x648>)
 800c928:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c92c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c930:	f7f3 ff94 	bl	800085c <__aeabi_ddiv>
 800c934:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c938:	f007 070f 	and.w	r7, r7, #15
 800c93c:	2503      	movs	r5, #3
 800c93e:	4eb6      	ldr	r6, [pc, #728]	; (800cc18 <_dtoa_r+0x648>)
 800c940:	b957      	cbnz	r7, 800c958 <_dtoa_r+0x388>
 800c942:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c946:	ec53 2b18 	vmov	r2, r3, d8
 800c94a:	f7f3 ff87 	bl	800085c <__aeabi_ddiv>
 800c94e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c952:	e029      	b.n	800c9a8 <_dtoa_r+0x3d8>
 800c954:	2502      	movs	r5, #2
 800c956:	e7f2      	b.n	800c93e <_dtoa_r+0x36e>
 800c958:	07f9      	lsls	r1, r7, #31
 800c95a:	d508      	bpl.n	800c96e <_dtoa_r+0x39e>
 800c95c:	ec51 0b18 	vmov	r0, r1, d8
 800c960:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c964:	f7f3 fe50 	bl	8000608 <__aeabi_dmul>
 800c968:	ec41 0b18 	vmov	d8, r0, r1
 800c96c:	3501      	adds	r5, #1
 800c96e:	107f      	asrs	r7, r7, #1
 800c970:	3608      	adds	r6, #8
 800c972:	e7e5      	b.n	800c940 <_dtoa_r+0x370>
 800c974:	f000 80a6 	beq.w	800cac4 <_dtoa_r+0x4f4>
 800c978:	f1ca 0600 	rsb	r6, sl, #0
 800c97c:	4ba5      	ldr	r3, [pc, #660]	; (800cc14 <_dtoa_r+0x644>)
 800c97e:	4fa6      	ldr	r7, [pc, #664]	; (800cc18 <_dtoa_r+0x648>)
 800c980:	f006 020f 	and.w	r2, r6, #15
 800c984:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c98c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c990:	f7f3 fe3a 	bl	8000608 <__aeabi_dmul>
 800c994:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c998:	1136      	asrs	r6, r6, #4
 800c99a:	2300      	movs	r3, #0
 800c99c:	2502      	movs	r5, #2
 800c99e:	2e00      	cmp	r6, #0
 800c9a0:	f040 8085 	bne.w	800caae <_dtoa_r+0x4de>
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d1d2      	bne.n	800c94e <_dtoa_r+0x37e>
 800c9a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	f000 808c 	beq.w	800cac8 <_dtoa_r+0x4f8>
 800c9b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c9b4:	4b99      	ldr	r3, [pc, #612]	; (800cc1c <_dtoa_r+0x64c>)
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	4630      	mov	r0, r6
 800c9ba:	4639      	mov	r1, r7
 800c9bc:	f7f4 f896 	bl	8000aec <__aeabi_dcmplt>
 800c9c0:	2800      	cmp	r0, #0
 800c9c2:	f000 8081 	beq.w	800cac8 <_dtoa_r+0x4f8>
 800c9c6:	9b01      	ldr	r3, [sp, #4]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d07d      	beq.n	800cac8 <_dtoa_r+0x4f8>
 800c9cc:	f1b9 0f00 	cmp.w	r9, #0
 800c9d0:	dd3c      	ble.n	800ca4c <_dtoa_r+0x47c>
 800c9d2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c9d6:	9307      	str	r3, [sp, #28]
 800c9d8:	2200      	movs	r2, #0
 800c9da:	4b91      	ldr	r3, [pc, #580]	; (800cc20 <_dtoa_r+0x650>)
 800c9dc:	4630      	mov	r0, r6
 800c9de:	4639      	mov	r1, r7
 800c9e0:	f7f3 fe12 	bl	8000608 <__aeabi_dmul>
 800c9e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c9e8:	3501      	adds	r5, #1
 800c9ea:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800c9ee:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c9f2:	4628      	mov	r0, r5
 800c9f4:	f7f3 fd9e 	bl	8000534 <__aeabi_i2d>
 800c9f8:	4632      	mov	r2, r6
 800c9fa:	463b      	mov	r3, r7
 800c9fc:	f7f3 fe04 	bl	8000608 <__aeabi_dmul>
 800ca00:	4b88      	ldr	r3, [pc, #544]	; (800cc24 <_dtoa_r+0x654>)
 800ca02:	2200      	movs	r2, #0
 800ca04:	f7f3 fc4a 	bl	800029c <__adddf3>
 800ca08:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ca0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca10:	9303      	str	r3, [sp, #12]
 800ca12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d15c      	bne.n	800cad2 <_dtoa_r+0x502>
 800ca18:	4b83      	ldr	r3, [pc, #524]	; (800cc28 <_dtoa_r+0x658>)
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	4630      	mov	r0, r6
 800ca1e:	4639      	mov	r1, r7
 800ca20:	f7f3 fc3a 	bl	8000298 <__aeabi_dsub>
 800ca24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ca28:	4606      	mov	r6, r0
 800ca2a:	460f      	mov	r7, r1
 800ca2c:	f7f4 f87c 	bl	8000b28 <__aeabi_dcmpgt>
 800ca30:	2800      	cmp	r0, #0
 800ca32:	f040 8296 	bne.w	800cf62 <_dtoa_r+0x992>
 800ca36:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ca3a:	4630      	mov	r0, r6
 800ca3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ca40:	4639      	mov	r1, r7
 800ca42:	f7f4 f853 	bl	8000aec <__aeabi_dcmplt>
 800ca46:	2800      	cmp	r0, #0
 800ca48:	f040 8288 	bne.w	800cf5c <_dtoa_r+0x98c>
 800ca4c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ca50:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ca54:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	f2c0 8158 	blt.w	800cd0c <_dtoa_r+0x73c>
 800ca5c:	f1ba 0f0e 	cmp.w	sl, #14
 800ca60:	f300 8154 	bgt.w	800cd0c <_dtoa_r+0x73c>
 800ca64:	4b6b      	ldr	r3, [pc, #428]	; (800cc14 <_dtoa_r+0x644>)
 800ca66:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ca6a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ca6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	f280 80e3 	bge.w	800cc3c <_dtoa_r+0x66c>
 800ca76:	9b01      	ldr	r3, [sp, #4]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	f300 80df 	bgt.w	800cc3c <_dtoa_r+0x66c>
 800ca7e:	f040 826d 	bne.w	800cf5c <_dtoa_r+0x98c>
 800ca82:	4b69      	ldr	r3, [pc, #420]	; (800cc28 <_dtoa_r+0x658>)
 800ca84:	2200      	movs	r2, #0
 800ca86:	4640      	mov	r0, r8
 800ca88:	4649      	mov	r1, r9
 800ca8a:	f7f3 fdbd 	bl	8000608 <__aeabi_dmul>
 800ca8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ca92:	f7f4 f83f 	bl	8000b14 <__aeabi_dcmpge>
 800ca96:	9e01      	ldr	r6, [sp, #4]
 800ca98:	4637      	mov	r7, r6
 800ca9a:	2800      	cmp	r0, #0
 800ca9c:	f040 8243 	bne.w	800cf26 <_dtoa_r+0x956>
 800caa0:	9d00      	ldr	r5, [sp, #0]
 800caa2:	2331      	movs	r3, #49	; 0x31
 800caa4:	f805 3b01 	strb.w	r3, [r5], #1
 800caa8:	f10a 0a01 	add.w	sl, sl, #1
 800caac:	e23f      	b.n	800cf2e <_dtoa_r+0x95e>
 800caae:	07f2      	lsls	r2, r6, #31
 800cab0:	d505      	bpl.n	800cabe <_dtoa_r+0x4ee>
 800cab2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cab6:	f7f3 fda7 	bl	8000608 <__aeabi_dmul>
 800caba:	3501      	adds	r5, #1
 800cabc:	2301      	movs	r3, #1
 800cabe:	1076      	asrs	r6, r6, #1
 800cac0:	3708      	adds	r7, #8
 800cac2:	e76c      	b.n	800c99e <_dtoa_r+0x3ce>
 800cac4:	2502      	movs	r5, #2
 800cac6:	e76f      	b.n	800c9a8 <_dtoa_r+0x3d8>
 800cac8:	9b01      	ldr	r3, [sp, #4]
 800caca:	f8cd a01c 	str.w	sl, [sp, #28]
 800cace:	930c      	str	r3, [sp, #48]	; 0x30
 800cad0:	e78d      	b.n	800c9ee <_dtoa_r+0x41e>
 800cad2:	9900      	ldr	r1, [sp, #0]
 800cad4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800cad6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cad8:	4b4e      	ldr	r3, [pc, #312]	; (800cc14 <_dtoa_r+0x644>)
 800cada:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cade:	4401      	add	r1, r0
 800cae0:	9102      	str	r1, [sp, #8]
 800cae2:	9908      	ldr	r1, [sp, #32]
 800cae4:	eeb0 8a47 	vmov.f32	s16, s14
 800cae8:	eef0 8a67 	vmov.f32	s17, s15
 800caec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800caf0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800caf4:	2900      	cmp	r1, #0
 800caf6:	d045      	beq.n	800cb84 <_dtoa_r+0x5b4>
 800caf8:	494c      	ldr	r1, [pc, #304]	; (800cc2c <_dtoa_r+0x65c>)
 800cafa:	2000      	movs	r0, #0
 800cafc:	f7f3 feae 	bl	800085c <__aeabi_ddiv>
 800cb00:	ec53 2b18 	vmov	r2, r3, d8
 800cb04:	f7f3 fbc8 	bl	8000298 <__aeabi_dsub>
 800cb08:	9d00      	ldr	r5, [sp, #0]
 800cb0a:	ec41 0b18 	vmov	d8, r0, r1
 800cb0e:	4639      	mov	r1, r7
 800cb10:	4630      	mov	r0, r6
 800cb12:	f7f4 f829 	bl	8000b68 <__aeabi_d2iz>
 800cb16:	900c      	str	r0, [sp, #48]	; 0x30
 800cb18:	f7f3 fd0c 	bl	8000534 <__aeabi_i2d>
 800cb1c:	4602      	mov	r2, r0
 800cb1e:	460b      	mov	r3, r1
 800cb20:	4630      	mov	r0, r6
 800cb22:	4639      	mov	r1, r7
 800cb24:	f7f3 fbb8 	bl	8000298 <__aeabi_dsub>
 800cb28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cb2a:	3330      	adds	r3, #48	; 0x30
 800cb2c:	f805 3b01 	strb.w	r3, [r5], #1
 800cb30:	ec53 2b18 	vmov	r2, r3, d8
 800cb34:	4606      	mov	r6, r0
 800cb36:	460f      	mov	r7, r1
 800cb38:	f7f3 ffd8 	bl	8000aec <__aeabi_dcmplt>
 800cb3c:	2800      	cmp	r0, #0
 800cb3e:	d165      	bne.n	800cc0c <_dtoa_r+0x63c>
 800cb40:	4632      	mov	r2, r6
 800cb42:	463b      	mov	r3, r7
 800cb44:	4935      	ldr	r1, [pc, #212]	; (800cc1c <_dtoa_r+0x64c>)
 800cb46:	2000      	movs	r0, #0
 800cb48:	f7f3 fba6 	bl	8000298 <__aeabi_dsub>
 800cb4c:	ec53 2b18 	vmov	r2, r3, d8
 800cb50:	f7f3 ffcc 	bl	8000aec <__aeabi_dcmplt>
 800cb54:	2800      	cmp	r0, #0
 800cb56:	f040 80b9 	bne.w	800cccc <_dtoa_r+0x6fc>
 800cb5a:	9b02      	ldr	r3, [sp, #8]
 800cb5c:	429d      	cmp	r5, r3
 800cb5e:	f43f af75 	beq.w	800ca4c <_dtoa_r+0x47c>
 800cb62:	4b2f      	ldr	r3, [pc, #188]	; (800cc20 <_dtoa_r+0x650>)
 800cb64:	ec51 0b18 	vmov	r0, r1, d8
 800cb68:	2200      	movs	r2, #0
 800cb6a:	f7f3 fd4d 	bl	8000608 <__aeabi_dmul>
 800cb6e:	4b2c      	ldr	r3, [pc, #176]	; (800cc20 <_dtoa_r+0x650>)
 800cb70:	ec41 0b18 	vmov	d8, r0, r1
 800cb74:	2200      	movs	r2, #0
 800cb76:	4630      	mov	r0, r6
 800cb78:	4639      	mov	r1, r7
 800cb7a:	f7f3 fd45 	bl	8000608 <__aeabi_dmul>
 800cb7e:	4606      	mov	r6, r0
 800cb80:	460f      	mov	r7, r1
 800cb82:	e7c4      	b.n	800cb0e <_dtoa_r+0x53e>
 800cb84:	ec51 0b17 	vmov	r0, r1, d7
 800cb88:	f7f3 fd3e 	bl	8000608 <__aeabi_dmul>
 800cb8c:	9b02      	ldr	r3, [sp, #8]
 800cb8e:	9d00      	ldr	r5, [sp, #0]
 800cb90:	930c      	str	r3, [sp, #48]	; 0x30
 800cb92:	ec41 0b18 	vmov	d8, r0, r1
 800cb96:	4639      	mov	r1, r7
 800cb98:	4630      	mov	r0, r6
 800cb9a:	f7f3 ffe5 	bl	8000b68 <__aeabi_d2iz>
 800cb9e:	9011      	str	r0, [sp, #68]	; 0x44
 800cba0:	f7f3 fcc8 	bl	8000534 <__aeabi_i2d>
 800cba4:	4602      	mov	r2, r0
 800cba6:	460b      	mov	r3, r1
 800cba8:	4630      	mov	r0, r6
 800cbaa:	4639      	mov	r1, r7
 800cbac:	f7f3 fb74 	bl	8000298 <__aeabi_dsub>
 800cbb0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cbb2:	3330      	adds	r3, #48	; 0x30
 800cbb4:	f805 3b01 	strb.w	r3, [r5], #1
 800cbb8:	9b02      	ldr	r3, [sp, #8]
 800cbba:	429d      	cmp	r5, r3
 800cbbc:	4606      	mov	r6, r0
 800cbbe:	460f      	mov	r7, r1
 800cbc0:	f04f 0200 	mov.w	r2, #0
 800cbc4:	d134      	bne.n	800cc30 <_dtoa_r+0x660>
 800cbc6:	4b19      	ldr	r3, [pc, #100]	; (800cc2c <_dtoa_r+0x65c>)
 800cbc8:	ec51 0b18 	vmov	r0, r1, d8
 800cbcc:	f7f3 fb66 	bl	800029c <__adddf3>
 800cbd0:	4602      	mov	r2, r0
 800cbd2:	460b      	mov	r3, r1
 800cbd4:	4630      	mov	r0, r6
 800cbd6:	4639      	mov	r1, r7
 800cbd8:	f7f3 ffa6 	bl	8000b28 <__aeabi_dcmpgt>
 800cbdc:	2800      	cmp	r0, #0
 800cbde:	d175      	bne.n	800cccc <_dtoa_r+0x6fc>
 800cbe0:	ec53 2b18 	vmov	r2, r3, d8
 800cbe4:	4911      	ldr	r1, [pc, #68]	; (800cc2c <_dtoa_r+0x65c>)
 800cbe6:	2000      	movs	r0, #0
 800cbe8:	f7f3 fb56 	bl	8000298 <__aeabi_dsub>
 800cbec:	4602      	mov	r2, r0
 800cbee:	460b      	mov	r3, r1
 800cbf0:	4630      	mov	r0, r6
 800cbf2:	4639      	mov	r1, r7
 800cbf4:	f7f3 ff7a 	bl	8000aec <__aeabi_dcmplt>
 800cbf8:	2800      	cmp	r0, #0
 800cbfa:	f43f af27 	beq.w	800ca4c <_dtoa_r+0x47c>
 800cbfe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cc00:	1e6b      	subs	r3, r5, #1
 800cc02:	930c      	str	r3, [sp, #48]	; 0x30
 800cc04:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cc08:	2b30      	cmp	r3, #48	; 0x30
 800cc0a:	d0f8      	beq.n	800cbfe <_dtoa_r+0x62e>
 800cc0c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800cc10:	e04a      	b.n	800cca8 <_dtoa_r+0x6d8>
 800cc12:	bf00      	nop
 800cc14:	080120d8 	.word	0x080120d8
 800cc18:	080120b0 	.word	0x080120b0
 800cc1c:	3ff00000 	.word	0x3ff00000
 800cc20:	40240000 	.word	0x40240000
 800cc24:	401c0000 	.word	0x401c0000
 800cc28:	40140000 	.word	0x40140000
 800cc2c:	3fe00000 	.word	0x3fe00000
 800cc30:	4baf      	ldr	r3, [pc, #700]	; (800cef0 <_dtoa_r+0x920>)
 800cc32:	f7f3 fce9 	bl	8000608 <__aeabi_dmul>
 800cc36:	4606      	mov	r6, r0
 800cc38:	460f      	mov	r7, r1
 800cc3a:	e7ac      	b.n	800cb96 <_dtoa_r+0x5c6>
 800cc3c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cc40:	9d00      	ldr	r5, [sp, #0]
 800cc42:	4642      	mov	r2, r8
 800cc44:	464b      	mov	r3, r9
 800cc46:	4630      	mov	r0, r6
 800cc48:	4639      	mov	r1, r7
 800cc4a:	f7f3 fe07 	bl	800085c <__aeabi_ddiv>
 800cc4e:	f7f3 ff8b 	bl	8000b68 <__aeabi_d2iz>
 800cc52:	9002      	str	r0, [sp, #8]
 800cc54:	f7f3 fc6e 	bl	8000534 <__aeabi_i2d>
 800cc58:	4642      	mov	r2, r8
 800cc5a:	464b      	mov	r3, r9
 800cc5c:	f7f3 fcd4 	bl	8000608 <__aeabi_dmul>
 800cc60:	4602      	mov	r2, r0
 800cc62:	460b      	mov	r3, r1
 800cc64:	4630      	mov	r0, r6
 800cc66:	4639      	mov	r1, r7
 800cc68:	f7f3 fb16 	bl	8000298 <__aeabi_dsub>
 800cc6c:	9e02      	ldr	r6, [sp, #8]
 800cc6e:	9f01      	ldr	r7, [sp, #4]
 800cc70:	3630      	adds	r6, #48	; 0x30
 800cc72:	f805 6b01 	strb.w	r6, [r5], #1
 800cc76:	9e00      	ldr	r6, [sp, #0]
 800cc78:	1bae      	subs	r6, r5, r6
 800cc7a:	42b7      	cmp	r7, r6
 800cc7c:	4602      	mov	r2, r0
 800cc7e:	460b      	mov	r3, r1
 800cc80:	d137      	bne.n	800ccf2 <_dtoa_r+0x722>
 800cc82:	f7f3 fb0b 	bl	800029c <__adddf3>
 800cc86:	4642      	mov	r2, r8
 800cc88:	464b      	mov	r3, r9
 800cc8a:	4606      	mov	r6, r0
 800cc8c:	460f      	mov	r7, r1
 800cc8e:	f7f3 ff4b 	bl	8000b28 <__aeabi_dcmpgt>
 800cc92:	b9c8      	cbnz	r0, 800ccc8 <_dtoa_r+0x6f8>
 800cc94:	4642      	mov	r2, r8
 800cc96:	464b      	mov	r3, r9
 800cc98:	4630      	mov	r0, r6
 800cc9a:	4639      	mov	r1, r7
 800cc9c:	f7f3 ff1c 	bl	8000ad8 <__aeabi_dcmpeq>
 800cca0:	b110      	cbz	r0, 800cca8 <_dtoa_r+0x6d8>
 800cca2:	9b02      	ldr	r3, [sp, #8]
 800cca4:	07d9      	lsls	r1, r3, #31
 800cca6:	d40f      	bmi.n	800ccc8 <_dtoa_r+0x6f8>
 800cca8:	4620      	mov	r0, r4
 800ccaa:	4659      	mov	r1, fp
 800ccac:	f000 fe6e 	bl	800d98c <_Bfree>
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	702b      	strb	r3, [r5, #0]
 800ccb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ccb6:	f10a 0001 	add.w	r0, sl, #1
 800ccba:	6018      	str	r0, [r3, #0]
 800ccbc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	f43f acd8 	beq.w	800c674 <_dtoa_r+0xa4>
 800ccc4:	601d      	str	r5, [r3, #0]
 800ccc6:	e4d5      	b.n	800c674 <_dtoa_r+0xa4>
 800ccc8:	f8cd a01c 	str.w	sl, [sp, #28]
 800cccc:	462b      	mov	r3, r5
 800ccce:	461d      	mov	r5, r3
 800ccd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ccd4:	2a39      	cmp	r2, #57	; 0x39
 800ccd6:	d108      	bne.n	800ccea <_dtoa_r+0x71a>
 800ccd8:	9a00      	ldr	r2, [sp, #0]
 800ccda:	429a      	cmp	r2, r3
 800ccdc:	d1f7      	bne.n	800ccce <_dtoa_r+0x6fe>
 800ccde:	9a07      	ldr	r2, [sp, #28]
 800cce0:	9900      	ldr	r1, [sp, #0]
 800cce2:	3201      	adds	r2, #1
 800cce4:	9207      	str	r2, [sp, #28]
 800cce6:	2230      	movs	r2, #48	; 0x30
 800cce8:	700a      	strb	r2, [r1, #0]
 800ccea:	781a      	ldrb	r2, [r3, #0]
 800ccec:	3201      	adds	r2, #1
 800ccee:	701a      	strb	r2, [r3, #0]
 800ccf0:	e78c      	b.n	800cc0c <_dtoa_r+0x63c>
 800ccf2:	4b7f      	ldr	r3, [pc, #508]	; (800cef0 <_dtoa_r+0x920>)
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	f7f3 fc87 	bl	8000608 <__aeabi_dmul>
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	4606      	mov	r6, r0
 800cd00:	460f      	mov	r7, r1
 800cd02:	f7f3 fee9 	bl	8000ad8 <__aeabi_dcmpeq>
 800cd06:	2800      	cmp	r0, #0
 800cd08:	d09b      	beq.n	800cc42 <_dtoa_r+0x672>
 800cd0a:	e7cd      	b.n	800cca8 <_dtoa_r+0x6d8>
 800cd0c:	9a08      	ldr	r2, [sp, #32]
 800cd0e:	2a00      	cmp	r2, #0
 800cd10:	f000 80c4 	beq.w	800ce9c <_dtoa_r+0x8cc>
 800cd14:	9a05      	ldr	r2, [sp, #20]
 800cd16:	2a01      	cmp	r2, #1
 800cd18:	f300 80a8 	bgt.w	800ce6c <_dtoa_r+0x89c>
 800cd1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cd1e:	2a00      	cmp	r2, #0
 800cd20:	f000 80a0 	beq.w	800ce64 <_dtoa_r+0x894>
 800cd24:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cd28:	9e06      	ldr	r6, [sp, #24]
 800cd2a:	4645      	mov	r5, r8
 800cd2c:	9a04      	ldr	r2, [sp, #16]
 800cd2e:	2101      	movs	r1, #1
 800cd30:	441a      	add	r2, r3
 800cd32:	4620      	mov	r0, r4
 800cd34:	4498      	add	r8, r3
 800cd36:	9204      	str	r2, [sp, #16]
 800cd38:	f000 ff2e 	bl	800db98 <__i2b>
 800cd3c:	4607      	mov	r7, r0
 800cd3e:	2d00      	cmp	r5, #0
 800cd40:	dd0b      	ble.n	800cd5a <_dtoa_r+0x78a>
 800cd42:	9b04      	ldr	r3, [sp, #16]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	dd08      	ble.n	800cd5a <_dtoa_r+0x78a>
 800cd48:	42ab      	cmp	r3, r5
 800cd4a:	9a04      	ldr	r2, [sp, #16]
 800cd4c:	bfa8      	it	ge
 800cd4e:	462b      	movge	r3, r5
 800cd50:	eba8 0803 	sub.w	r8, r8, r3
 800cd54:	1aed      	subs	r5, r5, r3
 800cd56:	1ad3      	subs	r3, r2, r3
 800cd58:	9304      	str	r3, [sp, #16]
 800cd5a:	9b06      	ldr	r3, [sp, #24]
 800cd5c:	b1fb      	cbz	r3, 800cd9e <_dtoa_r+0x7ce>
 800cd5e:	9b08      	ldr	r3, [sp, #32]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	f000 809f 	beq.w	800cea4 <_dtoa_r+0x8d4>
 800cd66:	2e00      	cmp	r6, #0
 800cd68:	dd11      	ble.n	800cd8e <_dtoa_r+0x7be>
 800cd6a:	4639      	mov	r1, r7
 800cd6c:	4632      	mov	r2, r6
 800cd6e:	4620      	mov	r0, r4
 800cd70:	f000 ffce 	bl	800dd10 <__pow5mult>
 800cd74:	465a      	mov	r2, fp
 800cd76:	4601      	mov	r1, r0
 800cd78:	4607      	mov	r7, r0
 800cd7a:	4620      	mov	r0, r4
 800cd7c:	f000 ff22 	bl	800dbc4 <__multiply>
 800cd80:	4659      	mov	r1, fp
 800cd82:	9007      	str	r0, [sp, #28]
 800cd84:	4620      	mov	r0, r4
 800cd86:	f000 fe01 	bl	800d98c <_Bfree>
 800cd8a:	9b07      	ldr	r3, [sp, #28]
 800cd8c:	469b      	mov	fp, r3
 800cd8e:	9b06      	ldr	r3, [sp, #24]
 800cd90:	1b9a      	subs	r2, r3, r6
 800cd92:	d004      	beq.n	800cd9e <_dtoa_r+0x7ce>
 800cd94:	4659      	mov	r1, fp
 800cd96:	4620      	mov	r0, r4
 800cd98:	f000 ffba 	bl	800dd10 <__pow5mult>
 800cd9c:	4683      	mov	fp, r0
 800cd9e:	2101      	movs	r1, #1
 800cda0:	4620      	mov	r0, r4
 800cda2:	f000 fef9 	bl	800db98 <__i2b>
 800cda6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	4606      	mov	r6, r0
 800cdac:	dd7c      	ble.n	800cea8 <_dtoa_r+0x8d8>
 800cdae:	461a      	mov	r2, r3
 800cdb0:	4601      	mov	r1, r0
 800cdb2:	4620      	mov	r0, r4
 800cdb4:	f000 ffac 	bl	800dd10 <__pow5mult>
 800cdb8:	9b05      	ldr	r3, [sp, #20]
 800cdba:	2b01      	cmp	r3, #1
 800cdbc:	4606      	mov	r6, r0
 800cdbe:	dd76      	ble.n	800ceae <_dtoa_r+0x8de>
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	9306      	str	r3, [sp, #24]
 800cdc4:	6933      	ldr	r3, [r6, #16]
 800cdc6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cdca:	6918      	ldr	r0, [r3, #16]
 800cdcc:	f000 fe94 	bl	800daf8 <__hi0bits>
 800cdd0:	f1c0 0020 	rsb	r0, r0, #32
 800cdd4:	9b04      	ldr	r3, [sp, #16]
 800cdd6:	4418      	add	r0, r3
 800cdd8:	f010 001f 	ands.w	r0, r0, #31
 800cddc:	f000 8086 	beq.w	800ceec <_dtoa_r+0x91c>
 800cde0:	f1c0 0320 	rsb	r3, r0, #32
 800cde4:	2b04      	cmp	r3, #4
 800cde6:	dd7f      	ble.n	800cee8 <_dtoa_r+0x918>
 800cde8:	f1c0 001c 	rsb	r0, r0, #28
 800cdec:	9b04      	ldr	r3, [sp, #16]
 800cdee:	4403      	add	r3, r0
 800cdf0:	4480      	add	r8, r0
 800cdf2:	4405      	add	r5, r0
 800cdf4:	9304      	str	r3, [sp, #16]
 800cdf6:	f1b8 0f00 	cmp.w	r8, #0
 800cdfa:	dd05      	ble.n	800ce08 <_dtoa_r+0x838>
 800cdfc:	4659      	mov	r1, fp
 800cdfe:	4642      	mov	r2, r8
 800ce00:	4620      	mov	r0, r4
 800ce02:	f000 ffdf 	bl	800ddc4 <__lshift>
 800ce06:	4683      	mov	fp, r0
 800ce08:	9b04      	ldr	r3, [sp, #16]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	dd05      	ble.n	800ce1a <_dtoa_r+0x84a>
 800ce0e:	4631      	mov	r1, r6
 800ce10:	461a      	mov	r2, r3
 800ce12:	4620      	mov	r0, r4
 800ce14:	f000 ffd6 	bl	800ddc4 <__lshift>
 800ce18:	4606      	mov	r6, r0
 800ce1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d069      	beq.n	800cef4 <_dtoa_r+0x924>
 800ce20:	4631      	mov	r1, r6
 800ce22:	4658      	mov	r0, fp
 800ce24:	f001 f83a 	bl	800de9c <__mcmp>
 800ce28:	2800      	cmp	r0, #0
 800ce2a:	da63      	bge.n	800cef4 <_dtoa_r+0x924>
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	4659      	mov	r1, fp
 800ce30:	220a      	movs	r2, #10
 800ce32:	4620      	mov	r0, r4
 800ce34:	f000 fdcc 	bl	800d9d0 <__multadd>
 800ce38:	9b08      	ldr	r3, [sp, #32]
 800ce3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ce3e:	4683      	mov	fp, r0
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	f000 818f 	beq.w	800d164 <_dtoa_r+0xb94>
 800ce46:	4639      	mov	r1, r7
 800ce48:	2300      	movs	r3, #0
 800ce4a:	220a      	movs	r2, #10
 800ce4c:	4620      	mov	r0, r4
 800ce4e:	f000 fdbf 	bl	800d9d0 <__multadd>
 800ce52:	f1b9 0f00 	cmp.w	r9, #0
 800ce56:	4607      	mov	r7, r0
 800ce58:	f300 808e 	bgt.w	800cf78 <_dtoa_r+0x9a8>
 800ce5c:	9b05      	ldr	r3, [sp, #20]
 800ce5e:	2b02      	cmp	r3, #2
 800ce60:	dc50      	bgt.n	800cf04 <_dtoa_r+0x934>
 800ce62:	e089      	b.n	800cf78 <_dtoa_r+0x9a8>
 800ce64:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ce66:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ce6a:	e75d      	b.n	800cd28 <_dtoa_r+0x758>
 800ce6c:	9b01      	ldr	r3, [sp, #4]
 800ce6e:	1e5e      	subs	r6, r3, #1
 800ce70:	9b06      	ldr	r3, [sp, #24]
 800ce72:	42b3      	cmp	r3, r6
 800ce74:	bfbf      	itttt	lt
 800ce76:	9b06      	ldrlt	r3, [sp, #24]
 800ce78:	9606      	strlt	r6, [sp, #24]
 800ce7a:	1af2      	sublt	r2, r6, r3
 800ce7c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800ce7e:	bfb6      	itet	lt
 800ce80:	189b      	addlt	r3, r3, r2
 800ce82:	1b9e      	subge	r6, r3, r6
 800ce84:	930d      	strlt	r3, [sp, #52]	; 0x34
 800ce86:	9b01      	ldr	r3, [sp, #4]
 800ce88:	bfb8      	it	lt
 800ce8a:	2600      	movlt	r6, #0
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	bfb5      	itete	lt
 800ce90:	eba8 0503 	sublt.w	r5, r8, r3
 800ce94:	9b01      	ldrge	r3, [sp, #4]
 800ce96:	2300      	movlt	r3, #0
 800ce98:	4645      	movge	r5, r8
 800ce9a:	e747      	b.n	800cd2c <_dtoa_r+0x75c>
 800ce9c:	9e06      	ldr	r6, [sp, #24]
 800ce9e:	9f08      	ldr	r7, [sp, #32]
 800cea0:	4645      	mov	r5, r8
 800cea2:	e74c      	b.n	800cd3e <_dtoa_r+0x76e>
 800cea4:	9a06      	ldr	r2, [sp, #24]
 800cea6:	e775      	b.n	800cd94 <_dtoa_r+0x7c4>
 800cea8:	9b05      	ldr	r3, [sp, #20]
 800ceaa:	2b01      	cmp	r3, #1
 800ceac:	dc18      	bgt.n	800cee0 <_dtoa_r+0x910>
 800ceae:	9b02      	ldr	r3, [sp, #8]
 800ceb0:	b9b3      	cbnz	r3, 800cee0 <_dtoa_r+0x910>
 800ceb2:	9b03      	ldr	r3, [sp, #12]
 800ceb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ceb8:	b9a3      	cbnz	r3, 800cee4 <_dtoa_r+0x914>
 800ceba:	9b03      	ldr	r3, [sp, #12]
 800cebc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cec0:	0d1b      	lsrs	r3, r3, #20
 800cec2:	051b      	lsls	r3, r3, #20
 800cec4:	b12b      	cbz	r3, 800ced2 <_dtoa_r+0x902>
 800cec6:	9b04      	ldr	r3, [sp, #16]
 800cec8:	3301      	adds	r3, #1
 800ceca:	9304      	str	r3, [sp, #16]
 800cecc:	f108 0801 	add.w	r8, r8, #1
 800ced0:	2301      	movs	r3, #1
 800ced2:	9306      	str	r3, [sp, #24]
 800ced4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	f47f af74 	bne.w	800cdc4 <_dtoa_r+0x7f4>
 800cedc:	2001      	movs	r0, #1
 800cede:	e779      	b.n	800cdd4 <_dtoa_r+0x804>
 800cee0:	2300      	movs	r3, #0
 800cee2:	e7f6      	b.n	800ced2 <_dtoa_r+0x902>
 800cee4:	9b02      	ldr	r3, [sp, #8]
 800cee6:	e7f4      	b.n	800ced2 <_dtoa_r+0x902>
 800cee8:	d085      	beq.n	800cdf6 <_dtoa_r+0x826>
 800ceea:	4618      	mov	r0, r3
 800ceec:	301c      	adds	r0, #28
 800ceee:	e77d      	b.n	800cdec <_dtoa_r+0x81c>
 800cef0:	40240000 	.word	0x40240000
 800cef4:	9b01      	ldr	r3, [sp, #4]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	dc38      	bgt.n	800cf6c <_dtoa_r+0x99c>
 800cefa:	9b05      	ldr	r3, [sp, #20]
 800cefc:	2b02      	cmp	r3, #2
 800cefe:	dd35      	ble.n	800cf6c <_dtoa_r+0x99c>
 800cf00:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800cf04:	f1b9 0f00 	cmp.w	r9, #0
 800cf08:	d10d      	bne.n	800cf26 <_dtoa_r+0x956>
 800cf0a:	4631      	mov	r1, r6
 800cf0c:	464b      	mov	r3, r9
 800cf0e:	2205      	movs	r2, #5
 800cf10:	4620      	mov	r0, r4
 800cf12:	f000 fd5d 	bl	800d9d0 <__multadd>
 800cf16:	4601      	mov	r1, r0
 800cf18:	4606      	mov	r6, r0
 800cf1a:	4658      	mov	r0, fp
 800cf1c:	f000 ffbe 	bl	800de9c <__mcmp>
 800cf20:	2800      	cmp	r0, #0
 800cf22:	f73f adbd 	bgt.w	800caa0 <_dtoa_r+0x4d0>
 800cf26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf28:	9d00      	ldr	r5, [sp, #0]
 800cf2a:	ea6f 0a03 	mvn.w	sl, r3
 800cf2e:	f04f 0800 	mov.w	r8, #0
 800cf32:	4631      	mov	r1, r6
 800cf34:	4620      	mov	r0, r4
 800cf36:	f000 fd29 	bl	800d98c <_Bfree>
 800cf3a:	2f00      	cmp	r7, #0
 800cf3c:	f43f aeb4 	beq.w	800cca8 <_dtoa_r+0x6d8>
 800cf40:	f1b8 0f00 	cmp.w	r8, #0
 800cf44:	d005      	beq.n	800cf52 <_dtoa_r+0x982>
 800cf46:	45b8      	cmp	r8, r7
 800cf48:	d003      	beq.n	800cf52 <_dtoa_r+0x982>
 800cf4a:	4641      	mov	r1, r8
 800cf4c:	4620      	mov	r0, r4
 800cf4e:	f000 fd1d 	bl	800d98c <_Bfree>
 800cf52:	4639      	mov	r1, r7
 800cf54:	4620      	mov	r0, r4
 800cf56:	f000 fd19 	bl	800d98c <_Bfree>
 800cf5a:	e6a5      	b.n	800cca8 <_dtoa_r+0x6d8>
 800cf5c:	2600      	movs	r6, #0
 800cf5e:	4637      	mov	r7, r6
 800cf60:	e7e1      	b.n	800cf26 <_dtoa_r+0x956>
 800cf62:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800cf64:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800cf68:	4637      	mov	r7, r6
 800cf6a:	e599      	b.n	800caa0 <_dtoa_r+0x4d0>
 800cf6c:	9b08      	ldr	r3, [sp, #32]
 800cf6e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	f000 80fd 	beq.w	800d172 <_dtoa_r+0xba2>
 800cf78:	2d00      	cmp	r5, #0
 800cf7a:	dd05      	ble.n	800cf88 <_dtoa_r+0x9b8>
 800cf7c:	4639      	mov	r1, r7
 800cf7e:	462a      	mov	r2, r5
 800cf80:	4620      	mov	r0, r4
 800cf82:	f000 ff1f 	bl	800ddc4 <__lshift>
 800cf86:	4607      	mov	r7, r0
 800cf88:	9b06      	ldr	r3, [sp, #24]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d05c      	beq.n	800d048 <_dtoa_r+0xa78>
 800cf8e:	6879      	ldr	r1, [r7, #4]
 800cf90:	4620      	mov	r0, r4
 800cf92:	f000 fcbb 	bl	800d90c <_Balloc>
 800cf96:	4605      	mov	r5, r0
 800cf98:	b928      	cbnz	r0, 800cfa6 <_dtoa_r+0x9d6>
 800cf9a:	4b80      	ldr	r3, [pc, #512]	; (800d19c <_dtoa_r+0xbcc>)
 800cf9c:	4602      	mov	r2, r0
 800cf9e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800cfa2:	f7ff bb2e 	b.w	800c602 <_dtoa_r+0x32>
 800cfa6:	693a      	ldr	r2, [r7, #16]
 800cfa8:	3202      	adds	r2, #2
 800cfaa:	0092      	lsls	r2, r2, #2
 800cfac:	f107 010c 	add.w	r1, r7, #12
 800cfb0:	300c      	adds	r0, #12
 800cfb2:	f000 fc91 	bl	800d8d8 <memcpy>
 800cfb6:	2201      	movs	r2, #1
 800cfb8:	4629      	mov	r1, r5
 800cfba:	4620      	mov	r0, r4
 800cfbc:	f000 ff02 	bl	800ddc4 <__lshift>
 800cfc0:	9b00      	ldr	r3, [sp, #0]
 800cfc2:	3301      	adds	r3, #1
 800cfc4:	9301      	str	r3, [sp, #4]
 800cfc6:	9b00      	ldr	r3, [sp, #0]
 800cfc8:	444b      	add	r3, r9
 800cfca:	9307      	str	r3, [sp, #28]
 800cfcc:	9b02      	ldr	r3, [sp, #8]
 800cfce:	f003 0301 	and.w	r3, r3, #1
 800cfd2:	46b8      	mov	r8, r7
 800cfd4:	9306      	str	r3, [sp, #24]
 800cfd6:	4607      	mov	r7, r0
 800cfd8:	9b01      	ldr	r3, [sp, #4]
 800cfda:	4631      	mov	r1, r6
 800cfdc:	3b01      	subs	r3, #1
 800cfde:	4658      	mov	r0, fp
 800cfe0:	9302      	str	r3, [sp, #8]
 800cfe2:	f7ff fa69 	bl	800c4b8 <quorem>
 800cfe6:	4603      	mov	r3, r0
 800cfe8:	3330      	adds	r3, #48	; 0x30
 800cfea:	9004      	str	r0, [sp, #16]
 800cfec:	4641      	mov	r1, r8
 800cfee:	4658      	mov	r0, fp
 800cff0:	9308      	str	r3, [sp, #32]
 800cff2:	f000 ff53 	bl	800de9c <__mcmp>
 800cff6:	463a      	mov	r2, r7
 800cff8:	4681      	mov	r9, r0
 800cffa:	4631      	mov	r1, r6
 800cffc:	4620      	mov	r0, r4
 800cffe:	f000 ff69 	bl	800ded4 <__mdiff>
 800d002:	68c2      	ldr	r2, [r0, #12]
 800d004:	9b08      	ldr	r3, [sp, #32]
 800d006:	4605      	mov	r5, r0
 800d008:	bb02      	cbnz	r2, 800d04c <_dtoa_r+0xa7c>
 800d00a:	4601      	mov	r1, r0
 800d00c:	4658      	mov	r0, fp
 800d00e:	f000 ff45 	bl	800de9c <__mcmp>
 800d012:	9b08      	ldr	r3, [sp, #32]
 800d014:	4602      	mov	r2, r0
 800d016:	4629      	mov	r1, r5
 800d018:	4620      	mov	r0, r4
 800d01a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800d01e:	f000 fcb5 	bl	800d98c <_Bfree>
 800d022:	9b05      	ldr	r3, [sp, #20]
 800d024:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d026:	9d01      	ldr	r5, [sp, #4]
 800d028:	ea43 0102 	orr.w	r1, r3, r2
 800d02c:	9b06      	ldr	r3, [sp, #24]
 800d02e:	430b      	orrs	r3, r1
 800d030:	9b08      	ldr	r3, [sp, #32]
 800d032:	d10d      	bne.n	800d050 <_dtoa_r+0xa80>
 800d034:	2b39      	cmp	r3, #57	; 0x39
 800d036:	d029      	beq.n	800d08c <_dtoa_r+0xabc>
 800d038:	f1b9 0f00 	cmp.w	r9, #0
 800d03c:	dd01      	ble.n	800d042 <_dtoa_r+0xa72>
 800d03e:	9b04      	ldr	r3, [sp, #16]
 800d040:	3331      	adds	r3, #49	; 0x31
 800d042:	9a02      	ldr	r2, [sp, #8]
 800d044:	7013      	strb	r3, [r2, #0]
 800d046:	e774      	b.n	800cf32 <_dtoa_r+0x962>
 800d048:	4638      	mov	r0, r7
 800d04a:	e7b9      	b.n	800cfc0 <_dtoa_r+0x9f0>
 800d04c:	2201      	movs	r2, #1
 800d04e:	e7e2      	b.n	800d016 <_dtoa_r+0xa46>
 800d050:	f1b9 0f00 	cmp.w	r9, #0
 800d054:	db06      	blt.n	800d064 <_dtoa_r+0xa94>
 800d056:	9905      	ldr	r1, [sp, #20]
 800d058:	ea41 0909 	orr.w	r9, r1, r9
 800d05c:	9906      	ldr	r1, [sp, #24]
 800d05e:	ea59 0101 	orrs.w	r1, r9, r1
 800d062:	d120      	bne.n	800d0a6 <_dtoa_r+0xad6>
 800d064:	2a00      	cmp	r2, #0
 800d066:	ddec      	ble.n	800d042 <_dtoa_r+0xa72>
 800d068:	4659      	mov	r1, fp
 800d06a:	2201      	movs	r2, #1
 800d06c:	4620      	mov	r0, r4
 800d06e:	9301      	str	r3, [sp, #4]
 800d070:	f000 fea8 	bl	800ddc4 <__lshift>
 800d074:	4631      	mov	r1, r6
 800d076:	4683      	mov	fp, r0
 800d078:	f000 ff10 	bl	800de9c <__mcmp>
 800d07c:	2800      	cmp	r0, #0
 800d07e:	9b01      	ldr	r3, [sp, #4]
 800d080:	dc02      	bgt.n	800d088 <_dtoa_r+0xab8>
 800d082:	d1de      	bne.n	800d042 <_dtoa_r+0xa72>
 800d084:	07da      	lsls	r2, r3, #31
 800d086:	d5dc      	bpl.n	800d042 <_dtoa_r+0xa72>
 800d088:	2b39      	cmp	r3, #57	; 0x39
 800d08a:	d1d8      	bne.n	800d03e <_dtoa_r+0xa6e>
 800d08c:	9a02      	ldr	r2, [sp, #8]
 800d08e:	2339      	movs	r3, #57	; 0x39
 800d090:	7013      	strb	r3, [r2, #0]
 800d092:	462b      	mov	r3, r5
 800d094:	461d      	mov	r5, r3
 800d096:	3b01      	subs	r3, #1
 800d098:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d09c:	2a39      	cmp	r2, #57	; 0x39
 800d09e:	d050      	beq.n	800d142 <_dtoa_r+0xb72>
 800d0a0:	3201      	adds	r2, #1
 800d0a2:	701a      	strb	r2, [r3, #0]
 800d0a4:	e745      	b.n	800cf32 <_dtoa_r+0x962>
 800d0a6:	2a00      	cmp	r2, #0
 800d0a8:	dd03      	ble.n	800d0b2 <_dtoa_r+0xae2>
 800d0aa:	2b39      	cmp	r3, #57	; 0x39
 800d0ac:	d0ee      	beq.n	800d08c <_dtoa_r+0xabc>
 800d0ae:	3301      	adds	r3, #1
 800d0b0:	e7c7      	b.n	800d042 <_dtoa_r+0xa72>
 800d0b2:	9a01      	ldr	r2, [sp, #4]
 800d0b4:	9907      	ldr	r1, [sp, #28]
 800d0b6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d0ba:	428a      	cmp	r2, r1
 800d0bc:	d02a      	beq.n	800d114 <_dtoa_r+0xb44>
 800d0be:	4659      	mov	r1, fp
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	220a      	movs	r2, #10
 800d0c4:	4620      	mov	r0, r4
 800d0c6:	f000 fc83 	bl	800d9d0 <__multadd>
 800d0ca:	45b8      	cmp	r8, r7
 800d0cc:	4683      	mov	fp, r0
 800d0ce:	f04f 0300 	mov.w	r3, #0
 800d0d2:	f04f 020a 	mov.w	r2, #10
 800d0d6:	4641      	mov	r1, r8
 800d0d8:	4620      	mov	r0, r4
 800d0da:	d107      	bne.n	800d0ec <_dtoa_r+0xb1c>
 800d0dc:	f000 fc78 	bl	800d9d0 <__multadd>
 800d0e0:	4680      	mov	r8, r0
 800d0e2:	4607      	mov	r7, r0
 800d0e4:	9b01      	ldr	r3, [sp, #4]
 800d0e6:	3301      	adds	r3, #1
 800d0e8:	9301      	str	r3, [sp, #4]
 800d0ea:	e775      	b.n	800cfd8 <_dtoa_r+0xa08>
 800d0ec:	f000 fc70 	bl	800d9d0 <__multadd>
 800d0f0:	4639      	mov	r1, r7
 800d0f2:	4680      	mov	r8, r0
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	220a      	movs	r2, #10
 800d0f8:	4620      	mov	r0, r4
 800d0fa:	f000 fc69 	bl	800d9d0 <__multadd>
 800d0fe:	4607      	mov	r7, r0
 800d100:	e7f0      	b.n	800d0e4 <_dtoa_r+0xb14>
 800d102:	f1b9 0f00 	cmp.w	r9, #0
 800d106:	9a00      	ldr	r2, [sp, #0]
 800d108:	bfcc      	ite	gt
 800d10a:	464d      	movgt	r5, r9
 800d10c:	2501      	movle	r5, #1
 800d10e:	4415      	add	r5, r2
 800d110:	f04f 0800 	mov.w	r8, #0
 800d114:	4659      	mov	r1, fp
 800d116:	2201      	movs	r2, #1
 800d118:	4620      	mov	r0, r4
 800d11a:	9301      	str	r3, [sp, #4]
 800d11c:	f000 fe52 	bl	800ddc4 <__lshift>
 800d120:	4631      	mov	r1, r6
 800d122:	4683      	mov	fp, r0
 800d124:	f000 feba 	bl	800de9c <__mcmp>
 800d128:	2800      	cmp	r0, #0
 800d12a:	dcb2      	bgt.n	800d092 <_dtoa_r+0xac2>
 800d12c:	d102      	bne.n	800d134 <_dtoa_r+0xb64>
 800d12e:	9b01      	ldr	r3, [sp, #4]
 800d130:	07db      	lsls	r3, r3, #31
 800d132:	d4ae      	bmi.n	800d092 <_dtoa_r+0xac2>
 800d134:	462b      	mov	r3, r5
 800d136:	461d      	mov	r5, r3
 800d138:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d13c:	2a30      	cmp	r2, #48	; 0x30
 800d13e:	d0fa      	beq.n	800d136 <_dtoa_r+0xb66>
 800d140:	e6f7      	b.n	800cf32 <_dtoa_r+0x962>
 800d142:	9a00      	ldr	r2, [sp, #0]
 800d144:	429a      	cmp	r2, r3
 800d146:	d1a5      	bne.n	800d094 <_dtoa_r+0xac4>
 800d148:	f10a 0a01 	add.w	sl, sl, #1
 800d14c:	2331      	movs	r3, #49	; 0x31
 800d14e:	e779      	b.n	800d044 <_dtoa_r+0xa74>
 800d150:	4b13      	ldr	r3, [pc, #76]	; (800d1a0 <_dtoa_r+0xbd0>)
 800d152:	f7ff baaf 	b.w	800c6b4 <_dtoa_r+0xe4>
 800d156:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d158:	2b00      	cmp	r3, #0
 800d15a:	f47f aa86 	bne.w	800c66a <_dtoa_r+0x9a>
 800d15e:	4b11      	ldr	r3, [pc, #68]	; (800d1a4 <_dtoa_r+0xbd4>)
 800d160:	f7ff baa8 	b.w	800c6b4 <_dtoa_r+0xe4>
 800d164:	f1b9 0f00 	cmp.w	r9, #0
 800d168:	dc03      	bgt.n	800d172 <_dtoa_r+0xba2>
 800d16a:	9b05      	ldr	r3, [sp, #20]
 800d16c:	2b02      	cmp	r3, #2
 800d16e:	f73f aec9 	bgt.w	800cf04 <_dtoa_r+0x934>
 800d172:	9d00      	ldr	r5, [sp, #0]
 800d174:	4631      	mov	r1, r6
 800d176:	4658      	mov	r0, fp
 800d178:	f7ff f99e 	bl	800c4b8 <quorem>
 800d17c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800d180:	f805 3b01 	strb.w	r3, [r5], #1
 800d184:	9a00      	ldr	r2, [sp, #0]
 800d186:	1aaa      	subs	r2, r5, r2
 800d188:	4591      	cmp	r9, r2
 800d18a:	ddba      	ble.n	800d102 <_dtoa_r+0xb32>
 800d18c:	4659      	mov	r1, fp
 800d18e:	2300      	movs	r3, #0
 800d190:	220a      	movs	r2, #10
 800d192:	4620      	mov	r0, r4
 800d194:	f000 fc1c 	bl	800d9d0 <__multadd>
 800d198:	4683      	mov	fp, r0
 800d19a:	e7eb      	b.n	800d174 <_dtoa_r+0xba4>
 800d19c:	08011fbc 	.word	0x08011fbc
 800d1a0:	080121c1 	.word	0x080121c1
 800d1a4:	08011f39 	.word	0x08011f39

0800d1a8 <rshift>:
 800d1a8:	6903      	ldr	r3, [r0, #16]
 800d1aa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d1ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d1b2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d1b6:	f100 0414 	add.w	r4, r0, #20
 800d1ba:	dd45      	ble.n	800d248 <rshift+0xa0>
 800d1bc:	f011 011f 	ands.w	r1, r1, #31
 800d1c0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d1c4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d1c8:	d10c      	bne.n	800d1e4 <rshift+0x3c>
 800d1ca:	f100 0710 	add.w	r7, r0, #16
 800d1ce:	4629      	mov	r1, r5
 800d1d0:	42b1      	cmp	r1, r6
 800d1d2:	d334      	bcc.n	800d23e <rshift+0x96>
 800d1d4:	1a9b      	subs	r3, r3, r2
 800d1d6:	009b      	lsls	r3, r3, #2
 800d1d8:	1eea      	subs	r2, r5, #3
 800d1da:	4296      	cmp	r6, r2
 800d1dc:	bf38      	it	cc
 800d1de:	2300      	movcc	r3, #0
 800d1e0:	4423      	add	r3, r4
 800d1e2:	e015      	b.n	800d210 <rshift+0x68>
 800d1e4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d1e8:	f1c1 0820 	rsb	r8, r1, #32
 800d1ec:	40cf      	lsrs	r7, r1
 800d1ee:	f105 0e04 	add.w	lr, r5, #4
 800d1f2:	46a1      	mov	r9, r4
 800d1f4:	4576      	cmp	r6, lr
 800d1f6:	46f4      	mov	ip, lr
 800d1f8:	d815      	bhi.n	800d226 <rshift+0x7e>
 800d1fa:	1a9b      	subs	r3, r3, r2
 800d1fc:	009a      	lsls	r2, r3, #2
 800d1fe:	3a04      	subs	r2, #4
 800d200:	3501      	adds	r5, #1
 800d202:	42ae      	cmp	r6, r5
 800d204:	bf38      	it	cc
 800d206:	2200      	movcc	r2, #0
 800d208:	18a3      	adds	r3, r4, r2
 800d20a:	50a7      	str	r7, [r4, r2]
 800d20c:	b107      	cbz	r7, 800d210 <rshift+0x68>
 800d20e:	3304      	adds	r3, #4
 800d210:	1b1a      	subs	r2, r3, r4
 800d212:	42a3      	cmp	r3, r4
 800d214:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d218:	bf08      	it	eq
 800d21a:	2300      	moveq	r3, #0
 800d21c:	6102      	str	r2, [r0, #16]
 800d21e:	bf08      	it	eq
 800d220:	6143      	streq	r3, [r0, #20]
 800d222:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d226:	f8dc c000 	ldr.w	ip, [ip]
 800d22a:	fa0c fc08 	lsl.w	ip, ip, r8
 800d22e:	ea4c 0707 	orr.w	r7, ip, r7
 800d232:	f849 7b04 	str.w	r7, [r9], #4
 800d236:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d23a:	40cf      	lsrs	r7, r1
 800d23c:	e7da      	b.n	800d1f4 <rshift+0x4c>
 800d23e:	f851 cb04 	ldr.w	ip, [r1], #4
 800d242:	f847 cf04 	str.w	ip, [r7, #4]!
 800d246:	e7c3      	b.n	800d1d0 <rshift+0x28>
 800d248:	4623      	mov	r3, r4
 800d24a:	e7e1      	b.n	800d210 <rshift+0x68>

0800d24c <__hexdig_fun>:
 800d24c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d250:	2b09      	cmp	r3, #9
 800d252:	d802      	bhi.n	800d25a <__hexdig_fun+0xe>
 800d254:	3820      	subs	r0, #32
 800d256:	b2c0      	uxtb	r0, r0
 800d258:	4770      	bx	lr
 800d25a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d25e:	2b05      	cmp	r3, #5
 800d260:	d801      	bhi.n	800d266 <__hexdig_fun+0x1a>
 800d262:	3847      	subs	r0, #71	; 0x47
 800d264:	e7f7      	b.n	800d256 <__hexdig_fun+0xa>
 800d266:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d26a:	2b05      	cmp	r3, #5
 800d26c:	d801      	bhi.n	800d272 <__hexdig_fun+0x26>
 800d26e:	3827      	subs	r0, #39	; 0x27
 800d270:	e7f1      	b.n	800d256 <__hexdig_fun+0xa>
 800d272:	2000      	movs	r0, #0
 800d274:	4770      	bx	lr
	...

0800d278 <__gethex>:
 800d278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d27c:	ed2d 8b02 	vpush	{d8}
 800d280:	b089      	sub	sp, #36	; 0x24
 800d282:	ee08 0a10 	vmov	s16, r0
 800d286:	9304      	str	r3, [sp, #16]
 800d288:	4bbc      	ldr	r3, [pc, #752]	; (800d57c <__gethex+0x304>)
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	9301      	str	r3, [sp, #4]
 800d28e:	4618      	mov	r0, r3
 800d290:	468b      	mov	fp, r1
 800d292:	4690      	mov	r8, r2
 800d294:	f7f2 ffa4 	bl	80001e0 <strlen>
 800d298:	9b01      	ldr	r3, [sp, #4]
 800d29a:	f8db 2000 	ldr.w	r2, [fp]
 800d29e:	4403      	add	r3, r0
 800d2a0:	4682      	mov	sl, r0
 800d2a2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d2a6:	9305      	str	r3, [sp, #20]
 800d2a8:	1c93      	adds	r3, r2, #2
 800d2aa:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d2ae:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d2b2:	32fe      	adds	r2, #254	; 0xfe
 800d2b4:	18d1      	adds	r1, r2, r3
 800d2b6:	461f      	mov	r7, r3
 800d2b8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d2bc:	9100      	str	r1, [sp, #0]
 800d2be:	2830      	cmp	r0, #48	; 0x30
 800d2c0:	d0f8      	beq.n	800d2b4 <__gethex+0x3c>
 800d2c2:	f7ff ffc3 	bl	800d24c <__hexdig_fun>
 800d2c6:	4604      	mov	r4, r0
 800d2c8:	2800      	cmp	r0, #0
 800d2ca:	d13a      	bne.n	800d342 <__gethex+0xca>
 800d2cc:	9901      	ldr	r1, [sp, #4]
 800d2ce:	4652      	mov	r2, sl
 800d2d0:	4638      	mov	r0, r7
 800d2d2:	f7fe fa0a 	bl	800b6ea <strncmp>
 800d2d6:	4605      	mov	r5, r0
 800d2d8:	2800      	cmp	r0, #0
 800d2da:	d168      	bne.n	800d3ae <__gethex+0x136>
 800d2dc:	f817 000a 	ldrb.w	r0, [r7, sl]
 800d2e0:	eb07 060a 	add.w	r6, r7, sl
 800d2e4:	f7ff ffb2 	bl	800d24c <__hexdig_fun>
 800d2e8:	2800      	cmp	r0, #0
 800d2ea:	d062      	beq.n	800d3b2 <__gethex+0x13a>
 800d2ec:	4633      	mov	r3, r6
 800d2ee:	7818      	ldrb	r0, [r3, #0]
 800d2f0:	2830      	cmp	r0, #48	; 0x30
 800d2f2:	461f      	mov	r7, r3
 800d2f4:	f103 0301 	add.w	r3, r3, #1
 800d2f8:	d0f9      	beq.n	800d2ee <__gethex+0x76>
 800d2fa:	f7ff ffa7 	bl	800d24c <__hexdig_fun>
 800d2fe:	2301      	movs	r3, #1
 800d300:	fab0 f480 	clz	r4, r0
 800d304:	0964      	lsrs	r4, r4, #5
 800d306:	4635      	mov	r5, r6
 800d308:	9300      	str	r3, [sp, #0]
 800d30a:	463a      	mov	r2, r7
 800d30c:	4616      	mov	r6, r2
 800d30e:	3201      	adds	r2, #1
 800d310:	7830      	ldrb	r0, [r6, #0]
 800d312:	f7ff ff9b 	bl	800d24c <__hexdig_fun>
 800d316:	2800      	cmp	r0, #0
 800d318:	d1f8      	bne.n	800d30c <__gethex+0x94>
 800d31a:	9901      	ldr	r1, [sp, #4]
 800d31c:	4652      	mov	r2, sl
 800d31e:	4630      	mov	r0, r6
 800d320:	f7fe f9e3 	bl	800b6ea <strncmp>
 800d324:	b980      	cbnz	r0, 800d348 <__gethex+0xd0>
 800d326:	b94d      	cbnz	r5, 800d33c <__gethex+0xc4>
 800d328:	eb06 050a 	add.w	r5, r6, sl
 800d32c:	462a      	mov	r2, r5
 800d32e:	4616      	mov	r6, r2
 800d330:	3201      	adds	r2, #1
 800d332:	7830      	ldrb	r0, [r6, #0]
 800d334:	f7ff ff8a 	bl	800d24c <__hexdig_fun>
 800d338:	2800      	cmp	r0, #0
 800d33a:	d1f8      	bne.n	800d32e <__gethex+0xb6>
 800d33c:	1bad      	subs	r5, r5, r6
 800d33e:	00ad      	lsls	r5, r5, #2
 800d340:	e004      	b.n	800d34c <__gethex+0xd4>
 800d342:	2400      	movs	r4, #0
 800d344:	4625      	mov	r5, r4
 800d346:	e7e0      	b.n	800d30a <__gethex+0x92>
 800d348:	2d00      	cmp	r5, #0
 800d34a:	d1f7      	bne.n	800d33c <__gethex+0xc4>
 800d34c:	7833      	ldrb	r3, [r6, #0]
 800d34e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d352:	2b50      	cmp	r3, #80	; 0x50
 800d354:	d13b      	bne.n	800d3ce <__gethex+0x156>
 800d356:	7873      	ldrb	r3, [r6, #1]
 800d358:	2b2b      	cmp	r3, #43	; 0x2b
 800d35a:	d02c      	beq.n	800d3b6 <__gethex+0x13e>
 800d35c:	2b2d      	cmp	r3, #45	; 0x2d
 800d35e:	d02e      	beq.n	800d3be <__gethex+0x146>
 800d360:	1c71      	adds	r1, r6, #1
 800d362:	f04f 0900 	mov.w	r9, #0
 800d366:	7808      	ldrb	r0, [r1, #0]
 800d368:	f7ff ff70 	bl	800d24c <__hexdig_fun>
 800d36c:	1e43      	subs	r3, r0, #1
 800d36e:	b2db      	uxtb	r3, r3
 800d370:	2b18      	cmp	r3, #24
 800d372:	d82c      	bhi.n	800d3ce <__gethex+0x156>
 800d374:	f1a0 0210 	sub.w	r2, r0, #16
 800d378:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d37c:	f7ff ff66 	bl	800d24c <__hexdig_fun>
 800d380:	1e43      	subs	r3, r0, #1
 800d382:	b2db      	uxtb	r3, r3
 800d384:	2b18      	cmp	r3, #24
 800d386:	d91d      	bls.n	800d3c4 <__gethex+0x14c>
 800d388:	f1b9 0f00 	cmp.w	r9, #0
 800d38c:	d000      	beq.n	800d390 <__gethex+0x118>
 800d38e:	4252      	negs	r2, r2
 800d390:	4415      	add	r5, r2
 800d392:	f8cb 1000 	str.w	r1, [fp]
 800d396:	b1e4      	cbz	r4, 800d3d2 <__gethex+0x15a>
 800d398:	9b00      	ldr	r3, [sp, #0]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	bf14      	ite	ne
 800d39e:	2700      	movne	r7, #0
 800d3a0:	2706      	moveq	r7, #6
 800d3a2:	4638      	mov	r0, r7
 800d3a4:	b009      	add	sp, #36	; 0x24
 800d3a6:	ecbd 8b02 	vpop	{d8}
 800d3aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3ae:	463e      	mov	r6, r7
 800d3b0:	4625      	mov	r5, r4
 800d3b2:	2401      	movs	r4, #1
 800d3b4:	e7ca      	b.n	800d34c <__gethex+0xd4>
 800d3b6:	f04f 0900 	mov.w	r9, #0
 800d3ba:	1cb1      	adds	r1, r6, #2
 800d3bc:	e7d3      	b.n	800d366 <__gethex+0xee>
 800d3be:	f04f 0901 	mov.w	r9, #1
 800d3c2:	e7fa      	b.n	800d3ba <__gethex+0x142>
 800d3c4:	230a      	movs	r3, #10
 800d3c6:	fb03 0202 	mla	r2, r3, r2, r0
 800d3ca:	3a10      	subs	r2, #16
 800d3cc:	e7d4      	b.n	800d378 <__gethex+0x100>
 800d3ce:	4631      	mov	r1, r6
 800d3d0:	e7df      	b.n	800d392 <__gethex+0x11a>
 800d3d2:	1bf3      	subs	r3, r6, r7
 800d3d4:	3b01      	subs	r3, #1
 800d3d6:	4621      	mov	r1, r4
 800d3d8:	2b07      	cmp	r3, #7
 800d3da:	dc0b      	bgt.n	800d3f4 <__gethex+0x17c>
 800d3dc:	ee18 0a10 	vmov	r0, s16
 800d3e0:	f000 fa94 	bl	800d90c <_Balloc>
 800d3e4:	4604      	mov	r4, r0
 800d3e6:	b940      	cbnz	r0, 800d3fa <__gethex+0x182>
 800d3e8:	4b65      	ldr	r3, [pc, #404]	; (800d580 <__gethex+0x308>)
 800d3ea:	4602      	mov	r2, r0
 800d3ec:	21de      	movs	r1, #222	; 0xde
 800d3ee:	4865      	ldr	r0, [pc, #404]	; (800d584 <__gethex+0x30c>)
 800d3f0:	f001 fcea 	bl	800edc8 <__assert_func>
 800d3f4:	3101      	adds	r1, #1
 800d3f6:	105b      	asrs	r3, r3, #1
 800d3f8:	e7ee      	b.n	800d3d8 <__gethex+0x160>
 800d3fa:	f100 0914 	add.w	r9, r0, #20
 800d3fe:	f04f 0b00 	mov.w	fp, #0
 800d402:	f1ca 0301 	rsb	r3, sl, #1
 800d406:	f8cd 9008 	str.w	r9, [sp, #8]
 800d40a:	f8cd b000 	str.w	fp, [sp]
 800d40e:	9306      	str	r3, [sp, #24]
 800d410:	42b7      	cmp	r7, r6
 800d412:	d340      	bcc.n	800d496 <__gethex+0x21e>
 800d414:	9802      	ldr	r0, [sp, #8]
 800d416:	9b00      	ldr	r3, [sp, #0]
 800d418:	f840 3b04 	str.w	r3, [r0], #4
 800d41c:	eba0 0009 	sub.w	r0, r0, r9
 800d420:	1080      	asrs	r0, r0, #2
 800d422:	0146      	lsls	r6, r0, #5
 800d424:	6120      	str	r0, [r4, #16]
 800d426:	4618      	mov	r0, r3
 800d428:	f000 fb66 	bl	800daf8 <__hi0bits>
 800d42c:	1a30      	subs	r0, r6, r0
 800d42e:	f8d8 6000 	ldr.w	r6, [r8]
 800d432:	42b0      	cmp	r0, r6
 800d434:	dd63      	ble.n	800d4fe <__gethex+0x286>
 800d436:	1b87      	subs	r7, r0, r6
 800d438:	4639      	mov	r1, r7
 800d43a:	4620      	mov	r0, r4
 800d43c:	f000 ff00 	bl	800e240 <__any_on>
 800d440:	4682      	mov	sl, r0
 800d442:	b1a8      	cbz	r0, 800d470 <__gethex+0x1f8>
 800d444:	1e7b      	subs	r3, r7, #1
 800d446:	1159      	asrs	r1, r3, #5
 800d448:	f003 021f 	and.w	r2, r3, #31
 800d44c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d450:	f04f 0a01 	mov.w	sl, #1
 800d454:	fa0a f202 	lsl.w	r2, sl, r2
 800d458:	420a      	tst	r2, r1
 800d45a:	d009      	beq.n	800d470 <__gethex+0x1f8>
 800d45c:	4553      	cmp	r3, sl
 800d45e:	dd05      	ble.n	800d46c <__gethex+0x1f4>
 800d460:	1eb9      	subs	r1, r7, #2
 800d462:	4620      	mov	r0, r4
 800d464:	f000 feec 	bl	800e240 <__any_on>
 800d468:	2800      	cmp	r0, #0
 800d46a:	d145      	bne.n	800d4f8 <__gethex+0x280>
 800d46c:	f04f 0a02 	mov.w	sl, #2
 800d470:	4639      	mov	r1, r7
 800d472:	4620      	mov	r0, r4
 800d474:	f7ff fe98 	bl	800d1a8 <rshift>
 800d478:	443d      	add	r5, r7
 800d47a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d47e:	42ab      	cmp	r3, r5
 800d480:	da4c      	bge.n	800d51c <__gethex+0x2a4>
 800d482:	ee18 0a10 	vmov	r0, s16
 800d486:	4621      	mov	r1, r4
 800d488:	f000 fa80 	bl	800d98c <_Bfree>
 800d48c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d48e:	2300      	movs	r3, #0
 800d490:	6013      	str	r3, [r2, #0]
 800d492:	27a3      	movs	r7, #163	; 0xa3
 800d494:	e785      	b.n	800d3a2 <__gethex+0x12a>
 800d496:	1e73      	subs	r3, r6, #1
 800d498:	9a05      	ldr	r2, [sp, #20]
 800d49a:	9303      	str	r3, [sp, #12]
 800d49c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d4a0:	4293      	cmp	r3, r2
 800d4a2:	d019      	beq.n	800d4d8 <__gethex+0x260>
 800d4a4:	f1bb 0f20 	cmp.w	fp, #32
 800d4a8:	d107      	bne.n	800d4ba <__gethex+0x242>
 800d4aa:	9b02      	ldr	r3, [sp, #8]
 800d4ac:	9a00      	ldr	r2, [sp, #0]
 800d4ae:	f843 2b04 	str.w	r2, [r3], #4
 800d4b2:	9302      	str	r3, [sp, #8]
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	9300      	str	r3, [sp, #0]
 800d4b8:	469b      	mov	fp, r3
 800d4ba:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d4be:	f7ff fec5 	bl	800d24c <__hexdig_fun>
 800d4c2:	9b00      	ldr	r3, [sp, #0]
 800d4c4:	f000 000f 	and.w	r0, r0, #15
 800d4c8:	fa00 f00b 	lsl.w	r0, r0, fp
 800d4cc:	4303      	orrs	r3, r0
 800d4ce:	9300      	str	r3, [sp, #0]
 800d4d0:	f10b 0b04 	add.w	fp, fp, #4
 800d4d4:	9b03      	ldr	r3, [sp, #12]
 800d4d6:	e00d      	b.n	800d4f4 <__gethex+0x27c>
 800d4d8:	9b03      	ldr	r3, [sp, #12]
 800d4da:	9a06      	ldr	r2, [sp, #24]
 800d4dc:	4413      	add	r3, r2
 800d4de:	42bb      	cmp	r3, r7
 800d4e0:	d3e0      	bcc.n	800d4a4 <__gethex+0x22c>
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	9901      	ldr	r1, [sp, #4]
 800d4e6:	9307      	str	r3, [sp, #28]
 800d4e8:	4652      	mov	r2, sl
 800d4ea:	f7fe f8fe 	bl	800b6ea <strncmp>
 800d4ee:	9b07      	ldr	r3, [sp, #28]
 800d4f0:	2800      	cmp	r0, #0
 800d4f2:	d1d7      	bne.n	800d4a4 <__gethex+0x22c>
 800d4f4:	461e      	mov	r6, r3
 800d4f6:	e78b      	b.n	800d410 <__gethex+0x198>
 800d4f8:	f04f 0a03 	mov.w	sl, #3
 800d4fc:	e7b8      	b.n	800d470 <__gethex+0x1f8>
 800d4fe:	da0a      	bge.n	800d516 <__gethex+0x29e>
 800d500:	1a37      	subs	r7, r6, r0
 800d502:	4621      	mov	r1, r4
 800d504:	ee18 0a10 	vmov	r0, s16
 800d508:	463a      	mov	r2, r7
 800d50a:	f000 fc5b 	bl	800ddc4 <__lshift>
 800d50e:	1bed      	subs	r5, r5, r7
 800d510:	4604      	mov	r4, r0
 800d512:	f100 0914 	add.w	r9, r0, #20
 800d516:	f04f 0a00 	mov.w	sl, #0
 800d51a:	e7ae      	b.n	800d47a <__gethex+0x202>
 800d51c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d520:	42a8      	cmp	r0, r5
 800d522:	dd72      	ble.n	800d60a <__gethex+0x392>
 800d524:	1b45      	subs	r5, r0, r5
 800d526:	42ae      	cmp	r6, r5
 800d528:	dc36      	bgt.n	800d598 <__gethex+0x320>
 800d52a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d52e:	2b02      	cmp	r3, #2
 800d530:	d02a      	beq.n	800d588 <__gethex+0x310>
 800d532:	2b03      	cmp	r3, #3
 800d534:	d02c      	beq.n	800d590 <__gethex+0x318>
 800d536:	2b01      	cmp	r3, #1
 800d538:	d115      	bne.n	800d566 <__gethex+0x2ee>
 800d53a:	42ae      	cmp	r6, r5
 800d53c:	d113      	bne.n	800d566 <__gethex+0x2ee>
 800d53e:	2e01      	cmp	r6, #1
 800d540:	d10b      	bne.n	800d55a <__gethex+0x2e2>
 800d542:	9a04      	ldr	r2, [sp, #16]
 800d544:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d548:	6013      	str	r3, [r2, #0]
 800d54a:	2301      	movs	r3, #1
 800d54c:	6123      	str	r3, [r4, #16]
 800d54e:	f8c9 3000 	str.w	r3, [r9]
 800d552:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d554:	2762      	movs	r7, #98	; 0x62
 800d556:	601c      	str	r4, [r3, #0]
 800d558:	e723      	b.n	800d3a2 <__gethex+0x12a>
 800d55a:	1e71      	subs	r1, r6, #1
 800d55c:	4620      	mov	r0, r4
 800d55e:	f000 fe6f 	bl	800e240 <__any_on>
 800d562:	2800      	cmp	r0, #0
 800d564:	d1ed      	bne.n	800d542 <__gethex+0x2ca>
 800d566:	ee18 0a10 	vmov	r0, s16
 800d56a:	4621      	mov	r1, r4
 800d56c:	f000 fa0e 	bl	800d98c <_Bfree>
 800d570:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d572:	2300      	movs	r3, #0
 800d574:	6013      	str	r3, [r2, #0]
 800d576:	2750      	movs	r7, #80	; 0x50
 800d578:	e713      	b.n	800d3a2 <__gethex+0x12a>
 800d57a:	bf00      	nop
 800d57c:	08012038 	.word	0x08012038
 800d580:	08011fbc 	.word	0x08011fbc
 800d584:	08011fcd 	.word	0x08011fcd
 800d588:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d1eb      	bne.n	800d566 <__gethex+0x2ee>
 800d58e:	e7d8      	b.n	800d542 <__gethex+0x2ca>
 800d590:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d592:	2b00      	cmp	r3, #0
 800d594:	d1d5      	bne.n	800d542 <__gethex+0x2ca>
 800d596:	e7e6      	b.n	800d566 <__gethex+0x2ee>
 800d598:	1e6f      	subs	r7, r5, #1
 800d59a:	f1ba 0f00 	cmp.w	sl, #0
 800d59e:	d131      	bne.n	800d604 <__gethex+0x38c>
 800d5a0:	b127      	cbz	r7, 800d5ac <__gethex+0x334>
 800d5a2:	4639      	mov	r1, r7
 800d5a4:	4620      	mov	r0, r4
 800d5a6:	f000 fe4b 	bl	800e240 <__any_on>
 800d5aa:	4682      	mov	sl, r0
 800d5ac:	117b      	asrs	r3, r7, #5
 800d5ae:	2101      	movs	r1, #1
 800d5b0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d5b4:	f007 071f 	and.w	r7, r7, #31
 800d5b8:	fa01 f707 	lsl.w	r7, r1, r7
 800d5bc:	421f      	tst	r7, r3
 800d5be:	4629      	mov	r1, r5
 800d5c0:	4620      	mov	r0, r4
 800d5c2:	bf18      	it	ne
 800d5c4:	f04a 0a02 	orrne.w	sl, sl, #2
 800d5c8:	1b76      	subs	r6, r6, r5
 800d5ca:	f7ff fded 	bl	800d1a8 <rshift>
 800d5ce:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d5d2:	2702      	movs	r7, #2
 800d5d4:	f1ba 0f00 	cmp.w	sl, #0
 800d5d8:	d048      	beq.n	800d66c <__gethex+0x3f4>
 800d5da:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d5de:	2b02      	cmp	r3, #2
 800d5e0:	d015      	beq.n	800d60e <__gethex+0x396>
 800d5e2:	2b03      	cmp	r3, #3
 800d5e4:	d017      	beq.n	800d616 <__gethex+0x39e>
 800d5e6:	2b01      	cmp	r3, #1
 800d5e8:	d109      	bne.n	800d5fe <__gethex+0x386>
 800d5ea:	f01a 0f02 	tst.w	sl, #2
 800d5ee:	d006      	beq.n	800d5fe <__gethex+0x386>
 800d5f0:	f8d9 0000 	ldr.w	r0, [r9]
 800d5f4:	ea4a 0a00 	orr.w	sl, sl, r0
 800d5f8:	f01a 0f01 	tst.w	sl, #1
 800d5fc:	d10e      	bne.n	800d61c <__gethex+0x3a4>
 800d5fe:	f047 0710 	orr.w	r7, r7, #16
 800d602:	e033      	b.n	800d66c <__gethex+0x3f4>
 800d604:	f04f 0a01 	mov.w	sl, #1
 800d608:	e7d0      	b.n	800d5ac <__gethex+0x334>
 800d60a:	2701      	movs	r7, #1
 800d60c:	e7e2      	b.n	800d5d4 <__gethex+0x35c>
 800d60e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d610:	f1c3 0301 	rsb	r3, r3, #1
 800d614:	9315      	str	r3, [sp, #84]	; 0x54
 800d616:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d0f0      	beq.n	800d5fe <__gethex+0x386>
 800d61c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d620:	f104 0314 	add.w	r3, r4, #20
 800d624:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d628:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d62c:	f04f 0c00 	mov.w	ip, #0
 800d630:	4618      	mov	r0, r3
 800d632:	f853 2b04 	ldr.w	r2, [r3], #4
 800d636:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d63a:	d01c      	beq.n	800d676 <__gethex+0x3fe>
 800d63c:	3201      	adds	r2, #1
 800d63e:	6002      	str	r2, [r0, #0]
 800d640:	2f02      	cmp	r7, #2
 800d642:	f104 0314 	add.w	r3, r4, #20
 800d646:	d13f      	bne.n	800d6c8 <__gethex+0x450>
 800d648:	f8d8 2000 	ldr.w	r2, [r8]
 800d64c:	3a01      	subs	r2, #1
 800d64e:	42b2      	cmp	r2, r6
 800d650:	d10a      	bne.n	800d668 <__gethex+0x3f0>
 800d652:	1171      	asrs	r1, r6, #5
 800d654:	2201      	movs	r2, #1
 800d656:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d65a:	f006 061f 	and.w	r6, r6, #31
 800d65e:	fa02 f606 	lsl.w	r6, r2, r6
 800d662:	421e      	tst	r6, r3
 800d664:	bf18      	it	ne
 800d666:	4617      	movne	r7, r2
 800d668:	f047 0720 	orr.w	r7, r7, #32
 800d66c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d66e:	601c      	str	r4, [r3, #0]
 800d670:	9b04      	ldr	r3, [sp, #16]
 800d672:	601d      	str	r5, [r3, #0]
 800d674:	e695      	b.n	800d3a2 <__gethex+0x12a>
 800d676:	4299      	cmp	r1, r3
 800d678:	f843 cc04 	str.w	ip, [r3, #-4]
 800d67c:	d8d8      	bhi.n	800d630 <__gethex+0x3b8>
 800d67e:	68a3      	ldr	r3, [r4, #8]
 800d680:	459b      	cmp	fp, r3
 800d682:	db19      	blt.n	800d6b8 <__gethex+0x440>
 800d684:	6861      	ldr	r1, [r4, #4]
 800d686:	ee18 0a10 	vmov	r0, s16
 800d68a:	3101      	adds	r1, #1
 800d68c:	f000 f93e 	bl	800d90c <_Balloc>
 800d690:	4681      	mov	r9, r0
 800d692:	b918      	cbnz	r0, 800d69c <__gethex+0x424>
 800d694:	4b1a      	ldr	r3, [pc, #104]	; (800d700 <__gethex+0x488>)
 800d696:	4602      	mov	r2, r0
 800d698:	2184      	movs	r1, #132	; 0x84
 800d69a:	e6a8      	b.n	800d3ee <__gethex+0x176>
 800d69c:	6922      	ldr	r2, [r4, #16]
 800d69e:	3202      	adds	r2, #2
 800d6a0:	f104 010c 	add.w	r1, r4, #12
 800d6a4:	0092      	lsls	r2, r2, #2
 800d6a6:	300c      	adds	r0, #12
 800d6a8:	f000 f916 	bl	800d8d8 <memcpy>
 800d6ac:	4621      	mov	r1, r4
 800d6ae:	ee18 0a10 	vmov	r0, s16
 800d6b2:	f000 f96b 	bl	800d98c <_Bfree>
 800d6b6:	464c      	mov	r4, r9
 800d6b8:	6923      	ldr	r3, [r4, #16]
 800d6ba:	1c5a      	adds	r2, r3, #1
 800d6bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d6c0:	6122      	str	r2, [r4, #16]
 800d6c2:	2201      	movs	r2, #1
 800d6c4:	615a      	str	r2, [r3, #20]
 800d6c6:	e7bb      	b.n	800d640 <__gethex+0x3c8>
 800d6c8:	6922      	ldr	r2, [r4, #16]
 800d6ca:	455a      	cmp	r2, fp
 800d6cc:	dd0b      	ble.n	800d6e6 <__gethex+0x46e>
 800d6ce:	2101      	movs	r1, #1
 800d6d0:	4620      	mov	r0, r4
 800d6d2:	f7ff fd69 	bl	800d1a8 <rshift>
 800d6d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d6da:	3501      	adds	r5, #1
 800d6dc:	42ab      	cmp	r3, r5
 800d6de:	f6ff aed0 	blt.w	800d482 <__gethex+0x20a>
 800d6e2:	2701      	movs	r7, #1
 800d6e4:	e7c0      	b.n	800d668 <__gethex+0x3f0>
 800d6e6:	f016 061f 	ands.w	r6, r6, #31
 800d6ea:	d0fa      	beq.n	800d6e2 <__gethex+0x46a>
 800d6ec:	449a      	add	sl, r3
 800d6ee:	f1c6 0620 	rsb	r6, r6, #32
 800d6f2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800d6f6:	f000 f9ff 	bl	800daf8 <__hi0bits>
 800d6fa:	42b0      	cmp	r0, r6
 800d6fc:	dbe7      	blt.n	800d6ce <__gethex+0x456>
 800d6fe:	e7f0      	b.n	800d6e2 <__gethex+0x46a>
 800d700:	08011fbc 	.word	0x08011fbc

0800d704 <L_shift>:
 800d704:	f1c2 0208 	rsb	r2, r2, #8
 800d708:	0092      	lsls	r2, r2, #2
 800d70a:	b570      	push	{r4, r5, r6, lr}
 800d70c:	f1c2 0620 	rsb	r6, r2, #32
 800d710:	6843      	ldr	r3, [r0, #4]
 800d712:	6804      	ldr	r4, [r0, #0]
 800d714:	fa03 f506 	lsl.w	r5, r3, r6
 800d718:	432c      	orrs	r4, r5
 800d71a:	40d3      	lsrs	r3, r2
 800d71c:	6004      	str	r4, [r0, #0]
 800d71e:	f840 3f04 	str.w	r3, [r0, #4]!
 800d722:	4288      	cmp	r0, r1
 800d724:	d3f4      	bcc.n	800d710 <L_shift+0xc>
 800d726:	bd70      	pop	{r4, r5, r6, pc}

0800d728 <__match>:
 800d728:	b530      	push	{r4, r5, lr}
 800d72a:	6803      	ldr	r3, [r0, #0]
 800d72c:	3301      	adds	r3, #1
 800d72e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d732:	b914      	cbnz	r4, 800d73a <__match+0x12>
 800d734:	6003      	str	r3, [r0, #0]
 800d736:	2001      	movs	r0, #1
 800d738:	bd30      	pop	{r4, r5, pc}
 800d73a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d73e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d742:	2d19      	cmp	r5, #25
 800d744:	bf98      	it	ls
 800d746:	3220      	addls	r2, #32
 800d748:	42a2      	cmp	r2, r4
 800d74a:	d0f0      	beq.n	800d72e <__match+0x6>
 800d74c:	2000      	movs	r0, #0
 800d74e:	e7f3      	b.n	800d738 <__match+0x10>

0800d750 <__hexnan>:
 800d750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d754:	680b      	ldr	r3, [r1, #0]
 800d756:	6801      	ldr	r1, [r0, #0]
 800d758:	115e      	asrs	r6, r3, #5
 800d75a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d75e:	f013 031f 	ands.w	r3, r3, #31
 800d762:	b087      	sub	sp, #28
 800d764:	bf18      	it	ne
 800d766:	3604      	addne	r6, #4
 800d768:	2500      	movs	r5, #0
 800d76a:	1f37      	subs	r7, r6, #4
 800d76c:	4682      	mov	sl, r0
 800d76e:	4690      	mov	r8, r2
 800d770:	9301      	str	r3, [sp, #4]
 800d772:	f846 5c04 	str.w	r5, [r6, #-4]
 800d776:	46b9      	mov	r9, r7
 800d778:	463c      	mov	r4, r7
 800d77a:	9502      	str	r5, [sp, #8]
 800d77c:	46ab      	mov	fp, r5
 800d77e:	784a      	ldrb	r2, [r1, #1]
 800d780:	1c4b      	adds	r3, r1, #1
 800d782:	9303      	str	r3, [sp, #12]
 800d784:	b342      	cbz	r2, 800d7d8 <__hexnan+0x88>
 800d786:	4610      	mov	r0, r2
 800d788:	9105      	str	r1, [sp, #20]
 800d78a:	9204      	str	r2, [sp, #16]
 800d78c:	f7ff fd5e 	bl	800d24c <__hexdig_fun>
 800d790:	2800      	cmp	r0, #0
 800d792:	d14f      	bne.n	800d834 <__hexnan+0xe4>
 800d794:	9a04      	ldr	r2, [sp, #16]
 800d796:	9905      	ldr	r1, [sp, #20]
 800d798:	2a20      	cmp	r2, #32
 800d79a:	d818      	bhi.n	800d7ce <__hexnan+0x7e>
 800d79c:	9b02      	ldr	r3, [sp, #8]
 800d79e:	459b      	cmp	fp, r3
 800d7a0:	dd13      	ble.n	800d7ca <__hexnan+0x7a>
 800d7a2:	454c      	cmp	r4, r9
 800d7a4:	d206      	bcs.n	800d7b4 <__hexnan+0x64>
 800d7a6:	2d07      	cmp	r5, #7
 800d7a8:	dc04      	bgt.n	800d7b4 <__hexnan+0x64>
 800d7aa:	462a      	mov	r2, r5
 800d7ac:	4649      	mov	r1, r9
 800d7ae:	4620      	mov	r0, r4
 800d7b0:	f7ff ffa8 	bl	800d704 <L_shift>
 800d7b4:	4544      	cmp	r4, r8
 800d7b6:	d950      	bls.n	800d85a <__hexnan+0x10a>
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	f1a4 0904 	sub.w	r9, r4, #4
 800d7be:	f844 3c04 	str.w	r3, [r4, #-4]
 800d7c2:	f8cd b008 	str.w	fp, [sp, #8]
 800d7c6:	464c      	mov	r4, r9
 800d7c8:	461d      	mov	r5, r3
 800d7ca:	9903      	ldr	r1, [sp, #12]
 800d7cc:	e7d7      	b.n	800d77e <__hexnan+0x2e>
 800d7ce:	2a29      	cmp	r2, #41	; 0x29
 800d7d0:	d156      	bne.n	800d880 <__hexnan+0x130>
 800d7d2:	3102      	adds	r1, #2
 800d7d4:	f8ca 1000 	str.w	r1, [sl]
 800d7d8:	f1bb 0f00 	cmp.w	fp, #0
 800d7dc:	d050      	beq.n	800d880 <__hexnan+0x130>
 800d7de:	454c      	cmp	r4, r9
 800d7e0:	d206      	bcs.n	800d7f0 <__hexnan+0xa0>
 800d7e2:	2d07      	cmp	r5, #7
 800d7e4:	dc04      	bgt.n	800d7f0 <__hexnan+0xa0>
 800d7e6:	462a      	mov	r2, r5
 800d7e8:	4649      	mov	r1, r9
 800d7ea:	4620      	mov	r0, r4
 800d7ec:	f7ff ff8a 	bl	800d704 <L_shift>
 800d7f0:	4544      	cmp	r4, r8
 800d7f2:	d934      	bls.n	800d85e <__hexnan+0x10e>
 800d7f4:	f1a8 0204 	sub.w	r2, r8, #4
 800d7f8:	4623      	mov	r3, r4
 800d7fa:	f853 1b04 	ldr.w	r1, [r3], #4
 800d7fe:	f842 1f04 	str.w	r1, [r2, #4]!
 800d802:	429f      	cmp	r7, r3
 800d804:	d2f9      	bcs.n	800d7fa <__hexnan+0xaa>
 800d806:	1b3b      	subs	r3, r7, r4
 800d808:	f023 0303 	bic.w	r3, r3, #3
 800d80c:	3304      	adds	r3, #4
 800d80e:	3401      	adds	r4, #1
 800d810:	3e03      	subs	r6, #3
 800d812:	42b4      	cmp	r4, r6
 800d814:	bf88      	it	hi
 800d816:	2304      	movhi	r3, #4
 800d818:	4443      	add	r3, r8
 800d81a:	2200      	movs	r2, #0
 800d81c:	f843 2b04 	str.w	r2, [r3], #4
 800d820:	429f      	cmp	r7, r3
 800d822:	d2fb      	bcs.n	800d81c <__hexnan+0xcc>
 800d824:	683b      	ldr	r3, [r7, #0]
 800d826:	b91b      	cbnz	r3, 800d830 <__hexnan+0xe0>
 800d828:	4547      	cmp	r7, r8
 800d82a:	d127      	bne.n	800d87c <__hexnan+0x12c>
 800d82c:	2301      	movs	r3, #1
 800d82e:	603b      	str	r3, [r7, #0]
 800d830:	2005      	movs	r0, #5
 800d832:	e026      	b.n	800d882 <__hexnan+0x132>
 800d834:	3501      	adds	r5, #1
 800d836:	2d08      	cmp	r5, #8
 800d838:	f10b 0b01 	add.w	fp, fp, #1
 800d83c:	dd06      	ble.n	800d84c <__hexnan+0xfc>
 800d83e:	4544      	cmp	r4, r8
 800d840:	d9c3      	bls.n	800d7ca <__hexnan+0x7a>
 800d842:	2300      	movs	r3, #0
 800d844:	f844 3c04 	str.w	r3, [r4, #-4]
 800d848:	2501      	movs	r5, #1
 800d84a:	3c04      	subs	r4, #4
 800d84c:	6822      	ldr	r2, [r4, #0]
 800d84e:	f000 000f 	and.w	r0, r0, #15
 800d852:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800d856:	6022      	str	r2, [r4, #0]
 800d858:	e7b7      	b.n	800d7ca <__hexnan+0x7a>
 800d85a:	2508      	movs	r5, #8
 800d85c:	e7b5      	b.n	800d7ca <__hexnan+0x7a>
 800d85e:	9b01      	ldr	r3, [sp, #4]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d0df      	beq.n	800d824 <__hexnan+0xd4>
 800d864:	f04f 32ff 	mov.w	r2, #4294967295
 800d868:	f1c3 0320 	rsb	r3, r3, #32
 800d86c:	fa22 f303 	lsr.w	r3, r2, r3
 800d870:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d874:	401a      	ands	r2, r3
 800d876:	f846 2c04 	str.w	r2, [r6, #-4]
 800d87a:	e7d3      	b.n	800d824 <__hexnan+0xd4>
 800d87c:	3f04      	subs	r7, #4
 800d87e:	e7d1      	b.n	800d824 <__hexnan+0xd4>
 800d880:	2004      	movs	r0, #4
 800d882:	b007      	add	sp, #28
 800d884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d888 <_localeconv_r>:
 800d888:	4800      	ldr	r0, [pc, #0]	; (800d88c <_localeconv_r+0x4>)
 800d88a:	4770      	bx	lr
 800d88c:	20000194 	.word	0x20000194

0800d890 <_lseek_r>:
 800d890:	b538      	push	{r3, r4, r5, lr}
 800d892:	4d07      	ldr	r5, [pc, #28]	; (800d8b0 <_lseek_r+0x20>)
 800d894:	4604      	mov	r4, r0
 800d896:	4608      	mov	r0, r1
 800d898:	4611      	mov	r1, r2
 800d89a:	2200      	movs	r2, #0
 800d89c:	602a      	str	r2, [r5, #0]
 800d89e:	461a      	mov	r2, r3
 800d8a0:	f7f8 ff5a 	bl	8006758 <_lseek>
 800d8a4:	1c43      	adds	r3, r0, #1
 800d8a6:	d102      	bne.n	800d8ae <_lseek_r+0x1e>
 800d8a8:	682b      	ldr	r3, [r5, #0]
 800d8aa:	b103      	cbz	r3, 800d8ae <_lseek_r+0x1e>
 800d8ac:	6023      	str	r3, [r4, #0]
 800d8ae:	bd38      	pop	{r3, r4, r5, pc}
 800d8b0:	20001fd4 	.word	0x20001fd4

0800d8b4 <__ascii_mbtowc>:
 800d8b4:	b082      	sub	sp, #8
 800d8b6:	b901      	cbnz	r1, 800d8ba <__ascii_mbtowc+0x6>
 800d8b8:	a901      	add	r1, sp, #4
 800d8ba:	b142      	cbz	r2, 800d8ce <__ascii_mbtowc+0x1a>
 800d8bc:	b14b      	cbz	r3, 800d8d2 <__ascii_mbtowc+0x1e>
 800d8be:	7813      	ldrb	r3, [r2, #0]
 800d8c0:	600b      	str	r3, [r1, #0]
 800d8c2:	7812      	ldrb	r2, [r2, #0]
 800d8c4:	1e10      	subs	r0, r2, #0
 800d8c6:	bf18      	it	ne
 800d8c8:	2001      	movne	r0, #1
 800d8ca:	b002      	add	sp, #8
 800d8cc:	4770      	bx	lr
 800d8ce:	4610      	mov	r0, r2
 800d8d0:	e7fb      	b.n	800d8ca <__ascii_mbtowc+0x16>
 800d8d2:	f06f 0001 	mvn.w	r0, #1
 800d8d6:	e7f8      	b.n	800d8ca <__ascii_mbtowc+0x16>

0800d8d8 <memcpy>:
 800d8d8:	440a      	add	r2, r1
 800d8da:	4291      	cmp	r1, r2
 800d8dc:	f100 33ff 	add.w	r3, r0, #4294967295
 800d8e0:	d100      	bne.n	800d8e4 <memcpy+0xc>
 800d8e2:	4770      	bx	lr
 800d8e4:	b510      	push	{r4, lr}
 800d8e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d8ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d8ee:	4291      	cmp	r1, r2
 800d8f0:	d1f9      	bne.n	800d8e6 <memcpy+0xe>
 800d8f2:	bd10      	pop	{r4, pc}

0800d8f4 <__malloc_lock>:
 800d8f4:	4801      	ldr	r0, [pc, #4]	; (800d8fc <__malloc_lock+0x8>)
 800d8f6:	f001 bc4f 	b.w	800f198 <__retarget_lock_acquire_recursive>
 800d8fa:	bf00      	nop
 800d8fc:	20001fdc 	.word	0x20001fdc

0800d900 <__malloc_unlock>:
 800d900:	4801      	ldr	r0, [pc, #4]	; (800d908 <__malloc_unlock+0x8>)
 800d902:	f001 bc4a 	b.w	800f19a <__retarget_lock_release_recursive>
 800d906:	bf00      	nop
 800d908:	20001fdc 	.word	0x20001fdc

0800d90c <_Balloc>:
 800d90c:	b570      	push	{r4, r5, r6, lr}
 800d90e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d910:	4604      	mov	r4, r0
 800d912:	460d      	mov	r5, r1
 800d914:	b976      	cbnz	r6, 800d934 <_Balloc+0x28>
 800d916:	2010      	movs	r0, #16
 800d918:	f7fc ff0c 	bl	800a734 <malloc>
 800d91c:	4602      	mov	r2, r0
 800d91e:	6260      	str	r0, [r4, #36]	; 0x24
 800d920:	b920      	cbnz	r0, 800d92c <_Balloc+0x20>
 800d922:	4b18      	ldr	r3, [pc, #96]	; (800d984 <_Balloc+0x78>)
 800d924:	4818      	ldr	r0, [pc, #96]	; (800d988 <_Balloc+0x7c>)
 800d926:	2166      	movs	r1, #102	; 0x66
 800d928:	f001 fa4e 	bl	800edc8 <__assert_func>
 800d92c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d930:	6006      	str	r6, [r0, #0]
 800d932:	60c6      	str	r6, [r0, #12]
 800d934:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d936:	68f3      	ldr	r3, [r6, #12]
 800d938:	b183      	cbz	r3, 800d95c <_Balloc+0x50>
 800d93a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d93c:	68db      	ldr	r3, [r3, #12]
 800d93e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d942:	b9b8      	cbnz	r0, 800d974 <_Balloc+0x68>
 800d944:	2101      	movs	r1, #1
 800d946:	fa01 f605 	lsl.w	r6, r1, r5
 800d94a:	1d72      	adds	r2, r6, #5
 800d94c:	0092      	lsls	r2, r2, #2
 800d94e:	4620      	mov	r0, r4
 800d950:	f000 fc97 	bl	800e282 <_calloc_r>
 800d954:	b160      	cbz	r0, 800d970 <_Balloc+0x64>
 800d956:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d95a:	e00e      	b.n	800d97a <_Balloc+0x6e>
 800d95c:	2221      	movs	r2, #33	; 0x21
 800d95e:	2104      	movs	r1, #4
 800d960:	4620      	mov	r0, r4
 800d962:	f000 fc8e 	bl	800e282 <_calloc_r>
 800d966:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d968:	60f0      	str	r0, [r6, #12]
 800d96a:	68db      	ldr	r3, [r3, #12]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d1e4      	bne.n	800d93a <_Balloc+0x2e>
 800d970:	2000      	movs	r0, #0
 800d972:	bd70      	pop	{r4, r5, r6, pc}
 800d974:	6802      	ldr	r2, [r0, #0]
 800d976:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d97a:	2300      	movs	r3, #0
 800d97c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d980:	e7f7      	b.n	800d972 <_Balloc+0x66>
 800d982:	bf00      	nop
 800d984:	08011f46 	.word	0x08011f46
 800d988:	0801204c 	.word	0x0801204c

0800d98c <_Bfree>:
 800d98c:	b570      	push	{r4, r5, r6, lr}
 800d98e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d990:	4605      	mov	r5, r0
 800d992:	460c      	mov	r4, r1
 800d994:	b976      	cbnz	r6, 800d9b4 <_Bfree+0x28>
 800d996:	2010      	movs	r0, #16
 800d998:	f7fc fecc 	bl	800a734 <malloc>
 800d99c:	4602      	mov	r2, r0
 800d99e:	6268      	str	r0, [r5, #36]	; 0x24
 800d9a0:	b920      	cbnz	r0, 800d9ac <_Bfree+0x20>
 800d9a2:	4b09      	ldr	r3, [pc, #36]	; (800d9c8 <_Bfree+0x3c>)
 800d9a4:	4809      	ldr	r0, [pc, #36]	; (800d9cc <_Bfree+0x40>)
 800d9a6:	218a      	movs	r1, #138	; 0x8a
 800d9a8:	f001 fa0e 	bl	800edc8 <__assert_func>
 800d9ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d9b0:	6006      	str	r6, [r0, #0]
 800d9b2:	60c6      	str	r6, [r0, #12]
 800d9b4:	b13c      	cbz	r4, 800d9c6 <_Bfree+0x3a>
 800d9b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d9b8:	6862      	ldr	r2, [r4, #4]
 800d9ba:	68db      	ldr	r3, [r3, #12]
 800d9bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d9c0:	6021      	str	r1, [r4, #0]
 800d9c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d9c6:	bd70      	pop	{r4, r5, r6, pc}
 800d9c8:	08011f46 	.word	0x08011f46
 800d9cc:	0801204c 	.word	0x0801204c

0800d9d0 <__multadd>:
 800d9d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9d4:	690e      	ldr	r6, [r1, #16]
 800d9d6:	4607      	mov	r7, r0
 800d9d8:	4698      	mov	r8, r3
 800d9da:	460c      	mov	r4, r1
 800d9dc:	f101 0014 	add.w	r0, r1, #20
 800d9e0:	2300      	movs	r3, #0
 800d9e2:	6805      	ldr	r5, [r0, #0]
 800d9e4:	b2a9      	uxth	r1, r5
 800d9e6:	fb02 8101 	mla	r1, r2, r1, r8
 800d9ea:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800d9ee:	0c2d      	lsrs	r5, r5, #16
 800d9f0:	fb02 c505 	mla	r5, r2, r5, ip
 800d9f4:	b289      	uxth	r1, r1
 800d9f6:	3301      	adds	r3, #1
 800d9f8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800d9fc:	429e      	cmp	r6, r3
 800d9fe:	f840 1b04 	str.w	r1, [r0], #4
 800da02:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800da06:	dcec      	bgt.n	800d9e2 <__multadd+0x12>
 800da08:	f1b8 0f00 	cmp.w	r8, #0
 800da0c:	d022      	beq.n	800da54 <__multadd+0x84>
 800da0e:	68a3      	ldr	r3, [r4, #8]
 800da10:	42b3      	cmp	r3, r6
 800da12:	dc19      	bgt.n	800da48 <__multadd+0x78>
 800da14:	6861      	ldr	r1, [r4, #4]
 800da16:	4638      	mov	r0, r7
 800da18:	3101      	adds	r1, #1
 800da1a:	f7ff ff77 	bl	800d90c <_Balloc>
 800da1e:	4605      	mov	r5, r0
 800da20:	b928      	cbnz	r0, 800da2e <__multadd+0x5e>
 800da22:	4602      	mov	r2, r0
 800da24:	4b0d      	ldr	r3, [pc, #52]	; (800da5c <__multadd+0x8c>)
 800da26:	480e      	ldr	r0, [pc, #56]	; (800da60 <__multadd+0x90>)
 800da28:	21b5      	movs	r1, #181	; 0xb5
 800da2a:	f001 f9cd 	bl	800edc8 <__assert_func>
 800da2e:	6922      	ldr	r2, [r4, #16]
 800da30:	3202      	adds	r2, #2
 800da32:	f104 010c 	add.w	r1, r4, #12
 800da36:	0092      	lsls	r2, r2, #2
 800da38:	300c      	adds	r0, #12
 800da3a:	f7ff ff4d 	bl	800d8d8 <memcpy>
 800da3e:	4621      	mov	r1, r4
 800da40:	4638      	mov	r0, r7
 800da42:	f7ff ffa3 	bl	800d98c <_Bfree>
 800da46:	462c      	mov	r4, r5
 800da48:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800da4c:	3601      	adds	r6, #1
 800da4e:	f8c3 8014 	str.w	r8, [r3, #20]
 800da52:	6126      	str	r6, [r4, #16]
 800da54:	4620      	mov	r0, r4
 800da56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da5a:	bf00      	nop
 800da5c:	08011fbc 	.word	0x08011fbc
 800da60:	0801204c 	.word	0x0801204c

0800da64 <__s2b>:
 800da64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da68:	460c      	mov	r4, r1
 800da6a:	4615      	mov	r5, r2
 800da6c:	461f      	mov	r7, r3
 800da6e:	2209      	movs	r2, #9
 800da70:	3308      	adds	r3, #8
 800da72:	4606      	mov	r6, r0
 800da74:	fb93 f3f2 	sdiv	r3, r3, r2
 800da78:	2100      	movs	r1, #0
 800da7a:	2201      	movs	r2, #1
 800da7c:	429a      	cmp	r2, r3
 800da7e:	db09      	blt.n	800da94 <__s2b+0x30>
 800da80:	4630      	mov	r0, r6
 800da82:	f7ff ff43 	bl	800d90c <_Balloc>
 800da86:	b940      	cbnz	r0, 800da9a <__s2b+0x36>
 800da88:	4602      	mov	r2, r0
 800da8a:	4b19      	ldr	r3, [pc, #100]	; (800daf0 <__s2b+0x8c>)
 800da8c:	4819      	ldr	r0, [pc, #100]	; (800daf4 <__s2b+0x90>)
 800da8e:	21ce      	movs	r1, #206	; 0xce
 800da90:	f001 f99a 	bl	800edc8 <__assert_func>
 800da94:	0052      	lsls	r2, r2, #1
 800da96:	3101      	adds	r1, #1
 800da98:	e7f0      	b.n	800da7c <__s2b+0x18>
 800da9a:	9b08      	ldr	r3, [sp, #32]
 800da9c:	6143      	str	r3, [r0, #20]
 800da9e:	2d09      	cmp	r5, #9
 800daa0:	f04f 0301 	mov.w	r3, #1
 800daa4:	6103      	str	r3, [r0, #16]
 800daa6:	dd16      	ble.n	800dad6 <__s2b+0x72>
 800daa8:	f104 0909 	add.w	r9, r4, #9
 800daac:	46c8      	mov	r8, r9
 800daae:	442c      	add	r4, r5
 800dab0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800dab4:	4601      	mov	r1, r0
 800dab6:	3b30      	subs	r3, #48	; 0x30
 800dab8:	220a      	movs	r2, #10
 800daba:	4630      	mov	r0, r6
 800dabc:	f7ff ff88 	bl	800d9d0 <__multadd>
 800dac0:	45a0      	cmp	r8, r4
 800dac2:	d1f5      	bne.n	800dab0 <__s2b+0x4c>
 800dac4:	f1a5 0408 	sub.w	r4, r5, #8
 800dac8:	444c      	add	r4, r9
 800daca:	1b2d      	subs	r5, r5, r4
 800dacc:	1963      	adds	r3, r4, r5
 800dace:	42bb      	cmp	r3, r7
 800dad0:	db04      	blt.n	800dadc <__s2b+0x78>
 800dad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dad6:	340a      	adds	r4, #10
 800dad8:	2509      	movs	r5, #9
 800dada:	e7f6      	b.n	800daca <__s2b+0x66>
 800dadc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800dae0:	4601      	mov	r1, r0
 800dae2:	3b30      	subs	r3, #48	; 0x30
 800dae4:	220a      	movs	r2, #10
 800dae6:	4630      	mov	r0, r6
 800dae8:	f7ff ff72 	bl	800d9d0 <__multadd>
 800daec:	e7ee      	b.n	800dacc <__s2b+0x68>
 800daee:	bf00      	nop
 800daf0:	08011fbc 	.word	0x08011fbc
 800daf4:	0801204c 	.word	0x0801204c

0800daf8 <__hi0bits>:
 800daf8:	0c03      	lsrs	r3, r0, #16
 800dafa:	041b      	lsls	r3, r3, #16
 800dafc:	b9d3      	cbnz	r3, 800db34 <__hi0bits+0x3c>
 800dafe:	0400      	lsls	r0, r0, #16
 800db00:	2310      	movs	r3, #16
 800db02:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800db06:	bf04      	itt	eq
 800db08:	0200      	lsleq	r0, r0, #8
 800db0a:	3308      	addeq	r3, #8
 800db0c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800db10:	bf04      	itt	eq
 800db12:	0100      	lsleq	r0, r0, #4
 800db14:	3304      	addeq	r3, #4
 800db16:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800db1a:	bf04      	itt	eq
 800db1c:	0080      	lsleq	r0, r0, #2
 800db1e:	3302      	addeq	r3, #2
 800db20:	2800      	cmp	r0, #0
 800db22:	db05      	blt.n	800db30 <__hi0bits+0x38>
 800db24:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800db28:	f103 0301 	add.w	r3, r3, #1
 800db2c:	bf08      	it	eq
 800db2e:	2320      	moveq	r3, #32
 800db30:	4618      	mov	r0, r3
 800db32:	4770      	bx	lr
 800db34:	2300      	movs	r3, #0
 800db36:	e7e4      	b.n	800db02 <__hi0bits+0xa>

0800db38 <__lo0bits>:
 800db38:	6803      	ldr	r3, [r0, #0]
 800db3a:	f013 0207 	ands.w	r2, r3, #7
 800db3e:	4601      	mov	r1, r0
 800db40:	d00b      	beq.n	800db5a <__lo0bits+0x22>
 800db42:	07da      	lsls	r2, r3, #31
 800db44:	d424      	bmi.n	800db90 <__lo0bits+0x58>
 800db46:	0798      	lsls	r0, r3, #30
 800db48:	bf49      	itett	mi
 800db4a:	085b      	lsrmi	r3, r3, #1
 800db4c:	089b      	lsrpl	r3, r3, #2
 800db4e:	2001      	movmi	r0, #1
 800db50:	600b      	strmi	r3, [r1, #0]
 800db52:	bf5c      	itt	pl
 800db54:	600b      	strpl	r3, [r1, #0]
 800db56:	2002      	movpl	r0, #2
 800db58:	4770      	bx	lr
 800db5a:	b298      	uxth	r0, r3
 800db5c:	b9b0      	cbnz	r0, 800db8c <__lo0bits+0x54>
 800db5e:	0c1b      	lsrs	r3, r3, #16
 800db60:	2010      	movs	r0, #16
 800db62:	f013 0fff 	tst.w	r3, #255	; 0xff
 800db66:	bf04      	itt	eq
 800db68:	0a1b      	lsreq	r3, r3, #8
 800db6a:	3008      	addeq	r0, #8
 800db6c:	071a      	lsls	r2, r3, #28
 800db6e:	bf04      	itt	eq
 800db70:	091b      	lsreq	r3, r3, #4
 800db72:	3004      	addeq	r0, #4
 800db74:	079a      	lsls	r2, r3, #30
 800db76:	bf04      	itt	eq
 800db78:	089b      	lsreq	r3, r3, #2
 800db7a:	3002      	addeq	r0, #2
 800db7c:	07da      	lsls	r2, r3, #31
 800db7e:	d403      	bmi.n	800db88 <__lo0bits+0x50>
 800db80:	085b      	lsrs	r3, r3, #1
 800db82:	f100 0001 	add.w	r0, r0, #1
 800db86:	d005      	beq.n	800db94 <__lo0bits+0x5c>
 800db88:	600b      	str	r3, [r1, #0]
 800db8a:	4770      	bx	lr
 800db8c:	4610      	mov	r0, r2
 800db8e:	e7e8      	b.n	800db62 <__lo0bits+0x2a>
 800db90:	2000      	movs	r0, #0
 800db92:	4770      	bx	lr
 800db94:	2020      	movs	r0, #32
 800db96:	4770      	bx	lr

0800db98 <__i2b>:
 800db98:	b510      	push	{r4, lr}
 800db9a:	460c      	mov	r4, r1
 800db9c:	2101      	movs	r1, #1
 800db9e:	f7ff feb5 	bl	800d90c <_Balloc>
 800dba2:	4602      	mov	r2, r0
 800dba4:	b928      	cbnz	r0, 800dbb2 <__i2b+0x1a>
 800dba6:	4b05      	ldr	r3, [pc, #20]	; (800dbbc <__i2b+0x24>)
 800dba8:	4805      	ldr	r0, [pc, #20]	; (800dbc0 <__i2b+0x28>)
 800dbaa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800dbae:	f001 f90b 	bl	800edc8 <__assert_func>
 800dbb2:	2301      	movs	r3, #1
 800dbb4:	6144      	str	r4, [r0, #20]
 800dbb6:	6103      	str	r3, [r0, #16]
 800dbb8:	bd10      	pop	{r4, pc}
 800dbba:	bf00      	nop
 800dbbc:	08011fbc 	.word	0x08011fbc
 800dbc0:	0801204c 	.word	0x0801204c

0800dbc4 <__multiply>:
 800dbc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbc8:	4614      	mov	r4, r2
 800dbca:	690a      	ldr	r2, [r1, #16]
 800dbcc:	6923      	ldr	r3, [r4, #16]
 800dbce:	429a      	cmp	r2, r3
 800dbd0:	bfb8      	it	lt
 800dbd2:	460b      	movlt	r3, r1
 800dbd4:	460d      	mov	r5, r1
 800dbd6:	bfbc      	itt	lt
 800dbd8:	4625      	movlt	r5, r4
 800dbda:	461c      	movlt	r4, r3
 800dbdc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800dbe0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800dbe4:	68ab      	ldr	r3, [r5, #8]
 800dbe6:	6869      	ldr	r1, [r5, #4]
 800dbe8:	eb0a 0709 	add.w	r7, sl, r9
 800dbec:	42bb      	cmp	r3, r7
 800dbee:	b085      	sub	sp, #20
 800dbf0:	bfb8      	it	lt
 800dbf2:	3101      	addlt	r1, #1
 800dbf4:	f7ff fe8a 	bl	800d90c <_Balloc>
 800dbf8:	b930      	cbnz	r0, 800dc08 <__multiply+0x44>
 800dbfa:	4602      	mov	r2, r0
 800dbfc:	4b42      	ldr	r3, [pc, #264]	; (800dd08 <__multiply+0x144>)
 800dbfe:	4843      	ldr	r0, [pc, #268]	; (800dd0c <__multiply+0x148>)
 800dc00:	f240 115d 	movw	r1, #349	; 0x15d
 800dc04:	f001 f8e0 	bl	800edc8 <__assert_func>
 800dc08:	f100 0614 	add.w	r6, r0, #20
 800dc0c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800dc10:	4633      	mov	r3, r6
 800dc12:	2200      	movs	r2, #0
 800dc14:	4543      	cmp	r3, r8
 800dc16:	d31e      	bcc.n	800dc56 <__multiply+0x92>
 800dc18:	f105 0c14 	add.w	ip, r5, #20
 800dc1c:	f104 0314 	add.w	r3, r4, #20
 800dc20:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800dc24:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800dc28:	9202      	str	r2, [sp, #8]
 800dc2a:	ebac 0205 	sub.w	r2, ip, r5
 800dc2e:	3a15      	subs	r2, #21
 800dc30:	f022 0203 	bic.w	r2, r2, #3
 800dc34:	3204      	adds	r2, #4
 800dc36:	f105 0115 	add.w	r1, r5, #21
 800dc3a:	458c      	cmp	ip, r1
 800dc3c:	bf38      	it	cc
 800dc3e:	2204      	movcc	r2, #4
 800dc40:	9201      	str	r2, [sp, #4]
 800dc42:	9a02      	ldr	r2, [sp, #8]
 800dc44:	9303      	str	r3, [sp, #12]
 800dc46:	429a      	cmp	r2, r3
 800dc48:	d808      	bhi.n	800dc5c <__multiply+0x98>
 800dc4a:	2f00      	cmp	r7, #0
 800dc4c:	dc55      	bgt.n	800dcfa <__multiply+0x136>
 800dc4e:	6107      	str	r7, [r0, #16]
 800dc50:	b005      	add	sp, #20
 800dc52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc56:	f843 2b04 	str.w	r2, [r3], #4
 800dc5a:	e7db      	b.n	800dc14 <__multiply+0x50>
 800dc5c:	f8b3 a000 	ldrh.w	sl, [r3]
 800dc60:	f1ba 0f00 	cmp.w	sl, #0
 800dc64:	d020      	beq.n	800dca8 <__multiply+0xe4>
 800dc66:	f105 0e14 	add.w	lr, r5, #20
 800dc6a:	46b1      	mov	r9, r6
 800dc6c:	2200      	movs	r2, #0
 800dc6e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800dc72:	f8d9 b000 	ldr.w	fp, [r9]
 800dc76:	b2a1      	uxth	r1, r4
 800dc78:	fa1f fb8b 	uxth.w	fp, fp
 800dc7c:	fb0a b101 	mla	r1, sl, r1, fp
 800dc80:	4411      	add	r1, r2
 800dc82:	f8d9 2000 	ldr.w	r2, [r9]
 800dc86:	0c24      	lsrs	r4, r4, #16
 800dc88:	0c12      	lsrs	r2, r2, #16
 800dc8a:	fb0a 2404 	mla	r4, sl, r4, r2
 800dc8e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800dc92:	b289      	uxth	r1, r1
 800dc94:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800dc98:	45f4      	cmp	ip, lr
 800dc9a:	f849 1b04 	str.w	r1, [r9], #4
 800dc9e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800dca2:	d8e4      	bhi.n	800dc6e <__multiply+0xaa>
 800dca4:	9901      	ldr	r1, [sp, #4]
 800dca6:	5072      	str	r2, [r6, r1]
 800dca8:	9a03      	ldr	r2, [sp, #12]
 800dcaa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800dcae:	3304      	adds	r3, #4
 800dcb0:	f1b9 0f00 	cmp.w	r9, #0
 800dcb4:	d01f      	beq.n	800dcf6 <__multiply+0x132>
 800dcb6:	6834      	ldr	r4, [r6, #0]
 800dcb8:	f105 0114 	add.w	r1, r5, #20
 800dcbc:	46b6      	mov	lr, r6
 800dcbe:	f04f 0a00 	mov.w	sl, #0
 800dcc2:	880a      	ldrh	r2, [r1, #0]
 800dcc4:	f8be b002 	ldrh.w	fp, [lr, #2]
 800dcc8:	fb09 b202 	mla	r2, r9, r2, fp
 800dccc:	4492      	add	sl, r2
 800dcce:	b2a4      	uxth	r4, r4
 800dcd0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800dcd4:	f84e 4b04 	str.w	r4, [lr], #4
 800dcd8:	f851 4b04 	ldr.w	r4, [r1], #4
 800dcdc:	f8be 2000 	ldrh.w	r2, [lr]
 800dce0:	0c24      	lsrs	r4, r4, #16
 800dce2:	fb09 2404 	mla	r4, r9, r4, r2
 800dce6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800dcea:	458c      	cmp	ip, r1
 800dcec:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800dcf0:	d8e7      	bhi.n	800dcc2 <__multiply+0xfe>
 800dcf2:	9a01      	ldr	r2, [sp, #4]
 800dcf4:	50b4      	str	r4, [r6, r2]
 800dcf6:	3604      	adds	r6, #4
 800dcf8:	e7a3      	b.n	800dc42 <__multiply+0x7e>
 800dcfa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d1a5      	bne.n	800dc4e <__multiply+0x8a>
 800dd02:	3f01      	subs	r7, #1
 800dd04:	e7a1      	b.n	800dc4a <__multiply+0x86>
 800dd06:	bf00      	nop
 800dd08:	08011fbc 	.word	0x08011fbc
 800dd0c:	0801204c 	.word	0x0801204c

0800dd10 <__pow5mult>:
 800dd10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd14:	4615      	mov	r5, r2
 800dd16:	f012 0203 	ands.w	r2, r2, #3
 800dd1a:	4606      	mov	r6, r0
 800dd1c:	460f      	mov	r7, r1
 800dd1e:	d007      	beq.n	800dd30 <__pow5mult+0x20>
 800dd20:	4c25      	ldr	r4, [pc, #148]	; (800ddb8 <__pow5mult+0xa8>)
 800dd22:	3a01      	subs	r2, #1
 800dd24:	2300      	movs	r3, #0
 800dd26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dd2a:	f7ff fe51 	bl	800d9d0 <__multadd>
 800dd2e:	4607      	mov	r7, r0
 800dd30:	10ad      	asrs	r5, r5, #2
 800dd32:	d03d      	beq.n	800ddb0 <__pow5mult+0xa0>
 800dd34:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800dd36:	b97c      	cbnz	r4, 800dd58 <__pow5mult+0x48>
 800dd38:	2010      	movs	r0, #16
 800dd3a:	f7fc fcfb 	bl	800a734 <malloc>
 800dd3e:	4602      	mov	r2, r0
 800dd40:	6270      	str	r0, [r6, #36]	; 0x24
 800dd42:	b928      	cbnz	r0, 800dd50 <__pow5mult+0x40>
 800dd44:	4b1d      	ldr	r3, [pc, #116]	; (800ddbc <__pow5mult+0xac>)
 800dd46:	481e      	ldr	r0, [pc, #120]	; (800ddc0 <__pow5mult+0xb0>)
 800dd48:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800dd4c:	f001 f83c 	bl	800edc8 <__assert_func>
 800dd50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dd54:	6004      	str	r4, [r0, #0]
 800dd56:	60c4      	str	r4, [r0, #12]
 800dd58:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800dd5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dd60:	b94c      	cbnz	r4, 800dd76 <__pow5mult+0x66>
 800dd62:	f240 2171 	movw	r1, #625	; 0x271
 800dd66:	4630      	mov	r0, r6
 800dd68:	f7ff ff16 	bl	800db98 <__i2b>
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	f8c8 0008 	str.w	r0, [r8, #8]
 800dd72:	4604      	mov	r4, r0
 800dd74:	6003      	str	r3, [r0, #0]
 800dd76:	f04f 0900 	mov.w	r9, #0
 800dd7a:	07eb      	lsls	r3, r5, #31
 800dd7c:	d50a      	bpl.n	800dd94 <__pow5mult+0x84>
 800dd7e:	4639      	mov	r1, r7
 800dd80:	4622      	mov	r2, r4
 800dd82:	4630      	mov	r0, r6
 800dd84:	f7ff ff1e 	bl	800dbc4 <__multiply>
 800dd88:	4639      	mov	r1, r7
 800dd8a:	4680      	mov	r8, r0
 800dd8c:	4630      	mov	r0, r6
 800dd8e:	f7ff fdfd 	bl	800d98c <_Bfree>
 800dd92:	4647      	mov	r7, r8
 800dd94:	106d      	asrs	r5, r5, #1
 800dd96:	d00b      	beq.n	800ddb0 <__pow5mult+0xa0>
 800dd98:	6820      	ldr	r0, [r4, #0]
 800dd9a:	b938      	cbnz	r0, 800ddac <__pow5mult+0x9c>
 800dd9c:	4622      	mov	r2, r4
 800dd9e:	4621      	mov	r1, r4
 800dda0:	4630      	mov	r0, r6
 800dda2:	f7ff ff0f 	bl	800dbc4 <__multiply>
 800dda6:	6020      	str	r0, [r4, #0]
 800dda8:	f8c0 9000 	str.w	r9, [r0]
 800ddac:	4604      	mov	r4, r0
 800ddae:	e7e4      	b.n	800dd7a <__pow5mult+0x6a>
 800ddb0:	4638      	mov	r0, r7
 800ddb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ddb6:	bf00      	nop
 800ddb8:	080121a0 	.word	0x080121a0
 800ddbc:	08011f46 	.word	0x08011f46
 800ddc0:	0801204c 	.word	0x0801204c

0800ddc4 <__lshift>:
 800ddc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ddc8:	460c      	mov	r4, r1
 800ddca:	6849      	ldr	r1, [r1, #4]
 800ddcc:	6923      	ldr	r3, [r4, #16]
 800ddce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ddd2:	68a3      	ldr	r3, [r4, #8]
 800ddd4:	4607      	mov	r7, r0
 800ddd6:	4691      	mov	r9, r2
 800ddd8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dddc:	f108 0601 	add.w	r6, r8, #1
 800dde0:	42b3      	cmp	r3, r6
 800dde2:	db0b      	blt.n	800ddfc <__lshift+0x38>
 800dde4:	4638      	mov	r0, r7
 800dde6:	f7ff fd91 	bl	800d90c <_Balloc>
 800ddea:	4605      	mov	r5, r0
 800ddec:	b948      	cbnz	r0, 800de02 <__lshift+0x3e>
 800ddee:	4602      	mov	r2, r0
 800ddf0:	4b28      	ldr	r3, [pc, #160]	; (800de94 <__lshift+0xd0>)
 800ddf2:	4829      	ldr	r0, [pc, #164]	; (800de98 <__lshift+0xd4>)
 800ddf4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ddf8:	f000 ffe6 	bl	800edc8 <__assert_func>
 800ddfc:	3101      	adds	r1, #1
 800ddfe:	005b      	lsls	r3, r3, #1
 800de00:	e7ee      	b.n	800dde0 <__lshift+0x1c>
 800de02:	2300      	movs	r3, #0
 800de04:	f100 0114 	add.w	r1, r0, #20
 800de08:	f100 0210 	add.w	r2, r0, #16
 800de0c:	4618      	mov	r0, r3
 800de0e:	4553      	cmp	r3, sl
 800de10:	db33      	blt.n	800de7a <__lshift+0xb6>
 800de12:	6920      	ldr	r0, [r4, #16]
 800de14:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800de18:	f104 0314 	add.w	r3, r4, #20
 800de1c:	f019 091f 	ands.w	r9, r9, #31
 800de20:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800de24:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800de28:	d02b      	beq.n	800de82 <__lshift+0xbe>
 800de2a:	f1c9 0e20 	rsb	lr, r9, #32
 800de2e:	468a      	mov	sl, r1
 800de30:	2200      	movs	r2, #0
 800de32:	6818      	ldr	r0, [r3, #0]
 800de34:	fa00 f009 	lsl.w	r0, r0, r9
 800de38:	4302      	orrs	r2, r0
 800de3a:	f84a 2b04 	str.w	r2, [sl], #4
 800de3e:	f853 2b04 	ldr.w	r2, [r3], #4
 800de42:	459c      	cmp	ip, r3
 800de44:	fa22 f20e 	lsr.w	r2, r2, lr
 800de48:	d8f3      	bhi.n	800de32 <__lshift+0x6e>
 800de4a:	ebac 0304 	sub.w	r3, ip, r4
 800de4e:	3b15      	subs	r3, #21
 800de50:	f023 0303 	bic.w	r3, r3, #3
 800de54:	3304      	adds	r3, #4
 800de56:	f104 0015 	add.w	r0, r4, #21
 800de5a:	4584      	cmp	ip, r0
 800de5c:	bf38      	it	cc
 800de5e:	2304      	movcc	r3, #4
 800de60:	50ca      	str	r2, [r1, r3]
 800de62:	b10a      	cbz	r2, 800de68 <__lshift+0xa4>
 800de64:	f108 0602 	add.w	r6, r8, #2
 800de68:	3e01      	subs	r6, #1
 800de6a:	4638      	mov	r0, r7
 800de6c:	612e      	str	r6, [r5, #16]
 800de6e:	4621      	mov	r1, r4
 800de70:	f7ff fd8c 	bl	800d98c <_Bfree>
 800de74:	4628      	mov	r0, r5
 800de76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de7a:	f842 0f04 	str.w	r0, [r2, #4]!
 800de7e:	3301      	adds	r3, #1
 800de80:	e7c5      	b.n	800de0e <__lshift+0x4a>
 800de82:	3904      	subs	r1, #4
 800de84:	f853 2b04 	ldr.w	r2, [r3], #4
 800de88:	f841 2f04 	str.w	r2, [r1, #4]!
 800de8c:	459c      	cmp	ip, r3
 800de8e:	d8f9      	bhi.n	800de84 <__lshift+0xc0>
 800de90:	e7ea      	b.n	800de68 <__lshift+0xa4>
 800de92:	bf00      	nop
 800de94:	08011fbc 	.word	0x08011fbc
 800de98:	0801204c 	.word	0x0801204c

0800de9c <__mcmp>:
 800de9c:	b530      	push	{r4, r5, lr}
 800de9e:	6902      	ldr	r2, [r0, #16]
 800dea0:	690c      	ldr	r4, [r1, #16]
 800dea2:	1b12      	subs	r2, r2, r4
 800dea4:	d10e      	bne.n	800dec4 <__mcmp+0x28>
 800dea6:	f100 0314 	add.w	r3, r0, #20
 800deaa:	3114      	adds	r1, #20
 800deac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800deb0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800deb4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800deb8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800debc:	42a5      	cmp	r5, r4
 800debe:	d003      	beq.n	800dec8 <__mcmp+0x2c>
 800dec0:	d305      	bcc.n	800dece <__mcmp+0x32>
 800dec2:	2201      	movs	r2, #1
 800dec4:	4610      	mov	r0, r2
 800dec6:	bd30      	pop	{r4, r5, pc}
 800dec8:	4283      	cmp	r3, r0
 800deca:	d3f3      	bcc.n	800deb4 <__mcmp+0x18>
 800decc:	e7fa      	b.n	800dec4 <__mcmp+0x28>
 800dece:	f04f 32ff 	mov.w	r2, #4294967295
 800ded2:	e7f7      	b.n	800dec4 <__mcmp+0x28>

0800ded4 <__mdiff>:
 800ded4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ded8:	460c      	mov	r4, r1
 800deda:	4606      	mov	r6, r0
 800dedc:	4611      	mov	r1, r2
 800dede:	4620      	mov	r0, r4
 800dee0:	4617      	mov	r7, r2
 800dee2:	f7ff ffdb 	bl	800de9c <__mcmp>
 800dee6:	1e05      	subs	r5, r0, #0
 800dee8:	d110      	bne.n	800df0c <__mdiff+0x38>
 800deea:	4629      	mov	r1, r5
 800deec:	4630      	mov	r0, r6
 800deee:	f7ff fd0d 	bl	800d90c <_Balloc>
 800def2:	b930      	cbnz	r0, 800df02 <__mdiff+0x2e>
 800def4:	4b39      	ldr	r3, [pc, #228]	; (800dfdc <__mdiff+0x108>)
 800def6:	4602      	mov	r2, r0
 800def8:	f240 2132 	movw	r1, #562	; 0x232
 800defc:	4838      	ldr	r0, [pc, #224]	; (800dfe0 <__mdiff+0x10c>)
 800defe:	f000 ff63 	bl	800edc8 <__assert_func>
 800df02:	2301      	movs	r3, #1
 800df04:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800df08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df0c:	bfa4      	itt	ge
 800df0e:	463b      	movge	r3, r7
 800df10:	4627      	movge	r7, r4
 800df12:	4630      	mov	r0, r6
 800df14:	6879      	ldr	r1, [r7, #4]
 800df16:	bfa6      	itte	ge
 800df18:	461c      	movge	r4, r3
 800df1a:	2500      	movge	r5, #0
 800df1c:	2501      	movlt	r5, #1
 800df1e:	f7ff fcf5 	bl	800d90c <_Balloc>
 800df22:	b920      	cbnz	r0, 800df2e <__mdiff+0x5a>
 800df24:	4b2d      	ldr	r3, [pc, #180]	; (800dfdc <__mdiff+0x108>)
 800df26:	4602      	mov	r2, r0
 800df28:	f44f 7110 	mov.w	r1, #576	; 0x240
 800df2c:	e7e6      	b.n	800defc <__mdiff+0x28>
 800df2e:	693e      	ldr	r6, [r7, #16]
 800df30:	60c5      	str	r5, [r0, #12]
 800df32:	6925      	ldr	r5, [r4, #16]
 800df34:	f107 0114 	add.w	r1, r7, #20
 800df38:	f104 0914 	add.w	r9, r4, #20
 800df3c:	f100 0e14 	add.w	lr, r0, #20
 800df40:	f107 0210 	add.w	r2, r7, #16
 800df44:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800df48:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800df4c:	46f2      	mov	sl, lr
 800df4e:	2700      	movs	r7, #0
 800df50:	f859 3b04 	ldr.w	r3, [r9], #4
 800df54:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800df58:	fa1f f883 	uxth.w	r8, r3
 800df5c:	fa17 f78b 	uxtah	r7, r7, fp
 800df60:	0c1b      	lsrs	r3, r3, #16
 800df62:	eba7 0808 	sub.w	r8, r7, r8
 800df66:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800df6a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800df6e:	fa1f f888 	uxth.w	r8, r8
 800df72:	141f      	asrs	r7, r3, #16
 800df74:	454d      	cmp	r5, r9
 800df76:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800df7a:	f84a 3b04 	str.w	r3, [sl], #4
 800df7e:	d8e7      	bhi.n	800df50 <__mdiff+0x7c>
 800df80:	1b2b      	subs	r3, r5, r4
 800df82:	3b15      	subs	r3, #21
 800df84:	f023 0303 	bic.w	r3, r3, #3
 800df88:	3304      	adds	r3, #4
 800df8a:	3415      	adds	r4, #21
 800df8c:	42a5      	cmp	r5, r4
 800df8e:	bf38      	it	cc
 800df90:	2304      	movcc	r3, #4
 800df92:	4419      	add	r1, r3
 800df94:	4473      	add	r3, lr
 800df96:	469e      	mov	lr, r3
 800df98:	460d      	mov	r5, r1
 800df9a:	4565      	cmp	r5, ip
 800df9c:	d30e      	bcc.n	800dfbc <__mdiff+0xe8>
 800df9e:	f10c 0203 	add.w	r2, ip, #3
 800dfa2:	1a52      	subs	r2, r2, r1
 800dfa4:	f022 0203 	bic.w	r2, r2, #3
 800dfa8:	3903      	subs	r1, #3
 800dfaa:	458c      	cmp	ip, r1
 800dfac:	bf38      	it	cc
 800dfae:	2200      	movcc	r2, #0
 800dfb0:	441a      	add	r2, r3
 800dfb2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800dfb6:	b17b      	cbz	r3, 800dfd8 <__mdiff+0x104>
 800dfb8:	6106      	str	r6, [r0, #16]
 800dfba:	e7a5      	b.n	800df08 <__mdiff+0x34>
 800dfbc:	f855 8b04 	ldr.w	r8, [r5], #4
 800dfc0:	fa17 f488 	uxtah	r4, r7, r8
 800dfc4:	1422      	asrs	r2, r4, #16
 800dfc6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800dfca:	b2a4      	uxth	r4, r4
 800dfcc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800dfd0:	f84e 4b04 	str.w	r4, [lr], #4
 800dfd4:	1417      	asrs	r7, r2, #16
 800dfd6:	e7e0      	b.n	800df9a <__mdiff+0xc6>
 800dfd8:	3e01      	subs	r6, #1
 800dfda:	e7ea      	b.n	800dfb2 <__mdiff+0xde>
 800dfdc:	08011fbc 	.word	0x08011fbc
 800dfe0:	0801204c 	.word	0x0801204c

0800dfe4 <__ulp>:
 800dfe4:	b082      	sub	sp, #8
 800dfe6:	ed8d 0b00 	vstr	d0, [sp]
 800dfea:	9b01      	ldr	r3, [sp, #4]
 800dfec:	4912      	ldr	r1, [pc, #72]	; (800e038 <__ulp+0x54>)
 800dfee:	4019      	ands	r1, r3
 800dff0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800dff4:	2900      	cmp	r1, #0
 800dff6:	dd05      	ble.n	800e004 <__ulp+0x20>
 800dff8:	2200      	movs	r2, #0
 800dffa:	460b      	mov	r3, r1
 800dffc:	ec43 2b10 	vmov	d0, r2, r3
 800e000:	b002      	add	sp, #8
 800e002:	4770      	bx	lr
 800e004:	4249      	negs	r1, r1
 800e006:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800e00a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800e00e:	f04f 0200 	mov.w	r2, #0
 800e012:	f04f 0300 	mov.w	r3, #0
 800e016:	da04      	bge.n	800e022 <__ulp+0x3e>
 800e018:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800e01c:	fa41 f300 	asr.w	r3, r1, r0
 800e020:	e7ec      	b.n	800dffc <__ulp+0x18>
 800e022:	f1a0 0114 	sub.w	r1, r0, #20
 800e026:	291e      	cmp	r1, #30
 800e028:	bfda      	itte	le
 800e02a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800e02e:	fa20 f101 	lsrle.w	r1, r0, r1
 800e032:	2101      	movgt	r1, #1
 800e034:	460a      	mov	r2, r1
 800e036:	e7e1      	b.n	800dffc <__ulp+0x18>
 800e038:	7ff00000 	.word	0x7ff00000

0800e03c <__b2d>:
 800e03c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e03e:	6905      	ldr	r5, [r0, #16]
 800e040:	f100 0714 	add.w	r7, r0, #20
 800e044:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e048:	1f2e      	subs	r6, r5, #4
 800e04a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e04e:	4620      	mov	r0, r4
 800e050:	f7ff fd52 	bl	800daf8 <__hi0bits>
 800e054:	f1c0 0320 	rsb	r3, r0, #32
 800e058:	280a      	cmp	r0, #10
 800e05a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800e0d8 <__b2d+0x9c>
 800e05e:	600b      	str	r3, [r1, #0]
 800e060:	dc14      	bgt.n	800e08c <__b2d+0x50>
 800e062:	f1c0 0e0b 	rsb	lr, r0, #11
 800e066:	fa24 f10e 	lsr.w	r1, r4, lr
 800e06a:	42b7      	cmp	r7, r6
 800e06c:	ea41 030c 	orr.w	r3, r1, ip
 800e070:	bf34      	ite	cc
 800e072:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e076:	2100      	movcs	r1, #0
 800e078:	3015      	adds	r0, #21
 800e07a:	fa04 f000 	lsl.w	r0, r4, r0
 800e07e:	fa21 f10e 	lsr.w	r1, r1, lr
 800e082:	ea40 0201 	orr.w	r2, r0, r1
 800e086:	ec43 2b10 	vmov	d0, r2, r3
 800e08a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e08c:	42b7      	cmp	r7, r6
 800e08e:	bf3a      	itte	cc
 800e090:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e094:	f1a5 0608 	subcc.w	r6, r5, #8
 800e098:	2100      	movcs	r1, #0
 800e09a:	380b      	subs	r0, #11
 800e09c:	d017      	beq.n	800e0ce <__b2d+0x92>
 800e09e:	f1c0 0c20 	rsb	ip, r0, #32
 800e0a2:	fa04 f500 	lsl.w	r5, r4, r0
 800e0a6:	42be      	cmp	r6, r7
 800e0a8:	fa21 f40c 	lsr.w	r4, r1, ip
 800e0ac:	ea45 0504 	orr.w	r5, r5, r4
 800e0b0:	bf8c      	ite	hi
 800e0b2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800e0b6:	2400      	movls	r4, #0
 800e0b8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800e0bc:	fa01 f000 	lsl.w	r0, r1, r0
 800e0c0:	fa24 f40c 	lsr.w	r4, r4, ip
 800e0c4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e0c8:	ea40 0204 	orr.w	r2, r0, r4
 800e0cc:	e7db      	b.n	800e086 <__b2d+0x4a>
 800e0ce:	ea44 030c 	orr.w	r3, r4, ip
 800e0d2:	460a      	mov	r2, r1
 800e0d4:	e7d7      	b.n	800e086 <__b2d+0x4a>
 800e0d6:	bf00      	nop
 800e0d8:	3ff00000 	.word	0x3ff00000

0800e0dc <__d2b>:
 800e0dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e0e0:	4689      	mov	r9, r1
 800e0e2:	2101      	movs	r1, #1
 800e0e4:	ec57 6b10 	vmov	r6, r7, d0
 800e0e8:	4690      	mov	r8, r2
 800e0ea:	f7ff fc0f 	bl	800d90c <_Balloc>
 800e0ee:	4604      	mov	r4, r0
 800e0f0:	b930      	cbnz	r0, 800e100 <__d2b+0x24>
 800e0f2:	4602      	mov	r2, r0
 800e0f4:	4b25      	ldr	r3, [pc, #148]	; (800e18c <__d2b+0xb0>)
 800e0f6:	4826      	ldr	r0, [pc, #152]	; (800e190 <__d2b+0xb4>)
 800e0f8:	f240 310a 	movw	r1, #778	; 0x30a
 800e0fc:	f000 fe64 	bl	800edc8 <__assert_func>
 800e100:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e104:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e108:	bb35      	cbnz	r5, 800e158 <__d2b+0x7c>
 800e10a:	2e00      	cmp	r6, #0
 800e10c:	9301      	str	r3, [sp, #4]
 800e10e:	d028      	beq.n	800e162 <__d2b+0x86>
 800e110:	4668      	mov	r0, sp
 800e112:	9600      	str	r6, [sp, #0]
 800e114:	f7ff fd10 	bl	800db38 <__lo0bits>
 800e118:	9900      	ldr	r1, [sp, #0]
 800e11a:	b300      	cbz	r0, 800e15e <__d2b+0x82>
 800e11c:	9a01      	ldr	r2, [sp, #4]
 800e11e:	f1c0 0320 	rsb	r3, r0, #32
 800e122:	fa02 f303 	lsl.w	r3, r2, r3
 800e126:	430b      	orrs	r3, r1
 800e128:	40c2      	lsrs	r2, r0
 800e12a:	6163      	str	r3, [r4, #20]
 800e12c:	9201      	str	r2, [sp, #4]
 800e12e:	9b01      	ldr	r3, [sp, #4]
 800e130:	61a3      	str	r3, [r4, #24]
 800e132:	2b00      	cmp	r3, #0
 800e134:	bf14      	ite	ne
 800e136:	2202      	movne	r2, #2
 800e138:	2201      	moveq	r2, #1
 800e13a:	6122      	str	r2, [r4, #16]
 800e13c:	b1d5      	cbz	r5, 800e174 <__d2b+0x98>
 800e13e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e142:	4405      	add	r5, r0
 800e144:	f8c9 5000 	str.w	r5, [r9]
 800e148:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e14c:	f8c8 0000 	str.w	r0, [r8]
 800e150:	4620      	mov	r0, r4
 800e152:	b003      	add	sp, #12
 800e154:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e158:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e15c:	e7d5      	b.n	800e10a <__d2b+0x2e>
 800e15e:	6161      	str	r1, [r4, #20]
 800e160:	e7e5      	b.n	800e12e <__d2b+0x52>
 800e162:	a801      	add	r0, sp, #4
 800e164:	f7ff fce8 	bl	800db38 <__lo0bits>
 800e168:	9b01      	ldr	r3, [sp, #4]
 800e16a:	6163      	str	r3, [r4, #20]
 800e16c:	2201      	movs	r2, #1
 800e16e:	6122      	str	r2, [r4, #16]
 800e170:	3020      	adds	r0, #32
 800e172:	e7e3      	b.n	800e13c <__d2b+0x60>
 800e174:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e178:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e17c:	f8c9 0000 	str.w	r0, [r9]
 800e180:	6918      	ldr	r0, [r3, #16]
 800e182:	f7ff fcb9 	bl	800daf8 <__hi0bits>
 800e186:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e18a:	e7df      	b.n	800e14c <__d2b+0x70>
 800e18c:	08011fbc 	.word	0x08011fbc
 800e190:	0801204c 	.word	0x0801204c

0800e194 <__ratio>:
 800e194:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e198:	4688      	mov	r8, r1
 800e19a:	4669      	mov	r1, sp
 800e19c:	4681      	mov	r9, r0
 800e19e:	f7ff ff4d 	bl	800e03c <__b2d>
 800e1a2:	a901      	add	r1, sp, #4
 800e1a4:	4640      	mov	r0, r8
 800e1a6:	ec55 4b10 	vmov	r4, r5, d0
 800e1aa:	f7ff ff47 	bl	800e03c <__b2d>
 800e1ae:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e1b2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e1b6:	eba3 0c02 	sub.w	ip, r3, r2
 800e1ba:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e1be:	1a9b      	subs	r3, r3, r2
 800e1c0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e1c4:	ec51 0b10 	vmov	r0, r1, d0
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	bfd6      	itet	le
 800e1cc:	460a      	movle	r2, r1
 800e1ce:	462a      	movgt	r2, r5
 800e1d0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e1d4:	468b      	mov	fp, r1
 800e1d6:	462f      	mov	r7, r5
 800e1d8:	bfd4      	ite	le
 800e1da:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800e1de:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e1e2:	4620      	mov	r0, r4
 800e1e4:	ee10 2a10 	vmov	r2, s0
 800e1e8:	465b      	mov	r3, fp
 800e1ea:	4639      	mov	r1, r7
 800e1ec:	f7f2 fb36 	bl	800085c <__aeabi_ddiv>
 800e1f0:	ec41 0b10 	vmov	d0, r0, r1
 800e1f4:	b003      	add	sp, #12
 800e1f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e1fa <__copybits>:
 800e1fa:	3901      	subs	r1, #1
 800e1fc:	b570      	push	{r4, r5, r6, lr}
 800e1fe:	1149      	asrs	r1, r1, #5
 800e200:	6914      	ldr	r4, [r2, #16]
 800e202:	3101      	adds	r1, #1
 800e204:	f102 0314 	add.w	r3, r2, #20
 800e208:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e20c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e210:	1f05      	subs	r5, r0, #4
 800e212:	42a3      	cmp	r3, r4
 800e214:	d30c      	bcc.n	800e230 <__copybits+0x36>
 800e216:	1aa3      	subs	r3, r4, r2
 800e218:	3b11      	subs	r3, #17
 800e21a:	f023 0303 	bic.w	r3, r3, #3
 800e21e:	3211      	adds	r2, #17
 800e220:	42a2      	cmp	r2, r4
 800e222:	bf88      	it	hi
 800e224:	2300      	movhi	r3, #0
 800e226:	4418      	add	r0, r3
 800e228:	2300      	movs	r3, #0
 800e22a:	4288      	cmp	r0, r1
 800e22c:	d305      	bcc.n	800e23a <__copybits+0x40>
 800e22e:	bd70      	pop	{r4, r5, r6, pc}
 800e230:	f853 6b04 	ldr.w	r6, [r3], #4
 800e234:	f845 6f04 	str.w	r6, [r5, #4]!
 800e238:	e7eb      	b.n	800e212 <__copybits+0x18>
 800e23a:	f840 3b04 	str.w	r3, [r0], #4
 800e23e:	e7f4      	b.n	800e22a <__copybits+0x30>

0800e240 <__any_on>:
 800e240:	f100 0214 	add.w	r2, r0, #20
 800e244:	6900      	ldr	r0, [r0, #16]
 800e246:	114b      	asrs	r3, r1, #5
 800e248:	4298      	cmp	r0, r3
 800e24a:	b510      	push	{r4, lr}
 800e24c:	db11      	blt.n	800e272 <__any_on+0x32>
 800e24e:	dd0a      	ble.n	800e266 <__any_on+0x26>
 800e250:	f011 011f 	ands.w	r1, r1, #31
 800e254:	d007      	beq.n	800e266 <__any_on+0x26>
 800e256:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e25a:	fa24 f001 	lsr.w	r0, r4, r1
 800e25e:	fa00 f101 	lsl.w	r1, r0, r1
 800e262:	428c      	cmp	r4, r1
 800e264:	d10b      	bne.n	800e27e <__any_on+0x3e>
 800e266:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e26a:	4293      	cmp	r3, r2
 800e26c:	d803      	bhi.n	800e276 <__any_on+0x36>
 800e26e:	2000      	movs	r0, #0
 800e270:	bd10      	pop	{r4, pc}
 800e272:	4603      	mov	r3, r0
 800e274:	e7f7      	b.n	800e266 <__any_on+0x26>
 800e276:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e27a:	2900      	cmp	r1, #0
 800e27c:	d0f5      	beq.n	800e26a <__any_on+0x2a>
 800e27e:	2001      	movs	r0, #1
 800e280:	e7f6      	b.n	800e270 <__any_on+0x30>

0800e282 <_calloc_r>:
 800e282:	b513      	push	{r0, r1, r4, lr}
 800e284:	434a      	muls	r2, r1
 800e286:	4611      	mov	r1, r2
 800e288:	9201      	str	r2, [sp, #4]
 800e28a:	f7fc fab3 	bl	800a7f4 <_malloc_r>
 800e28e:	4604      	mov	r4, r0
 800e290:	b118      	cbz	r0, 800e29a <_calloc_r+0x18>
 800e292:	9a01      	ldr	r2, [sp, #4]
 800e294:	2100      	movs	r1, #0
 800e296:	f7fc fa55 	bl	800a744 <memset>
 800e29a:	4620      	mov	r0, r4
 800e29c:	b002      	add	sp, #8
 800e29e:	bd10      	pop	{r4, pc}

0800e2a0 <__ssputs_r>:
 800e2a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2a4:	688e      	ldr	r6, [r1, #8]
 800e2a6:	429e      	cmp	r6, r3
 800e2a8:	4682      	mov	sl, r0
 800e2aa:	460c      	mov	r4, r1
 800e2ac:	4690      	mov	r8, r2
 800e2ae:	461f      	mov	r7, r3
 800e2b0:	d838      	bhi.n	800e324 <__ssputs_r+0x84>
 800e2b2:	898a      	ldrh	r2, [r1, #12]
 800e2b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e2b8:	d032      	beq.n	800e320 <__ssputs_r+0x80>
 800e2ba:	6825      	ldr	r5, [r4, #0]
 800e2bc:	6909      	ldr	r1, [r1, #16]
 800e2be:	eba5 0901 	sub.w	r9, r5, r1
 800e2c2:	6965      	ldr	r5, [r4, #20]
 800e2c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e2c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e2cc:	3301      	adds	r3, #1
 800e2ce:	444b      	add	r3, r9
 800e2d0:	106d      	asrs	r5, r5, #1
 800e2d2:	429d      	cmp	r5, r3
 800e2d4:	bf38      	it	cc
 800e2d6:	461d      	movcc	r5, r3
 800e2d8:	0553      	lsls	r3, r2, #21
 800e2da:	d531      	bpl.n	800e340 <__ssputs_r+0xa0>
 800e2dc:	4629      	mov	r1, r5
 800e2de:	f7fc fa89 	bl	800a7f4 <_malloc_r>
 800e2e2:	4606      	mov	r6, r0
 800e2e4:	b950      	cbnz	r0, 800e2fc <__ssputs_r+0x5c>
 800e2e6:	230c      	movs	r3, #12
 800e2e8:	f8ca 3000 	str.w	r3, [sl]
 800e2ec:	89a3      	ldrh	r3, [r4, #12]
 800e2ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2f2:	81a3      	strh	r3, [r4, #12]
 800e2f4:	f04f 30ff 	mov.w	r0, #4294967295
 800e2f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2fc:	6921      	ldr	r1, [r4, #16]
 800e2fe:	464a      	mov	r2, r9
 800e300:	f7ff faea 	bl	800d8d8 <memcpy>
 800e304:	89a3      	ldrh	r3, [r4, #12]
 800e306:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e30a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e30e:	81a3      	strh	r3, [r4, #12]
 800e310:	6126      	str	r6, [r4, #16]
 800e312:	6165      	str	r5, [r4, #20]
 800e314:	444e      	add	r6, r9
 800e316:	eba5 0509 	sub.w	r5, r5, r9
 800e31a:	6026      	str	r6, [r4, #0]
 800e31c:	60a5      	str	r5, [r4, #8]
 800e31e:	463e      	mov	r6, r7
 800e320:	42be      	cmp	r6, r7
 800e322:	d900      	bls.n	800e326 <__ssputs_r+0x86>
 800e324:	463e      	mov	r6, r7
 800e326:	4632      	mov	r2, r6
 800e328:	6820      	ldr	r0, [r4, #0]
 800e32a:	4641      	mov	r1, r8
 800e32c:	f000 ff36 	bl	800f19c <memmove>
 800e330:	68a3      	ldr	r3, [r4, #8]
 800e332:	6822      	ldr	r2, [r4, #0]
 800e334:	1b9b      	subs	r3, r3, r6
 800e336:	4432      	add	r2, r6
 800e338:	60a3      	str	r3, [r4, #8]
 800e33a:	6022      	str	r2, [r4, #0]
 800e33c:	2000      	movs	r0, #0
 800e33e:	e7db      	b.n	800e2f8 <__ssputs_r+0x58>
 800e340:	462a      	mov	r2, r5
 800e342:	f000 ff45 	bl	800f1d0 <_realloc_r>
 800e346:	4606      	mov	r6, r0
 800e348:	2800      	cmp	r0, #0
 800e34a:	d1e1      	bne.n	800e310 <__ssputs_r+0x70>
 800e34c:	6921      	ldr	r1, [r4, #16]
 800e34e:	4650      	mov	r0, sl
 800e350:	f7fc fa00 	bl	800a754 <_free_r>
 800e354:	e7c7      	b.n	800e2e6 <__ssputs_r+0x46>
	...

0800e358 <_svfiprintf_r>:
 800e358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e35c:	4698      	mov	r8, r3
 800e35e:	898b      	ldrh	r3, [r1, #12]
 800e360:	061b      	lsls	r3, r3, #24
 800e362:	b09d      	sub	sp, #116	; 0x74
 800e364:	4607      	mov	r7, r0
 800e366:	460d      	mov	r5, r1
 800e368:	4614      	mov	r4, r2
 800e36a:	d50e      	bpl.n	800e38a <_svfiprintf_r+0x32>
 800e36c:	690b      	ldr	r3, [r1, #16]
 800e36e:	b963      	cbnz	r3, 800e38a <_svfiprintf_r+0x32>
 800e370:	2140      	movs	r1, #64	; 0x40
 800e372:	f7fc fa3f 	bl	800a7f4 <_malloc_r>
 800e376:	6028      	str	r0, [r5, #0]
 800e378:	6128      	str	r0, [r5, #16]
 800e37a:	b920      	cbnz	r0, 800e386 <_svfiprintf_r+0x2e>
 800e37c:	230c      	movs	r3, #12
 800e37e:	603b      	str	r3, [r7, #0]
 800e380:	f04f 30ff 	mov.w	r0, #4294967295
 800e384:	e0d1      	b.n	800e52a <_svfiprintf_r+0x1d2>
 800e386:	2340      	movs	r3, #64	; 0x40
 800e388:	616b      	str	r3, [r5, #20]
 800e38a:	2300      	movs	r3, #0
 800e38c:	9309      	str	r3, [sp, #36]	; 0x24
 800e38e:	2320      	movs	r3, #32
 800e390:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e394:	f8cd 800c 	str.w	r8, [sp, #12]
 800e398:	2330      	movs	r3, #48	; 0x30
 800e39a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e544 <_svfiprintf_r+0x1ec>
 800e39e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e3a2:	f04f 0901 	mov.w	r9, #1
 800e3a6:	4623      	mov	r3, r4
 800e3a8:	469a      	mov	sl, r3
 800e3aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e3ae:	b10a      	cbz	r2, 800e3b4 <_svfiprintf_r+0x5c>
 800e3b0:	2a25      	cmp	r2, #37	; 0x25
 800e3b2:	d1f9      	bne.n	800e3a8 <_svfiprintf_r+0x50>
 800e3b4:	ebba 0b04 	subs.w	fp, sl, r4
 800e3b8:	d00b      	beq.n	800e3d2 <_svfiprintf_r+0x7a>
 800e3ba:	465b      	mov	r3, fp
 800e3bc:	4622      	mov	r2, r4
 800e3be:	4629      	mov	r1, r5
 800e3c0:	4638      	mov	r0, r7
 800e3c2:	f7ff ff6d 	bl	800e2a0 <__ssputs_r>
 800e3c6:	3001      	adds	r0, #1
 800e3c8:	f000 80aa 	beq.w	800e520 <_svfiprintf_r+0x1c8>
 800e3cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e3ce:	445a      	add	r2, fp
 800e3d0:	9209      	str	r2, [sp, #36]	; 0x24
 800e3d2:	f89a 3000 	ldrb.w	r3, [sl]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	f000 80a2 	beq.w	800e520 <_svfiprintf_r+0x1c8>
 800e3dc:	2300      	movs	r3, #0
 800e3de:	f04f 32ff 	mov.w	r2, #4294967295
 800e3e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e3e6:	f10a 0a01 	add.w	sl, sl, #1
 800e3ea:	9304      	str	r3, [sp, #16]
 800e3ec:	9307      	str	r3, [sp, #28]
 800e3ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e3f2:	931a      	str	r3, [sp, #104]	; 0x68
 800e3f4:	4654      	mov	r4, sl
 800e3f6:	2205      	movs	r2, #5
 800e3f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3fc:	4851      	ldr	r0, [pc, #324]	; (800e544 <_svfiprintf_r+0x1ec>)
 800e3fe:	f7f1 fef7 	bl	80001f0 <memchr>
 800e402:	9a04      	ldr	r2, [sp, #16]
 800e404:	b9d8      	cbnz	r0, 800e43e <_svfiprintf_r+0xe6>
 800e406:	06d0      	lsls	r0, r2, #27
 800e408:	bf44      	itt	mi
 800e40a:	2320      	movmi	r3, #32
 800e40c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e410:	0711      	lsls	r1, r2, #28
 800e412:	bf44      	itt	mi
 800e414:	232b      	movmi	r3, #43	; 0x2b
 800e416:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e41a:	f89a 3000 	ldrb.w	r3, [sl]
 800e41e:	2b2a      	cmp	r3, #42	; 0x2a
 800e420:	d015      	beq.n	800e44e <_svfiprintf_r+0xf6>
 800e422:	9a07      	ldr	r2, [sp, #28]
 800e424:	4654      	mov	r4, sl
 800e426:	2000      	movs	r0, #0
 800e428:	f04f 0c0a 	mov.w	ip, #10
 800e42c:	4621      	mov	r1, r4
 800e42e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e432:	3b30      	subs	r3, #48	; 0x30
 800e434:	2b09      	cmp	r3, #9
 800e436:	d94e      	bls.n	800e4d6 <_svfiprintf_r+0x17e>
 800e438:	b1b0      	cbz	r0, 800e468 <_svfiprintf_r+0x110>
 800e43a:	9207      	str	r2, [sp, #28]
 800e43c:	e014      	b.n	800e468 <_svfiprintf_r+0x110>
 800e43e:	eba0 0308 	sub.w	r3, r0, r8
 800e442:	fa09 f303 	lsl.w	r3, r9, r3
 800e446:	4313      	orrs	r3, r2
 800e448:	9304      	str	r3, [sp, #16]
 800e44a:	46a2      	mov	sl, r4
 800e44c:	e7d2      	b.n	800e3f4 <_svfiprintf_r+0x9c>
 800e44e:	9b03      	ldr	r3, [sp, #12]
 800e450:	1d19      	adds	r1, r3, #4
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	9103      	str	r1, [sp, #12]
 800e456:	2b00      	cmp	r3, #0
 800e458:	bfbb      	ittet	lt
 800e45a:	425b      	neglt	r3, r3
 800e45c:	f042 0202 	orrlt.w	r2, r2, #2
 800e460:	9307      	strge	r3, [sp, #28]
 800e462:	9307      	strlt	r3, [sp, #28]
 800e464:	bfb8      	it	lt
 800e466:	9204      	strlt	r2, [sp, #16]
 800e468:	7823      	ldrb	r3, [r4, #0]
 800e46a:	2b2e      	cmp	r3, #46	; 0x2e
 800e46c:	d10c      	bne.n	800e488 <_svfiprintf_r+0x130>
 800e46e:	7863      	ldrb	r3, [r4, #1]
 800e470:	2b2a      	cmp	r3, #42	; 0x2a
 800e472:	d135      	bne.n	800e4e0 <_svfiprintf_r+0x188>
 800e474:	9b03      	ldr	r3, [sp, #12]
 800e476:	1d1a      	adds	r2, r3, #4
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	9203      	str	r2, [sp, #12]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	bfb8      	it	lt
 800e480:	f04f 33ff 	movlt.w	r3, #4294967295
 800e484:	3402      	adds	r4, #2
 800e486:	9305      	str	r3, [sp, #20]
 800e488:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e554 <_svfiprintf_r+0x1fc>
 800e48c:	7821      	ldrb	r1, [r4, #0]
 800e48e:	2203      	movs	r2, #3
 800e490:	4650      	mov	r0, sl
 800e492:	f7f1 fead 	bl	80001f0 <memchr>
 800e496:	b140      	cbz	r0, 800e4aa <_svfiprintf_r+0x152>
 800e498:	2340      	movs	r3, #64	; 0x40
 800e49a:	eba0 000a 	sub.w	r0, r0, sl
 800e49e:	fa03 f000 	lsl.w	r0, r3, r0
 800e4a2:	9b04      	ldr	r3, [sp, #16]
 800e4a4:	4303      	orrs	r3, r0
 800e4a6:	3401      	adds	r4, #1
 800e4a8:	9304      	str	r3, [sp, #16]
 800e4aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4ae:	4826      	ldr	r0, [pc, #152]	; (800e548 <_svfiprintf_r+0x1f0>)
 800e4b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e4b4:	2206      	movs	r2, #6
 800e4b6:	f7f1 fe9b 	bl	80001f0 <memchr>
 800e4ba:	2800      	cmp	r0, #0
 800e4bc:	d038      	beq.n	800e530 <_svfiprintf_r+0x1d8>
 800e4be:	4b23      	ldr	r3, [pc, #140]	; (800e54c <_svfiprintf_r+0x1f4>)
 800e4c0:	bb1b      	cbnz	r3, 800e50a <_svfiprintf_r+0x1b2>
 800e4c2:	9b03      	ldr	r3, [sp, #12]
 800e4c4:	3307      	adds	r3, #7
 800e4c6:	f023 0307 	bic.w	r3, r3, #7
 800e4ca:	3308      	adds	r3, #8
 800e4cc:	9303      	str	r3, [sp, #12]
 800e4ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4d0:	4433      	add	r3, r6
 800e4d2:	9309      	str	r3, [sp, #36]	; 0x24
 800e4d4:	e767      	b.n	800e3a6 <_svfiprintf_r+0x4e>
 800e4d6:	fb0c 3202 	mla	r2, ip, r2, r3
 800e4da:	460c      	mov	r4, r1
 800e4dc:	2001      	movs	r0, #1
 800e4de:	e7a5      	b.n	800e42c <_svfiprintf_r+0xd4>
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	3401      	adds	r4, #1
 800e4e4:	9305      	str	r3, [sp, #20]
 800e4e6:	4619      	mov	r1, r3
 800e4e8:	f04f 0c0a 	mov.w	ip, #10
 800e4ec:	4620      	mov	r0, r4
 800e4ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e4f2:	3a30      	subs	r2, #48	; 0x30
 800e4f4:	2a09      	cmp	r2, #9
 800e4f6:	d903      	bls.n	800e500 <_svfiprintf_r+0x1a8>
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d0c5      	beq.n	800e488 <_svfiprintf_r+0x130>
 800e4fc:	9105      	str	r1, [sp, #20]
 800e4fe:	e7c3      	b.n	800e488 <_svfiprintf_r+0x130>
 800e500:	fb0c 2101 	mla	r1, ip, r1, r2
 800e504:	4604      	mov	r4, r0
 800e506:	2301      	movs	r3, #1
 800e508:	e7f0      	b.n	800e4ec <_svfiprintf_r+0x194>
 800e50a:	ab03      	add	r3, sp, #12
 800e50c:	9300      	str	r3, [sp, #0]
 800e50e:	462a      	mov	r2, r5
 800e510:	4b0f      	ldr	r3, [pc, #60]	; (800e550 <_svfiprintf_r+0x1f8>)
 800e512:	a904      	add	r1, sp, #16
 800e514:	4638      	mov	r0, r7
 800e516:	f7fc fa67 	bl	800a9e8 <_printf_float>
 800e51a:	1c42      	adds	r2, r0, #1
 800e51c:	4606      	mov	r6, r0
 800e51e:	d1d6      	bne.n	800e4ce <_svfiprintf_r+0x176>
 800e520:	89ab      	ldrh	r3, [r5, #12]
 800e522:	065b      	lsls	r3, r3, #25
 800e524:	f53f af2c 	bmi.w	800e380 <_svfiprintf_r+0x28>
 800e528:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e52a:	b01d      	add	sp, #116	; 0x74
 800e52c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e530:	ab03      	add	r3, sp, #12
 800e532:	9300      	str	r3, [sp, #0]
 800e534:	462a      	mov	r2, r5
 800e536:	4b06      	ldr	r3, [pc, #24]	; (800e550 <_svfiprintf_r+0x1f8>)
 800e538:	a904      	add	r1, sp, #16
 800e53a:	4638      	mov	r0, r7
 800e53c:	f7fc fcf8 	bl	800af30 <_printf_i>
 800e540:	e7eb      	b.n	800e51a <_svfiprintf_r+0x1c2>
 800e542:	bf00      	nop
 800e544:	080121ac 	.word	0x080121ac
 800e548:	080121b6 	.word	0x080121b6
 800e54c:	0800a9e9 	.word	0x0800a9e9
 800e550:	0800e2a1 	.word	0x0800e2a1
 800e554:	080121b2 	.word	0x080121b2

0800e558 <_sungetc_r>:
 800e558:	b538      	push	{r3, r4, r5, lr}
 800e55a:	1c4b      	adds	r3, r1, #1
 800e55c:	4614      	mov	r4, r2
 800e55e:	d103      	bne.n	800e568 <_sungetc_r+0x10>
 800e560:	f04f 35ff 	mov.w	r5, #4294967295
 800e564:	4628      	mov	r0, r5
 800e566:	bd38      	pop	{r3, r4, r5, pc}
 800e568:	8993      	ldrh	r3, [r2, #12]
 800e56a:	f023 0320 	bic.w	r3, r3, #32
 800e56e:	8193      	strh	r3, [r2, #12]
 800e570:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e572:	6852      	ldr	r2, [r2, #4]
 800e574:	b2cd      	uxtb	r5, r1
 800e576:	b18b      	cbz	r3, 800e59c <_sungetc_r+0x44>
 800e578:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e57a:	4293      	cmp	r3, r2
 800e57c:	dd08      	ble.n	800e590 <_sungetc_r+0x38>
 800e57e:	6823      	ldr	r3, [r4, #0]
 800e580:	1e5a      	subs	r2, r3, #1
 800e582:	6022      	str	r2, [r4, #0]
 800e584:	f803 5c01 	strb.w	r5, [r3, #-1]
 800e588:	6863      	ldr	r3, [r4, #4]
 800e58a:	3301      	adds	r3, #1
 800e58c:	6063      	str	r3, [r4, #4]
 800e58e:	e7e9      	b.n	800e564 <_sungetc_r+0xc>
 800e590:	4621      	mov	r1, r4
 800e592:	f000 fbd1 	bl	800ed38 <__submore>
 800e596:	2800      	cmp	r0, #0
 800e598:	d0f1      	beq.n	800e57e <_sungetc_r+0x26>
 800e59a:	e7e1      	b.n	800e560 <_sungetc_r+0x8>
 800e59c:	6921      	ldr	r1, [r4, #16]
 800e59e:	6823      	ldr	r3, [r4, #0]
 800e5a0:	b151      	cbz	r1, 800e5b8 <_sungetc_r+0x60>
 800e5a2:	4299      	cmp	r1, r3
 800e5a4:	d208      	bcs.n	800e5b8 <_sungetc_r+0x60>
 800e5a6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800e5aa:	42a9      	cmp	r1, r5
 800e5ac:	d104      	bne.n	800e5b8 <_sungetc_r+0x60>
 800e5ae:	3b01      	subs	r3, #1
 800e5b0:	3201      	adds	r2, #1
 800e5b2:	6023      	str	r3, [r4, #0]
 800e5b4:	6062      	str	r2, [r4, #4]
 800e5b6:	e7d5      	b.n	800e564 <_sungetc_r+0xc>
 800e5b8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800e5bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e5c0:	6363      	str	r3, [r4, #52]	; 0x34
 800e5c2:	2303      	movs	r3, #3
 800e5c4:	63a3      	str	r3, [r4, #56]	; 0x38
 800e5c6:	4623      	mov	r3, r4
 800e5c8:	f803 5f46 	strb.w	r5, [r3, #70]!
 800e5cc:	6023      	str	r3, [r4, #0]
 800e5ce:	2301      	movs	r3, #1
 800e5d0:	e7dc      	b.n	800e58c <_sungetc_r+0x34>

0800e5d2 <__ssrefill_r>:
 800e5d2:	b510      	push	{r4, lr}
 800e5d4:	460c      	mov	r4, r1
 800e5d6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800e5d8:	b169      	cbz	r1, 800e5f6 <__ssrefill_r+0x24>
 800e5da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e5de:	4299      	cmp	r1, r3
 800e5e0:	d001      	beq.n	800e5e6 <__ssrefill_r+0x14>
 800e5e2:	f7fc f8b7 	bl	800a754 <_free_r>
 800e5e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e5e8:	6063      	str	r3, [r4, #4]
 800e5ea:	2000      	movs	r0, #0
 800e5ec:	6360      	str	r0, [r4, #52]	; 0x34
 800e5ee:	b113      	cbz	r3, 800e5f6 <__ssrefill_r+0x24>
 800e5f0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e5f2:	6023      	str	r3, [r4, #0]
 800e5f4:	bd10      	pop	{r4, pc}
 800e5f6:	6923      	ldr	r3, [r4, #16]
 800e5f8:	6023      	str	r3, [r4, #0]
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	6063      	str	r3, [r4, #4]
 800e5fe:	89a3      	ldrh	r3, [r4, #12]
 800e600:	f043 0320 	orr.w	r3, r3, #32
 800e604:	81a3      	strh	r3, [r4, #12]
 800e606:	f04f 30ff 	mov.w	r0, #4294967295
 800e60a:	e7f3      	b.n	800e5f4 <__ssrefill_r+0x22>

0800e60c <__ssvfiscanf_r>:
 800e60c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e610:	460c      	mov	r4, r1
 800e612:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800e616:	2100      	movs	r1, #0
 800e618:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800e61c:	49b2      	ldr	r1, [pc, #712]	; (800e8e8 <__ssvfiscanf_r+0x2dc>)
 800e61e:	91a0      	str	r1, [sp, #640]	; 0x280
 800e620:	f10d 0804 	add.w	r8, sp, #4
 800e624:	49b1      	ldr	r1, [pc, #708]	; (800e8ec <__ssvfiscanf_r+0x2e0>)
 800e626:	4fb2      	ldr	r7, [pc, #712]	; (800e8f0 <__ssvfiscanf_r+0x2e4>)
 800e628:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 800e8f4 <__ssvfiscanf_r+0x2e8>
 800e62c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800e630:	4606      	mov	r6, r0
 800e632:	91a1      	str	r1, [sp, #644]	; 0x284
 800e634:	9300      	str	r3, [sp, #0]
 800e636:	f892 a000 	ldrb.w	sl, [r2]
 800e63a:	f1ba 0f00 	cmp.w	sl, #0
 800e63e:	f000 8151 	beq.w	800e8e4 <__ssvfiscanf_r+0x2d8>
 800e642:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800e646:	f013 0308 	ands.w	r3, r3, #8
 800e64a:	f102 0501 	add.w	r5, r2, #1
 800e64e:	d019      	beq.n	800e684 <__ssvfiscanf_r+0x78>
 800e650:	6863      	ldr	r3, [r4, #4]
 800e652:	2b00      	cmp	r3, #0
 800e654:	dd0f      	ble.n	800e676 <__ssvfiscanf_r+0x6a>
 800e656:	6823      	ldr	r3, [r4, #0]
 800e658:	781a      	ldrb	r2, [r3, #0]
 800e65a:	5cba      	ldrb	r2, [r7, r2]
 800e65c:	0712      	lsls	r2, r2, #28
 800e65e:	d401      	bmi.n	800e664 <__ssvfiscanf_r+0x58>
 800e660:	462a      	mov	r2, r5
 800e662:	e7e8      	b.n	800e636 <__ssvfiscanf_r+0x2a>
 800e664:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e666:	3201      	adds	r2, #1
 800e668:	9245      	str	r2, [sp, #276]	; 0x114
 800e66a:	6862      	ldr	r2, [r4, #4]
 800e66c:	3301      	adds	r3, #1
 800e66e:	3a01      	subs	r2, #1
 800e670:	6062      	str	r2, [r4, #4]
 800e672:	6023      	str	r3, [r4, #0]
 800e674:	e7ec      	b.n	800e650 <__ssvfiscanf_r+0x44>
 800e676:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e678:	4621      	mov	r1, r4
 800e67a:	4630      	mov	r0, r6
 800e67c:	4798      	blx	r3
 800e67e:	2800      	cmp	r0, #0
 800e680:	d0e9      	beq.n	800e656 <__ssvfiscanf_r+0x4a>
 800e682:	e7ed      	b.n	800e660 <__ssvfiscanf_r+0x54>
 800e684:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800e688:	f040 8083 	bne.w	800e792 <__ssvfiscanf_r+0x186>
 800e68c:	9341      	str	r3, [sp, #260]	; 0x104
 800e68e:	9343      	str	r3, [sp, #268]	; 0x10c
 800e690:	7853      	ldrb	r3, [r2, #1]
 800e692:	2b2a      	cmp	r3, #42	; 0x2a
 800e694:	bf02      	ittt	eq
 800e696:	2310      	moveq	r3, #16
 800e698:	1c95      	addeq	r5, r2, #2
 800e69a:	9341      	streq	r3, [sp, #260]	; 0x104
 800e69c:	220a      	movs	r2, #10
 800e69e:	46ab      	mov	fp, r5
 800e6a0:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800e6a4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800e6a8:	2b09      	cmp	r3, #9
 800e6aa:	d91d      	bls.n	800e6e8 <__ssvfiscanf_r+0xdc>
 800e6ac:	4891      	ldr	r0, [pc, #580]	; (800e8f4 <__ssvfiscanf_r+0x2e8>)
 800e6ae:	2203      	movs	r2, #3
 800e6b0:	f7f1 fd9e 	bl	80001f0 <memchr>
 800e6b4:	b140      	cbz	r0, 800e6c8 <__ssvfiscanf_r+0xbc>
 800e6b6:	2301      	movs	r3, #1
 800e6b8:	eba0 0009 	sub.w	r0, r0, r9
 800e6bc:	fa03 f000 	lsl.w	r0, r3, r0
 800e6c0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e6c2:	4318      	orrs	r0, r3
 800e6c4:	9041      	str	r0, [sp, #260]	; 0x104
 800e6c6:	465d      	mov	r5, fp
 800e6c8:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e6cc:	2b78      	cmp	r3, #120	; 0x78
 800e6ce:	d806      	bhi.n	800e6de <__ssvfiscanf_r+0xd2>
 800e6d0:	2b57      	cmp	r3, #87	; 0x57
 800e6d2:	d810      	bhi.n	800e6f6 <__ssvfiscanf_r+0xea>
 800e6d4:	2b25      	cmp	r3, #37	; 0x25
 800e6d6:	d05c      	beq.n	800e792 <__ssvfiscanf_r+0x186>
 800e6d8:	d856      	bhi.n	800e788 <__ssvfiscanf_r+0x17c>
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d074      	beq.n	800e7c8 <__ssvfiscanf_r+0x1bc>
 800e6de:	2303      	movs	r3, #3
 800e6e0:	9347      	str	r3, [sp, #284]	; 0x11c
 800e6e2:	230a      	movs	r3, #10
 800e6e4:	9342      	str	r3, [sp, #264]	; 0x108
 800e6e6:	e081      	b.n	800e7ec <__ssvfiscanf_r+0x1e0>
 800e6e8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800e6ea:	fb02 1303 	mla	r3, r2, r3, r1
 800e6ee:	3b30      	subs	r3, #48	; 0x30
 800e6f0:	9343      	str	r3, [sp, #268]	; 0x10c
 800e6f2:	465d      	mov	r5, fp
 800e6f4:	e7d3      	b.n	800e69e <__ssvfiscanf_r+0x92>
 800e6f6:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800e6fa:	2a20      	cmp	r2, #32
 800e6fc:	d8ef      	bhi.n	800e6de <__ssvfiscanf_r+0xd2>
 800e6fe:	a101      	add	r1, pc, #4	; (adr r1, 800e704 <__ssvfiscanf_r+0xf8>)
 800e700:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e704:	0800e7d7 	.word	0x0800e7d7
 800e708:	0800e6df 	.word	0x0800e6df
 800e70c:	0800e6df 	.word	0x0800e6df
 800e710:	0800e835 	.word	0x0800e835
 800e714:	0800e6df 	.word	0x0800e6df
 800e718:	0800e6df 	.word	0x0800e6df
 800e71c:	0800e6df 	.word	0x0800e6df
 800e720:	0800e6df 	.word	0x0800e6df
 800e724:	0800e6df 	.word	0x0800e6df
 800e728:	0800e6df 	.word	0x0800e6df
 800e72c:	0800e6df 	.word	0x0800e6df
 800e730:	0800e84b 	.word	0x0800e84b
 800e734:	0800e821 	.word	0x0800e821
 800e738:	0800e78f 	.word	0x0800e78f
 800e73c:	0800e78f 	.word	0x0800e78f
 800e740:	0800e78f 	.word	0x0800e78f
 800e744:	0800e6df 	.word	0x0800e6df
 800e748:	0800e825 	.word	0x0800e825
 800e74c:	0800e6df 	.word	0x0800e6df
 800e750:	0800e6df 	.word	0x0800e6df
 800e754:	0800e6df 	.word	0x0800e6df
 800e758:	0800e6df 	.word	0x0800e6df
 800e75c:	0800e85b 	.word	0x0800e85b
 800e760:	0800e82d 	.word	0x0800e82d
 800e764:	0800e7cf 	.word	0x0800e7cf
 800e768:	0800e6df 	.word	0x0800e6df
 800e76c:	0800e6df 	.word	0x0800e6df
 800e770:	0800e857 	.word	0x0800e857
 800e774:	0800e6df 	.word	0x0800e6df
 800e778:	0800e821 	.word	0x0800e821
 800e77c:	0800e6df 	.word	0x0800e6df
 800e780:	0800e6df 	.word	0x0800e6df
 800e784:	0800e7d7 	.word	0x0800e7d7
 800e788:	3b45      	subs	r3, #69	; 0x45
 800e78a:	2b02      	cmp	r3, #2
 800e78c:	d8a7      	bhi.n	800e6de <__ssvfiscanf_r+0xd2>
 800e78e:	2305      	movs	r3, #5
 800e790:	e02b      	b.n	800e7ea <__ssvfiscanf_r+0x1de>
 800e792:	6863      	ldr	r3, [r4, #4]
 800e794:	2b00      	cmp	r3, #0
 800e796:	dd0d      	ble.n	800e7b4 <__ssvfiscanf_r+0x1a8>
 800e798:	6823      	ldr	r3, [r4, #0]
 800e79a:	781a      	ldrb	r2, [r3, #0]
 800e79c:	4552      	cmp	r2, sl
 800e79e:	f040 80a1 	bne.w	800e8e4 <__ssvfiscanf_r+0x2d8>
 800e7a2:	3301      	adds	r3, #1
 800e7a4:	6862      	ldr	r2, [r4, #4]
 800e7a6:	6023      	str	r3, [r4, #0]
 800e7a8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800e7aa:	3a01      	subs	r2, #1
 800e7ac:	3301      	adds	r3, #1
 800e7ae:	6062      	str	r2, [r4, #4]
 800e7b0:	9345      	str	r3, [sp, #276]	; 0x114
 800e7b2:	e755      	b.n	800e660 <__ssvfiscanf_r+0x54>
 800e7b4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e7b6:	4621      	mov	r1, r4
 800e7b8:	4630      	mov	r0, r6
 800e7ba:	4798      	blx	r3
 800e7bc:	2800      	cmp	r0, #0
 800e7be:	d0eb      	beq.n	800e798 <__ssvfiscanf_r+0x18c>
 800e7c0:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e7c2:	2800      	cmp	r0, #0
 800e7c4:	f040 8084 	bne.w	800e8d0 <__ssvfiscanf_r+0x2c4>
 800e7c8:	f04f 30ff 	mov.w	r0, #4294967295
 800e7cc:	e086      	b.n	800e8dc <__ssvfiscanf_r+0x2d0>
 800e7ce:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e7d0:	f042 0220 	orr.w	r2, r2, #32
 800e7d4:	9241      	str	r2, [sp, #260]	; 0x104
 800e7d6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e7d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e7dc:	9241      	str	r2, [sp, #260]	; 0x104
 800e7de:	2210      	movs	r2, #16
 800e7e0:	2b6f      	cmp	r3, #111	; 0x6f
 800e7e2:	9242      	str	r2, [sp, #264]	; 0x108
 800e7e4:	bf34      	ite	cc
 800e7e6:	2303      	movcc	r3, #3
 800e7e8:	2304      	movcs	r3, #4
 800e7ea:	9347      	str	r3, [sp, #284]	; 0x11c
 800e7ec:	6863      	ldr	r3, [r4, #4]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	dd41      	ble.n	800e876 <__ssvfiscanf_r+0x26a>
 800e7f2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e7f4:	0659      	lsls	r1, r3, #25
 800e7f6:	d404      	bmi.n	800e802 <__ssvfiscanf_r+0x1f6>
 800e7f8:	6823      	ldr	r3, [r4, #0]
 800e7fa:	781a      	ldrb	r2, [r3, #0]
 800e7fc:	5cba      	ldrb	r2, [r7, r2]
 800e7fe:	0712      	lsls	r2, r2, #28
 800e800:	d440      	bmi.n	800e884 <__ssvfiscanf_r+0x278>
 800e802:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800e804:	2b02      	cmp	r3, #2
 800e806:	dc4f      	bgt.n	800e8a8 <__ssvfiscanf_r+0x29c>
 800e808:	466b      	mov	r3, sp
 800e80a:	4622      	mov	r2, r4
 800e80c:	a941      	add	r1, sp, #260	; 0x104
 800e80e:	4630      	mov	r0, r6
 800e810:	f000 f874 	bl	800e8fc <_scanf_chars>
 800e814:	2801      	cmp	r0, #1
 800e816:	d065      	beq.n	800e8e4 <__ssvfiscanf_r+0x2d8>
 800e818:	2802      	cmp	r0, #2
 800e81a:	f47f af21 	bne.w	800e660 <__ssvfiscanf_r+0x54>
 800e81e:	e7cf      	b.n	800e7c0 <__ssvfiscanf_r+0x1b4>
 800e820:	220a      	movs	r2, #10
 800e822:	e7dd      	b.n	800e7e0 <__ssvfiscanf_r+0x1d4>
 800e824:	2300      	movs	r3, #0
 800e826:	9342      	str	r3, [sp, #264]	; 0x108
 800e828:	2303      	movs	r3, #3
 800e82a:	e7de      	b.n	800e7ea <__ssvfiscanf_r+0x1de>
 800e82c:	2308      	movs	r3, #8
 800e82e:	9342      	str	r3, [sp, #264]	; 0x108
 800e830:	2304      	movs	r3, #4
 800e832:	e7da      	b.n	800e7ea <__ssvfiscanf_r+0x1de>
 800e834:	4629      	mov	r1, r5
 800e836:	4640      	mov	r0, r8
 800e838:	f000 f9c6 	bl	800ebc8 <__sccl>
 800e83c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e83e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e842:	9341      	str	r3, [sp, #260]	; 0x104
 800e844:	4605      	mov	r5, r0
 800e846:	2301      	movs	r3, #1
 800e848:	e7cf      	b.n	800e7ea <__ssvfiscanf_r+0x1de>
 800e84a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e84c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e850:	9341      	str	r3, [sp, #260]	; 0x104
 800e852:	2300      	movs	r3, #0
 800e854:	e7c9      	b.n	800e7ea <__ssvfiscanf_r+0x1de>
 800e856:	2302      	movs	r3, #2
 800e858:	e7c7      	b.n	800e7ea <__ssvfiscanf_r+0x1de>
 800e85a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800e85c:	06c3      	lsls	r3, r0, #27
 800e85e:	f53f aeff 	bmi.w	800e660 <__ssvfiscanf_r+0x54>
 800e862:	9b00      	ldr	r3, [sp, #0]
 800e864:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e866:	1d19      	adds	r1, r3, #4
 800e868:	9100      	str	r1, [sp, #0]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	07c0      	lsls	r0, r0, #31
 800e86e:	bf4c      	ite	mi
 800e870:	801a      	strhmi	r2, [r3, #0]
 800e872:	601a      	strpl	r2, [r3, #0]
 800e874:	e6f4      	b.n	800e660 <__ssvfiscanf_r+0x54>
 800e876:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e878:	4621      	mov	r1, r4
 800e87a:	4630      	mov	r0, r6
 800e87c:	4798      	blx	r3
 800e87e:	2800      	cmp	r0, #0
 800e880:	d0b7      	beq.n	800e7f2 <__ssvfiscanf_r+0x1e6>
 800e882:	e79d      	b.n	800e7c0 <__ssvfiscanf_r+0x1b4>
 800e884:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e886:	3201      	adds	r2, #1
 800e888:	9245      	str	r2, [sp, #276]	; 0x114
 800e88a:	6862      	ldr	r2, [r4, #4]
 800e88c:	3a01      	subs	r2, #1
 800e88e:	2a00      	cmp	r2, #0
 800e890:	6062      	str	r2, [r4, #4]
 800e892:	dd02      	ble.n	800e89a <__ssvfiscanf_r+0x28e>
 800e894:	3301      	adds	r3, #1
 800e896:	6023      	str	r3, [r4, #0]
 800e898:	e7ae      	b.n	800e7f8 <__ssvfiscanf_r+0x1ec>
 800e89a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e89c:	4621      	mov	r1, r4
 800e89e:	4630      	mov	r0, r6
 800e8a0:	4798      	blx	r3
 800e8a2:	2800      	cmp	r0, #0
 800e8a4:	d0a8      	beq.n	800e7f8 <__ssvfiscanf_r+0x1ec>
 800e8a6:	e78b      	b.n	800e7c0 <__ssvfiscanf_r+0x1b4>
 800e8a8:	2b04      	cmp	r3, #4
 800e8aa:	dc06      	bgt.n	800e8ba <__ssvfiscanf_r+0x2ae>
 800e8ac:	466b      	mov	r3, sp
 800e8ae:	4622      	mov	r2, r4
 800e8b0:	a941      	add	r1, sp, #260	; 0x104
 800e8b2:	4630      	mov	r0, r6
 800e8b4:	f000 f87a 	bl	800e9ac <_scanf_i>
 800e8b8:	e7ac      	b.n	800e814 <__ssvfiscanf_r+0x208>
 800e8ba:	4b0f      	ldr	r3, [pc, #60]	; (800e8f8 <__ssvfiscanf_r+0x2ec>)
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	f43f aecf 	beq.w	800e660 <__ssvfiscanf_r+0x54>
 800e8c2:	466b      	mov	r3, sp
 800e8c4:	4622      	mov	r2, r4
 800e8c6:	a941      	add	r1, sp, #260	; 0x104
 800e8c8:	4630      	mov	r0, r6
 800e8ca:	f7fc fc57 	bl	800b17c <_scanf_float>
 800e8ce:	e7a1      	b.n	800e814 <__ssvfiscanf_r+0x208>
 800e8d0:	89a3      	ldrh	r3, [r4, #12]
 800e8d2:	f013 0f40 	tst.w	r3, #64	; 0x40
 800e8d6:	bf18      	it	ne
 800e8d8:	f04f 30ff 	movne.w	r0, #4294967295
 800e8dc:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800e8e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8e4:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e8e6:	e7f9      	b.n	800e8dc <__ssvfiscanf_r+0x2d0>
 800e8e8:	0800e559 	.word	0x0800e559
 800e8ec:	0800e5d3 	.word	0x0800e5d3
 800e8f0:	08011e39 	.word	0x08011e39
 800e8f4:	080121b2 	.word	0x080121b2
 800e8f8:	0800b17d 	.word	0x0800b17d

0800e8fc <_scanf_chars>:
 800e8fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e900:	4615      	mov	r5, r2
 800e902:	688a      	ldr	r2, [r1, #8]
 800e904:	4680      	mov	r8, r0
 800e906:	460c      	mov	r4, r1
 800e908:	b932      	cbnz	r2, 800e918 <_scanf_chars+0x1c>
 800e90a:	698a      	ldr	r2, [r1, #24]
 800e90c:	2a00      	cmp	r2, #0
 800e90e:	bf0c      	ite	eq
 800e910:	2201      	moveq	r2, #1
 800e912:	f04f 32ff 	movne.w	r2, #4294967295
 800e916:	608a      	str	r2, [r1, #8]
 800e918:	6822      	ldr	r2, [r4, #0]
 800e91a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800e9a8 <_scanf_chars+0xac>
 800e91e:	06d1      	lsls	r1, r2, #27
 800e920:	bf5f      	itttt	pl
 800e922:	681a      	ldrpl	r2, [r3, #0]
 800e924:	1d11      	addpl	r1, r2, #4
 800e926:	6019      	strpl	r1, [r3, #0]
 800e928:	6816      	ldrpl	r6, [r2, #0]
 800e92a:	2700      	movs	r7, #0
 800e92c:	69a0      	ldr	r0, [r4, #24]
 800e92e:	b188      	cbz	r0, 800e954 <_scanf_chars+0x58>
 800e930:	2801      	cmp	r0, #1
 800e932:	d107      	bne.n	800e944 <_scanf_chars+0x48>
 800e934:	682b      	ldr	r3, [r5, #0]
 800e936:	781a      	ldrb	r2, [r3, #0]
 800e938:	6963      	ldr	r3, [r4, #20]
 800e93a:	5c9b      	ldrb	r3, [r3, r2]
 800e93c:	b953      	cbnz	r3, 800e954 <_scanf_chars+0x58>
 800e93e:	bb27      	cbnz	r7, 800e98a <_scanf_chars+0x8e>
 800e940:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e944:	2802      	cmp	r0, #2
 800e946:	d120      	bne.n	800e98a <_scanf_chars+0x8e>
 800e948:	682b      	ldr	r3, [r5, #0]
 800e94a:	781b      	ldrb	r3, [r3, #0]
 800e94c:	f813 3009 	ldrb.w	r3, [r3, r9]
 800e950:	071b      	lsls	r3, r3, #28
 800e952:	d41a      	bmi.n	800e98a <_scanf_chars+0x8e>
 800e954:	6823      	ldr	r3, [r4, #0]
 800e956:	06da      	lsls	r2, r3, #27
 800e958:	bf5e      	ittt	pl
 800e95a:	682b      	ldrpl	r3, [r5, #0]
 800e95c:	781b      	ldrbpl	r3, [r3, #0]
 800e95e:	f806 3b01 	strbpl.w	r3, [r6], #1
 800e962:	682a      	ldr	r2, [r5, #0]
 800e964:	686b      	ldr	r3, [r5, #4]
 800e966:	3201      	adds	r2, #1
 800e968:	602a      	str	r2, [r5, #0]
 800e96a:	68a2      	ldr	r2, [r4, #8]
 800e96c:	3b01      	subs	r3, #1
 800e96e:	3a01      	subs	r2, #1
 800e970:	606b      	str	r3, [r5, #4]
 800e972:	3701      	adds	r7, #1
 800e974:	60a2      	str	r2, [r4, #8]
 800e976:	b142      	cbz	r2, 800e98a <_scanf_chars+0x8e>
 800e978:	2b00      	cmp	r3, #0
 800e97a:	dcd7      	bgt.n	800e92c <_scanf_chars+0x30>
 800e97c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e980:	4629      	mov	r1, r5
 800e982:	4640      	mov	r0, r8
 800e984:	4798      	blx	r3
 800e986:	2800      	cmp	r0, #0
 800e988:	d0d0      	beq.n	800e92c <_scanf_chars+0x30>
 800e98a:	6823      	ldr	r3, [r4, #0]
 800e98c:	f013 0310 	ands.w	r3, r3, #16
 800e990:	d105      	bne.n	800e99e <_scanf_chars+0xa2>
 800e992:	68e2      	ldr	r2, [r4, #12]
 800e994:	3201      	adds	r2, #1
 800e996:	60e2      	str	r2, [r4, #12]
 800e998:	69a2      	ldr	r2, [r4, #24]
 800e99a:	b102      	cbz	r2, 800e99e <_scanf_chars+0xa2>
 800e99c:	7033      	strb	r3, [r6, #0]
 800e99e:	6923      	ldr	r3, [r4, #16]
 800e9a0:	441f      	add	r7, r3
 800e9a2:	6127      	str	r7, [r4, #16]
 800e9a4:	2000      	movs	r0, #0
 800e9a6:	e7cb      	b.n	800e940 <_scanf_chars+0x44>
 800e9a8:	08011e39 	.word	0x08011e39

0800e9ac <_scanf_i>:
 800e9ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9b0:	4698      	mov	r8, r3
 800e9b2:	4b74      	ldr	r3, [pc, #464]	; (800eb84 <_scanf_i+0x1d8>)
 800e9b4:	460c      	mov	r4, r1
 800e9b6:	4682      	mov	sl, r0
 800e9b8:	4616      	mov	r6, r2
 800e9ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e9be:	b087      	sub	sp, #28
 800e9c0:	ab03      	add	r3, sp, #12
 800e9c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e9c6:	4b70      	ldr	r3, [pc, #448]	; (800eb88 <_scanf_i+0x1dc>)
 800e9c8:	69a1      	ldr	r1, [r4, #24]
 800e9ca:	4a70      	ldr	r2, [pc, #448]	; (800eb8c <_scanf_i+0x1e0>)
 800e9cc:	2903      	cmp	r1, #3
 800e9ce:	bf18      	it	ne
 800e9d0:	461a      	movne	r2, r3
 800e9d2:	68a3      	ldr	r3, [r4, #8]
 800e9d4:	9201      	str	r2, [sp, #4]
 800e9d6:	1e5a      	subs	r2, r3, #1
 800e9d8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e9dc:	bf88      	it	hi
 800e9de:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800e9e2:	4627      	mov	r7, r4
 800e9e4:	bf82      	ittt	hi
 800e9e6:	eb03 0905 	addhi.w	r9, r3, r5
 800e9ea:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e9ee:	60a3      	strhi	r3, [r4, #8]
 800e9f0:	f857 3b1c 	ldr.w	r3, [r7], #28
 800e9f4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800e9f8:	bf98      	it	ls
 800e9fa:	f04f 0900 	movls.w	r9, #0
 800e9fe:	6023      	str	r3, [r4, #0]
 800ea00:	463d      	mov	r5, r7
 800ea02:	f04f 0b00 	mov.w	fp, #0
 800ea06:	6831      	ldr	r1, [r6, #0]
 800ea08:	ab03      	add	r3, sp, #12
 800ea0a:	7809      	ldrb	r1, [r1, #0]
 800ea0c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800ea10:	2202      	movs	r2, #2
 800ea12:	f7f1 fbed 	bl	80001f0 <memchr>
 800ea16:	b328      	cbz	r0, 800ea64 <_scanf_i+0xb8>
 800ea18:	f1bb 0f01 	cmp.w	fp, #1
 800ea1c:	d159      	bne.n	800ead2 <_scanf_i+0x126>
 800ea1e:	6862      	ldr	r2, [r4, #4]
 800ea20:	b92a      	cbnz	r2, 800ea2e <_scanf_i+0x82>
 800ea22:	6822      	ldr	r2, [r4, #0]
 800ea24:	2308      	movs	r3, #8
 800ea26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ea2a:	6063      	str	r3, [r4, #4]
 800ea2c:	6022      	str	r2, [r4, #0]
 800ea2e:	6822      	ldr	r2, [r4, #0]
 800ea30:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800ea34:	6022      	str	r2, [r4, #0]
 800ea36:	68a2      	ldr	r2, [r4, #8]
 800ea38:	1e51      	subs	r1, r2, #1
 800ea3a:	60a1      	str	r1, [r4, #8]
 800ea3c:	b192      	cbz	r2, 800ea64 <_scanf_i+0xb8>
 800ea3e:	6832      	ldr	r2, [r6, #0]
 800ea40:	1c51      	adds	r1, r2, #1
 800ea42:	6031      	str	r1, [r6, #0]
 800ea44:	7812      	ldrb	r2, [r2, #0]
 800ea46:	f805 2b01 	strb.w	r2, [r5], #1
 800ea4a:	6872      	ldr	r2, [r6, #4]
 800ea4c:	3a01      	subs	r2, #1
 800ea4e:	2a00      	cmp	r2, #0
 800ea50:	6072      	str	r2, [r6, #4]
 800ea52:	dc07      	bgt.n	800ea64 <_scanf_i+0xb8>
 800ea54:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800ea58:	4631      	mov	r1, r6
 800ea5a:	4650      	mov	r0, sl
 800ea5c:	4790      	blx	r2
 800ea5e:	2800      	cmp	r0, #0
 800ea60:	f040 8085 	bne.w	800eb6e <_scanf_i+0x1c2>
 800ea64:	f10b 0b01 	add.w	fp, fp, #1
 800ea68:	f1bb 0f03 	cmp.w	fp, #3
 800ea6c:	d1cb      	bne.n	800ea06 <_scanf_i+0x5a>
 800ea6e:	6863      	ldr	r3, [r4, #4]
 800ea70:	b90b      	cbnz	r3, 800ea76 <_scanf_i+0xca>
 800ea72:	230a      	movs	r3, #10
 800ea74:	6063      	str	r3, [r4, #4]
 800ea76:	6863      	ldr	r3, [r4, #4]
 800ea78:	4945      	ldr	r1, [pc, #276]	; (800eb90 <_scanf_i+0x1e4>)
 800ea7a:	6960      	ldr	r0, [r4, #20]
 800ea7c:	1ac9      	subs	r1, r1, r3
 800ea7e:	f000 f8a3 	bl	800ebc8 <__sccl>
 800ea82:	f04f 0b00 	mov.w	fp, #0
 800ea86:	68a3      	ldr	r3, [r4, #8]
 800ea88:	6822      	ldr	r2, [r4, #0]
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d03d      	beq.n	800eb0a <_scanf_i+0x15e>
 800ea8e:	6831      	ldr	r1, [r6, #0]
 800ea90:	6960      	ldr	r0, [r4, #20]
 800ea92:	f891 c000 	ldrb.w	ip, [r1]
 800ea96:	f810 000c 	ldrb.w	r0, [r0, ip]
 800ea9a:	2800      	cmp	r0, #0
 800ea9c:	d035      	beq.n	800eb0a <_scanf_i+0x15e>
 800ea9e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800eaa2:	d124      	bne.n	800eaee <_scanf_i+0x142>
 800eaa4:	0510      	lsls	r0, r2, #20
 800eaa6:	d522      	bpl.n	800eaee <_scanf_i+0x142>
 800eaa8:	f10b 0b01 	add.w	fp, fp, #1
 800eaac:	f1b9 0f00 	cmp.w	r9, #0
 800eab0:	d003      	beq.n	800eaba <_scanf_i+0x10e>
 800eab2:	3301      	adds	r3, #1
 800eab4:	f109 39ff 	add.w	r9, r9, #4294967295
 800eab8:	60a3      	str	r3, [r4, #8]
 800eaba:	6873      	ldr	r3, [r6, #4]
 800eabc:	3b01      	subs	r3, #1
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	6073      	str	r3, [r6, #4]
 800eac2:	dd1b      	ble.n	800eafc <_scanf_i+0x150>
 800eac4:	6833      	ldr	r3, [r6, #0]
 800eac6:	3301      	adds	r3, #1
 800eac8:	6033      	str	r3, [r6, #0]
 800eaca:	68a3      	ldr	r3, [r4, #8]
 800eacc:	3b01      	subs	r3, #1
 800eace:	60a3      	str	r3, [r4, #8]
 800ead0:	e7d9      	b.n	800ea86 <_scanf_i+0xda>
 800ead2:	f1bb 0f02 	cmp.w	fp, #2
 800ead6:	d1ae      	bne.n	800ea36 <_scanf_i+0x8a>
 800ead8:	6822      	ldr	r2, [r4, #0]
 800eada:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800eade:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800eae2:	d1bf      	bne.n	800ea64 <_scanf_i+0xb8>
 800eae4:	2310      	movs	r3, #16
 800eae6:	6063      	str	r3, [r4, #4]
 800eae8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800eaec:	e7a2      	b.n	800ea34 <_scanf_i+0x88>
 800eaee:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800eaf2:	6022      	str	r2, [r4, #0]
 800eaf4:	780b      	ldrb	r3, [r1, #0]
 800eaf6:	f805 3b01 	strb.w	r3, [r5], #1
 800eafa:	e7de      	b.n	800eaba <_scanf_i+0x10e>
 800eafc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800eb00:	4631      	mov	r1, r6
 800eb02:	4650      	mov	r0, sl
 800eb04:	4798      	blx	r3
 800eb06:	2800      	cmp	r0, #0
 800eb08:	d0df      	beq.n	800eaca <_scanf_i+0x11e>
 800eb0a:	6823      	ldr	r3, [r4, #0]
 800eb0c:	05d9      	lsls	r1, r3, #23
 800eb0e:	d50d      	bpl.n	800eb2c <_scanf_i+0x180>
 800eb10:	42bd      	cmp	r5, r7
 800eb12:	d909      	bls.n	800eb28 <_scanf_i+0x17c>
 800eb14:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800eb18:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800eb1c:	4632      	mov	r2, r6
 800eb1e:	4650      	mov	r0, sl
 800eb20:	4798      	blx	r3
 800eb22:	f105 39ff 	add.w	r9, r5, #4294967295
 800eb26:	464d      	mov	r5, r9
 800eb28:	42bd      	cmp	r5, r7
 800eb2a:	d028      	beq.n	800eb7e <_scanf_i+0x1d2>
 800eb2c:	6822      	ldr	r2, [r4, #0]
 800eb2e:	f012 0210 	ands.w	r2, r2, #16
 800eb32:	d113      	bne.n	800eb5c <_scanf_i+0x1b0>
 800eb34:	702a      	strb	r2, [r5, #0]
 800eb36:	6863      	ldr	r3, [r4, #4]
 800eb38:	9e01      	ldr	r6, [sp, #4]
 800eb3a:	4639      	mov	r1, r7
 800eb3c:	4650      	mov	r0, sl
 800eb3e:	47b0      	blx	r6
 800eb40:	f8d8 3000 	ldr.w	r3, [r8]
 800eb44:	6821      	ldr	r1, [r4, #0]
 800eb46:	1d1a      	adds	r2, r3, #4
 800eb48:	f8c8 2000 	str.w	r2, [r8]
 800eb4c:	f011 0f20 	tst.w	r1, #32
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	d00f      	beq.n	800eb74 <_scanf_i+0x1c8>
 800eb54:	6018      	str	r0, [r3, #0]
 800eb56:	68e3      	ldr	r3, [r4, #12]
 800eb58:	3301      	adds	r3, #1
 800eb5a:	60e3      	str	r3, [r4, #12]
 800eb5c:	1bed      	subs	r5, r5, r7
 800eb5e:	44ab      	add	fp, r5
 800eb60:	6925      	ldr	r5, [r4, #16]
 800eb62:	445d      	add	r5, fp
 800eb64:	6125      	str	r5, [r4, #16]
 800eb66:	2000      	movs	r0, #0
 800eb68:	b007      	add	sp, #28
 800eb6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb6e:	f04f 0b00 	mov.w	fp, #0
 800eb72:	e7ca      	b.n	800eb0a <_scanf_i+0x15e>
 800eb74:	07ca      	lsls	r2, r1, #31
 800eb76:	bf4c      	ite	mi
 800eb78:	8018      	strhmi	r0, [r3, #0]
 800eb7a:	6018      	strpl	r0, [r3, #0]
 800eb7c:	e7eb      	b.n	800eb56 <_scanf_i+0x1aa>
 800eb7e:	2001      	movs	r0, #1
 800eb80:	e7f2      	b.n	800eb68 <_scanf_i+0x1bc>
 800eb82:	bf00      	nop
 800eb84:	0800f9d0 	.word	0x0800f9d0
 800eb88:	0800ed35 	.word	0x0800ed35
 800eb8c:	0800c471 	.word	0x0800c471
 800eb90:	080121d6 	.word	0x080121d6

0800eb94 <_read_r>:
 800eb94:	b538      	push	{r3, r4, r5, lr}
 800eb96:	4d07      	ldr	r5, [pc, #28]	; (800ebb4 <_read_r+0x20>)
 800eb98:	4604      	mov	r4, r0
 800eb9a:	4608      	mov	r0, r1
 800eb9c:	4611      	mov	r1, r2
 800eb9e:	2200      	movs	r2, #0
 800eba0:	602a      	str	r2, [r5, #0]
 800eba2:	461a      	mov	r2, r3
 800eba4:	f7f7 fd78 	bl	8006698 <_read>
 800eba8:	1c43      	adds	r3, r0, #1
 800ebaa:	d102      	bne.n	800ebb2 <_read_r+0x1e>
 800ebac:	682b      	ldr	r3, [r5, #0]
 800ebae:	b103      	cbz	r3, 800ebb2 <_read_r+0x1e>
 800ebb0:	6023      	str	r3, [r4, #0]
 800ebb2:	bd38      	pop	{r3, r4, r5, pc}
 800ebb4:	20001fd4 	.word	0x20001fd4

0800ebb8 <nan>:
 800ebb8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ebc0 <nan+0x8>
 800ebbc:	4770      	bx	lr
 800ebbe:	bf00      	nop
 800ebc0:	00000000 	.word	0x00000000
 800ebc4:	7ff80000 	.word	0x7ff80000

0800ebc8 <__sccl>:
 800ebc8:	b570      	push	{r4, r5, r6, lr}
 800ebca:	780b      	ldrb	r3, [r1, #0]
 800ebcc:	4604      	mov	r4, r0
 800ebce:	2b5e      	cmp	r3, #94	; 0x5e
 800ebd0:	bf0b      	itete	eq
 800ebd2:	784b      	ldrbeq	r3, [r1, #1]
 800ebd4:	1c48      	addne	r0, r1, #1
 800ebd6:	1c88      	addeq	r0, r1, #2
 800ebd8:	2200      	movne	r2, #0
 800ebda:	bf08      	it	eq
 800ebdc:	2201      	moveq	r2, #1
 800ebde:	1e61      	subs	r1, r4, #1
 800ebe0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800ebe4:	f801 2f01 	strb.w	r2, [r1, #1]!
 800ebe8:	42a9      	cmp	r1, r5
 800ebea:	d1fb      	bne.n	800ebe4 <__sccl+0x1c>
 800ebec:	b90b      	cbnz	r3, 800ebf2 <__sccl+0x2a>
 800ebee:	3801      	subs	r0, #1
 800ebf0:	bd70      	pop	{r4, r5, r6, pc}
 800ebf2:	f082 0101 	eor.w	r1, r2, #1
 800ebf6:	54e1      	strb	r1, [r4, r3]
 800ebf8:	1c42      	adds	r2, r0, #1
 800ebfa:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800ebfe:	2d2d      	cmp	r5, #45	; 0x2d
 800ec00:	f102 36ff 	add.w	r6, r2, #4294967295
 800ec04:	4610      	mov	r0, r2
 800ec06:	d006      	beq.n	800ec16 <__sccl+0x4e>
 800ec08:	2d5d      	cmp	r5, #93	; 0x5d
 800ec0a:	d0f1      	beq.n	800ebf0 <__sccl+0x28>
 800ec0c:	b90d      	cbnz	r5, 800ec12 <__sccl+0x4a>
 800ec0e:	4630      	mov	r0, r6
 800ec10:	e7ee      	b.n	800ebf0 <__sccl+0x28>
 800ec12:	462b      	mov	r3, r5
 800ec14:	e7ef      	b.n	800ebf6 <__sccl+0x2e>
 800ec16:	7816      	ldrb	r6, [r2, #0]
 800ec18:	2e5d      	cmp	r6, #93	; 0x5d
 800ec1a:	d0fa      	beq.n	800ec12 <__sccl+0x4a>
 800ec1c:	42b3      	cmp	r3, r6
 800ec1e:	dcf8      	bgt.n	800ec12 <__sccl+0x4a>
 800ec20:	4618      	mov	r0, r3
 800ec22:	3001      	adds	r0, #1
 800ec24:	4286      	cmp	r6, r0
 800ec26:	5421      	strb	r1, [r4, r0]
 800ec28:	dcfb      	bgt.n	800ec22 <__sccl+0x5a>
 800ec2a:	43d8      	mvns	r0, r3
 800ec2c:	4430      	add	r0, r6
 800ec2e:	1c5d      	adds	r5, r3, #1
 800ec30:	42b3      	cmp	r3, r6
 800ec32:	bfa8      	it	ge
 800ec34:	2000      	movge	r0, #0
 800ec36:	182b      	adds	r3, r5, r0
 800ec38:	3202      	adds	r2, #2
 800ec3a:	e7de      	b.n	800ebfa <__sccl+0x32>

0800ec3c <_strtoul_l.isra.0>:
 800ec3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ec40:	4e3b      	ldr	r6, [pc, #236]	; (800ed30 <_strtoul_l.isra.0+0xf4>)
 800ec42:	4686      	mov	lr, r0
 800ec44:	468c      	mov	ip, r1
 800ec46:	4660      	mov	r0, ip
 800ec48:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800ec4c:	5da5      	ldrb	r5, [r4, r6]
 800ec4e:	f015 0508 	ands.w	r5, r5, #8
 800ec52:	d1f8      	bne.n	800ec46 <_strtoul_l.isra.0+0xa>
 800ec54:	2c2d      	cmp	r4, #45	; 0x2d
 800ec56:	d134      	bne.n	800ecc2 <_strtoul_l.isra.0+0x86>
 800ec58:	f89c 4000 	ldrb.w	r4, [ip]
 800ec5c:	f04f 0801 	mov.w	r8, #1
 800ec60:	f100 0c02 	add.w	ip, r0, #2
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d05e      	beq.n	800ed26 <_strtoul_l.isra.0+0xea>
 800ec68:	2b10      	cmp	r3, #16
 800ec6a:	d10c      	bne.n	800ec86 <_strtoul_l.isra.0+0x4a>
 800ec6c:	2c30      	cmp	r4, #48	; 0x30
 800ec6e:	d10a      	bne.n	800ec86 <_strtoul_l.isra.0+0x4a>
 800ec70:	f89c 0000 	ldrb.w	r0, [ip]
 800ec74:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ec78:	2858      	cmp	r0, #88	; 0x58
 800ec7a:	d14f      	bne.n	800ed1c <_strtoul_l.isra.0+0xe0>
 800ec7c:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800ec80:	2310      	movs	r3, #16
 800ec82:	f10c 0c02 	add.w	ip, ip, #2
 800ec86:	f04f 37ff 	mov.w	r7, #4294967295
 800ec8a:	2500      	movs	r5, #0
 800ec8c:	fbb7 f7f3 	udiv	r7, r7, r3
 800ec90:	fb03 f907 	mul.w	r9, r3, r7
 800ec94:	ea6f 0909 	mvn.w	r9, r9
 800ec98:	4628      	mov	r0, r5
 800ec9a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800ec9e:	2e09      	cmp	r6, #9
 800eca0:	d818      	bhi.n	800ecd4 <_strtoul_l.isra.0+0x98>
 800eca2:	4634      	mov	r4, r6
 800eca4:	42a3      	cmp	r3, r4
 800eca6:	dd24      	ble.n	800ecf2 <_strtoul_l.isra.0+0xb6>
 800eca8:	2d00      	cmp	r5, #0
 800ecaa:	db1f      	blt.n	800ecec <_strtoul_l.isra.0+0xb0>
 800ecac:	4287      	cmp	r7, r0
 800ecae:	d31d      	bcc.n	800ecec <_strtoul_l.isra.0+0xb0>
 800ecb0:	d101      	bne.n	800ecb6 <_strtoul_l.isra.0+0x7a>
 800ecb2:	45a1      	cmp	r9, r4
 800ecb4:	db1a      	blt.n	800ecec <_strtoul_l.isra.0+0xb0>
 800ecb6:	fb00 4003 	mla	r0, r0, r3, r4
 800ecba:	2501      	movs	r5, #1
 800ecbc:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800ecc0:	e7eb      	b.n	800ec9a <_strtoul_l.isra.0+0x5e>
 800ecc2:	2c2b      	cmp	r4, #43	; 0x2b
 800ecc4:	bf08      	it	eq
 800ecc6:	f89c 4000 	ldrbeq.w	r4, [ip]
 800ecca:	46a8      	mov	r8, r5
 800eccc:	bf08      	it	eq
 800ecce:	f100 0c02 	addeq.w	ip, r0, #2
 800ecd2:	e7c7      	b.n	800ec64 <_strtoul_l.isra.0+0x28>
 800ecd4:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800ecd8:	2e19      	cmp	r6, #25
 800ecda:	d801      	bhi.n	800ece0 <_strtoul_l.isra.0+0xa4>
 800ecdc:	3c37      	subs	r4, #55	; 0x37
 800ecde:	e7e1      	b.n	800eca4 <_strtoul_l.isra.0+0x68>
 800ece0:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800ece4:	2e19      	cmp	r6, #25
 800ece6:	d804      	bhi.n	800ecf2 <_strtoul_l.isra.0+0xb6>
 800ece8:	3c57      	subs	r4, #87	; 0x57
 800ecea:	e7db      	b.n	800eca4 <_strtoul_l.isra.0+0x68>
 800ecec:	f04f 35ff 	mov.w	r5, #4294967295
 800ecf0:	e7e4      	b.n	800ecbc <_strtoul_l.isra.0+0x80>
 800ecf2:	2d00      	cmp	r5, #0
 800ecf4:	da07      	bge.n	800ed06 <_strtoul_l.isra.0+0xca>
 800ecf6:	2322      	movs	r3, #34	; 0x22
 800ecf8:	f8ce 3000 	str.w	r3, [lr]
 800ecfc:	f04f 30ff 	mov.w	r0, #4294967295
 800ed00:	b942      	cbnz	r2, 800ed14 <_strtoul_l.isra.0+0xd8>
 800ed02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed06:	f1b8 0f00 	cmp.w	r8, #0
 800ed0a:	d000      	beq.n	800ed0e <_strtoul_l.isra.0+0xd2>
 800ed0c:	4240      	negs	r0, r0
 800ed0e:	2a00      	cmp	r2, #0
 800ed10:	d0f7      	beq.n	800ed02 <_strtoul_l.isra.0+0xc6>
 800ed12:	b10d      	cbz	r5, 800ed18 <_strtoul_l.isra.0+0xdc>
 800ed14:	f10c 31ff 	add.w	r1, ip, #4294967295
 800ed18:	6011      	str	r1, [r2, #0]
 800ed1a:	e7f2      	b.n	800ed02 <_strtoul_l.isra.0+0xc6>
 800ed1c:	2430      	movs	r4, #48	; 0x30
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d1b1      	bne.n	800ec86 <_strtoul_l.isra.0+0x4a>
 800ed22:	2308      	movs	r3, #8
 800ed24:	e7af      	b.n	800ec86 <_strtoul_l.isra.0+0x4a>
 800ed26:	2c30      	cmp	r4, #48	; 0x30
 800ed28:	d0a2      	beq.n	800ec70 <_strtoul_l.isra.0+0x34>
 800ed2a:	230a      	movs	r3, #10
 800ed2c:	e7ab      	b.n	800ec86 <_strtoul_l.isra.0+0x4a>
 800ed2e:	bf00      	nop
 800ed30:	08011e39 	.word	0x08011e39

0800ed34 <_strtoul_r>:
 800ed34:	f7ff bf82 	b.w	800ec3c <_strtoul_l.isra.0>

0800ed38 <__submore>:
 800ed38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed3c:	460c      	mov	r4, r1
 800ed3e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ed40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ed44:	4299      	cmp	r1, r3
 800ed46:	d11d      	bne.n	800ed84 <__submore+0x4c>
 800ed48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ed4c:	f7fb fd52 	bl	800a7f4 <_malloc_r>
 800ed50:	b918      	cbnz	r0, 800ed5a <__submore+0x22>
 800ed52:	f04f 30ff 	mov.w	r0, #4294967295
 800ed56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ed5e:	63a3      	str	r3, [r4, #56]	; 0x38
 800ed60:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800ed64:	6360      	str	r0, [r4, #52]	; 0x34
 800ed66:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800ed6a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ed6e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800ed72:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ed76:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800ed7a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800ed7e:	6020      	str	r0, [r4, #0]
 800ed80:	2000      	movs	r0, #0
 800ed82:	e7e8      	b.n	800ed56 <__submore+0x1e>
 800ed84:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800ed86:	0077      	lsls	r7, r6, #1
 800ed88:	463a      	mov	r2, r7
 800ed8a:	f000 fa21 	bl	800f1d0 <_realloc_r>
 800ed8e:	4605      	mov	r5, r0
 800ed90:	2800      	cmp	r0, #0
 800ed92:	d0de      	beq.n	800ed52 <__submore+0x1a>
 800ed94:	eb00 0806 	add.w	r8, r0, r6
 800ed98:	4601      	mov	r1, r0
 800ed9a:	4632      	mov	r2, r6
 800ed9c:	4640      	mov	r0, r8
 800ed9e:	f7fe fd9b 	bl	800d8d8 <memcpy>
 800eda2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800eda6:	f8c4 8000 	str.w	r8, [r4]
 800edaa:	e7e9      	b.n	800ed80 <__submore+0x48>

0800edac <__ascii_wctomb>:
 800edac:	b149      	cbz	r1, 800edc2 <__ascii_wctomb+0x16>
 800edae:	2aff      	cmp	r2, #255	; 0xff
 800edb0:	bf85      	ittet	hi
 800edb2:	238a      	movhi	r3, #138	; 0x8a
 800edb4:	6003      	strhi	r3, [r0, #0]
 800edb6:	700a      	strbls	r2, [r1, #0]
 800edb8:	f04f 30ff 	movhi.w	r0, #4294967295
 800edbc:	bf98      	it	ls
 800edbe:	2001      	movls	r0, #1
 800edc0:	4770      	bx	lr
 800edc2:	4608      	mov	r0, r1
 800edc4:	4770      	bx	lr
	...

0800edc8 <__assert_func>:
 800edc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800edca:	4614      	mov	r4, r2
 800edcc:	461a      	mov	r2, r3
 800edce:	4b09      	ldr	r3, [pc, #36]	; (800edf4 <__assert_func+0x2c>)
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	4605      	mov	r5, r0
 800edd4:	68d8      	ldr	r0, [r3, #12]
 800edd6:	b14c      	cbz	r4, 800edec <__assert_func+0x24>
 800edd8:	4b07      	ldr	r3, [pc, #28]	; (800edf8 <__assert_func+0x30>)
 800edda:	9100      	str	r1, [sp, #0]
 800eddc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ede0:	4906      	ldr	r1, [pc, #24]	; (800edfc <__assert_func+0x34>)
 800ede2:	462b      	mov	r3, r5
 800ede4:	f000 f9a6 	bl	800f134 <fiprintf>
 800ede8:	f000 fc32 	bl	800f650 <abort>
 800edec:	4b04      	ldr	r3, [pc, #16]	; (800ee00 <__assert_func+0x38>)
 800edee:	461c      	mov	r4, r3
 800edf0:	e7f3      	b.n	800edda <__assert_func+0x12>
 800edf2:	bf00      	nop
 800edf4:	2000003c 	.word	0x2000003c
 800edf8:	080121d8 	.word	0x080121d8
 800edfc:	080121e5 	.word	0x080121e5
 800ee00:	08012213 	.word	0x08012213

0800ee04 <__sflush_r>:
 800ee04:	898a      	ldrh	r2, [r1, #12]
 800ee06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee0a:	4605      	mov	r5, r0
 800ee0c:	0710      	lsls	r0, r2, #28
 800ee0e:	460c      	mov	r4, r1
 800ee10:	d458      	bmi.n	800eec4 <__sflush_r+0xc0>
 800ee12:	684b      	ldr	r3, [r1, #4]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	dc05      	bgt.n	800ee24 <__sflush_r+0x20>
 800ee18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	dc02      	bgt.n	800ee24 <__sflush_r+0x20>
 800ee1e:	2000      	movs	r0, #0
 800ee20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ee26:	2e00      	cmp	r6, #0
 800ee28:	d0f9      	beq.n	800ee1e <__sflush_r+0x1a>
 800ee2a:	2300      	movs	r3, #0
 800ee2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ee30:	682f      	ldr	r7, [r5, #0]
 800ee32:	602b      	str	r3, [r5, #0]
 800ee34:	d032      	beq.n	800ee9c <__sflush_r+0x98>
 800ee36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ee38:	89a3      	ldrh	r3, [r4, #12]
 800ee3a:	075a      	lsls	r2, r3, #29
 800ee3c:	d505      	bpl.n	800ee4a <__sflush_r+0x46>
 800ee3e:	6863      	ldr	r3, [r4, #4]
 800ee40:	1ac0      	subs	r0, r0, r3
 800ee42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ee44:	b10b      	cbz	r3, 800ee4a <__sflush_r+0x46>
 800ee46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ee48:	1ac0      	subs	r0, r0, r3
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	4602      	mov	r2, r0
 800ee4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ee50:	6a21      	ldr	r1, [r4, #32]
 800ee52:	4628      	mov	r0, r5
 800ee54:	47b0      	blx	r6
 800ee56:	1c43      	adds	r3, r0, #1
 800ee58:	89a3      	ldrh	r3, [r4, #12]
 800ee5a:	d106      	bne.n	800ee6a <__sflush_r+0x66>
 800ee5c:	6829      	ldr	r1, [r5, #0]
 800ee5e:	291d      	cmp	r1, #29
 800ee60:	d82c      	bhi.n	800eebc <__sflush_r+0xb8>
 800ee62:	4a2a      	ldr	r2, [pc, #168]	; (800ef0c <__sflush_r+0x108>)
 800ee64:	40ca      	lsrs	r2, r1
 800ee66:	07d6      	lsls	r6, r2, #31
 800ee68:	d528      	bpl.n	800eebc <__sflush_r+0xb8>
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	6062      	str	r2, [r4, #4]
 800ee6e:	04d9      	lsls	r1, r3, #19
 800ee70:	6922      	ldr	r2, [r4, #16]
 800ee72:	6022      	str	r2, [r4, #0]
 800ee74:	d504      	bpl.n	800ee80 <__sflush_r+0x7c>
 800ee76:	1c42      	adds	r2, r0, #1
 800ee78:	d101      	bne.n	800ee7e <__sflush_r+0x7a>
 800ee7a:	682b      	ldr	r3, [r5, #0]
 800ee7c:	b903      	cbnz	r3, 800ee80 <__sflush_r+0x7c>
 800ee7e:	6560      	str	r0, [r4, #84]	; 0x54
 800ee80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ee82:	602f      	str	r7, [r5, #0]
 800ee84:	2900      	cmp	r1, #0
 800ee86:	d0ca      	beq.n	800ee1e <__sflush_r+0x1a>
 800ee88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ee8c:	4299      	cmp	r1, r3
 800ee8e:	d002      	beq.n	800ee96 <__sflush_r+0x92>
 800ee90:	4628      	mov	r0, r5
 800ee92:	f7fb fc5f 	bl	800a754 <_free_r>
 800ee96:	2000      	movs	r0, #0
 800ee98:	6360      	str	r0, [r4, #52]	; 0x34
 800ee9a:	e7c1      	b.n	800ee20 <__sflush_r+0x1c>
 800ee9c:	6a21      	ldr	r1, [r4, #32]
 800ee9e:	2301      	movs	r3, #1
 800eea0:	4628      	mov	r0, r5
 800eea2:	47b0      	blx	r6
 800eea4:	1c41      	adds	r1, r0, #1
 800eea6:	d1c7      	bne.n	800ee38 <__sflush_r+0x34>
 800eea8:	682b      	ldr	r3, [r5, #0]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d0c4      	beq.n	800ee38 <__sflush_r+0x34>
 800eeae:	2b1d      	cmp	r3, #29
 800eeb0:	d001      	beq.n	800eeb6 <__sflush_r+0xb2>
 800eeb2:	2b16      	cmp	r3, #22
 800eeb4:	d101      	bne.n	800eeba <__sflush_r+0xb6>
 800eeb6:	602f      	str	r7, [r5, #0]
 800eeb8:	e7b1      	b.n	800ee1e <__sflush_r+0x1a>
 800eeba:	89a3      	ldrh	r3, [r4, #12]
 800eebc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eec0:	81a3      	strh	r3, [r4, #12]
 800eec2:	e7ad      	b.n	800ee20 <__sflush_r+0x1c>
 800eec4:	690f      	ldr	r7, [r1, #16]
 800eec6:	2f00      	cmp	r7, #0
 800eec8:	d0a9      	beq.n	800ee1e <__sflush_r+0x1a>
 800eeca:	0793      	lsls	r3, r2, #30
 800eecc:	680e      	ldr	r6, [r1, #0]
 800eece:	bf08      	it	eq
 800eed0:	694b      	ldreq	r3, [r1, #20]
 800eed2:	600f      	str	r7, [r1, #0]
 800eed4:	bf18      	it	ne
 800eed6:	2300      	movne	r3, #0
 800eed8:	eba6 0807 	sub.w	r8, r6, r7
 800eedc:	608b      	str	r3, [r1, #8]
 800eede:	f1b8 0f00 	cmp.w	r8, #0
 800eee2:	dd9c      	ble.n	800ee1e <__sflush_r+0x1a>
 800eee4:	6a21      	ldr	r1, [r4, #32]
 800eee6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800eee8:	4643      	mov	r3, r8
 800eeea:	463a      	mov	r2, r7
 800eeec:	4628      	mov	r0, r5
 800eeee:	47b0      	blx	r6
 800eef0:	2800      	cmp	r0, #0
 800eef2:	dc06      	bgt.n	800ef02 <__sflush_r+0xfe>
 800eef4:	89a3      	ldrh	r3, [r4, #12]
 800eef6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eefa:	81a3      	strh	r3, [r4, #12]
 800eefc:	f04f 30ff 	mov.w	r0, #4294967295
 800ef00:	e78e      	b.n	800ee20 <__sflush_r+0x1c>
 800ef02:	4407      	add	r7, r0
 800ef04:	eba8 0800 	sub.w	r8, r8, r0
 800ef08:	e7e9      	b.n	800eede <__sflush_r+0xda>
 800ef0a:	bf00      	nop
 800ef0c:	20400001 	.word	0x20400001

0800ef10 <_fflush_r>:
 800ef10:	b538      	push	{r3, r4, r5, lr}
 800ef12:	690b      	ldr	r3, [r1, #16]
 800ef14:	4605      	mov	r5, r0
 800ef16:	460c      	mov	r4, r1
 800ef18:	b913      	cbnz	r3, 800ef20 <_fflush_r+0x10>
 800ef1a:	2500      	movs	r5, #0
 800ef1c:	4628      	mov	r0, r5
 800ef1e:	bd38      	pop	{r3, r4, r5, pc}
 800ef20:	b118      	cbz	r0, 800ef2a <_fflush_r+0x1a>
 800ef22:	6983      	ldr	r3, [r0, #24]
 800ef24:	b90b      	cbnz	r3, 800ef2a <_fflush_r+0x1a>
 800ef26:	f000 f887 	bl	800f038 <__sinit>
 800ef2a:	4b14      	ldr	r3, [pc, #80]	; (800ef7c <_fflush_r+0x6c>)
 800ef2c:	429c      	cmp	r4, r3
 800ef2e:	d11b      	bne.n	800ef68 <_fflush_r+0x58>
 800ef30:	686c      	ldr	r4, [r5, #4]
 800ef32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d0ef      	beq.n	800ef1a <_fflush_r+0xa>
 800ef3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ef3c:	07d0      	lsls	r0, r2, #31
 800ef3e:	d404      	bmi.n	800ef4a <_fflush_r+0x3a>
 800ef40:	0599      	lsls	r1, r3, #22
 800ef42:	d402      	bmi.n	800ef4a <_fflush_r+0x3a>
 800ef44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ef46:	f000 f927 	bl	800f198 <__retarget_lock_acquire_recursive>
 800ef4a:	4628      	mov	r0, r5
 800ef4c:	4621      	mov	r1, r4
 800ef4e:	f7ff ff59 	bl	800ee04 <__sflush_r>
 800ef52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ef54:	07da      	lsls	r2, r3, #31
 800ef56:	4605      	mov	r5, r0
 800ef58:	d4e0      	bmi.n	800ef1c <_fflush_r+0xc>
 800ef5a:	89a3      	ldrh	r3, [r4, #12]
 800ef5c:	059b      	lsls	r3, r3, #22
 800ef5e:	d4dd      	bmi.n	800ef1c <_fflush_r+0xc>
 800ef60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ef62:	f000 f91a 	bl	800f19a <__retarget_lock_release_recursive>
 800ef66:	e7d9      	b.n	800ef1c <_fflush_r+0xc>
 800ef68:	4b05      	ldr	r3, [pc, #20]	; (800ef80 <_fflush_r+0x70>)
 800ef6a:	429c      	cmp	r4, r3
 800ef6c:	d101      	bne.n	800ef72 <_fflush_r+0x62>
 800ef6e:	68ac      	ldr	r4, [r5, #8]
 800ef70:	e7df      	b.n	800ef32 <_fflush_r+0x22>
 800ef72:	4b04      	ldr	r3, [pc, #16]	; (800ef84 <_fflush_r+0x74>)
 800ef74:	429c      	cmp	r4, r3
 800ef76:	bf08      	it	eq
 800ef78:	68ec      	ldreq	r4, [r5, #12]
 800ef7a:	e7da      	b.n	800ef32 <_fflush_r+0x22>
 800ef7c:	08012234 	.word	0x08012234
 800ef80:	08012254 	.word	0x08012254
 800ef84:	08012214 	.word	0x08012214

0800ef88 <std>:
 800ef88:	2300      	movs	r3, #0
 800ef8a:	b510      	push	{r4, lr}
 800ef8c:	4604      	mov	r4, r0
 800ef8e:	e9c0 3300 	strd	r3, r3, [r0]
 800ef92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ef96:	6083      	str	r3, [r0, #8]
 800ef98:	8181      	strh	r1, [r0, #12]
 800ef9a:	6643      	str	r3, [r0, #100]	; 0x64
 800ef9c:	81c2      	strh	r2, [r0, #14]
 800ef9e:	6183      	str	r3, [r0, #24]
 800efa0:	4619      	mov	r1, r3
 800efa2:	2208      	movs	r2, #8
 800efa4:	305c      	adds	r0, #92	; 0x5c
 800efa6:	f7fb fbcd 	bl	800a744 <memset>
 800efaa:	4b05      	ldr	r3, [pc, #20]	; (800efc0 <std+0x38>)
 800efac:	6263      	str	r3, [r4, #36]	; 0x24
 800efae:	4b05      	ldr	r3, [pc, #20]	; (800efc4 <std+0x3c>)
 800efb0:	62a3      	str	r3, [r4, #40]	; 0x28
 800efb2:	4b05      	ldr	r3, [pc, #20]	; (800efc8 <std+0x40>)
 800efb4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800efb6:	4b05      	ldr	r3, [pc, #20]	; (800efcc <std+0x44>)
 800efb8:	6224      	str	r4, [r4, #32]
 800efba:	6323      	str	r3, [r4, #48]	; 0x30
 800efbc:	bd10      	pop	{r4, pc}
 800efbe:	bf00      	nop
 800efc0:	0800b661 	.word	0x0800b661
 800efc4:	0800b687 	.word	0x0800b687
 800efc8:	0800b6bf 	.word	0x0800b6bf
 800efcc:	0800b6e3 	.word	0x0800b6e3

0800efd0 <_cleanup_r>:
 800efd0:	4901      	ldr	r1, [pc, #4]	; (800efd8 <_cleanup_r+0x8>)
 800efd2:	f000 b8c1 	b.w	800f158 <_fwalk_reent>
 800efd6:	bf00      	nop
 800efd8:	0800ef11 	.word	0x0800ef11

0800efdc <__sfmoreglue>:
 800efdc:	b570      	push	{r4, r5, r6, lr}
 800efde:	1e4a      	subs	r2, r1, #1
 800efe0:	2568      	movs	r5, #104	; 0x68
 800efe2:	4355      	muls	r5, r2
 800efe4:	460e      	mov	r6, r1
 800efe6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800efea:	f7fb fc03 	bl	800a7f4 <_malloc_r>
 800efee:	4604      	mov	r4, r0
 800eff0:	b140      	cbz	r0, 800f004 <__sfmoreglue+0x28>
 800eff2:	2100      	movs	r1, #0
 800eff4:	e9c0 1600 	strd	r1, r6, [r0]
 800eff8:	300c      	adds	r0, #12
 800effa:	60a0      	str	r0, [r4, #8]
 800effc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f000:	f7fb fba0 	bl	800a744 <memset>
 800f004:	4620      	mov	r0, r4
 800f006:	bd70      	pop	{r4, r5, r6, pc}

0800f008 <__sfp_lock_acquire>:
 800f008:	4801      	ldr	r0, [pc, #4]	; (800f010 <__sfp_lock_acquire+0x8>)
 800f00a:	f000 b8c5 	b.w	800f198 <__retarget_lock_acquire_recursive>
 800f00e:	bf00      	nop
 800f010:	20001fe0 	.word	0x20001fe0

0800f014 <__sfp_lock_release>:
 800f014:	4801      	ldr	r0, [pc, #4]	; (800f01c <__sfp_lock_release+0x8>)
 800f016:	f000 b8c0 	b.w	800f19a <__retarget_lock_release_recursive>
 800f01a:	bf00      	nop
 800f01c:	20001fe0 	.word	0x20001fe0

0800f020 <__sinit_lock_acquire>:
 800f020:	4801      	ldr	r0, [pc, #4]	; (800f028 <__sinit_lock_acquire+0x8>)
 800f022:	f000 b8b9 	b.w	800f198 <__retarget_lock_acquire_recursive>
 800f026:	bf00      	nop
 800f028:	20001fdb 	.word	0x20001fdb

0800f02c <__sinit_lock_release>:
 800f02c:	4801      	ldr	r0, [pc, #4]	; (800f034 <__sinit_lock_release+0x8>)
 800f02e:	f000 b8b4 	b.w	800f19a <__retarget_lock_release_recursive>
 800f032:	bf00      	nop
 800f034:	20001fdb 	.word	0x20001fdb

0800f038 <__sinit>:
 800f038:	b510      	push	{r4, lr}
 800f03a:	4604      	mov	r4, r0
 800f03c:	f7ff fff0 	bl	800f020 <__sinit_lock_acquire>
 800f040:	69a3      	ldr	r3, [r4, #24]
 800f042:	b11b      	cbz	r3, 800f04c <__sinit+0x14>
 800f044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f048:	f7ff bff0 	b.w	800f02c <__sinit_lock_release>
 800f04c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f050:	6523      	str	r3, [r4, #80]	; 0x50
 800f052:	4b13      	ldr	r3, [pc, #76]	; (800f0a0 <__sinit+0x68>)
 800f054:	4a13      	ldr	r2, [pc, #76]	; (800f0a4 <__sinit+0x6c>)
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	62a2      	str	r2, [r4, #40]	; 0x28
 800f05a:	42a3      	cmp	r3, r4
 800f05c:	bf04      	itt	eq
 800f05e:	2301      	moveq	r3, #1
 800f060:	61a3      	streq	r3, [r4, #24]
 800f062:	4620      	mov	r0, r4
 800f064:	f000 f820 	bl	800f0a8 <__sfp>
 800f068:	6060      	str	r0, [r4, #4]
 800f06a:	4620      	mov	r0, r4
 800f06c:	f000 f81c 	bl	800f0a8 <__sfp>
 800f070:	60a0      	str	r0, [r4, #8]
 800f072:	4620      	mov	r0, r4
 800f074:	f000 f818 	bl	800f0a8 <__sfp>
 800f078:	2200      	movs	r2, #0
 800f07a:	60e0      	str	r0, [r4, #12]
 800f07c:	2104      	movs	r1, #4
 800f07e:	6860      	ldr	r0, [r4, #4]
 800f080:	f7ff ff82 	bl	800ef88 <std>
 800f084:	68a0      	ldr	r0, [r4, #8]
 800f086:	2201      	movs	r2, #1
 800f088:	2109      	movs	r1, #9
 800f08a:	f7ff ff7d 	bl	800ef88 <std>
 800f08e:	68e0      	ldr	r0, [r4, #12]
 800f090:	2202      	movs	r2, #2
 800f092:	2112      	movs	r1, #18
 800f094:	f7ff ff78 	bl	800ef88 <std>
 800f098:	2301      	movs	r3, #1
 800f09a:	61a3      	str	r3, [r4, #24]
 800f09c:	e7d2      	b.n	800f044 <__sinit+0xc>
 800f09e:	bf00      	nop
 800f0a0:	08011da8 	.word	0x08011da8
 800f0a4:	0800efd1 	.word	0x0800efd1

0800f0a8 <__sfp>:
 800f0a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0aa:	4607      	mov	r7, r0
 800f0ac:	f7ff ffac 	bl	800f008 <__sfp_lock_acquire>
 800f0b0:	4b1e      	ldr	r3, [pc, #120]	; (800f12c <__sfp+0x84>)
 800f0b2:	681e      	ldr	r6, [r3, #0]
 800f0b4:	69b3      	ldr	r3, [r6, #24]
 800f0b6:	b913      	cbnz	r3, 800f0be <__sfp+0x16>
 800f0b8:	4630      	mov	r0, r6
 800f0ba:	f7ff ffbd 	bl	800f038 <__sinit>
 800f0be:	3648      	adds	r6, #72	; 0x48
 800f0c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f0c4:	3b01      	subs	r3, #1
 800f0c6:	d503      	bpl.n	800f0d0 <__sfp+0x28>
 800f0c8:	6833      	ldr	r3, [r6, #0]
 800f0ca:	b30b      	cbz	r3, 800f110 <__sfp+0x68>
 800f0cc:	6836      	ldr	r6, [r6, #0]
 800f0ce:	e7f7      	b.n	800f0c0 <__sfp+0x18>
 800f0d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f0d4:	b9d5      	cbnz	r5, 800f10c <__sfp+0x64>
 800f0d6:	4b16      	ldr	r3, [pc, #88]	; (800f130 <__sfp+0x88>)
 800f0d8:	60e3      	str	r3, [r4, #12]
 800f0da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f0de:	6665      	str	r5, [r4, #100]	; 0x64
 800f0e0:	f000 f859 	bl	800f196 <__retarget_lock_init_recursive>
 800f0e4:	f7ff ff96 	bl	800f014 <__sfp_lock_release>
 800f0e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f0ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f0f0:	6025      	str	r5, [r4, #0]
 800f0f2:	61a5      	str	r5, [r4, #24]
 800f0f4:	2208      	movs	r2, #8
 800f0f6:	4629      	mov	r1, r5
 800f0f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f0fc:	f7fb fb22 	bl	800a744 <memset>
 800f100:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f104:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f108:	4620      	mov	r0, r4
 800f10a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f10c:	3468      	adds	r4, #104	; 0x68
 800f10e:	e7d9      	b.n	800f0c4 <__sfp+0x1c>
 800f110:	2104      	movs	r1, #4
 800f112:	4638      	mov	r0, r7
 800f114:	f7ff ff62 	bl	800efdc <__sfmoreglue>
 800f118:	4604      	mov	r4, r0
 800f11a:	6030      	str	r0, [r6, #0]
 800f11c:	2800      	cmp	r0, #0
 800f11e:	d1d5      	bne.n	800f0cc <__sfp+0x24>
 800f120:	f7ff ff78 	bl	800f014 <__sfp_lock_release>
 800f124:	230c      	movs	r3, #12
 800f126:	603b      	str	r3, [r7, #0]
 800f128:	e7ee      	b.n	800f108 <__sfp+0x60>
 800f12a:	bf00      	nop
 800f12c:	08011da8 	.word	0x08011da8
 800f130:	ffff0001 	.word	0xffff0001

0800f134 <fiprintf>:
 800f134:	b40e      	push	{r1, r2, r3}
 800f136:	b503      	push	{r0, r1, lr}
 800f138:	4601      	mov	r1, r0
 800f13a:	ab03      	add	r3, sp, #12
 800f13c:	4805      	ldr	r0, [pc, #20]	; (800f154 <fiprintf+0x20>)
 800f13e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f142:	6800      	ldr	r0, [r0, #0]
 800f144:	9301      	str	r3, [sp, #4]
 800f146:	f000 f893 	bl	800f270 <_vfiprintf_r>
 800f14a:	b002      	add	sp, #8
 800f14c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f150:	b003      	add	sp, #12
 800f152:	4770      	bx	lr
 800f154:	2000003c 	.word	0x2000003c

0800f158 <_fwalk_reent>:
 800f158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f15c:	4606      	mov	r6, r0
 800f15e:	4688      	mov	r8, r1
 800f160:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f164:	2700      	movs	r7, #0
 800f166:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f16a:	f1b9 0901 	subs.w	r9, r9, #1
 800f16e:	d505      	bpl.n	800f17c <_fwalk_reent+0x24>
 800f170:	6824      	ldr	r4, [r4, #0]
 800f172:	2c00      	cmp	r4, #0
 800f174:	d1f7      	bne.n	800f166 <_fwalk_reent+0xe>
 800f176:	4638      	mov	r0, r7
 800f178:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f17c:	89ab      	ldrh	r3, [r5, #12]
 800f17e:	2b01      	cmp	r3, #1
 800f180:	d907      	bls.n	800f192 <_fwalk_reent+0x3a>
 800f182:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f186:	3301      	adds	r3, #1
 800f188:	d003      	beq.n	800f192 <_fwalk_reent+0x3a>
 800f18a:	4629      	mov	r1, r5
 800f18c:	4630      	mov	r0, r6
 800f18e:	47c0      	blx	r8
 800f190:	4307      	orrs	r7, r0
 800f192:	3568      	adds	r5, #104	; 0x68
 800f194:	e7e9      	b.n	800f16a <_fwalk_reent+0x12>

0800f196 <__retarget_lock_init_recursive>:
 800f196:	4770      	bx	lr

0800f198 <__retarget_lock_acquire_recursive>:
 800f198:	4770      	bx	lr

0800f19a <__retarget_lock_release_recursive>:
 800f19a:	4770      	bx	lr

0800f19c <memmove>:
 800f19c:	4288      	cmp	r0, r1
 800f19e:	b510      	push	{r4, lr}
 800f1a0:	eb01 0402 	add.w	r4, r1, r2
 800f1a4:	d902      	bls.n	800f1ac <memmove+0x10>
 800f1a6:	4284      	cmp	r4, r0
 800f1a8:	4623      	mov	r3, r4
 800f1aa:	d807      	bhi.n	800f1bc <memmove+0x20>
 800f1ac:	1e43      	subs	r3, r0, #1
 800f1ae:	42a1      	cmp	r1, r4
 800f1b0:	d008      	beq.n	800f1c4 <memmove+0x28>
 800f1b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f1b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f1ba:	e7f8      	b.n	800f1ae <memmove+0x12>
 800f1bc:	4402      	add	r2, r0
 800f1be:	4601      	mov	r1, r0
 800f1c0:	428a      	cmp	r2, r1
 800f1c2:	d100      	bne.n	800f1c6 <memmove+0x2a>
 800f1c4:	bd10      	pop	{r4, pc}
 800f1c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f1ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f1ce:	e7f7      	b.n	800f1c0 <memmove+0x24>

0800f1d0 <_realloc_r>:
 800f1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1d2:	4607      	mov	r7, r0
 800f1d4:	4614      	mov	r4, r2
 800f1d6:	460e      	mov	r6, r1
 800f1d8:	b921      	cbnz	r1, 800f1e4 <_realloc_r+0x14>
 800f1da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f1de:	4611      	mov	r1, r2
 800f1e0:	f7fb bb08 	b.w	800a7f4 <_malloc_r>
 800f1e4:	b922      	cbnz	r2, 800f1f0 <_realloc_r+0x20>
 800f1e6:	f7fb fab5 	bl	800a754 <_free_r>
 800f1ea:	4625      	mov	r5, r4
 800f1ec:	4628      	mov	r0, r5
 800f1ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f1f0:	f000 fa9a 	bl	800f728 <_malloc_usable_size_r>
 800f1f4:	42a0      	cmp	r0, r4
 800f1f6:	d20f      	bcs.n	800f218 <_realloc_r+0x48>
 800f1f8:	4621      	mov	r1, r4
 800f1fa:	4638      	mov	r0, r7
 800f1fc:	f7fb fafa 	bl	800a7f4 <_malloc_r>
 800f200:	4605      	mov	r5, r0
 800f202:	2800      	cmp	r0, #0
 800f204:	d0f2      	beq.n	800f1ec <_realloc_r+0x1c>
 800f206:	4631      	mov	r1, r6
 800f208:	4622      	mov	r2, r4
 800f20a:	f7fe fb65 	bl	800d8d8 <memcpy>
 800f20e:	4631      	mov	r1, r6
 800f210:	4638      	mov	r0, r7
 800f212:	f7fb fa9f 	bl	800a754 <_free_r>
 800f216:	e7e9      	b.n	800f1ec <_realloc_r+0x1c>
 800f218:	4635      	mov	r5, r6
 800f21a:	e7e7      	b.n	800f1ec <_realloc_r+0x1c>

0800f21c <__sfputc_r>:
 800f21c:	6893      	ldr	r3, [r2, #8]
 800f21e:	3b01      	subs	r3, #1
 800f220:	2b00      	cmp	r3, #0
 800f222:	b410      	push	{r4}
 800f224:	6093      	str	r3, [r2, #8]
 800f226:	da08      	bge.n	800f23a <__sfputc_r+0x1e>
 800f228:	6994      	ldr	r4, [r2, #24]
 800f22a:	42a3      	cmp	r3, r4
 800f22c:	db01      	blt.n	800f232 <__sfputc_r+0x16>
 800f22e:	290a      	cmp	r1, #10
 800f230:	d103      	bne.n	800f23a <__sfputc_r+0x1e>
 800f232:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f236:	f000 b94b 	b.w	800f4d0 <__swbuf_r>
 800f23a:	6813      	ldr	r3, [r2, #0]
 800f23c:	1c58      	adds	r0, r3, #1
 800f23e:	6010      	str	r0, [r2, #0]
 800f240:	7019      	strb	r1, [r3, #0]
 800f242:	4608      	mov	r0, r1
 800f244:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f248:	4770      	bx	lr

0800f24a <__sfputs_r>:
 800f24a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f24c:	4606      	mov	r6, r0
 800f24e:	460f      	mov	r7, r1
 800f250:	4614      	mov	r4, r2
 800f252:	18d5      	adds	r5, r2, r3
 800f254:	42ac      	cmp	r4, r5
 800f256:	d101      	bne.n	800f25c <__sfputs_r+0x12>
 800f258:	2000      	movs	r0, #0
 800f25a:	e007      	b.n	800f26c <__sfputs_r+0x22>
 800f25c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f260:	463a      	mov	r2, r7
 800f262:	4630      	mov	r0, r6
 800f264:	f7ff ffda 	bl	800f21c <__sfputc_r>
 800f268:	1c43      	adds	r3, r0, #1
 800f26a:	d1f3      	bne.n	800f254 <__sfputs_r+0xa>
 800f26c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f270 <_vfiprintf_r>:
 800f270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f274:	460d      	mov	r5, r1
 800f276:	b09d      	sub	sp, #116	; 0x74
 800f278:	4614      	mov	r4, r2
 800f27a:	4698      	mov	r8, r3
 800f27c:	4606      	mov	r6, r0
 800f27e:	b118      	cbz	r0, 800f288 <_vfiprintf_r+0x18>
 800f280:	6983      	ldr	r3, [r0, #24]
 800f282:	b90b      	cbnz	r3, 800f288 <_vfiprintf_r+0x18>
 800f284:	f7ff fed8 	bl	800f038 <__sinit>
 800f288:	4b89      	ldr	r3, [pc, #548]	; (800f4b0 <_vfiprintf_r+0x240>)
 800f28a:	429d      	cmp	r5, r3
 800f28c:	d11b      	bne.n	800f2c6 <_vfiprintf_r+0x56>
 800f28e:	6875      	ldr	r5, [r6, #4]
 800f290:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f292:	07d9      	lsls	r1, r3, #31
 800f294:	d405      	bmi.n	800f2a2 <_vfiprintf_r+0x32>
 800f296:	89ab      	ldrh	r3, [r5, #12]
 800f298:	059a      	lsls	r2, r3, #22
 800f29a:	d402      	bmi.n	800f2a2 <_vfiprintf_r+0x32>
 800f29c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f29e:	f7ff ff7b 	bl	800f198 <__retarget_lock_acquire_recursive>
 800f2a2:	89ab      	ldrh	r3, [r5, #12]
 800f2a4:	071b      	lsls	r3, r3, #28
 800f2a6:	d501      	bpl.n	800f2ac <_vfiprintf_r+0x3c>
 800f2a8:	692b      	ldr	r3, [r5, #16]
 800f2aa:	b9eb      	cbnz	r3, 800f2e8 <_vfiprintf_r+0x78>
 800f2ac:	4629      	mov	r1, r5
 800f2ae:	4630      	mov	r0, r6
 800f2b0:	f000 f960 	bl	800f574 <__swsetup_r>
 800f2b4:	b1c0      	cbz	r0, 800f2e8 <_vfiprintf_r+0x78>
 800f2b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f2b8:	07dc      	lsls	r4, r3, #31
 800f2ba:	d50e      	bpl.n	800f2da <_vfiprintf_r+0x6a>
 800f2bc:	f04f 30ff 	mov.w	r0, #4294967295
 800f2c0:	b01d      	add	sp, #116	; 0x74
 800f2c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2c6:	4b7b      	ldr	r3, [pc, #492]	; (800f4b4 <_vfiprintf_r+0x244>)
 800f2c8:	429d      	cmp	r5, r3
 800f2ca:	d101      	bne.n	800f2d0 <_vfiprintf_r+0x60>
 800f2cc:	68b5      	ldr	r5, [r6, #8]
 800f2ce:	e7df      	b.n	800f290 <_vfiprintf_r+0x20>
 800f2d0:	4b79      	ldr	r3, [pc, #484]	; (800f4b8 <_vfiprintf_r+0x248>)
 800f2d2:	429d      	cmp	r5, r3
 800f2d4:	bf08      	it	eq
 800f2d6:	68f5      	ldreq	r5, [r6, #12]
 800f2d8:	e7da      	b.n	800f290 <_vfiprintf_r+0x20>
 800f2da:	89ab      	ldrh	r3, [r5, #12]
 800f2dc:	0598      	lsls	r0, r3, #22
 800f2de:	d4ed      	bmi.n	800f2bc <_vfiprintf_r+0x4c>
 800f2e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f2e2:	f7ff ff5a 	bl	800f19a <__retarget_lock_release_recursive>
 800f2e6:	e7e9      	b.n	800f2bc <_vfiprintf_r+0x4c>
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	9309      	str	r3, [sp, #36]	; 0x24
 800f2ec:	2320      	movs	r3, #32
 800f2ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f2f2:	f8cd 800c 	str.w	r8, [sp, #12]
 800f2f6:	2330      	movs	r3, #48	; 0x30
 800f2f8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f4bc <_vfiprintf_r+0x24c>
 800f2fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f300:	f04f 0901 	mov.w	r9, #1
 800f304:	4623      	mov	r3, r4
 800f306:	469a      	mov	sl, r3
 800f308:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f30c:	b10a      	cbz	r2, 800f312 <_vfiprintf_r+0xa2>
 800f30e:	2a25      	cmp	r2, #37	; 0x25
 800f310:	d1f9      	bne.n	800f306 <_vfiprintf_r+0x96>
 800f312:	ebba 0b04 	subs.w	fp, sl, r4
 800f316:	d00b      	beq.n	800f330 <_vfiprintf_r+0xc0>
 800f318:	465b      	mov	r3, fp
 800f31a:	4622      	mov	r2, r4
 800f31c:	4629      	mov	r1, r5
 800f31e:	4630      	mov	r0, r6
 800f320:	f7ff ff93 	bl	800f24a <__sfputs_r>
 800f324:	3001      	adds	r0, #1
 800f326:	f000 80aa 	beq.w	800f47e <_vfiprintf_r+0x20e>
 800f32a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f32c:	445a      	add	r2, fp
 800f32e:	9209      	str	r2, [sp, #36]	; 0x24
 800f330:	f89a 3000 	ldrb.w	r3, [sl]
 800f334:	2b00      	cmp	r3, #0
 800f336:	f000 80a2 	beq.w	800f47e <_vfiprintf_r+0x20e>
 800f33a:	2300      	movs	r3, #0
 800f33c:	f04f 32ff 	mov.w	r2, #4294967295
 800f340:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f344:	f10a 0a01 	add.w	sl, sl, #1
 800f348:	9304      	str	r3, [sp, #16]
 800f34a:	9307      	str	r3, [sp, #28]
 800f34c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f350:	931a      	str	r3, [sp, #104]	; 0x68
 800f352:	4654      	mov	r4, sl
 800f354:	2205      	movs	r2, #5
 800f356:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f35a:	4858      	ldr	r0, [pc, #352]	; (800f4bc <_vfiprintf_r+0x24c>)
 800f35c:	f7f0 ff48 	bl	80001f0 <memchr>
 800f360:	9a04      	ldr	r2, [sp, #16]
 800f362:	b9d8      	cbnz	r0, 800f39c <_vfiprintf_r+0x12c>
 800f364:	06d1      	lsls	r1, r2, #27
 800f366:	bf44      	itt	mi
 800f368:	2320      	movmi	r3, #32
 800f36a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f36e:	0713      	lsls	r3, r2, #28
 800f370:	bf44      	itt	mi
 800f372:	232b      	movmi	r3, #43	; 0x2b
 800f374:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f378:	f89a 3000 	ldrb.w	r3, [sl]
 800f37c:	2b2a      	cmp	r3, #42	; 0x2a
 800f37e:	d015      	beq.n	800f3ac <_vfiprintf_r+0x13c>
 800f380:	9a07      	ldr	r2, [sp, #28]
 800f382:	4654      	mov	r4, sl
 800f384:	2000      	movs	r0, #0
 800f386:	f04f 0c0a 	mov.w	ip, #10
 800f38a:	4621      	mov	r1, r4
 800f38c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f390:	3b30      	subs	r3, #48	; 0x30
 800f392:	2b09      	cmp	r3, #9
 800f394:	d94e      	bls.n	800f434 <_vfiprintf_r+0x1c4>
 800f396:	b1b0      	cbz	r0, 800f3c6 <_vfiprintf_r+0x156>
 800f398:	9207      	str	r2, [sp, #28]
 800f39a:	e014      	b.n	800f3c6 <_vfiprintf_r+0x156>
 800f39c:	eba0 0308 	sub.w	r3, r0, r8
 800f3a0:	fa09 f303 	lsl.w	r3, r9, r3
 800f3a4:	4313      	orrs	r3, r2
 800f3a6:	9304      	str	r3, [sp, #16]
 800f3a8:	46a2      	mov	sl, r4
 800f3aa:	e7d2      	b.n	800f352 <_vfiprintf_r+0xe2>
 800f3ac:	9b03      	ldr	r3, [sp, #12]
 800f3ae:	1d19      	adds	r1, r3, #4
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	9103      	str	r1, [sp, #12]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	bfbb      	ittet	lt
 800f3b8:	425b      	neglt	r3, r3
 800f3ba:	f042 0202 	orrlt.w	r2, r2, #2
 800f3be:	9307      	strge	r3, [sp, #28]
 800f3c0:	9307      	strlt	r3, [sp, #28]
 800f3c2:	bfb8      	it	lt
 800f3c4:	9204      	strlt	r2, [sp, #16]
 800f3c6:	7823      	ldrb	r3, [r4, #0]
 800f3c8:	2b2e      	cmp	r3, #46	; 0x2e
 800f3ca:	d10c      	bne.n	800f3e6 <_vfiprintf_r+0x176>
 800f3cc:	7863      	ldrb	r3, [r4, #1]
 800f3ce:	2b2a      	cmp	r3, #42	; 0x2a
 800f3d0:	d135      	bne.n	800f43e <_vfiprintf_r+0x1ce>
 800f3d2:	9b03      	ldr	r3, [sp, #12]
 800f3d4:	1d1a      	adds	r2, r3, #4
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	9203      	str	r2, [sp, #12]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	bfb8      	it	lt
 800f3de:	f04f 33ff 	movlt.w	r3, #4294967295
 800f3e2:	3402      	adds	r4, #2
 800f3e4:	9305      	str	r3, [sp, #20]
 800f3e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f4cc <_vfiprintf_r+0x25c>
 800f3ea:	7821      	ldrb	r1, [r4, #0]
 800f3ec:	2203      	movs	r2, #3
 800f3ee:	4650      	mov	r0, sl
 800f3f0:	f7f0 fefe 	bl	80001f0 <memchr>
 800f3f4:	b140      	cbz	r0, 800f408 <_vfiprintf_r+0x198>
 800f3f6:	2340      	movs	r3, #64	; 0x40
 800f3f8:	eba0 000a 	sub.w	r0, r0, sl
 800f3fc:	fa03 f000 	lsl.w	r0, r3, r0
 800f400:	9b04      	ldr	r3, [sp, #16]
 800f402:	4303      	orrs	r3, r0
 800f404:	3401      	adds	r4, #1
 800f406:	9304      	str	r3, [sp, #16]
 800f408:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f40c:	482c      	ldr	r0, [pc, #176]	; (800f4c0 <_vfiprintf_r+0x250>)
 800f40e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f412:	2206      	movs	r2, #6
 800f414:	f7f0 feec 	bl	80001f0 <memchr>
 800f418:	2800      	cmp	r0, #0
 800f41a:	d03f      	beq.n	800f49c <_vfiprintf_r+0x22c>
 800f41c:	4b29      	ldr	r3, [pc, #164]	; (800f4c4 <_vfiprintf_r+0x254>)
 800f41e:	bb1b      	cbnz	r3, 800f468 <_vfiprintf_r+0x1f8>
 800f420:	9b03      	ldr	r3, [sp, #12]
 800f422:	3307      	adds	r3, #7
 800f424:	f023 0307 	bic.w	r3, r3, #7
 800f428:	3308      	adds	r3, #8
 800f42a:	9303      	str	r3, [sp, #12]
 800f42c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f42e:	443b      	add	r3, r7
 800f430:	9309      	str	r3, [sp, #36]	; 0x24
 800f432:	e767      	b.n	800f304 <_vfiprintf_r+0x94>
 800f434:	fb0c 3202 	mla	r2, ip, r2, r3
 800f438:	460c      	mov	r4, r1
 800f43a:	2001      	movs	r0, #1
 800f43c:	e7a5      	b.n	800f38a <_vfiprintf_r+0x11a>
 800f43e:	2300      	movs	r3, #0
 800f440:	3401      	adds	r4, #1
 800f442:	9305      	str	r3, [sp, #20]
 800f444:	4619      	mov	r1, r3
 800f446:	f04f 0c0a 	mov.w	ip, #10
 800f44a:	4620      	mov	r0, r4
 800f44c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f450:	3a30      	subs	r2, #48	; 0x30
 800f452:	2a09      	cmp	r2, #9
 800f454:	d903      	bls.n	800f45e <_vfiprintf_r+0x1ee>
 800f456:	2b00      	cmp	r3, #0
 800f458:	d0c5      	beq.n	800f3e6 <_vfiprintf_r+0x176>
 800f45a:	9105      	str	r1, [sp, #20]
 800f45c:	e7c3      	b.n	800f3e6 <_vfiprintf_r+0x176>
 800f45e:	fb0c 2101 	mla	r1, ip, r1, r2
 800f462:	4604      	mov	r4, r0
 800f464:	2301      	movs	r3, #1
 800f466:	e7f0      	b.n	800f44a <_vfiprintf_r+0x1da>
 800f468:	ab03      	add	r3, sp, #12
 800f46a:	9300      	str	r3, [sp, #0]
 800f46c:	462a      	mov	r2, r5
 800f46e:	4b16      	ldr	r3, [pc, #88]	; (800f4c8 <_vfiprintf_r+0x258>)
 800f470:	a904      	add	r1, sp, #16
 800f472:	4630      	mov	r0, r6
 800f474:	f7fb fab8 	bl	800a9e8 <_printf_float>
 800f478:	4607      	mov	r7, r0
 800f47a:	1c78      	adds	r0, r7, #1
 800f47c:	d1d6      	bne.n	800f42c <_vfiprintf_r+0x1bc>
 800f47e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f480:	07d9      	lsls	r1, r3, #31
 800f482:	d405      	bmi.n	800f490 <_vfiprintf_r+0x220>
 800f484:	89ab      	ldrh	r3, [r5, #12]
 800f486:	059a      	lsls	r2, r3, #22
 800f488:	d402      	bmi.n	800f490 <_vfiprintf_r+0x220>
 800f48a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f48c:	f7ff fe85 	bl	800f19a <__retarget_lock_release_recursive>
 800f490:	89ab      	ldrh	r3, [r5, #12]
 800f492:	065b      	lsls	r3, r3, #25
 800f494:	f53f af12 	bmi.w	800f2bc <_vfiprintf_r+0x4c>
 800f498:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f49a:	e711      	b.n	800f2c0 <_vfiprintf_r+0x50>
 800f49c:	ab03      	add	r3, sp, #12
 800f49e:	9300      	str	r3, [sp, #0]
 800f4a0:	462a      	mov	r2, r5
 800f4a2:	4b09      	ldr	r3, [pc, #36]	; (800f4c8 <_vfiprintf_r+0x258>)
 800f4a4:	a904      	add	r1, sp, #16
 800f4a6:	4630      	mov	r0, r6
 800f4a8:	f7fb fd42 	bl	800af30 <_printf_i>
 800f4ac:	e7e4      	b.n	800f478 <_vfiprintf_r+0x208>
 800f4ae:	bf00      	nop
 800f4b0:	08012234 	.word	0x08012234
 800f4b4:	08012254 	.word	0x08012254
 800f4b8:	08012214 	.word	0x08012214
 800f4bc:	080121ac 	.word	0x080121ac
 800f4c0:	080121b6 	.word	0x080121b6
 800f4c4:	0800a9e9 	.word	0x0800a9e9
 800f4c8:	0800f24b 	.word	0x0800f24b
 800f4cc:	080121b2 	.word	0x080121b2

0800f4d0 <__swbuf_r>:
 800f4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4d2:	460e      	mov	r6, r1
 800f4d4:	4614      	mov	r4, r2
 800f4d6:	4605      	mov	r5, r0
 800f4d8:	b118      	cbz	r0, 800f4e2 <__swbuf_r+0x12>
 800f4da:	6983      	ldr	r3, [r0, #24]
 800f4dc:	b90b      	cbnz	r3, 800f4e2 <__swbuf_r+0x12>
 800f4de:	f7ff fdab 	bl	800f038 <__sinit>
 800f4e2:	4b21      	ldr	r3, [pc, #132]	; (800f568 <__swbuf_r+0x98>)
 800f4e4:	429c      	cmp	r4, r3
 800f4e6:	d12b      	bne.n	800f540 <__swbuf_r+0x70>
 800f4e8:	686c      	ldr	r4, [r5, #4]
 800f4ea:	69a3      	ldr	r3, [r4, #24]
 800f4ec:	60a3      	str	r3, [r4, #8]
 800f4ee:	89a3      	ldrh	r3, [r4, #12]
 800f4f0:	071a      	lsls	r2, r3, #28
 800f4f2:	d52f      	bpl.n	800f554 <__swbuf_r+0x84>
 800f4f4:	6923      	ldr	r3, [r4, #16]
 800f4f6:	b36b      	cbz	r3, 800f554 <__swbuf_r+0x84>
 800f4f8:	6923      	ldr	r3, [r4, #16]
 800f4fa:	6820      	ldr	r0, [r4, #0]
 800f4fc:	1ac0      	subs	r0, r0, r3
 800f4fe:	6963      	ldr	r3, [r4, #20]
 800f500:	b2f6      	uxtb	r6, r6
 800f502:	4283      	cmp	r3, r0
 800f504:	4637      	mov	r7, r6
 800f506:	dc04      	bgt.n	800f512 <__swbuf_r+0x42>
 800f508:	4621      	mov	r1, r4
 800f50a:	4628      	mov	r0, r5
 800f50c:	f7ff fd00 	bl	800ef10 <_fflush_r>
 800f510:	bb30      	cbnz	r0, 800f560 <__swbuf_r+0x90>
 800f512:	68a3      	ldr	r3, [r4, #8]
 800f514:	3b01      	subs	r3, #1
 800f516:	60a3      	str	r3, [r4, #8]
 800f518:	6823      	ldr	r3, [r4, #0]
 800f51a:	1c5a      	adds	r2, r3, #1
 800f51c:	6022      	str	r2, [r4, #0]
 800f51e:	701e      	strb	r6, [r3, #0]
 800f520:	6963      	ldr	r3, [r4, #20]
 800f522:	3001      	adds	r0, #1
 800f524:	4283      	cmp	r3, r0
 800f526:	d004      	beq.n	800f532 <__swbuf_r+0x62>
 800f528:	89a3      	ldrh	r3, [r4, #12]
 800f52a:	07db      	lsls	r3, r3, #31
 800f52c:	d506      	bpl.n	800f53c <__swbuf_r+0x6c>
 800f52e:	2e0a      	cmp	r6, #10
 800f530:	d104      	bne.n	800f53c <__swbuf_r+0x6c>
 800f532:	4621      	mov	r1, r4
 800f534:	4628      	mov	r0, r5
 800f536:	f7ff fceb 	bl	800ef10 <_fflush_r>
 800f53a:	b988      	cbnz	r0, 800f560 <__swbuf_r+0x90>
 800f53c:	4638      	mov	r0, r7
 800f53e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f540:	4b0a      	ldr	r3, [pc, #40]	; (800f56c <__swbuf_r+0x9c>)
 800f542:	429c      	cmp	r4, r3
 800f544:	d101      	bne.n	800f54a <__swbuf_r+0x7a>
 800f546:	68ac      	ldr	r4, [r5, #8]
 800f548:	e7cf      	b.n	800f4ea <__swbuf_r+0x1a>
 800f54a:	4b09      	ldr	r3, [pc, #36]	; (800f570 <__swbuf_r+0xa0>)
 800f54c:	429c      	cmp	r4, r3
 800f54e:	bf08      	it	eq
 800f550:	68ec      	ldreq	r4, [r5, #12]
 800f552:	e7ca      	b.n	800f4ea <__swbuf_r+0x1a>
 800f554:	4621      	mov	r1, r4
 800f556:	4628      	mov	r0, r5
 800f558:	f000 f80c 	bl	800f574 <__swsetup_r>
 800f55c:	2800      	cmp	r0, #0
 800f55e:	d0cb      	beq.n	800f4f8 <__swbuf_r+0x28>
 800f560:	f04f 37ff 	mov.w	r7, #4294967295
 800f564:	e7ea      	b.n	800f53c <__swbuf_r+0x6c>
 800f566:	bf00      	nop
 800f568:	08012234 	.word	0x08012234
 800f56c:	08012254 	.word	0x08012254
 800f570:	08012214 	.word	0x08012214

0800f574 <__swsetup_r>:
 800f574:	4b32      	ldr	r3, [pc, #200]	; (800f640 <__swsetup_r+0xcc>)
 800f576:	b570      	push	{r4, r5, r6, lr}
 800f578:	681d      	ldr	r5, [r3, #0]
 800f57a:	4606      	mov	r6, r0
 800f57c:	460c      	mov	r4, r1
 800f57e:	b125      	cbz	r5, 800f58a <__swsetup_r+0x16>
 800f580:	69ab      	ldr	r3, [r5, #24]
 800f582:	b913      	cbnz	r3, 800f58a <__swsetup_r+0x16>
 800f584:	4628      	mov	r0, r5
 800f586:	f7ff fd57 	bl	800f038 <__sinit>
 800f58a:	4b2e      	ldr	r3, [pc, #184]	; (800f644 <__swsetup_r+0xd0>)
 800f58c:	429c      	cmp	r4, r3
 800f58e:	d10f      	bne.n	800f5b0 <__swsetup_r+0x3c>
 800f590:	686c      	ldr	r4, [r5, #4]
 800f592:	89a3      	ldrh	r3, [r4, #12]
 800f594:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f598:	0719      	lsls	r1, r3, #28
 800f59a:	d42c      	bmi.n	800f5f6 <__swsetup_r+0x82>
 800f59c:	06dd      	lsls	r5, r3, #27
 800f59e:	d411      	bmi.n	800f5c4 <__swsetup_r+0x50>
 800f5a0:	2309      	movs	r3, #9
 800f5a2:	6033      	str	r3, [r6, #0]
 800f5a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f5a8:	81a3      	strh	r3, [r4, #12]
 800f5aa:	f04f 30ff 	mov.w	r0, #4294967295
 800f5ae:	e03e      	b.n	800f62e <__swsetup_r+0xba>
 800f5b0:	4b25      	ldr	r3, [pc, #148]	; (800f648 <__swsetup_r+0xd4>)
 800f5b2:	429c      	cmp	r4, r3
 800f5b4:	d101      	bne.n	800f5ba <__swsetup_r+0x46>
 800f5b6:	68ac      	ldr	r4, [r5, #8]
 800f5b8:	e7eb      	b.n	800f592 <__swsetup_r+0x1e>
 800f5ba:	4b24      	ldr	r3, [pc, #144]	; (800f64c <__swsetup_r+0xd8>)
 800f5bc:	429c      	cmp	r4, r3
 800f5be:	bf08      	it	eq
 800f5c0:	68ec      	ldreq	r4, [r5, #12]
 800f5c2:	e7e6      	b.n	800f592 <__swsetup_r+0x1e>
 800f5c4:	0758      	lsls	r0, r3, #29
 800f5c6:	d512      	bpl.n	800f5ee <__swsetup_r+0x7a>
 800f5c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f5ca:	b141      	cbz	r1, 800f5de <__swsetup_r+0x6a>
 800f5cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f5d0:	4299      	cmp	r1, r3
 800f5d2:	d002      	beq.n	800f5da <__swsetup_r+0x66>
 800f5d4:	4630      	mov	r0, r6
 800f5d6:	f7fb f8bd 	bl	800a754 <_free_r>
 800f5da:	2300      	movs	r3, #0
 800f5dc:	6363      	str	r3, [r4, #52]	; 0x34
 800f5de:	89a3      	ldrh	r3, [r4, #12]
 800f5e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f5e4:	81a3      	strh	r3, [r4, #12]
 800f5e6:	2300      	movs	r3, #0
 800f5e8:	6063      	str	r3, [r4, #4]
 800f5ea:	6923      	ldr	r3, [r4, #16]
 800f5ec:	6023      	str	r3, [r4, #0]
 800f5ee:	89a3      	ldrh	r3, [r4, #12]
 800f5f0:	f043 0308 	orr.w	r3, r3, #8
 800f5f4:	81a3      	strh	r3, [r4, #12]
 800f5f6:	6923      	ldr	r3, [r4, #16]
 800f5f8:	b94b      	cbnz	r3, 800f60e <__swsetup_r+0x9a>
 800f5fa:	89a3      	ldrh	r3, [r4, #12]
 800f5fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f600:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f604:	d003      	beq.n	800f60e <__swsetup_r+0x9a>
 800f606:	4621      	mov	r1, r4
 800f608:	4630      	mov	r0, r6
 800f60a:	f000 f84d 	bl	800f6a8 <__smakebuf_r>
 800f60e:	89a0      	ldrh	r0, [r4, #12]
 800f610:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f614:	f010 0301 	ands.w	r3, r0, #1
 800f618:	d00a      	beq.n	800f630 <__swsetup_r+0xbc>
 800f61a:	2300      	movs	r3, #0
 800f61c:	60a3      	str	r3, [r4, #8]
 800f61e:	6963      	ldr	r3, [r4, #20]
 800f620:	425b      	negs	r3, r3
 800f622:	61a3      	str	r3, [r4, #24]
 800f624:	6923      	ldr	r3, [r4, #16]
 800f626:	b943      	cbnz	r3, 800f63a <__swsetup_r+0xc6>
 800f628:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f62c:	d1ba      	bne.n	800f5a4 <__swsetup_r+0x30>
 800f62e:	bd70      	pop	{r4, r5, r6, pc}
 800f630:	0781      	lsls	r1, r0, #30
 800f632:	bf58      	it	pl
 800f634:	6963      	ldrpl	r3, [r4, #20]
 800f636:	60a3      	str	r3, [r4, #8]
 800f638:	e7f4      	b.n	800f624 <__swsetup_r+0xb0>
 800f63a:	2000      	movs	r0, #0
 800f63c:	e7f7      	b.n	800f62e <__swsetup_r+0xba>
 800f63e:	bf00      	nop
 800f640:	2000003c 	.word	0x2000003c
 800f644:	08012234 	.word	0x08012234
 800f648:	08012254 	.word	0x08012254
 800f64c:	08012214 	.word	0x08012214

0800f650 <abort>:
 800f650:	b508      	push	{r3, lr}
 800f652:	2006      	movs	r0, #6
 800f654:	f000 f898 	bl	800f788 <raise>
 800f658:	2001      	movs	r0, #1
 800f65a:	f7f7 f813 	bl	8006684 <_exit>

0800f65e <__swhatbuf_r>:
 800f65e:	b570      	push	{r4, r5, r6, lr}
 800f660:	460e      	mov	r6, r1
 800f662:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f666:	2900      	cmp	r1, #0
 800f668:	b096      	sub	sp, #88	; 0x58
 800f66a:	4614      	mov	r4, r2
 800f66c:	461d      	mov	r5, r3
 800f66e:	da07      	bge.n	800f680 <__swhatbuf_r+0x22>
 800f670:	2300      	movs	r3, #0
 800f672:	602b      	str	r3, [r5, #0]
 800f674:	89b3      	ldrh	r3, [r6, #12]
 800f676:	061a      	lsls	r2, r3, #24
 800f678:	d410      	bmi.n	800f69c <__swhatbuf_r+0x3e>
 800f67a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f67e:	e00e      	b.n	800f69e <__swhatbuf_r+0x40>
 800f680:	466a      	mov	r2, sp
 800f682:	f000 f89d 	bl	800f7c0 <_fstat_r>
 800f686:	2800      	cmp	r0, #0
 800f688:	dbf2      	blt.n	800f670 <__swhatbuf_r+0x12>
 800f68a:	9a01      	ldr	r2, [sp, #4]
 800f68c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f690:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f694:	425a      	negs	r2, r3
 800f696:	415a      	adcs	r2, r3
 800f698:	602a      	str	r2, [r5, #0]
 800f69a:	e7ee      	b.n	800f67a <__swhatbuf_r+0x1c>
 800f69c:	2340      	movs	r3, #64	; 0x40
 800f69e:	2000      	movs	r0, #0
 800f6a0:	6023      	str	r3, [r4, #0]
 800f6a2:	b016      	add	sp, #88	; 0x58
 800f6a4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f6a8 <__smakebuf_r>:
 800f6a8:	898b      	ldrh	r3, [r1, #12]
 800f6aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f6ac:	079d      	lsls	r5, r3, #30
 800f6ae:	4606      	mov	r6, r0
 800f6b0:	460c      	mov	r4, r1
 800f6b2:	d507      	bpl.n	800f6c4 <__smakebuf_r+0x1c>
 800f6b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f6b8:	6023      	str	r3, [r4, #0]
 800f6ba:	6123      	str	r3, [r4, #16]
 800f6bc:	2301      	movs	r3, #1
 800f6be:	6163      	str	r3, [r4, #20]
 800f6c0:	b002      	add	sp, #8
 800f6c2:	bd70      	pop	{r4, r5, r6, pc}
 800f6c4:	ab01      	add	r3, sp, #4
 800f6c6:	466a      	mov	r2, sp
 800f6c8:	f7ff ffc9 	bl	800f65e <__swhatbuf_r>
 800f6cc:	9900      	ldr	r1, [sp, #0]
 800f6ce:	4605      	mov	r5, r0
 800f6d0:	4630      	mov	r0, r6
 800f6d2:	f7fb f88f 	bl	800a7f4 <_malloc_r>
 800f6d6:	b948      	cbnz	r0, 800f6ec <__smakebuf_r+0x44>
 800f6d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f6dc:	059a      	lsls	r2, r3, #22
 800f6de:	d4ef      	bmi.n	800f6c0 <__smakebuf_r+0x18>
 800f6e0:	f023 0303 	bic.w	r3, r3, #3
 800f6e4:	f043 0302 	orr.w	r3, r3, #2
 800f6e8:	81a3      	strh	r3, [r4, #12]
 800f6ea:	e7e3      	b.n	800f6b4 <__smakebuf_r+0xc>
 800f6ec:	4b0d      	ldr	r3, [pc, #52]	; (800f724 <__smakebuf_r+0x7c>)
 800f6ee:	62b3      	str	r3, [r6, #40]	; 0x28
 800f6f0:	89a3      	ldrh	r3, [r4, #12]
 800f6f2:	6020      	str	r0, [r4, #0]
 800f6f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f6f8:	81a3      	strh	r3, [r4, #12]
 800f6fa:	9b00      	ldr	r3, [sp, #0]
 800f6fc:	6163      	str	r3, [r4, #20]
 800f6fe:	9b01      	ldr	r3, [sp, #4]
 800f700:	6120      	str	r0, [r4, #16]
 800f702:	b15b      	cbz	r3, 800f71c <__smakebuf_r+0x74>
 800f704:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f708:	4630      	mov	r0, r6
 800f70a:	f000 f86b 	bl	800f7e4 <_isatty_r>
 800f70e:	b128      	cbz	r0, 800f71c <__smakebuf_r+0x74>
 800f710:	89a3      	ldrh	r3, [r4, #12]
 800f712:	f023 0303 	bic.w	r3, r3, #3
 800f716:	f043 0301 	orr.w	r3, r3, #1
 800f71a:	81a3      	strh	r3, [r4, #12]
 800f71c:	89a0      	ldrh	r0, [r4, #12]
 800f71e:	4305      	orrs	r5, r0
 800f720:	81a5      	strh	r5, [r4, #12]
 800f722:	e7cd      	b.n	800f6c0 <__smakebuf_r+0x18>
 800f724:	0800efd1 	.word	0x0800efd1

0800f728 <_malloc_usable_size_r>:
 800f728:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f72c:	1f18      	subs	r0, r3, #4
 800f72e:	2b00      	cmp	r3, #0
 800f730:	bfbc      	itt	lt
 800f732:	580b      	ldrlt	r3, [r1, r0]
 800f734:	18c0      	addlt	r0, r0, r3
 800f736:	4770      	bx	lr

0800f738 <_raise_r>:
 800f738:	291f      	cmp	r1, #31
 800f73a:	b538      	push	{r3, r4, r5, lr}
 800f73c:	4604      	mov	r4, r0
 800f73e:	460d      	mov	r5, r1
 800f740:	d904      	bls.n	800f74c <_raise_r+0x14>
 800f742:	2316      	movs	r3, #22
 800f744:	6003      	str	r3, [r0, #0]
 800f746:	f04f 30ff 	mov.w	r0, #4294967295
 800f74a:	bd38      	pop	{r3, r4, r5, pc}
 800f74c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f74e:	b112      	cbz	r2, 800f756 <_raise_r+0x1e>
 800f750:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f754:	b94b      	cbnz	r3, 800f76a <_raise_r+0x32>
 800f756:	4620      	mov	r0, r4
 800f758:	f000 f830 	bl	800f7bc <_getpid_r>
 800f75c:	462a      	mov	r2, r5
 800f75e:	4601      	mov	r1, r0
 800f760:	4620      	mov	r0, r4
 800f762:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f766:	f000 b817 	b.w	800f798 <_kill_r>
 800f76a:	2b01      	cmp	r3, #1
 800f76c:	d00a      	beq.n	800f784 <_raise_r+0x4c>
 800f76e:	1c59      	adds	r1, r3, #1
 800f770:	d103      	bne.n	800f77a <_raise_r+0x42>
 800f772:	2316      	movs	r3, #22
 800f774:	6003      	str	r3, [r0, #0]
 800f776:	2001      	movs	r0, #1
 800f778:	e7e7      	b.n	800f74a <_raise_r+0x12>
 800f77a:	2400      	movs	r4, #0
 800f77c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f780:	4628      	mov	r0, r5
 800f782:	4798      	blx	r3
 800f784:	2000      	movs	r0, #0
 800f786:	e7e0      	b.n	800f74a <_raise_r+0x12>

0800f788 <raise>:
 800f788:	4b02      	ldr	r3, [pc, #8]	; (800f794 <raise+0xc>)
 800f78a:	4601      	mov	r1, r0
 800f78c:	6818      	ldr	r0, [r3, #0]
 800f78e:	f7ff bfd3 	b.w	800f738 <_raise_r>
 800f792:	bf00      	nop
 800f794:	2000003c 	.word	0x2000003c

0800f798 <_kill_r>:
 800f798:	b538      	push	{r3, r4, r5, lr}
 800f79a:	4d07      	ldr	r5, [pc, #28]	; (800f7b8 <_kill_r+0x20>)
 800f79c:	2300      	movs	r3, #0
 800f79e:	4604      	mov	r4, r0
 800f7a0:	4608      	mov	r0, r1
 800f7a2:	4611      	mov	r1, r2
 800f7a4:	602b      	str	r3, [r5, #0]
 800f7a6:	f7f6 ff5d 	bl	8006664 <_kill>
 800f7aa:	1c43      	adds	r3, r0, #1
 800f7ac:	d102      	bne.n	800f7b4 <_kill_r+0x1c>
 800f7ae:	682b      	ldr	r3, [r5, #0]
 800f7b0:	b103      	cbz	r3, 800f7b4 <_kill_r+0x1c>
 800f7b2:	6023      	str	r3, [r4, #0]
 800f7b4:	bd38      	pop	{r3, r4, r5, pc}
 800f7b6:	bf00      	nop
 800f7b8:	20001fd4 	.word	0x20001fd4

0800f7bc <_getpid_r>:
 800f7bc:	f7f6 bf4a 	b.w	8006654 <_getpid>

0800f7c0 <_fstat_r>:
 800f7c0:	b538      	push	{r3, r4, r5, lr}
 800f7c2:	4d07      	ldr	r5, [pc, #28]	; (800f7e0 <_fstat_r+0x20>)
 800f7c4:	2300      	movs	r3, #0
 800f7c6:	4604      	mov	r4, r0
 800f7c8:	4608      	mov	r0, r1
 800f7ca:	4611      	mov	r1, r2
 800f7cc:	602b      	str	r3, [r5, #0]
 800f7ce:	f7f6 ffa8 	bl	8006722 <_fstat>
 800f7d2:	1c43      	adds	r3, r0, #1
 800f7d4:	d102      	bne.n	800f7dc <_fstat_r+0x1c>
 800f7d6:	682b      	ldr	r3, [r5, #0]
 800f7d8:	b103      	cbz	r3, 800f7dc <_fstat_r+0x1c>
 800f7da:	6023      	str	r3, [r4, #0]
 800f7dc:	bd38      	pop	{r3, r4, r5, pc}
 800f7de:	bf00      	nop
 800f7e0:	20001fd4 	.word	0x20001fd4

0800f7e4 <_isatty_r>:
 800f7e4:	b538      	push	{r3, r4, r5, lr}
 800f7e6:	4d06      	ldr	r5, [pc, #24]	; (800f800 <_isatty_r+0x1c>)
 800f7e8:	2300      	movs	r3, #0
 800f7ea:	4604      	mov	r4, r0
 800f7ec:	4608      	mov	r0, r1
 800f7ee:	602b      	str	r3, [r5, #0]
 800f7f0:	f7f6 ffa7 	bl	8006742 <_isatty>
 800f7f4:	1c43      	adds	r3, r0, #1
 800f7f6:	d102      	bne.n	800f7fe <_isatty_r+0x1a>
 800f7f8:	682b      	ldr	r3, [r5, #0]
 800f7fa:	b103      	cbz	r3, 800f7fe <_isatty_r+0x1a>
 800f7fc:	6023      	str	r3, [r4, #0]
 800f7fe:	bd38      	pop	{r3, r4, r5, pc}
 800f800:	20001fd4 	.word	0x20001fd4

0800f804 <_init>:
 800f804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f806:	bf00      	nop
 800f808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f80a:	bc08      	pop	{r3}
 800f80c:	469e      	mov	lr, r3
 800f80e:	4770      	bx	lr

0800f810 <_fini>:
 800f810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f812:	bf00      	nop
 800f814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f816:	bc08      	pop	{r3}
 800f818:	469e      	mov	lr, r3
 800f81a:	4770      	bx	lr
